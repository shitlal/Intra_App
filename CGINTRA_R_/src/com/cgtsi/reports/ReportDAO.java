/*
 * Created on Nov 22, 2017 
 * modifed by Deepak Kr Ranjan@pathinfotech.com in method
 * 
 *
 */

package com.cgtsi.reports;

import com.cgtsi.util.PropertyLoader;

import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
//import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.Vector;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.DynaActionForm;

import com.cgtsi.actionform.RenewalOfWorkingCapitalAfterTenYearsActionForm;
import com.cgtsi.application.Application;
import com.cgtsi.claim.BorrowerInfo;
import com.cgtsi.claim.CPDAO;
import com.cgtsi.claim.ClaimApplication;
import com.cgtsi.claim.ClaimConstants;
import com.cgtsi.claim.ClaimDetail;
import com.cgtsi.claim.ClaimSummaryDtls;
import com.cgtsi.claim.DtlsAsOnDateOfNPA;
import com.cgtsi.claim.DtlsAsOnDateOfSanction;
import com.cgtsi.claim.DtlsAsOnLogdementOfClaim;
import com.cgtsi.claim.DtlsAsOnLogdementOfSecondClaim;
import com.cgtsi.claim.LegalProceedingsDetail;
import com.cgtsi.claim.MemberInfo;
import com.cgtsi.claim.RecoveryDetails;
import com.cgtsi.claim.SecurityAndPersonalGuaranteeDtls;
import com.cgtsi.claim.SettlementDetail;
import com.cgtsi.claim.TermLoanCapitalLoanDetail;
import com.cgtsi.claim.UploadFileProperties;
import com.cgtsi.claim.WorkingCapitalDetail;
import com.cgtsi.common.Constants;
import com.cgtsi.common.DatabaseException;
import com.cgtsi.common.Log;
import com.cgtsi.common.NoDataException;
import com.cgtsi.util.DBConnection;


/**
 * @author RT14509
 * 
 *         To change the template for this generated type comment go to
 *         Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
public class ReportDAO {

	public ReportDAO() {
	}

	

	public ArrayList otsReport(java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "otsReport", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {
				/* query modificationsukumar to get resultset in sorted order */
				String query = "select o.BID, s.SSI_UNIT_NAME ssiname, o.OTS_REASON,"
						+ " o.OTS_DECISION, o.OTS_REMARKS from ots_detail o, ssi_detail s"
						+ " where o.BID = s.BID and trunc(o.OTS_REQUEST_DT) between ? and ?"
						+ " order by ssiname";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					// Instantiate a Gfee value object
					OtsDetails otsDetails = new OtsDetails();
					otsDetails.setBid(danRaisedResult.getString(1));
					otsDetails.setBorrowerName(danRaisedResult.getString(2));
					otsDetails.setOtsReason(danRaisedResult.getString(3));
					otsDetails.setOtsDecision(danRaisedResult.getString(4));
					otsDetails.setOtsRemarks(danRaisedResult.getString(5));

					danRaisedArray.add(otsDetails);
				}

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {
				/* query modificationsukumar to get resultset in sorted order */
				String query = "select o.BID, s.SSI_UNIT_NAME ssiname, o.OTS_REASON,"
						+ " o.OTS_DECISION, o.OTS_REMARKS from ots_detail o, ssi_detail s"
						+ " where o.BID = s.BID and trunc(o.OTS_REQUEST_DT) <= ?"
						+ " order by ssiname";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {

					// Instantiate a Gfee value object
					OtsDetails otsDetails = new OtsDetails();
					otsDetails.setBid(danRaisedResult.getString(1));
					otsDetails.setBorrowerName(danRaisedResult.getString(2));
					otsDetails.setOtsReason(danRaisedResult.getString(3));
					otsDetails.setOtsDecision(danRaisedResult.getString(4));
					otsDetails.setOtsRemarks(danRaisedResult.getString(5));

					danRaisedArray.add(otsDetails);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "otsReport", "Exited");
		return danRaisedArray;
	}

	public ArrayList otsReportDetails(java.sql.Date startDate,
			java.sql.Date endDate, String flag) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "otsReportDetails", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {
				String query = "select o.CGPAN, o.OAD_BORROWER_PROPOSED_AMT,"
						+ " o.OAD_OUTSTANDING_AMT, o.OAD_PROPOSED_SACRIFICE_AMT, "
						+ " t.TRM_AMOUNT_SANCTIONED, w.WCP_FB_LIMIT_SANCTIONED, "
						+ " w.WCP_NFB_LIMIT_SANCTIONED from ots_application_detail o,"
						+ "  ots_detail od, WORKING_CAPITAL_DETAIL w, TERM_LOAN_DETAIL t "
						+ " where o.BID = ? and o.BID = od.BID and "
						+ " o.CGPAN = t.CGPAN(+) and o.CGPAN = w.CGPAN(+) and "
						+ " trunc(od.OTS_REQUEST_DT) between ? and ? ";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setString(1, flag);
				danRaisedStmt.setDate(2, startDate);
				danRaisedStmt.setDate(3, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					OtsDetails otsDetails = new OtsDetails();
					otsDetails.setCgpan(danRaisedResult.getString(1));
					otsDetails.setOutstandingAmount(danRaisedResult
							.getDouble(3));
					otsDetails.setProposedAmount(danRaisedResult.getDouble(2));
					otsDetails
							.setSacrificedAmount(danRaisedResult.getDouble(4));
					otsDetails.setTcSanctionedAmount(danRaisedResult
							.getDouble(5));
					otsDetails.setWcFbSanctionedAmount(danRaisedResult
							.getDouble(6));
					otsDetails.setWcNfbSanctionedAmount(danRaisedResult
							.getDouble(7));

					danRaisedArray.add(otsDetails);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {
				String query = "select o.CGPAN, o.OAD_BORROWER_PROPOSED_AMT,"
						+ " o.OAD_OUTSTANDING_AMT, o.OAD_PROPOSED_SACRIFICE_AMT, "
						+ " t.TRM_AMOUNT_SANCTIONED, w.WCP_FB_LIMIT_SANCTIONED, "
						+ " w.WCP_NFB_LIMIT_SANCTIONED from ots_application_detail o,"
						+ "  ots_detail od, WORKING_CAPITAL_DETAIL w, TERM_LOAN_DETAIL t "
						+ " where o.BID = ? and o.BID = od.BID and "
						+ " o.CGPAN = t.CGPAN(+) and o.CGPAN = w.CGPAN(+) and "
						+ " trunc(od.OTS_REQUEST_DT) <= ? ";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setString(1, flag);
				danRaisedStmt.setDate(2, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					OtsDetails otsDetails = new OtsDetails();
					otsDetails.setCgpan(danRaisedResult.getString(1));
					otsDetails.setOutstandingAmount(danRaisedResult
							.getDouble(3));
					otsDetails.setProposedAmount(danRaisedResult.getDouble(2));
					otsDetails
							.setSacrificedAmount(danRaisedResult.getDouble(4));
					otsDetails.setTcSanctionedAmount(danRaisedResult
							.getDouble(5));
					otsDetails.setWcFbSanctionedAmount(danRaisedResult
							.getDouble(6));
					otsDetails.setWcNfbSanctionedAmount(danRaisedResult
							.getDouble(7));

					danRaisedArray.add(otsDetails);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "otsReportDetails", "Exited");
		return danRaisedArray;
	}

	// Fix on 17.9.2004
	/*
	 * ##########################################################################
	 * ######################3
	 */

	public ArrayList guaranteeCoverMli(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "guaranteeCoverMli", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult = null;
		Connection connection = DBConnection.getConnection();
		String cgtsi = "CGTSI";

		if (startDate != null) {
			try {

				String query = " select distinct m.MEM_BNK_ID, m.MEM_BANK_NAME from "
						+ " application_detail a, member_info m where "
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID and a.MEM_ZNE_ID = m.MEM_ZNE_ID and "
						+ " a.MEM_BRN_ID = m.MEM_BRN_ID and m.MEM_BANK_NAME <> ? and "
						+ " trunc(a.APP_GUAR_START_DATE_TIME) between ? and  ? and "
						+ " a.APP_GUAR_START_DATE_TIME is not null"
						+ " order by m.MEM_BANK_NAME";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(2, startDate);
				danRaisedStmt.setDate(3, endDate);
				danRaisedStmt.setString(1, cgtsi);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					GuaranteeCoverIssued guaranteeCover = new GuaranteeCoverIssued();
					guaranteeCover.setMemberId(danRaisedResult.getString(1));
					guaranteeCover.setMemberShortName(danRaisedResult
							.getString(2));
					danRaisedArray.add(guaranteeCover);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " select distinct m.MEM_BNK_ID, m.MEM_BANK_NAME from "
						+ " application_detail a, member_info m where "
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID and a.MEM_ZNE_ID = m.MEM_ZNE_ID and "
						+ " a.MEM_BRN_ID = m.MEM_BRN_ID and m.MEM_BANK_NAME <> ? and "
						+ " trunc(a.APP_GUAR_START_DATE_TIME) <= ? and "
						+ " a.APP_GUAR_START_DATE_TIME is not null"
						+ " order by m.MEM_BANK_NAME";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(1, cgtsi);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					GuaranteeCoverIssued guaranteeCover = new GuaranteeCoverIssued();
					guaranteeCover.setMemberId(danRaisedResult.getString(1));
					guaranteeCover.setMemberShortName(danRaisedResult
							.getString(2));

					danRaisedArray.add(guaranteeCover);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "guaranteeCoverMli", "Exited");
		return danRaisedArray;
	}

	/*
	 * ##########################################################################
	 * ########################
	 */

	public ArrayList guaranteeCoverSsiMli(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "guaranteeCoverSsiMli", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult = null;
		Connection connection = DBConnection.getConnection();
		String cgtsi = "CGTSI";

		if (startDate != null) {
			try {

				String query = "select distinct m.MEM_BNK_ID, m.MEM_BANK_NAME from "
						+ " application_detail a, member_info m where "
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID and a.MEM_ZNE_ID = m.MEM_ZNE_ID and "
						+ " a.MEM_BRN_ID = m.MEM_BRN_ID and m.MEM_BANK_NAME <> ? and "
						+ " trunc(a.APP_GUAR_START_DATE_TIME) between ? and  ? and "
						+ " a.APP_GUAR_START_DATE_TIME is not null"
						+ " ORDER BY m.MEM_BANK_NAME";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(2, startDate);
				danRaisedStmt.setDate(3, endDate);
				danRaisedStmt.setString(1, cgtsi);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					// Instantiate a Gfee value object
					GuaranteeCoverIssued guaranteeCover = new GuaranteeCoverIssued();
					guaranteeCover.setMemberId(danRaisedResult.getString(1));
					guaranteeCover.setMemberShortName(danRaisedResult
							.getString(2));

					danRaisedArray.add(guaranteeCover);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query =
				/**/"select distinct m.MEM_BNK_ID, m.MEM_BANK_NAME from "
						+ " application_detail a, member_info m where "
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID and a.MEM_ZNE_ID = m.MEM_ZNE_ID and "
						+ " a.MEM_BRN_ID = m.MEM_BRN_ID and m.MEM_BANK_NAME <> ? and "
						+ " trunc(a.APP_GUAR_START_DATE_TIME) <= ? and "
						+ " a.APP_GUAR_START_DATE_TIME is not null"
						+ " ORDER BY m.MEM_BANK_NAME";
				;
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(1, cgtsi);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					// Instantiate a Gfee value object
					GuaranteeCoverIssued guaranteeCover = new GuaranteeCoverIssued();
					guaranteeCover.setMemberId(danRaisedResult.getString(1));
					guaranteeCover.setMemberShortName(danRaisedResult
							.getString(2));
					danRaisedArray.add(guaranteeCover);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "guaranteeCoverSsiMli", "Exited");
		return danRaisedArray;
	}

	// Fix Completed

	// Fix 070904 - 09,10

	public ArrayList getAllCgpans() throws DatabaseException {
		Connection connection = DBConnection.getConnection(false);

		ArrayList cgpanList = new ArrayList();

		try {
			CallableStatement allCgpans = connection
					.prepareCall("{?=call packGetAllApprovedCgpansNew.funcGetAllApprovedCgpansNew(?,?)}");

			allCgpans.registerOutParameter(1, Types.INTEGER);
			allCgpans.registerOutParameter(2, Constants.CURSOR);
			allCgpans.registerOutParameter(3, Types.VARCHAR);

			allCgpans.execute();

			int functionReturnValue = allCgpans.getInt(1);

			if (functionReturnValue == 1) {

				String error = allCgpans.getString(3);

				allCgpans.close();
				allCgpans = null;

				connection.rollback();

				throw new DatabaseException(error);

			} else {
				ResultSet allCgpansResult = (ResultSet) allCgpans.getObject(2);

				while (allCgpansResult.next()) {

					String cgpan = allCgpansResult.getString(1);

					cgpanList.add(cgpan);
				}
				allCgpansResult.close();
				allCgpansResult = null;
				allCgpans.close();
				allCgpans = null;
			}
			connection.commit();

		} catch (SQLException sqlException) {
			Log.log(Log.INFO, "ApplicationDAO", "getAllCgpans",
					sqlException.getMessage());
			Log.logException(sqlException);

			try {
				connection.rollback();
			} catch (SQLException ignore) {
			}

			throw new DatabaseException(sqlException.getMessage());

		} finally {
			DBConnection.freeConnection(connection);
		}
		return cgpanList;
	}

	/**
	 * 
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList dayReport(java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "dayReport", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList daRaisedArray = new ArrayList();
		Connection connection = DBConnection.getConnection();

		try {
			CallableStatement dayReport = connection
					.prepareCall("{?=call PackDayEndRep.FuncDayEndRep(?,?,?)}");

			dayReport.registerOutParameter(1, Types.INTEGER);
			dayReport.setDate(2, endDate);
			dayReport.registerOutParameter(3, Constants.CURSOR);
			dayReport.registerOutParameter(4, Types.VARCHAR);

			dayReport.execute();

			int functionReturnValue = dayReport.getInt(1);

			if (functionReturnValue == 1) {

				String error = dayReport.getString(4);

				dayReport.close();
				dayReport = null;

				connection.rollback();

				throw new DatabaseException(error);

			} else {
				ResultSet allCgpansResult = (ResultSet) dayReport.getObject(3);

				while (allCgpansResult.next()) {
					GeneralReport mliApplicationReport = new GeneralReport();

					mliApplicationReport.setProposal(allCgpansResult.getInt(1));
					mliApplicationReport.setName(allCgpansResult.getString(2));
					mliApplicationReport
							.setAmount(allCgpansResult.getDouble(3));

					daRaisedArray.add(mliApplicationReport);
				}
				allCgpansResult.close();
				allCgpansResult = null;
				dayReport.close();
				dayReport = null;
			}
			connection.commit();

		} catch (SQLException sqlException) {
			Log.log(Log.INFO, "ReportDAO", "dayReport",
					sqlException.getMessage());
			Log.logException(sqlException);

			try {
				connection.rollback();
			} catch (SQLException ignore) {
			}

			throw new DatabaseException(sqlException.getMessage());

		} finally {
			DBConnection.freeConnection(connection);
		}

		Log.log(Log.INFO, "ReportDAO", "dayReport", "Exited");
		return daRaisedArray;
	}

	// Fix Completed

	/*
	 * ##########################################################################
	 * ########################
	 */

	public ArrayList shortReport(java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "shortReport", "Entered");

		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = "select m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID||'('||"
						+ " m.MEM_BANK_NAME||','|| m.MEM_ZONE_NAME||','||m.MEM_BRANCH_NAME||')'"
						+ " idname,s.SHT_AMOUNT, s.SHT_DATE, s.DAN_ID, s.PAY_ID from short_info s,"
						+ "  member_info m where m.MEM_BNK_ID =  s.MEM_BNK_ID and"
						+ "  m.MEM_ZNE_ID = s.MEM_ZNE_ID and m.MEM_BRN_ID = s.MEM_BRN_ID"
						+ "  and trunc(s.SHT_DATE) between ? and ? order by idname";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {

					// Instantiate a Gfee value object
					ExcessInfo excessInfo = new ExcessInfo();
					excessInfo.setMemberId(danRaisedResult.getString(1));
					excessInfo.setAmount(danRaisedResult.getDouble(2));
					excessInfo.setExcessDate(danRaisedResult.getDate(3));
					excessInfo.setVoucher(danRaisedResult.getString(4));
					excessInfo.setPaymentId(danRaisedResult.getString(5));

					danRaisedArray.add(excessInfo);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = "select m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID||'('||"
						+ " m.MEM_BANK_NAME||','|| m.MEM_ZONE_NAME||','||m.MEM_BRANCH_NAME||')'"
						+ " idname,s.SHT_AMOUNT, s.SHT_DATE, s.DAN_ID, s.PAY_ID from short_info s,"
						+ " member_info m where m.MEM_BNK_ID =  s.MEM_BNK_ID and"
						+ " m.MEM_ZNE_ID = s.MEM_ZNE_ID and m.MEM_BRN_ID = s.MEM_BRN_ID"
						+ " and trunc(s.SHT_DATE) <= ? order by idname";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {

					// Instantiate a Gfee value object
					ExcessInfo excessInfo = new ExcessInfo();
					excessInfo.setMemberId(danRaisedResult.getString(1));
					excessInfo.setAmount(danRaisedResult.getDouble(2));
					excessInfo.setExcessDate(danRaisedResult.getDate(3));
					excessInfo.setVoucher(danRaisedResult.getString(4));
					excessInfo.setPaymentId(danRaisedResult.getString(5));

					danRaisedArray.add(excessInfo);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "shortReport", "Exited");
		return danRaisedArray;
	}

	public ArrayList shortReportDetails(java.sql.Date startDate,
			java.sql.Date endDate, String flag) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "shortReportDetails", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {
				String query = "select c.DAN_ID, c.CGPAN, d.DAN_GENERATED_DT, "
						+ " a.APP_GUARANTEE_FEE, c.DCI_ALLOCATION_DT, c.DCI_APPROPRIATION_DT "
						+ " from dan_cgpan_info c, demand_Advice_info d, short_info s, "
						+ " application_Detail a where  trunc(s.SHT_DATE) between ? and ? "
						+ " and s.PAY_ID = ? and s.PAY_ID = c.PAY_ID and c.DAN_ID = d.DAN_ID "
						+ " and c.CGPAN = a.CGPAN";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setString(3, flag);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					ExcessInfo excessInfo = new ExcessInfo();
					excessInfo.setDanId(danRaisedResult.getString(1));
					excessInfo.setCgpan(danRaisedResult.getString(2));
					excessInfo.setDanDate(danRaisedResult.getDate(3));
					excessInfo.setAllocationDate(danRaisedResult.getDate(5));
					excessInfo.setGFee(danRaisedResult.getDouble(4));
					excessInfo.setAppropriationDate(danRaisedResult.getDate(6));

					danRaisedArray.add(excessInfo);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {
				String query = "select c.DAN_ID, c.CGPAN, d.DAN_GENERATED_DT, "
						+ " a.APP_GUARANTEE_FEE, c.DCI_ALLOCATION_DT, c.DCI_APPROPRIATION_DT "
						+ " from dan_cgpan_info c, demand_Advice_info d, short_info s, "
						+ " application_Detail a where  trunc(s.SHT_DATE) <= ? "
						+ " and s.PAY_ID = ? and s.PAY_ID = c.PAY_ID and c.DAN_ID = d.DAN_ID "
						+ " and c.CGPAN = a.CGPAN";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setString(2, flag);
				danRaisedStmt.setDate(1, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					ExcessInfo excessInfo = new ExcessInfo();
					excessInfo.setDanId(danRaisedResult.getString(1));
					excessInfo.setCgpan(danRaisedResult.getString(2));
					excessInfo.setDanDate(danRaisedResult.getDate(3));
					excessInfo.setAllocationDate(danRaisedResult.getDate(5));
					excessInfo.setGFee(danRaisedResult.getDouble(4));
					excessInfo.setAppropriationDate(danRaisedResult.getDate(6));

					danRaisedArray.add(excessInfo);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "shortReportDetails", "Exited");
		return danRaisedArray;
	}

	/*
	 * ##########################################################################
	 * ########################3
	 */

	public ArrayList excessReport(java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "excessReport", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = "select m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID||"
						+ " '('||m.MEM_BANK_NAME||','|| m.MEM_ZONE_NAME||','"
						+ " ||m.MEM_BRANCH_NAME||')' idname, e.EXC_AMOUNT, e.EXC_DATE, e.VDT_ID, "
						+ " e.PAY_ID from excess_info e, member_info m where m.MEM_BNK_ID = "
						+ " e.MEM_BNK_ID and m.MEM_ZNE_ID = e.MEM_ZNE_ID and m.MEM_BRN_ID = "
						+ " e.MEM_BRN_ID and trunc(e.EXC_DATE) between ? and ?"
						+ " order by idname";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {

					// Instantiate a Gfee value object
					ExcessInfo excessInfo = new ExcessInfo();
					excessInfo.setMemberId(danRaisedResult.getString(1));
					excessInfo.setAmount(danRaisedResult.getDouble(2));
					excessInfo.setExcessDate(danRaisedResult.getDate(3));
					excessInfo.setVoucher(danRaisedResult.getString(4));
					excessInfo.setPaymentId(danRaisedResult.getString(5));

					danRaisedArray.add(excessInfo);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = "select m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID||"
						+ " '('||m.MEM_BANK_NAME||','|| m.MEM_ZONE_NAME||','"
						+ " ||m.MEM_BRANCH_NAME||')' idname, e.EXC_AMOUNT, e.EXC_DATE, e.VDT_ID, "
						+ " e.PAY_ID from excess_info e, member_info m where m.MEM_BNK_ID = "
						+ " e.MEM_BNK_ID and m.MEM_ZNE_ID = e.MEM_ZNE_ID and m.MEM_BRN_ID = "
						+ " e.MEM_BRN_ID and trunc(e.EXC_DATE) <= ? order by idname";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {

					// Instantiate a Gfee value object
					ExcessInfo excessInfo = new ExcessInfo();
					excessInfo.setMemberId(danRaisedResult.getString(1));
					excessInfo.setAmount(danRaisedResult.getDouble(2));
					excessInfo.setExcessDate(danRaisedResult.getDate(3));
					excessInfo.setVoucher(danRaisedResult.getString(4));
					excessInfo.setPaymentId(danRaisedResult.getString(5));

					danRaisedArray.add(excessInfo);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "excessReport", "Exited");
		return danRaisedArray;
	}

	public ArrayList excessReportDetails(java.sql.Date startDate,
			java.sql.Date endDate, String flag) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "excessReportDetails", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {
				String query = "select c.DAN_ID, c.CGPAN, d.DAN_GENERATED_DT,"
						+ " a.APP_GUARANTEE_FEE, c.DCI_ALLOCATION_DT, c.DCI_APPROPRIATION_DT "
						+ " from dan_cgpan_info c, demand_Advice_info d, excess_info e, "
						+ " application_Detail a where  trunc(e.EXC_DATE) between ? and ? and "
						+ " e.PAY_ID = ? and e.PAY_ID = c.PAY_ID and c.DAN_ID = d.DAN_ID and "
						+ " c.CGPAN = a.CGPAN";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setString(3, flag);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					ExcessInfo excessInfo = new ExcessInfo();
					excessInfo.setDanId(danRaisedResult.getString(1));
					excessInfo.setCgpan(danRaisedResult.getString(2));
					excessInfo.setDanDate(danRaisedResult.getDate(3));
					excessInfo.setAllocationDate(danRaisedResult.getDate(5));
					excessInfo.setGFee(danRaisedResult.getDouble(4));
					excessInfo.setAppropriationDate(danRaisedResult.getDate(6));

					danRaisedArray.add(excessInfo);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {
				String query = "select c.DAN_ID, c.CGPAN, d.DAN_GENERATED_DT,"
						+ " a.APP_GUARANTEE_FEE, c.DCI_ALLOCATION_DT, c.DCI_APPROPRIATION_DT "
						+ " from dan_cgpan_info c, demand_Advice_info d, excess_info e, "
						+ " application_Detail a where  trunc(e.EXC_DATE) <= ? and "
						+ " e.PAY_ID = ? and e.PAY_ID = c.PAY_ID and c.DAN_ID = d.DAN_ID and "
						+ " c.CGPAN = a.CGPAN";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setString(2, flag);
				danRaisedStmt.setDate(1, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					ExcessInfo excessInfo = new ExcessInfo();
					excessInfo.setDanId(danRaisedResult.getString(1));
					excessInfo.setCgpan(danRaisedResult.getString(2));
					excessInfo.setDanDate(danRaisedResult.getDate(3));
					excessInfo.setAllocationDate(danRaisedResult.getDate(5));
					excessInfo.setGFee(danRaisedResult.getDouble(4));
					excessInfo.setAppropriationDate(danRaisedResult.getDate(6));

					danRaisedArray.add(excessInfo);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "excessReportDetails", "Exited");
		return danRaisedArray;
	}

	/*
	 * ##########################################################################
	 * #########################3
	 */

	public ArrayList securitizationReport(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "securitizationReport", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = "select s.SLP_NAME slpname from securitization_loan_pool s "
						+ " where trunc(s.SLP_CREATED_MODIFIED_DT) between ? and ?"
						+ " order by slpname";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					// Instantiate a Gfee value object
					GeneralReport generalReport = new GeneralReport();
					generalReport.setType(danRaisedResult.getString(1));
					danRaisedArray.add(generalReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = "select s.SLP_NAME slpname from securitization_loan_pool s "
						+ " where trunc(s.SLP_CREATED_MODIFIED_DT) <= ?"
						+ " order by slpname";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					// Instantiate a Gfee value object
					GeneralReport generalReport = new GeneralReport();
					generalReport.setType(danRaisedResult.getString(1));

					danRaisedArray.add(generalReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "securitizationReport", "Exited");
		return danRaisedArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList inwardReportDetails(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "inwardReportDetails", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList inwardRaisedArray = new ArrayList();
		ResultSet danRaisedResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT INW_DT,INW_ID,INWARD_SEC,BANK_NAME,  "
						+ " PLACE,LTR_REF_NO,LTR_DT,SUBJECT,INSTRUMENT_NO,  "
						+ "  INSTRUMENT_DT,INSTRUMENT_AMT,DRAWN_ON_BANK,OUTWARD_ID,OUTWARD_DT,ASSIGNED_USER FROM INWARD_NEW  "
						+ " WHERE trunc(INW_DT)  between ? and ? ORDER BY 1,2,3,INW_SEQ ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					GeneralReport generalReport = new GeneralReport();
					generalReport.setDateOfTheDocument1(danRaisedResult
							.getDate(1));
					generalReport.setInwardNum(danRaisedResult.getInt(2));
					generalReport
							.setInwardSection(danRaisedResult.getString(3));
					generalReport.setBankName(danRaisedResult.getString(4));
					generalReport.setPlace(danRaisedResult.getString(5));
					generalReport.setLtrRefNo(danRaisedResult.getString(6));
					generalReport.setDateOfTheDocument10(danRaisedResult
							.getDate(7));
					generalReport.setSubject(danRaisedResult.getString(8));
					generalReport.setInstrumentNum(danRaisedResult.getInt(9));
					generalReport.setDateOfTheDocument11(danRaisedResult
							.getDate(10));
					generalReport.setInstrumentAmt(danRaisedResult
							.getDouble(11));
					generalReport.setDrawnonBank(danRaisedResult.getString(12));
					generalReport.setAppRefNo(danRaisedResult.getString(13));
					generalReport.setDateOfTheDocument12(danRaisedResult
							.getDate(14));
					generalReport.setName(danRaisedResult.getString(15));

					inwardRaisedArray.add(generalReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT INW_DT,INW_ID,INWARD_SEC,BANK_NAME,  "
						+ "  PLACE,LTR_REF_NO,LTR_DT,SUBJECT,INSTRUMENT_NO,  "
						+ " INSTRUMENT_DT,INSTRUMENT_AMT,DRAWN_ON_BANK,OUTWARD_ID,OUTWARD_DT,ASSIGNED_USER FROM INWARD_NEW "
						+ " WHERE trunc(INW_DT)  <= ? ORDER BY 1,2,3,INW_SEQ ";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {

					GeneralReport generalReport = new GeneralReport();
					generalReport.setDateOfTheDocument1(danRaisedResult
							.getDate(1));
					generalReport.setInwardNum(danRaisedResult.getInt(2));
					generalReport
							.setInwardSection(danRaisedResult.getString(3));
					generalReport.setBankName(danRaisedResult.getString(4));
					generalReport.setPlace(danRaisedResult.getString(5));
					generalReport.setLtrRefNo(danRaisedResult.getString(6));
					generalReport.setDateOfTheDocument10(danRaisedResult
							.getDate(7));
					generalReport.setSubject(danRaisedResult.getString(8));
					generalReport.setInstrumentNum(danRaisedResult.getInt(9));
					generalReport.setDateOfTheDocument11(danRaisedResult
							.getDate(10));
					generalReport.setInstrumentAmt(danRaisedResult
							.getDouble(11));
					generalReport.setDrawnonBank(danRaisedResult.getString(12));
					generalReport.setAppRefNo(danRaisedResult.getString(13));
					generalReport.setDateOfTheDocument12(danRaisedResult
							.getDate(14));
					generalReport.setName(danRaisedResult.getString(15));
					inwardRaisedArray.add(generalReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "inwardReportDetails", "Exited");
		return inwardRaisedArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList workshopReportDetails(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "workshopReportDetails", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList worhshopDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT WORKSHOP_ID ID,WORKSHOP_DT,BANK_NAME ORGANISEDBY,ORGANISED_FOR,AGENCY_NAME,TARGET_GROUP,TYPE_OF_WORKSHOP, "
						+ " TOPIC,STATE,DISTRICT,CITY,PARTICIPANTS,OFFICER_NAME,DESIGNATION,ORGANISATION,REMARKS  "
						+ " FROM WORKSHOP_DETAILS "
						+ " WHERE TRUNC(WORKSHOP_DT) BETWEEN ? AND ?  ORDER BY WORKSHOP_DT,BANK_NAME";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setInvestmentId(workshopResult.getString(1));
					generalReport.setDateOfTheDocument1(workshopResult
							.getDate(2));
					generalReport.setBankName(workshopResult.getString(3));
					generalReport.setOrganisedfor(workshopResult.getString(4));
					generalReport.setAgencyName(workshopResult.getString(5));
					generalReport.setTargetGroup(workshopResult.getString(6));
					generalReport.setType(workshopResult.getString(7));
					generalReport.setTopic(workshopResult.getString(8));
					generalReport.setStateName(workshopResult.getString(9));
					generalReport.setDistrictName(workshopResult.getString(10));
					generalReport.setCity(workshopResult.getString(11));
					generalReport.setParticipants(workshopResult.getInt(12));
					generalReport.setName(workshopResult.getString(13));
					generalReport.setDesignation(workshopResult.getString(14));
					generalReport.setOrganisation(workshopResult.getString(15));
					generalReport.setReasons(workshopResult.getString(16));

					worhshopDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT WORKSHOP_ID ID,WORKSHOP_DT,BANK_NAME ORGANISEDBY,ORGANISED_FOR,AGENCY_NAME,TARGET_GROUP,TYPE_OF_WORKSHOP, "
						+ " TOPIC,STATE,DISTRICT,CITY,PARTICIPANTS,OFFICER_NAME,DESIGNATION,ORGANISATION,REMARKS  "
						+ " FROM WORKSHOP_DETAILS "
						+ " WHERE TRUNC(WORKSHOP_DT) <= ?  ORDER BY WORKSHOP_DT,BANK_NAME ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setInvestmentId(workshopResult.getString(1));
					generalReport.setDateOfTheDocument1(workshopResult
							.getDate(2));
					generalReport.setBankName(workshopResult.getString(3));
					generalReport.setOrganisedfor(workshopResult.getString(4));
					generalReport.setAgencyName(workshopResult.getString(5));
					generalReport.setTargetGroup(workshopResult.getString(6));
					generalReport.setType(workshopResult.getString(7));
					generalReport.setTopic(workshopResult.getString(8));
					generalReport.setStateName(workshopResult.getString(9));
					generalReport.setDistrictName(workshopResult.getString(10));
					generalReport.setCity(workshopResult.getString(11));
					generalReport.setParticipants(workshopResult.getInt(12));
					generalReport.setName(workshopResult.getString(13));
					generalReport.setDesignation(workshopResult.getString(14));
					generalReport.setOrganisation(workshopResult.getString(15));
					generalReport.setReasons(workshopResult.getString(16));

					worhshopDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "workshopReportDetails", "Exited");
		return worhshopDtls;
	}

	public ArrayList mliworkshopReportDetails(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "mliworkshopReportDetails", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList mliworkshopReportDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT MLI_NAME BANK,COUNT(*) CASES FROM  WORKSHOP_DETAILS WHERE TRUNC(WORKSHOP_DT) "
						+ " BETWEEN ? AND ? "
						+ " AND MLI_NAME IS NOT NULL "
						+ " GROUP BY MLI_NAME " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT MLI_NAME BANK,COUNT(*) CASES FROM  WORKSHOP_DETAILS WHERE TRUNC(WORKSHOP_DT) <= ? "
						+ " AND MLI_NAME IS NOT NULL "
						+ " GROUP BY MLI_NAME "
						+ " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "mliworkshopReportDetails", "Exited");
		return mliworkshopReportDtls;
	}

	public ArrayList stateworkshopReportDetails(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "stateworkshopReportDetails", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList mliworkshopReportDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT STATE,COUNT(*) CASES FROM WORKSHOP_DETAILS "
						+ " WHERE TRUNC(WORKSHOP_DT) BETWEEN ? AND ? "
						+ " GROUP BY STATE " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT STATE,COUNT(*) CASES FROM WORKSHOP_DETAILS "
						+ " WHERE TRUNC(WORKSHOP_DT) <= ? "
						+ " GROUP BY STATE " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "stateworkshopReportDetails", "Exited");
		return mliworkshopReportDtls;
	}

	public ArrayList stateworkshopReportDetailsNew(String state,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "stateworkshopReportDetailsNew",
				"Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList mliworkshopReportDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT STATE,COUNT(*) CASES FROM WORKSHOP_DETAILS "
						+ " WHERE TRUNC(WORKSHOP_DT) BETWEEN ? AND ? AND MLI_NAME IS NOT NULL AND MLI_NAME LIKE ? "
						+ " GROUP BY STATE " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, state + "%");
				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT STATE,COUNT(*) CASES FROM WORKSHOP_DETAILS "
						+ " WHERE TRUNC(WORKSHOP_DT) <= ? AND MLI_NAME IS NOT NULL AND MLI_NAME LIKE ? "
						+ " GROUP BY STATE " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setString(2, state + "%");
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "stateworkshopReportDetailsNew",
				"Exited");
		return mliworkshopReportDtls;
	}

	public ArrayList agencyworkshopReportDetails(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "agencyworkshopReportDetails", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList mliworkshopReportDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT AGENCY_NAME AGENCY,COUNT(*) CASES FROM WORKSHOP_DETAILS "
						+ " WHERE TRUNC(WORKSHOP_DT) BETWEEN ? AND ? "
						+ " AND AGENCY_NAME IS NOT NULL "
						+ " GROUP BY AGENCY_NAME "
						+ " UNION ALL "
						+ " SELECT 'CGTMSE',COUNT(*) CASES FROM WORKSHOP_DETAILS  "
						+ " WHERE TRUNC(WORKSHOP_DT) BETWEEN ? AND ? "
						+ " AND MLI_NAME IS NOT NULL " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setDate(3, startDate);
				danRaisedStmt.setDate(4, endDate);
				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT AGENCY_NAME AGENCY,COUNT(*) CASES FROM WORKSHOP_DETAILS "
						+ " WHERE TRUNC(WORKSHOP_DT) <= ? "
						+ " AND AGENCY_NAME IS NOT NULL "
						+ " GROUP BY AGENCY_NAME "
						+ " UNION ALL "
						+ " SELECT 'CGTMSE',COUNT(*) CASES FROM WORKSHOP_DETAILS  "
						+ " WHERE TRUNC(WORKSHOP_DT) <= ? "
						+ " AND MLI_NAME IS NOT NULL " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setDate(2, endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "agencyworkshopReportDetails", "Exited");
		return mliworkshopReportDtls;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList asf2011notallocatedSummary(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "asf2011notallocatedSummary", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList asf2011notallocatedSummaryDtls = new ArrayList();
		ResultSet asf2011SummaryResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query =
				// " DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH, "+
				" SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, "
						+ " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, "
						+ " COUNT(D.CGPAN) CASES,SUM(DCI_AMOUNT_RAISED) DANAMT "
						+ " FROM DAN_CGPAN_INFO D,DEMAND_ADVICE_INFO DAI,MEMBER_INFO M,APPLICATION_DETAIL A,SSI_DETAIL S "
						+ " WHERE D.DAN_ID = DAI.DAN_ID "
						+ " AND D.CGPAN=A.CGPAN "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 "
						+ " AND D.DAN_ID LIKE 'SF%' AND TRUNC(DAI.DAN_GENERATED_DT) BETWEEN ? AND ? "
						+ " AND D.DAN_ID IN "
						+ " ( "
						+ " SELECT DAN_ID FROM DAN_CGPAN_INFO WHERE (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 "
						+ " AND DCI_REMARKS LIKE '%DAN created for FY11%' "
						+ " ) "
						+ " AND DCI_ALLOCATION_FLAG='N' "
						+ " AND D.DAN_ID NOT IN ('SF000405041000001','SF000508041000001','SF000508041000002','SF002105041000001','SF002105041000002') "
						+ " AND DAI.MEM_BNK_ID = M.MEM_BNK_ID AND DAI.MEM_ZNE_ID = M.MEM_ZNE_ID AND DAI.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME, "
						+ " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " ORDER BY 1,2,3 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);

				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				asf2011SummaryResult = danRaisedStmt.executeQuery();

				while (asf2011SummaryResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport
							.setBankName(asf2011SummaryResult.getString(1));
					generalReport
							.setZoneName(asf2011SummaryResult.getString(2));
					// generalReport.setName(asf2011SummaryResult.getString(3));
					generalReport
							.setMemberId(asf2011SummaryResult.getString(3));
					generalReport.setProposals(asf2011SummaryResult.getInt(4));
					generalReport.setAmount(asf2011SummaryResult.getDouble(5));

					asf2011notallocatedSummaryDtls.add(generalReport);
				}
				asf2011SummaryResult.close();
				asf2011SummaryResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query =
				// " DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH, "+
				" SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, "
						+ " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, "
						+ " COUNT(D.CGPAN) CASES,SUM(DCI_AMOUNT_RAISED) DANAMT "
						+ " FROM DAN_CGPAN_INFO D,DEMAND_ADVICE_INFO DAI,MEMBER_INFO M,APPLICATION_DETAIL A,SSI_DETAIL S "
						+ " WHERE D.DAN_ID = DAI.DAN_ID "
						+ " AND D.CGPAN=A.CGPAN "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 "
						+ " AND D.DAN_ID LIKE 'SF%' AND TRUNC(DAI.DAN_GENERATED_DT) <= ? "
						+ " AND D.DAN_ID IN "
						+ " ( "
						+ " SELECT DAN_ID FROM DAN_CGPAN_INFO WHERE (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 "
						+ " AND DCI_REMARKS LIKE '%DAN created for FY11%' "
						+ " ) "
						+ " AND DCI_ALLOCATION_FLAG='N' "
						+ " AND D.DAN_ID NOT IN ('SF000405041000001','SF000508041000001','SF000508041000002','SF002105041000001','SF002105041000002') "
						+ " AND DAI.MEM_BNK_ID = M.MEM_BNK_ID AND DAI.MEM_ZNE_ID = M.MEM_ZNE_ID AND DAI.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME, "
						+ " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " ORDER BY 1,2,3 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);

				asf2011SummaryResult = danRaisedStmt.executeQuery();

				while (asf2011SummaryResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport
							.setBankName(asf2011SummaryResult.getString(1));
					generalReport
							.setZoneName(asf2011SummaryResult.getString(2));
					// generalReport.setName(asf2011SummaryResult.getString(3));
					generalReport
							.setMemberId(asf2011SummaryResult.getString(3));
					generalReport.setProposals(asf2011SummaryResult.getInt(4));
					generalReport.setAmount(asf2011SummaryResult.getDouble(5));

					asf2011notallocatedSummaryDtls.add(generalReport);
				}
				asf2011SummaryResult.close();
				asf2011SummaryResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "asf2011notallocatedSummary", "Exited");
		return asf2011notallocatedSummaryDtls;
	}

	public ArrayList schemeworkshopReportDetails(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "schemeworkshopReportDetails", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList mliworkshopReportDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT TYPE_OF_WORKSHOP,COUNT(*) CASES FROM WORKSHOP_DETAILS WHERE TRUNC(WORKSHOP_DT)  "
						+ " BETWEEN ? AND ? "
						+ " GROUP BY TYPE_OF_WORKSHOP "
						+ " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT TYPE_OF_WORKSHOP,COUNT(*) CASES FROM WORKSHOP_DETAILS WHERE TRUNC(WORKSHOP_DT) <= ?  "
						+ " GROUP BY TYPE_OF_WORKSHOP " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "schemeworkshopReportDetails", "Exited");
		return mliworkshopReportDtls;
	}

	public ArrayList schemeworkshopReportDetailsNew(String scheme,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "schemeworkshopReportDetailsNew",
				"Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList mliworkshopReportDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT TYPE_OF_WORKSHOP,COUNT(*) CASES FROM WORKSHOP_DETAILS WHERE TRUNC(WORKSHOP_DT)  "
						+ " BETWEEN ? AND ? AND MLI_NAME IS NOT NULL AND MLI_NAME LIKE ? "
						+ " GROUP BY TYPE_OF_WORKSHOP " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, scheme + "%");
				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT TYPE_OF_WORKSHOP,COUNT(*) CASES FROM WORKSHOP_DETAILS WHERE TRUNC(WORKSHOP_DT) <= ?  AND MLI_NAME IS NOT NULL AND MLI_NAME LIKE ? "
						+ " GROUP BY TYPE_OF_WORKSHOP " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setString(2, scheme + "%");
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "schemeworkshopReportDetailsNew",
				"Exited");
		return mliworkshopReportDtls;
	}

	public ArrayList districtworkshopReportNew(String state,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "districtworkshopReportNew", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList mliworkshopReportDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT DISTRICT,COUNT(*) CASES FROM WORKSHOP_DETAILS  "
						+ " WHERE  TRUNC(WORKSHOP_DT) BETWEEN ? AND ? "
						+ " AND STATE LIKE  ? "
						+ " GROUP BY DISTRICT "
						+ " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, state + "%");
				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT DISTRICT,COUNT(*) CASES FROM WORKSHOP_DETAILS  "
						+ " WHERE  TRUNC(WORKSHOP_DT) <= ? "
						+ " AND STATE LIKE  ? "
						+ " GROUP BY DISTRICT "
						+ " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setString(2, state + "%");
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "districtworkshopReportNew", "Exited");
		return mliworkshopReportDtls;
	}

	public ArrayList statemliworkshopReportDtls(String state,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "statemliworkshopReportDtls", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList mliworkshopReportDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT MLI_NAME,COUNT(*) CASES FROM WORKSHOP_DETAILS  "
						+ " WHERE TRUNC(WORKSHOP_DT) BETWEEN ? AND ? "
						+ " AND MLI_NAME IS NOT  NULL "
						+ " AND STATE LIKE ? "
						+ " GROUP BY MLI_NAME ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, state + "%");
				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT MLI_NAME,COUNT(*) CASES FROM WORKSHOP_DETAILS  "
						+ " WHERE TRUNC(WORKSHOP_DT) <= ? "
						+ " AND MLI_NAME IS NOT  NULL "
						+ " AND STATE LIKE ? "
						+ " GROUP BY MLI_NAME ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setString(2, state + "%");
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "statemliworkshopReportDtls", "Exited");
		return mliworkshopReportDtls;
	}

	public ArrayList propagationmliworkshopReportDtls(String state,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "propagationmliworkshopReportDtls",
				"Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList mliworkshopReportDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT MLI_NAME,COUNT(*) CASES FROM WORKSHOP_DETAILS "
						+ " WHERE TRUNC(WORKSHOP_DT) BETWEEN ? AND ? "
						+ " AND MLI_NAME IS NOT  NULL "
						+ " AND UPPER(TYPE_OF_WORKSHOP) LIKE UPPER(?) "
						+ " GROUP BY MLI_NAME " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, state + "%");
				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT MLI_NAME,COUNT(*) CASES FROM WORKSHOP_DETAILS "
						+ " WHERE TRUNC(WORKSHOP_DT) <= ? "
						+ " AND MLI_NAME IS NOT  NULL "
						+ " AND UPPER(TYPE_OF_WORKSHOP) LIKE UPPER(?) "
						+ " GROUP BY MLI_NAME " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setString(2, state + "%");
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "propagationmliworkshopReportDtls",
				"Exited");
		return mliworkshopReportDtls;
	}

	public ArrayList agencymliworkshopReportNewDtls(String state,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "agencymliworkshopReportNewDtls",
				"Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList mliworkshopReportDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT MLI_NAME,COUNT(*) CASES FROM WORKSHOP_DETAILS  "
						+ " WHERE  TRUNC(WORKSHOP_DT) BETWEEN ? AND ?	"
						+ " AND DECODE(AGENCY_NAME,NULL,'CGTMSE',AGENCY_NAME) LIKE ? AND MLI_NAME IS NOT NULL "
						+ " GROUP BY MLI_NAME " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, state + "%");
				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT MLI_NAME,COUNT(*) CASES FROM WORKSHOP_DETAILS  "
						+ " WHERE  TRUNC(WORKSHOP_DT) <= ?	"
						+ " AND DECODE(AGENCY_NAME,NULL,'CGTMSE',AGENCY_NAME) LIKE ? AND MLI_NAME IS NOT NULL "
						+ " GROUP BY MLI_NAME " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setString(2, state + "%");
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "propagationmliworkshopReportDtls",
				"Exited");
		return mliworkshopReportDtls;
	}

	public ArrayList stateagencyworkshopReportDtls(String state,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "stateagencyworkshopReportDtls",
				"Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList mliworkshopReportDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT AGENCY_NAME,COUNT(*) CASES FROM WORKSHOP_DETAILS  "
						+ " WHERE TRUNC(WORKSHOP_DT) BETWEEN ? AND ? "
						+ " AND AGENCY_NAME IS NOT  NULL "
						+ " AND STATE LIKE ? "
						+ " GROUP BY AGENCY_NAME "
						+ "  UNION ALL	"
						+ " SELECT 'CGTMSE',COUNT(*) CASES FROM WORKSHOP_DETAILS WHERE MLI_NAME IS NOT NULL	"
						+ " AND TRUNC(WORKSHOP_DT) BETWEEN ? AND ? "
						+ " AND BANK_NAME='CGTMSE' AND MLI_NAME IS NOT NULL AND STATE LIKE ? "
						+ " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, state + "%");
				danRaisedStmt.setDate(4, startDate);
				danRaisedStmt.setDate(5, endDate);
				danRaisedStmt.setString(6, state + "%");
				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT AGENCY_NAME,COUNT(*) CASES FROM WORKSHOP_DETAILS  "
						+ " WHERE TRUNC(WORKSHOP_DT) <= ? "
						+ " AND AGENCY_NAME IS NOT  NULL "
						+ " AND STATE LIKE ? "
						+ " GROUP BY AGENCY_NAME "
						+ "  UNION ALL	"
						+ " SELECT 'CGTMSE',COUNT(*) CASES FROM WORKSHOP_DETAILS WHERE MLI_NAME IS NOT NULL	"
						+ " AND TRUNC(WORKSHOP_DT) <= ? "
						+ " AND BANK_NAME='CGTMSE' AND MLI_NAME IS NOT NULL AND STATE LIKE ? "
						+ " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setString(2, state + "%");
				danRaisedStmt.setDate(3, endDate);
				danRaisedStmt.setString(4, state + "%");
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "stateagencyworkshopReportDtls",
				"Exited");
		return mliworkshopReportDtls;
	}

	public ArrayList propagationagencyworkshopReportDtls(String state,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "propagationagencyworkshopReportDtls",
				"Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList mliworkshopReportDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT AGENCY_NAME,COUNT(*) CASES FROM WORKSHOP_DETAILS  "
						+ " WHERE TRUNC(WORKSHOP_DT) BETWEEN ? AND ? "
						+ " AND AGENCY_NAME IS NOT  NULL "
						+ " AND  UPPER(TYPE_OF_WORKSHOP) LIKE UPPER(?) "
						+ " GROUP BY AGENCY_NAME "
						+ "  UNION ALL	"
						+ " SELECT 'CGTMSE',COUNT(*) CASES FROM WORKSHOP_DETAILS WHERE MLI_NAME IS NOT NULL	"
						+ " AND TRUNC(WORKSHOP_DT) BETWEEN ? AND ? "
						+ " AND BANK_NAME='CGTMSE' AND MLI_NAME IS NOT NULL AND UPPER(TYPE_OF_WORKSHOP) LIKE UPPER(?) "
						+ " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, state + "%");
				danRaisedStmt.setDate(4, startDate);
				danRaisedStmt.setDate(5, endDate);
				danRaisedStmt.setString(6, state + "%");
				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT AGENCY_NAME,COUNT(*) CASES FROM WORKSHOP_DETAILS  "
						+ " WHERE TRUNC(WORKSHOP_DT) <= ? "
						+ " AND AGENCY_NAME IS NOT  NULL "
						+ " AND UPPER(TYPE_OF_WORKSHOP) LIKE UPPER(?) "
						+ " GROUP BY AGENCY_NAME "
						+ "  UNION ALL	"
						+ " SELECT 'CGTMSE',COUNT(*) CASES FROM WORKSHOP_DETAILS WHERE MLI_NAME IS NOT NULL	"
						+ " AND TRUNC(WORKSHOP_DT) <= ? "
						+ " AND BANK_NAME='CGTMSE' AND MLI_NAME IS NOT NULL AND UPPER(TYPE_OF_WORKSHOP) LIKE UPPER(?)  "
						+ " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setString(2, state + "%");
				danRaisedStmt.setDate(3, endDate);
				danRaisedStmt.setString(4, state + "%");
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "propagationagencyworkshopReportDtls",
				"Exited");
		return mliworkshopReportDtls;
	}

	/**
	 * 
	 * @param state
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList propagationstateworkshopReportDtls(String state,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "propagationstateworkshopReportDtls",
				"Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList mliworkshopReportDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT STATE,COUNT(*) CASES FROM WORKSHOP_DETAILS  "
						+ " WHERE TRUNC(WORKSHOP_DT) BETWEEN ? AND ? "
						+ " AND UPPER(TYPE_OF_WORKSHOP) LIKE UPPER(?)  "
						+ " GROUP BY STATE " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, state + "%");

				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT STATE,COUNT(*) CASES FROM WORKSHOP_DETAILS  "
						+ " WHERE TRUNC(WORKSHOP_DT) <= ? "
						+ " AND UPPER(TYPE_OF_WORKSHOP) LIKE UPPER(?)  "
						+ " GROUP BY STATE " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setString(2, state + "%");
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "propagationstateworkshopReportDtls",
				"Exited");
		return mliworkshopReportDtls;
	}

	public ArrayList agencystateworkshopReportNewDtls(String state,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "agencystateworkshopReportNewDtls",
				"Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList mliworkshopReportDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT STATE,COUNT(*) CASES FROM WORKSHOP_DETAILS "
						+ " WHERE  TRUNC(WORKSHOP_DT) BETWEEN ? AND ?		"
						+ " AND DECODE(AGENCY_NAME,NULL,'CGTMSE',AGENCY_NAME) LIKE ? "
						+ " GROUP BY STATE " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, state + "%");

				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT STATE,COUNT(*) CASES FROM WORKSHOP_DETAILS "
						+ " WHERE  TRUNC(WORKSHOP_DT)  <= ?		"
						+ " AND DECODE(AGENCY_NAME,NULL,'CGTMSE',AGENCY_NAME) LIKE ? "
						+ " GROUP BY STATE " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setString(2, state + "%");
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "agencystateworkshopReportNewDtls",
				"Exited");
		return mliworkshopReportDtls;
	}

	/**
	 * 
	 * @param state
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList unitwiseasf2011notallocatedSummaryDtls(String state,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO",
				"unitwiseasf2011notallocatedSummaryDtls", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList unitwiseasf2011notallocatedDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, "
						+ " DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH, "
						+ " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, "
						+ " S.SSI_UNIT_NAME UNITNAME,D.DAN_ID DAN,D.CGPAN CGPAN,DCI_AMOUNT_RAISED DANAMT,DCI_ALLOCATION_FLAG PAYFLAG, "
						+ " DCI_REMARKS REMARKS "
						+ " FROM DAN_CGPAN_INFO D,DEMAND_ADVICE_INFO DAI,MEMBER_INFO M,APPLICATION_DETAIL A,SSI_DETAIL S "
						+ " WHERE D.DAN_ID = DAI.DAN_ID "
						+ " AND D.CGPAN=A.CGPAN "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 "
						+ " AND D.DAN_ID LIKE 'SF%' AND DAI.DAN_GENERATED_DT BETWEEN ? AND ? "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID= ? "
						+ " AND D.DAN_ID IN "
						+ " ( "
						+ " SELECT DAN_ID FROM DAN_CGPAN_INFO WHERE (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 "
						+ " AND DCI_REMARKS LIKE '%DAN created for FY11%' "
						+ " ) "
						+ " AND DCI_ALLOCATION_FLAG='N' "
						+ " AND D.DAN_ID NOT IN ('SF000405041000001','SF000508041000001','SF000508041000002','SF002105041000001','SF002105041000002') "
						+ " AND DAI.MEM_BNK_ID = M.MEM_BNK_ID AND DAI.MEM_ZNE_ID = M.MEM_ZNE_ID AND DAI.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " ORDER BY 1,2,5 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, state);

				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate+"state:"+state);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setZoneName(workshopResult.getString(2));
					generalReport.setName(workshopResult.getString(3));
					generalReport.setMemberId(workshopResult.getString(4));
					generalReport.setSsiName(workshopResult.getString(5));
					generalReport.setDdNum(workshopResult.getString(6));
					generalReport.setCgpan(workshopResult.getString(7));
					generalReport.setAmount(workshopResult.getDouble(8));
					generalReport.setStatus(workshopResult.getString(9));
					generalReport.setReasons(workshopResult.getString(10));

					unitwiseasf2011notallocatedDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, "
						+ " DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH, "
						+ " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, "
						+ " S.SSI_UNIT_NAME UNITNAME,D.DAN_ID DAN,D.CGPAN CGPAN,DCI_AMOUNT_RAISED DANAMT,DCI_ALLOCATION_FLAG PAYFLAG, "
						+ " DCI_REMARKS REMARKS "
						+ " FROM DAN_CGPAN_INFO D,DEMAND_ADVICE_INFO DAI,MEMBER_INFO M,APPLICATION_DETAIL A,SSI_DETAIL S "
						+ " WHERE D.DAN_ID = DAI.DAN_ID "
						+ " AND D.CGPAN=A.CGPAN "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 "
						+ " AND D.DAN_ID LIKE 'SF%' AND DAI.DAN_GENERATED_DT <= ? "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID = ? "
						+ " AND D.DAN_ID IN "
						+ " ( "
						+ " SELECT DAN_ID FROM DAN_CGPAN_INFO WHERE (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 "
						+ " AND DCI_REMARKS LIKE '%DAN created for FY11%' "
						+ " ) "
						+ " AND DCI_ALLOCATION_FLAG='N' "
						+ " AND D.DAN_ID NOT IN ('SF000405041000001','SF000508041000001','SF000508041000002','SF002105041000001','SF002105041000002') "
						+ " AND DAI.MEM_BNK_ID = M.MEM_BNK_ID AND DAI.MEM_ZNE_ID = M.MEM_ZNE_ID AND DAI.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " ORDER BY 1,2,5 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setString(2, state);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setZoneName(workshopResult.getString(2));
					generalReport.setName(workshopResult.getString(3));
					generalReport.setMemberId(workshopResult.getString(4));
					generalReport.setSsiName(workshopResult.getString(5));
					generalReport.setDdNum(workshopResult.getString(6));
					generalReport.setCgpan(workshopResult.getString(7));
					generalReport.setAmount(workshopResult.getDouble(8));
					generalReport.setStatus(workshopResult.getString(9));
					generalReport.setReasons(workshopResult.getString(10));

					unitwiseasf2011notallocatedDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO",
				"unitwiseasf2011notallocatedSummaryDtls", "Exited");
		return unitwiseasf2011notallocatedDtls;
	}

	/**
	 * 
	 * @param state
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList agencypropagationworkshopReportDtls(String state,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "agencypropagationworkshopReportDtls",
				"Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList mliworkshopReportDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT TYPE_OF_WORKSHOP,COUNT(*) CASES FROM WORKSHOP_DETAILS "
						+ " WHERE  TRUNC(WORKSHOP_DT) BETWEEN ? AND ?		"
						+ " AND DECODE(AGENCY_NAME,NULL,'CGTMSE',AGENCY_NAME) LIKE ? "
						+ " GROUP BY TYPE_OF_WORKSHOP " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, state + "%");

				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT TYPE_OF_WORKSHOP,COUNT(*) CASES FROM WORKSHOP_DETAILS "
						+ " WHERE  TRUNC(WORKSHOP_DT) <= ?		"
						+ " AND DECODE(AGENCY_NAME,NULL,'CGTMSE',AGENCY_NAME) LIKE ? "
						+ " GROUP BY TYPE_OF_WORKSHOP " + " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setString(2, state + "%");
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "agencypropagationworkshopReportDtls",
				"Exited");
		return mliworkshopReportDtls;
	}

	public ArrayList stateprogaramworkshopReportDtls(String state,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "stateprogaramworkshopReportDtls",
				"Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList mliworkshopReportDtls = new ArrayList();
		ResultSet workshopResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT TYPE_OF_WORKSHOP,COUNT(*) CASES FROM WORKSHOP_DETAILS  "
						+ " WHERE TRUNC(WORKSHOP_DT) BETWEEN ? AND ? "
						+ " AND STATE LIKE ? "
						+ " GROUP BY TYPE_OF_WORKSHOP "
						+ " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, state + "%");
				// System.out.println("query:"+query+"startDate:"+startDate+"endDate:"+endDate);
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {
					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT TYPE_OF_WORKSHOP,COUNT(*) CASES FROM WORKSHOP_DETAILS  "
						+ " WHERE TRUNC(WORKSHOP_DT) <= ? "
						+ " AND STATE LIKE ? "
						+ " GROUP BY TYPE_OF_WORKSHOP "
						+ " ORDER BY 1 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setString(2, state + "%");
				workshopResult = danRaisedStmt.executeQuery();

				while (workshopResult.next()) {

					GeneralReport generalReport = new GeneralReport();

					generalReport.setBankName(workshopResult.getString(1));
					generalReport.setProposals(workshopResult.getInt(2));

					mliworkshopReportDtls.add(generalReport);
				}
				workshopResult.close();
				workshopResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "stateprogaramworkshopReportDtls",
				"Exited");
		return mliworkshopReportDtls;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList investmentReportDetails(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "investmentReportDetails", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList investmentList = new ArrayList();
		ResultSet danRaisedResult = null;
		Connection connection = DBConnection.getConnection();
		// System.out.println("startDate:"+startDate+" endDate:"+endDate);
		if (startDate != null) {
			try {

				String query = " SELECT INVESTMENT_ID,DATE_OF_DEPOSIT,BANK_NAME,DEPOSITED_AMT,COMPOUND_FREQUENCY, "
						+ " RATE_OF_INTEREST,TENURE_YEARS,TENURE_MONTHS,TENURE_DAYS,MATURITY_DATE,MATURITY_AMOUNT "
						+ " FROM INVESTMENT_DETAIL_NEW "
						+ " WHERE TRUNC(DATE_OF_DEPOSIT) BETWEEN ? AND ? "
						+ " ORDER BY DATE_OF_DEPOSIT,BANK_NAME ";
				// System.out.println("query:"+query);
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					GeneralReport generalReport = new GeneralReport();
					generalReport.setInvestmentId(danRaisedResult.getString(1));
					generalReport.setDepositDate(danRaisedResult.getDate(2));
					generalReport.setBankName(danRaisedResult.getString(3));
					generalReport.setDepositAmt(danRaisedResult.getDouble(4));
					generalReport.setCompoundFrequency(danRaisedResult
							.getString(5));
					generalReport.setRateofInterest(danRaisedResult
							.getDouble(6));
					generalReport.setTenureYears(danRaisedResult.getInt(7));
					generalReport.setTenureMonths(danRaisedResult.getInt(8));
					generalReport.setTenureDays(danRaisedResult.getInt(9));
					generalReport.setMaturityDate(danRaisedResult.getDate(10));
					generalReport.setMaturityAmt(danRaisedResult.getDouble(11));

					investmentList.add(generalReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT INVESTMENT_ID,DATE_OF_DEPOSIT,BANK_NAME,DEPOSITED_AMT,COMPOUND_FREQUENCY, "
						+ " RATE_OF_INTEREST,TENURE_YEARS,TENURE_MONTHS,TENURE_DAYS,MATURITY_DATE,MATURITY_AMOUNT "
						+ " FROM INVESTMENT_DETAIL_NEW "
						+ " WHERE TRUNC(DATE_OF_DEPOSIT) <= ? "
						+ " ORDER BY DATE_OF_DEPOSIT,BANK_NAME ";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {

					GeneralReport generalReport = new GeneralReport();
					generalReport.setInvestmentId(danRaisedResult.getString(1));
					generalReport.setDepositDate(danRaisedResult.getDate(2));
					generalReport.setBankName(danRaisedResult.getString(3));
					generalReport.setDepositAmt(danRaisedResult.getDouble(4));
					generalReport.setCompoundFrequency(danRaisedResult
							.getString(5));
					generalReport.setRateofInterest(danRaisedResult
							.getDouble(6));
					generalReport.setTenureYears(danRaisedResult.getInt(7));
					generalReport.setTenureMonths(danRaisedResult.getInt(8));
					generalReport.setTenureDays(danRaisedResult.getInt(9));
					generalReport.setMaturityDate(danRaisedResult.getDate(10));
					generalReport.setMaturityAmt(danRaisedResult.getDouble(11));
					investmentList.add(generalReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "investmentReportDetails", "Exited");
		return investmentList;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList dcHandiCraftReportDetails(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "dcHandiCraftReportDetails", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList npaDetails = new ArrayList();
		ResultSet danRaisedResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, "
						+ " DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH, "
						+ " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, "
						+ " S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN, "
						+ " DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT), "
						+ " TRUNC(APP_GUAR_START_DATE_TIME),APP_STATUS STATUS, "
						+ " APP_DC_HANDICRAFT_ACC_FLAG,APP_DC_HANDICRAFT_REIMB, "
						+ " (SELECT MIN(DBR_DT) FROM DISBURSEMENT_DETAIL D WHERE A.APP_REF_NO=D.APP_REF_NO AND DBR_AMOUNT > 0) "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,promoter_detail p "
						+ " WHERE a.ssi_reference_number=p.ssi_reference_number and A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " AND APP_DC_HANDICRAFT_ACC_FLAG='Y' "
						+ " AND TRUNC(APP_APPROVED_DATE_TIME) >= ?  "
						+ " AND TRUNC(APP_APPROVED_DATE_TIME) <= ? ";
				if ((id.equals(null)) || (id.equals(""))) {
					query = query + "  ORDER BY 1,2,3,5 ";
				} else {
					query = query
							+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID= '"
							+ id + "' ORDER BY 1,2,3,5 ";
				}

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);

				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					GeneralReport generalReport = new GeneralReport();
					generalReport.setBankName(danRaisedResult.getString(1));
					generalReport.setZoneName(danRaisedResult.getString(2));
					generalReport.setName(danRaisedResult.getString(3));
					generalReport.setMemberId(danRaisedResult.getString(4));
					generalReport.setSsiName(danRaisedResult.getString(5));
					generalReport.setCgpan(danRaisedResult.getString(6));

					generalReport.setAmount(danRaisedResult.getDouble(7));
					generalReport.setDateOfTheDocument(danRaisedResult
							.getDate(8));
					generalReport.setStatus(danRaisedResult.getString(9));
					generalReport.setType(danRaisedResult.getString(10));
					generalReport.setSubject(danRaisedResult.getString(11));
					generalReport.setDateOfTheDocument1(danRaisedResult
							.getDate(12));

					npaDetails.add(generalReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, "
						+ " DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH, "
						+ " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, "
						+ " S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN, "
						+ " DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT), "
						+ " TRUNC(APP_GUAR_START_DATE_TIME),APP_STATUS STATUS, "
						+ " APP_DC_HANDICRAFT_ACC_FLAG,APP_DC_HANDICRAFT_REIMB, "
						+ " (SELECT MIN(DBR_DT) FROM DISBURSEMENT_DETAIL D WHERE A.APP_REF_NO=D.APP_REF_NO AND DBR_AMOUNT > 0) "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,promoter_detail p "
						+ " WHERE a.ssi_reference_number=p.ssi_reference_number and A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " AND APP_DC_HANDICRAFT_ACC_FLAG='Y' "
						+ " AND TRUNC(APP_APPROVED_DATE_TIME) <= ?  ";
				if ((id.equals(null)) || (id.equals(""))) {
					query = query + "  ORDER BY 1,2,3,5 ";
				} else {
					query = query
							+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID= '"
							+ id + "' ORDER BY 1,2,3,5 ";
				}

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {

					GeneralReport generalReport = new GeneralReport();
					generalReport.setBankName(danRaisedResult.getString(1));
					generalReport.setZoneName(danRaisedResult.getString(2));
					generalReport.setName(danRaisedResult.getString(3));
					generalReport.setMemberId(danRaisedResult.getString(4));
					generalReport.setSsiName(danRaisedResult.getString(5));
					generalReport.setCgpan(danRaisedResult.getString(6));
					generalReport.setAmount(danRaisedResult.getDouble(7));
					generalReport.setDateOfTheDocument(danRaisedResult
							.getDate(8));
					generalReport.setStatus(danRaisedResult.getString(9));
					generalReport.setType(danRaisedResult.getString(10));
					generalReport.setSubject(danRaisedResult.getString(11));
					generalReport.setDateOfTheDocument1(danRaisedResult
							.getDate(12));
					npaDetails.add(generalReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "dcHandiCraftReportDetails", "Exited");
		return npaDetails;
	}

	public ArrayList dcHandloomReportDetails(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		ArrayList handloomDetails;
		Connection connection;
		Log.log(4, "ReportDAO", "dcHandiCraftReportDetails", "Entered");
		PreparedStatement danRaisedStmt = null;
		handloomDetails = new ArrayList();
		ResultSet handloomReportResult = null;
		connection = DBConnection.getConnection();
		if (startDate == null)
			// break MISSING_BLOCK_LABEL_602;
			try {
				String query = " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, \n DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH, \n M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, \n  S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN, \n DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT), \n TRUNC(APP_GUAR_START_DATE_TIME),APP_STATUS STATUS, \n APP_DC_HANDILOOM_FLAG,APP_HANDLOOM_CHECK,DECODE(APP_WEAVER_CREDIT_SCHEME,'IHDS','Integreated Handloom Development Scheme','CHCDS','Mega Cluster Scheme','FPS','Revival,Reform and Restructuring'), \n (SELECT MIN(DBR_DT) FROM DISBURSEMENT_DETAIL D WHERE A.APP_REF_NO=D.APP_REF_NO AND DBR_AMOUNT > 0), \n TRM_AMOUNT_SANCTIONED_DT,TRUNC(APP_APPROVED_DATE_TIME) \n FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,TERM_LOAN_DETAIL T \n WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER \n AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID \n AND APP_STATUS NOT IN ('RE') \n AND APP_DC_HANDILOOM_FLAG='Y' AND APP_HANDLOOM_CHECK='Y' AND A.APP_REF_NO=T.APP_REF_NO AND APP_LOAN_TYPE='TC' \n AND TRUNC(APP_APPROVED_DATE_TIME) >= ?AND   TRUNC(APP_APPROVED_DATE_TIME) <= ? UNION \n \n SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, \n  DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH, \n  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, \n S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN, \n                                               DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT), \n TRUNC(APP_GUAR_START_DATE_TIME),APP_STATUS STATUS, \n APP_DC_HANDILOOM_FLAG,APP_HANDLOOM_CHECK,DECODE(APP_WEAVER_CREDIT_SCHEME,'IHDS','Integreated Handloom Development Scheme','CHCDS','Mega Cluster Scheme','FPS','Revival,Reform and Restructuring'), \n (SELECT MIN(DBR_DT) FROM DISBURSEMENT_DETAIL D WHERE A.APP_REF_NO=D.APP_REF_NO AND DBR_AMOUNT > 0),\n TRUNC(DECODE(WCP_FB_LIMIT_SANCTIONED_DT,NULL,WCP_NFB_LIMIT_SANCTIONED_DT,WCP_FB_LIMIT_SANCTIONED_DT)),TRUNC(APP_APPROVED_DATE_TIME) \n FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M, WORKING_CAPITAL_DETAIL W \n WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER \n AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID \n AND APP_STATUS NOT IN ('RE') \n AND APP_DC_HANDILOOM_FLAG='Y' AND APP_HANDLOOM_CHECK='Y' AND A.APP_REF_NO=W.APP_REF_NO AND APP_LOAN_TYPE='WC' \n AND TRUNC(APP_APPROVED_DATE_TIME) >= ?  AND   TRUNC(APP_APPROVED_DATE_TIME) <= ?  ";
				if (id.equals(null) || id.equals(""))
					query = (new StringBuilder()).append(query)
							.append("  ORDER BY 1,2,3,5 ").toString();
				else
					query = (new StringBuilder())
							.append("SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, \n DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH, \n M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, \n S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN, \n DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT), \n TRUNC(APP_GUAR_START_DATE_TIME),APP_STATUS STATUS, \n APP_DC_HANDILOOM_FLAG,APP_HANDLOOM_CHECK,DECODE(APP_WEAVER_CREDIT_SCHEME,'IHDS','Integreated Handloom Development Scheme','CHCDS','Mega Cluster Scheme','FPS','Revival,Reform and Restructuring'), \n (SELECT MIN(DBR_DT) FROM DISBURSEMENT_DETAIL D WHERE A.APP_REF_NO=D.APP_REF_NO AND DBR_AMOUNT > 0), \n TRM_AMOUNT_SANCTIONED_DT,TRUNC(APP_APPROVED_DATE_TIME) \n FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,TERM_LOAN_DETAIL T \n WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER \n AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID \n AND APP_STATUS NOT IN ('RE') \n  AND APP_DC_HANDILOOM_FLAG='Y' AND APP_HANDLOOM_CHECK='Y' AND A.APP_REF_NO=T.APP_REF_NO AND APP_LOAN_TYPE='TC' \n AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID= '")
							.append(id)
							.append("' ")
							.append(" AND TRUNC(APP_APPROVED_DATE_TIME) >= ?")
							.append("AND   TRUNC(APP_APPROVED_DATE_TIME) <= ?  ")
							.append("UNION \n")
							.append(" \n")
							.append(" SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, \n")
							.append(" DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH, \n")
							.append("M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, \n")
							.append(" S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN, \n")
							.append(" DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT), \n")
							.append(" TRUNC(APP_GUAR_START_DATE_TIME),APP_STATUS STATUS, \n")
							.append(" APP_DC_HANDILOOM_FLAG,APP_HANDLOOM_CHECK,DECODE(APP_WEAVER_CREDIT_SCHEME,'IHDS','Integreated Handloom Development Scheme','CHCDS','Mega Cluster Scheme','FPS','Revival,Reform and Restructuring'), \n")
							.append("(SELECT MIN(DBR_DT) FROM DISBURSEMENT_DETAIL D WHERE A.APP_REF_NO=D.APP_REF_NO AND DBR_AMOUNT > 0),\n")
							.append("TRUNC(DECODE(WCP_FB_LIMIT_SANCTIONED_DT,NULL,WCP_NFB_LIMIT_SANCTIONED_DT,WCP_FB_LIMIT_SANCTIONED_DT)),TRUNC(APP_APPROVED_DATE_TIME) \n")
							.append(" FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M, WORKING_CAPITAL_DETAIL W \n")
							.append("WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER \n")
							.append("AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID \n")
							.append(" AND APP_STATUS NOT IN ('RE') \n")
							.append("AND APP_DC_HANDILOOM_FLAG='Y' AND APP_HANDLOOM_CHECK='Y' AND A.APP_REF_NO=W.APP_REF_NO AND APP_LOAN_TYPE='WC' \n")
							.append("AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID= '")
							.append(id)
							.append("' ")
							.append(" AND TRUNC(APP_APPROVED_DATE_TIME) >= ?  ")
							.append(" AND   TRUNC(APP_APPROVED_DATE_TIME) <= ?  ")
							.toString();
				// PreparedStatement danRaisedStmt =
				// connection.prepareStatement(query);
				System.out.println("query" + query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setDate(3, startDate);
				danRaisedStmt.setDate(4, endDate);
				// ResultSet handloomReportResult;
				GeneralReport generalReport;
				for (handloomReportResult = danRaisedStmt.executeQuery(); handloomReportResult
						.next(); handloomDetails.add(generalReport)) {
					generalReport = new GeneralReport();
					generalReport
							.setBankName(handloomReportResult.getString(1));
					generalReport
							.setZoneName(handloomReportResult.getString(2));
					generalReport.setName(handloomReportResult.getString(3));
					generalReport
							.setMemberId(handloomReportResult.getString(4));
					generalReport.setSsiName(handloomReportResult.getString(5));
					generalReport.setCgpan(handloomReportResult.getString(6));
					generalReport.setAmount(handloomReportResult.getDouble(7));
					generalReport.setDateOfTheDocument(handloomReportResult
							.getDate(8));
					generalReport.setStatus(handloomReportResult.getString(9));
					generalReport.setType(handloomReportResult.getString(10));
					generalReport
							.setSubject(handloomReportResult.getString(11));
					generalReport.setAppWeaverCreditScheme(handloomReportResult
							.getString(12));
					generalReport.setDateOfTheDocument1(handloomReportResult
							.getDate(13));
					generalReport.setSanctionDate(handloomReportResult
							.getDate(14));
					generalReport.setApprovedDate(handloomReportResult
							.getDate(15));
				}

				handloomReportResult.close();
				handloomReportResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;
			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		if (startDate != null || !id.equals(null) && !id.equals(""))
			// break MISSING_BLOCK_LABEL_958;
			try {
				String query = "SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, \nDECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH, \n M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, \n S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN, \n  DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT), \n TRUNC(APP_GUAR_START_DATE_TIME),APP_STATUS STATUS, \n APP_DC_HANDILOOM_FLAG,APP_HANDLOOM_CHECK,DECODE(APP_WEAVER_CREDIT_SCHEME,'IHDS','Integreated Handloom Development Scheme','CHCDS','Mega Cluster Scheme','FPS','Revival,Reform and Restructuring'), \n(SELECT MIN(DBR_DT) FROM DISBURSEMENT_DETAIL D WHERE A.APP_REF_NO=D.APP_REF_NO AND DBR_AMOUNT > 0), \n TRM_AMOUNT_SANCTIONED_DT,TRUNC(APP_APPROVED_DATE_TIME) \n FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,TERM_LOAN_DETAIL T \n WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER \n AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID \n AND APP_STATUS NOT IN ('RE') \n AND APP_DC_HANDILOOM_FLAG='Y' AND APP_HANDLOOM_CHECK='Y' AND A.APP_REF_NO=T.APP_REF_NO AND APP_LOAN_TYPE='TC' \n AND  TRUNC(APP_APPROVED_DATE_TIME) <= ? \n UNION \n  \n SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, \n  DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH, \n  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, \n S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN, \n DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT), \n                                               TRUNC(APP_GUAR_START_DATE_TIME),APP_STATUS STATUS, \n  APP_DC_HANDILOOM_FLAG,APP_HANDLOOM_CHECK,DECODE(APP_WEAVER_CREDIT_SCHEME,'IHDS','Integreated Handloom Development Scheme','CHCDS','Mega Cluster Scheme','FPS','Revival,Reform and Restructuring'), \n (SELECT MIN(DBR_DT) FROM DISBURSEMENT_DETAIL D WHERE A.APP_REF_NO=D.APP_REF_NO AND DBR_AMOUNT > 0),\n  TRUNC(DECODE(WCP_FB_LIMIT_SANCTIONED_DT,NULL,WCP_NFB_LIMIT_SANCTIONED_DT,WCP_FB_LIMIT_SANCTIONED_DT)),TRUNC(APP_APPROVED_DATE_TIME) \n  FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M, WORKING_CAPITAL_DETAIL W \n  WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER \n  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID \n  AND APP_STATUS NOT IN ('RE') \n  AND APP_DC_HANDILOOM_FLAG='Y' AND APP_HANDLOOM_CHECK='Y' AND A.APP_REF_NO=W.APP_REF_NO AND APP_LOAN_TYPE='WC' \n  AND  TRUNC(APP_APPROVED_DATE_TIME) <= ? ";
				// PreparedStatement danRaisedStmt =
				// connection.prepareStatement(query);
				System.out.println("query1" + query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setDate(2, endDate);
				// ResultSet handloomReportResult;
				GeneralReport generalReport;
				for (handloomReportResult = danRaisedStmt.executeQuery(); handloomReportResult
						.next(); handloomDetails.add(generalReport)) {
					generalReport = new GeneralReport();
					generalReport
							.setBankName(handloomReportResult.getString(1));
					generalReport
							.setZoneName(handloomReportResult.getString(2));
					generalReport.setName(handloomReportResult.getString(3));
					generalReport
							.setMemberId(handloomReportResult.getString(4));
					generalReport.setSsiName(handloomReportResult.getString(5));
					generalReport.setCgpan(handloomReportResult.getString(6));
					generalReport.setAmount(handloomReportResult.getDouble(7));
					generalReport.setDateOfTheDocument(handloomReportResult
							.getDate(8));
					generalReport.setStatus(handloomReportResult.getString(9));
					generalReport.setType(handloomReportResult.getString(10));
					generalReport
							.setSubject(handloomReportResult.getString(11));
					generalReport.setAppWeaverCreditScheme(handloomReportResult
							.getString(12));
					generalReport.setDateOfTheDocument1(handloomReportResult
							.getDate(13));
					generalReport.setSanctionDate(handloomReportResult
							.getDate(14));
					generalReport.setApprovedDate(handloomReportResult
							.getDate(15));
				}

				handloomReportResult.close();
				handloomReportResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;
			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		if (startDate != null)
			// break MISSING_BLOCK_LABEL_1446;
			try {
				String query = (new StringBuilder())
						.append("SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, \n DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH, \n                               M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, \n                               S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN, \n                               DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT), \n                               TRUNC(APP_GUAR_START_DATE_TIME),APP_STATUS STATUS, \n                               APP_DC_HANDILOOM_FLAG,APP_HANDLOOM_CHECK,DECODE(APP_WEAVER_CREDIT_SCHEME,'IHDS','Integreated Handloom Development Scheme','CHCDS','Mega Cluster Scheme','FPS','Revival,Reform and Restructuring'), \n                               (SELECT MIN(DBR_DT) FROM DISBURSEMENT_DETAIL D WHERE A.APP_REF_NO=D.APP_REF_NO AND DBR_AMOUNT > 0), \n                               TRM_AMOUNT_SANCTIONED_DT,TRUNC(APP_APPROVED_DATE_TIME) \n                               FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,TERM_LOAN_DETAIL T \n                               WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER \n                               AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID \n                               AND APP_STATUS NOT IN ('RE') \n                               AND APP_DC_HANDILOOM_FLAG='Y' AND APP_HANDLOOM_CHECK='Y' AND A.APP_REF_NO=T.APP_REF_NO AND APP_LOAN_TYPE='TC' \n                                              AND  TRUNC(APP_APPROVED_DATE_TIME) <= ?                                                                                         AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID= '")
						.append(id)
						.append("' ")
						.append("                                                          \n")
						.append("                               UNION \n")
						.append("                                                          \n")
						.append("                              SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, \n")
						.append("                                               DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH, \n")
						.append("                                               M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, \n")
						.append("                                               S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN, \n")
						.append("                                               DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT), \n")
						.append("                                               TRUNC(APP_GUAR_START_DATE_TIME),APP_STATUS STATUS, \n")
						.append("                                               APP_DC_HANDILOOM_FLAG,APP_HANDLOOM_CHECK,DECODE(APP_WEAVER_CREDIT_SCHEME,'IHDS','Integreated Handloom Development Scheme','CHCDS','Mega Cluster Scheme','FPS','Revival,Reform and Restructuring'), \n")
						.append("                                               (SELECT MIN(DBR_DT) FROM DISBURSEMENT_DETAIL D WHERE A.APP_REF_NO=D.APP_REF_NO AND DBR_AMOUNT > 0),\n")
						.append("                                               TRUNC(DECODE(WCP_FB_LIMIT_SANCTIONED_DT,NULL,WCP_NFB_LIMIT_SANCTIONED_DT,WCP_FB_LIMIT_SANCTIONED_DT)),TRUNC(APP_APPROVED_DATE_TIME) \n")
						.append("                                               FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M, WORKING_CAPITAL_DETAIL W \n")
						.append("                                               WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER \n")
						.append("                                               AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID \n")
						.append("                                               AND APP_STATUS NOT IN ('RE') \n")
						.append("                                               AND APP_DC_HANDILOOM_FLAG='Y' AND APP_HANDLOOM_CHECK='Y' AND A.APP_REF_NO=W.APP_REF_NO AND APP_LOAN_TYPE='WC' \n")
						.append("                                              AND  TRUNC(APP_APPROVED_DATE_TIME) <= ?  ")
						.append("                                                                                         AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID= '")
						.append(id).append("' ").append("  ").toString();
				// PreparedStatement danRaisedStmt =
				// connection.prepareStatement(query);
				System.out.println("query2" + query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setDate(2, endDate);
				// ResultSet handloomReportResult;
				GeneralReport generalReport;
				for (handloomReportResult = danRaisedStmt.executeQuery(); handloomReportResult
						.next(); handloomDetails.add(generalReport)) {
					generalReport = new GeneralReport();
					generalReport
							.setBankName(handloomReportResult.getString(1));
					generalReport
							.setZoneName(handloomReportResult.getString(2));
					generalReport.setName(handloomReportResult.getString(3));
					generalReport
							.setMemberId(handloomReportResult.getString(4));
					generalReport.setSsiName(handloomReportResult.getString(5));
					generalReport.setCgpan(handloomReportResult.getString(6));
					generalReport.setAmount(handloomReportResult.getDouble(7));
					generalReport.setDateOfTheDocument(handloomReportResult
							.getDate(8));
					generalReport.setStatus(handloomReportResult.getString(9));
					generalReport.setType(handloomReportResult.getString(10));
					generalReport
							.setSubject(handloomReportResult.getString(11));
					generalReport.setAppWeaverCreditScheme(handloomReportResult
							.getString(12));
					generalReport.setDateOfTheDocument1(handloomReportResult
							.getDate(13));
					generalReport.setSanctionDate(handloomReportResult
							.getDate(14));
					generalReport.setApprovedDate(handloomReportResult
							.getDate(15));
				}

				handloomReportResult.close();
				handloomReportResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;
			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		Log.log(4, "ReportDAO", "dcHandiCraftReportDetails", "Exited");
		return handloomDetails;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */

	public ArrayList NPAReportDetails(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Log.log(4, "ReportDAO", "NPAReportDetails", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList npaDetails = new ArrayList();
		ResultSet danRaisedResult = null;
		Connection connection = DBConnection.getConnection();

		String memidfield = "";
		String bnkid = "";
		String zneid = "";
		String brnid = "";

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {
				try {
					String query = " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,  DECODE(MEM_BRANCH_NAME,NULL, "
							+ " APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, "
							+ " S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS,  APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT, "
							+ " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,  NPA_REASONS_TURNING_NPA REASON,NTD_NPA_PRINCIPAL_OS_AMT+NTD_NPA_INTEREST_OS_AMT osamt,"
							+ "DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT),N.NPASUBLASTRCVDAMT,N.NPASUBLASTRCVDDT  "
							+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL_TEMP N,MEMBER_INFO M,NPA_TC_DETAIL_TEMP N2   "
							+ " WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID   "
							+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
							+ " AND APP_STATUS NOT IN ('RE')   "
							+ " AND TRUNC(NPA_EFFECTIVE_DT) BETWEEN ? AND ?  AND N.NPA_ID=N2.NPA_ID AND A.CGPAN=N2.CGPAN "
							+ "UNION ALL   "
							+ " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,  DECODE(MEM_BRANCH_NAME,NULL, "
							+ " APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, "
							+ " S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS,  APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT, "
							+ " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,  NPA_REASONS_TURNING_NPA REASON,NWD_NPA_PRINCIPAL_OS_AMT+NWD_NPA_INTEREST_OS_AMT osamt,"
							+ "DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT),N.NPASUBLASTRCVDAMT,N.NPASUBLASTRCVDDT  "
							+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL_TEMP N,MEMBER_INFO M,NPA_WC_DETAIL_TEMP N2   "
							+ " WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID   "
							+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
							+ " AND APP_STATUS NOT IN ('RE')   "
							+ " AND TRUNC(NPA_EFFECTIVE_DT) BETWEEN ? AND ?  AND N.NPA_ID=N2.NPA_ID AND A.CGPAN=N2.CGPAN "
							+ " UNION ALL  "
							+ " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, "
							+ " DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  "
							+ " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID,  S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS, "
							+ " APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT,  "
							+ " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,NPA_REASONS_TURNING_NPA REASON,NTD_NPA_PRINCIPAL_OS_AMT+NTD_NPA_INTEREST_OS_AMT osamt,"
							+ " DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT),N.NPASUBLASTRCVDAMT,N.NPASUBLASTRCVDDT "
							+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL N,MEMBER_INFO M,NPA_TC_DETAIL N2  WHERE "
							+ " A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID  "
							+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
							+ " AND APP_STATUS NOT IN ('RE')  AND TRUNC(NPA_EFFECTIVE_DT) "
							+ " BETWEEN ? AND ?  AND N.NPA_ID=N2.NPA_ID AND A.CGPAN=N2.CGPAN "
							+ " UNION ALL  "
							+ " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, "
							+ " DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  "
							+ " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID,  S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS, "
							+ " APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT,  "
							+ " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,NPA_REASONS_TURNING_NPA REASON,NWD_NPA_PRINCIPAL_OS_AMT+NWD_NPA_INTEREST_OS_AMT osamt,"
							+ " DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT),N.NPASUBLASTRCVDAMT,N.NPASUBLASTRCVDDT "
							+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL N,MEMBER_INFO M,NPA_WC_DETAIL N2  WHERE "
							+ " A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID  "
							+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
							+ " AND APP_STATUS NOT IN ('RE')  AND TRUNC(NPA_EFFECTIVE_DT) "
							+ " BETWEEN ? AND ?  AND N.NPA_ID=N2.NPA_ID AND A.CGPAN=N2.CGPAN "
							+ " UNION ALL "
							+ " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,DECODE (MEM_BRANCH_NAME, NULL, \n"
							+ " APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, \n"
							+ " S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS,  APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT, \n"
							+ " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,  NPA_REASONS_TURNING_NPA REASON,npa_outstanding_amt_on_npa_dt osamt, \n"
							+ " DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT),N.NPASUBLASTRCVDAMT,N.NPASUBLASTRCVDDT                                \n"
							+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL_TEMP N,MEMBER_INFO M   \n"
							+ " WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID   \n"
							+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  \n"
							+ " AND APP_STATUS NOT IN ('RE')   \n"
							+ " AND TRUNC(NPA_EFFECTIVE_DT) BETWEEN ? AND ?  "
							+ " and n.npa_id not in\n"
							+ " (select npa_id from npa_tc_detail_Temp\n"
							+ "  union all\n"
							+ "  select npa_id from npa_wc_detail_Temp \n"
							+ "  union all\n"
							+ "  select npa_id from npa_tc_detail\n"
							+ "  union all\n"
							+ "  select npa_id from npa_wc_detail\n"
							+ "  )"
							+ " UNION ALL "
							+ " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,DECODE (MEM_BRANCH_NAME, NULL, \n"
							+ " APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, \n"
							+ " S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS,  APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT, \n"
							+ " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,  NPA_REASONS_TURNING_NPA REASON,npa_outstanding_amt_on_npa_dt osamt, \n"
							+ " DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT),N.NPASUBLASTRCVDAMT,N.NPASUBLASTRCVDDT  \n"
							+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL N,MEMBER_INFO M   \n"
							+ " WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID   \n"
							+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  \n"
							+ " AND APP_STATUS NOT IN ('RE')   \n"
							+ " AND TRUNC(NPA_EFFECTIVE_DT) BETWEEN ? AND ?  "
							+ " and n.npa_id not in\n"
							+ " (select npa_id from npa_tc_detail_Temp\n"
							+ "  union all\n"
							+ "  select npa_id from npa_wc_detail_Temp \n"
							+ "  union all\n"
							+ "  select npa_id from npa_tc_detail\n"
							+ "  union all\n"
							+ "  select npa_id from npa_wc_detail\n"
							+ "  )"
							+ "  ORDER BY 1,2,3,5 ";

					danRaisedStmt = connection.prepareStatement(query);
					danRaisedStmt.setDate(1, startDate);
					danRaisedStmt.setDate(2, endDate);
					danRaisedStmt.setDate(3, startDate);
					danRaisedStmt.setDate(4, endDate);

					danRaisedStmt.setDate(5, startDate);
					danRaisedStmt.setDate(6, endDate);
					danRaisedStmt.setDate(7, startDate);
					danRaisedStmt.setDate(8, endDate);

					danRaisedStmt.setDate(9, startDate);
					danRaisedStmt.setDate(10, endDate);
					danRaisedStmt.setDate(11, startDate);
					danRaisedStmt.setDate(12, endDate);
					GeneralReport generalReport;
					for (danRaisedResult = danRaisedStmt.executeQuery(); danRaisedResult
							.next(); npaDetails.add(generalReport)) {
						generalReport = new GeneralReport();
						generalReport.setBankName(danRaisedResult.getString(1));
						generalReport.setZoneName(danRaisedResult.getString(2));
						generalReport.setName(danRaisedResult.getString(3));
						generalReport.setMemberId(danRaisedResult.getString(4));
						generalReport.setSsiName(danRaisedResult.getString(5));
						generalReport.setCgpan(danRaisedResult.getString(6));
						generalReport.setStatus(danRaisedResult.getString(7));
						generalReport.setDateOfTheDocument(danRaisedResult
								.getDate(8));
						generalReport.setDateOfTheDocument1(danRaisedResult
								.getDate(9));
						generalReport.setDateOfTheDocument10(danRaisedResult
								.getDate(10));
						generalReport.setSubject(danRaisedResult.getString(11));
						generalReport.setAmount(danRaisedResult.getDouble(12));
						generalReport.setCumAmount(danRaisedResult
								.getDouble(13));
						// generalReport.setSubAmt(danRaisedResult.getDouble(14));
						// generalReport.setSubDt(danRaisedResult.getDate(15));
					}

					danRaisedResult.close();
					danRaisedResult = null;
					danRaisedStmt.close();
					danRaisedStmt = null;
				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			} else {

				bnkid = id.substring(0, 4);
				zneid = id.substring(4, 8);
				brnid = id.substring(8, 12);

			}

			try {
				String query = " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,  DECODE(MEM_BRANCH_NAME,NULL, "
						+ " APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, "
						+ " S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS,  APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT, "
						+ " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,  NPA_REASONS_TURNING_NPA REASON,NTD_NPA_PRINCIPAL_OS_AMT + NTD_NPA_INTEREST_OS_AMT osamt,"
						+ "DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT),N.NPASUBLASTRCVDAMT,N.NPASUBLASTRCVDDT  "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL_TEMP N,MEMBER_INFO M,NPA_TC_DETAIL_TEMP N2   "
						+ " WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID   "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND APP_STATUS NOT IN ('RE')   "
						+ " AND TRUNC(NPA_EFFECTIVE_DT) BETWEEN ? AND ?  AND "
						+ "  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID= ?  AND N.NPA_ID=N2.NPA_ID AND A.CGPAN=N2.CGPAN "
						+ " UNION ALL  "
						+ " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,  DECODE(MEM_BRANCH_NAME,NULL, "
						+ " APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, "
						+ " S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS,  APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT, "
						+ " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,  NPA_REASONS_TURNING_NPA REASON,NWD_NPA_PRINCIPAL_OS_AMT + NWD_NPA_INTEREST_OS_AMT osamt,"
						+ "DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT),N.NPASUBLASTRCVDAMT,N.NPASUBLASTRCVDDT  "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL_TEMP N,MEMBER_INFO M,NPA_WC_DETAIL_TEMP N2   "
						+ " WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID   "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND APP_STATUS NOT IN ('RE')   "
						+ " AND TRUNC(NPA_EFFECTIVE_DT) BETWEEN ? AND ?  AND "
						+ "  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID= ?  AND N.NPA_ID=N2.NPA_ID AND A.CGPAN=N2.CGPAN "
						+ " UNION ALL  "
						+ " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, "
						+ " DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  "
						+ " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID,  S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS, "
						+ " APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT,  "
						+ " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,NPA_REASONS_TURNING_NPA REASON,NTD_NPA_PRINCIPAL_OS_AMT + NTD_NPA_INTEREST_OS_AMT osamt,"
						+ "DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT),N.NPASUBLASTRCVDAMT,N.NPASUBLASTRCVDDT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL N,MEMBER_INFO M,NPA_TC_DETAIL N2  WHERE "
						+ " A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID  "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " AND TRUNC(NPA_EFFECTIVE_DT) BETWEEN ? AND ?  AND "
						+ "  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID= ?  AND N.NPA_ID=N2.NPA_ID AND A.CGPAN=N2.CGPAN "
						+ " UNION ALL  "
						+ " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, "
						+ " DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  "
						+ " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID,  S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS, "
						+ " APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT,  "
						+ " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,NPA_REASONS_TURNING_NPA REASON,NWD_NPA_PRINCIPAL_OS_AMT + NWD_NPA_INTEREST_OS_AMT osamt,"
						+ "DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT),N.NPASUBLASTRCVDAMT,N.NPASUBLASTRCVDDT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL N,MEMBER_INFO M,NPA_WC_DETAIL N2  WHERE "
						+ " A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID  "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " AND TRUNC(NPA_EFFECTIVE_DT) BETWEEN ? AND ?  AND "
						+ "  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID= ?  AND N.NPA_ID=N2.NPA_ID AND A.CGPAN=N2.CGPAN "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,DECODE (MEM_BRANCH_NAME, NULL, \n"
						+ " APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, \n"
						+ " S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS,  APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT, \n"
						+ " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,  NPA_REASONS_TURNING_NPA REASON,npa_outstanding_amt_on_npa_dt osamt, \n"
						+ " DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT),N.NPASUBLASTRCVDAMT,N.NPASUBLASTRCVDDT                                \n"
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL_TEMP N,MEMBER_INFO M   \n"
						+ " WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID   \n"
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  \n"
						+ " AND APP_STATUS NOT IN ('RE')   \n"
						+ " AND TRUNC(NPA_EFFECTIVE_DT) BETWEEN ? AND ? AND "
						+ "  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID= ?   and n.npa_id not in\n"
						+ " (select npa_id from npa_tc_detail_Temp\n"
						+ "  union all\n"
						+ "  select npa_id from npa_wc_detail_Temp \n"
						+ "  union all\n"
						+ "  select npa_id from npa_tc_detail\n"
						+ "  union all\n"
						+ "  select npa_id from npa_wc_detail\n"
						+ "  )"
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,DECODE (MEM_BRANCH_NAME, NULL, \n"
						+ " APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, \n"
						+ " S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS,  APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT, \n"
						+ " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,  NPA_REASONS_TURNING_NPA REASON,npa_outstanding_amt_on_npa_dt osamt, \n"
						+ " DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT),N.NPASUBLASTRCVDAMT,N.NPASUBLASTRCVDDT                                \n"
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL N,MEMBER_INFO M   \n"
						+ " WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID   \n"
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  \n"
						+ " AND APP_STATUS NOT IN ('RE')   \n"
						+ " AND TRUNC(NPA_EFFECTIVE_DT) BETWEEN ? AND ?  AND "
						+ "  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID= ?  and n.npa_id not in\n"
						+ " (select npa_id from npa_tc_detail_Temp\n"
						+ "  union all\n"
						+ "  select npa_id from npa_wc_detail_Temp \n"
						+ "  union all\n"
						+ "  select npa_id from npa_tc_detail\n"
						+ "  union all\n"
						+ "  select npa_id from npa_wc_detail\n"
						+ "  )"
						+ "  ORDER BY 1,2,3,5 ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, id);
				danRaisedStmt.setDate(4, startDate);
				danRaisedStmt.setDate(5, endDate);
				danRaisedStmt.setString(6, id);

				danRaisedStmt.setDate(7, startDate);
				danRaisedStmt.setDate(8, endDate);
				danRaisedStmt.setString(9, id);
				danRaisedStmt.setDate(10, startDate);
				danRaisedStmt.setDate(11, endDate);
				danRaisedStmt.setString(12, id);

				danRaisedStmt.setDate(13, startDate);
				danRaisedStmt.setDate(14, endDate);
				danRaisedStmt.setString(15, id);
				danRaisedStmt.setDate(16, startDate);
				danRaisedStmt.setDate(17, endDate);
				danRaisedStmt.setString(18, id);
				GeneralReport generalReport;
				for (danRaisedResult = danRaisedStmt.executeQuery(); danRaisedResult
						.next(); npaDetails.add(generalReport)) {
					generalReport = new GeneralReport();
					generalReport.setBankName(danRaisedResult.getString(1));
					generalReport.setZoneName(danRaisedResult.getString(2));
					generalReport.setName(danRaisedResult.getString(3));
					generalReport.setMemberId(danRaisedResult.getString(4));
					generalReport.setSsiName(danRaisedResult.getString(5));
					generalReport.setCgpan(danRaisedResult.getString(6));
					generalReport.setStatus(danRaisedResult.getString(7));
					generalReport.setDateOfTheDocument(danRaisedResult
							.getDate(8));
					generalReport.setDateOfTheDocument1(danRaisedResult
							.getDate(9));
					generalReport.setDateOfTheDocument10(danRaisedResult
							.getDate(10));
					generalReport.setSubject(danRaisedResult.getString(11));
					generalReport.setAmount(danRaisedResult.getDouble(12));
					generalReport.setCumAmount(danRaisedResult.getDouble(13));
					// generalReport.setSubAmt(danRaisedResult.getDouble(14));
					// generalReport.setSubDt(danRaisedResult.getDate(15));
				}

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;
			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		Log.log(4, "ReportDAO", "NPAReportDetails", "Exited");
		return npaDetails;
	}

	/*
	 * public ArrayList NPAReportDetailsOLD(java.sql.Date startDate,
	 * java.sql.Date endDate, String id) throws DatabaseException { Log.log(4,
	 * "ReportDAO", "NPAReportDetails", "Entered"); PreparedStatement
	 * danRaisedStmt = null; ArrayList npaDetails = new ArrayList(); ResultSet
	 * danRaisedResult = null; Connection connection =
	 * DBConnection.getConnection(); if (startDate != null) { if ((id == null)
	 * || (id.equals(""))) { try { String query =
	 * " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,  DECODE(MEM_BRANCH_NAME,NULL, "
	 * +
	 * " APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, "
	 * +
	 * " S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS,  APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT, "
	 * +
	 * " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,  NPA_REASONS_TURNING_NPA REASON,NPA_OUTSTANDING_AMT_ON_NPA_DT,DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)  "
	 * +
	 * " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL_TEMP N,MEMBER_INFO M   "
	 * +
	 * " WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID   "
	 * +
	 * " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
	 * + " AND APP_STATUS NOT IN ('RE')   " +
	 * " AND TRUNC(NPA_EFFECTIVE_DT) BETWEEN ? AND ?   " + " UNION ALL  " +
	 * " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, " +
	 * " DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  "
	 * +
	 * " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID,  S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS, "
	 * + " APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT,  " +
	 * " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,NPA_REASONS_TURNING_NPA REASON,NPA_OUTSTANDING_AMT_ON_NPA_DT,DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT) "
	 * +
	 * " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL N,MEMBER_INFO M  WHERE "
	 * + " A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID  " +
	 * " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
	 * + " AND APP_STATUS NOT IN ('RE')  AND TRUNC(NPA_EFFECTIVE_DT) " +
	 * " BETWEEN ? AND ?  " + "  ORDER BY 1,2,3,5 ";
	 * 
	 * 
	 * danRaisedStmt = connection.prepareStatement(query);
	 * danRaisedStmt.setDate(1, startDate); danRaisedStmt.setDate(2, endDate);
	 * danRaisedStmt.setDate(3, startDate); danRaisedStmt.setDate(4, endDate);
	 * GeneralReport generalReport; for (danRaisedResult =
	 * danRaisedStmt.executeQuery(); danRaisedResult.next();
	 * npaDetails.add(generalReport)) { generalReport = new GeneralReport();
	 * generalReport.setBankName(danRaisedResult.getString(1));
	 * generalReport.setZoneName(danRaisedResult.getString(2));
	 * generalReport.setName(danRaisedResult.getString(3));
	 * generalReport.setMemberId(danRaisedResult.getString(4));
	 * generalReport.setSsiName(danRaisedResult.getString(5));
	 * generalReport.setCgpan(danRaisedResult.getString(6));
	 * generalReport.setStatus(danRaisedResult.getString(7));
	 * generalReport.setDateOfTheDocument(danRaisedResult.getDate(8));
	 * generalReport.setDateOfTheDocument1(danRaisedResult.getDate(9));
	 * generalReport.setDateOfTheDocument10(danRaisedResult.getDate(10));
	 * generalReport.setSubject(danRaisedResult.getString(11));
	 * generalReport.setAmount(danRaisedResult.getDouble(12));
	 * generalReport.setCumAmount(danRaisedResult.getDouble(13)); }
	 * 
	 * danRaisedResult.close(); danRaisedResult = null; danRaisedStmt.close();
	 * danRaisedStmt = null; } catch (Exception exception) {
	 * Log.logException(exception); throw new
	 * DatabaseException(exception.getMessage()); } finally {
	 * DBConnection.freeConnection(connection); } } else { try { String query =
	 * " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,  DECODE(MEM_BRANCH_NAME,NULL, "
	 * +
	 * " APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, "
	 * +
	 * " S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS,  APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT, "
	 * +
	 * " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,  NPA_REASONS_TURNING_NPA REASON,NPA_OUTSTANDING_AMT_ON_NPA_DT,DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)  "
	 * +
	 * " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL_TEMP N,MEMBER_INFO M   "
	 * +
	 * " WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID   "
	 * +
	 * " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
	 * + " AND APP_STATUS NOT IN ('RE')   " +
	 * " AND TRUNC(NPA_EFFECTIVE_DT) BETWEEN ? AND ?  AND M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID = ? "
	 * + " UNION ALL  " + " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, "
	 * +
	 * " DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  "
	 * +
	 * " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID,  S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS, "
	 * + " APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT,  " +
	 * " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,NPA_REASONS_TURNING_NPA REASON,NPA_OUTSTANDING_AMT_ON_NPA_DT,DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT) "
	 * +
	 * " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL N,MEMBER_INFO M  WHERE "
	 * + " A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID  " +
	 * " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
	 * + " AND APP_STATUS NOT IN ('RE')  AND TRUNC(NPA_EFFECTIVE_DT) " +
	 * " BETWEEN ? AND ? AND M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID= ? " +
	 * "  ORDER BY 1,2,3,5 ";
	 * 
	 * 
	 * danRaisedStmt = connection.prepareStatement(query);
	 * danRaisedStmt.setDate(1, startDate); danRaisedStmt.setDate(2, endDate);
	 * danRaisedStmt.setString(3, id); danRaisedStmt.setDate(4, startDate);
	 * danRaisedStmt.setDate(5, endDate); danRaisedStmt.setString(6, id);
	 * GeneralReport generalReport; for (danRaisedResult =
	 * danRaisedStmt.executeQuery(); danRaisedResult.next();
	 * npaDetails.add(generalReport)) { generalReport = new GeneralReport();
	 * generalReport.setBankName(danRaisedResult.getString(1));
	 * generalReport.setZoneName(danRaisedResult.getString(2));
	 * generalReport.setName(danRaisedResult.getString(3));
	 * generalReport.setMemberId(danRaisedResult.getString(4));
	 * generalReport.setSsiName(danRaisedResult.getString(5));
	 * generalReport.setCgpan(danRaisedResult.getString(6));
	 * generalReport.setStatus(danRaisedResult.getString(7));
	 * generalReport.setDateOfTheDocument(danRaisedResult.getDate(8));
	 * generalReport.setDateOfTheDocument1(danRaisedResult.getDate(9));
	 * generalReport.setDateOfTheDocument10(danRaisedResult.getDate(10));
	 * generalReport.setSubject(danRaisedResult.getString(11));
	 * generalReport.setAmount(danRaisedResult.getDouble(12));
	 * generalReport.setCumAmount(danRaisedResult.getDouble(13)); }
	 * 
	 * danRaisedResult.close(); danRaisedResult = null; danRaisedStmt.close();
	 * danRaisedStmt = null; } catch (Exception exception) {
	 * Log.logException(exception); throw new
	 * DatabaseException(exception.getMessage()); } finally {
	 * DBConnection.freeConnection(connection); }
	 * 
	 * } } else if (startDate == null) { if ((id == null) || (id.equals(""))) {
	 * try { String query =
	 * " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,  DECODE(MEM_BRANCH_NAME,NULL, "
	 * +
	 * " APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, "
	 * +
	 * " S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS,  APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT, "
	 * +
	 * " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,  NPA_REASONS_TURNING_NPA REASON,NPA_OUTSTANDING_AMT_ON_NPA_DT,DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)  "
	 * +
	 * " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL_TEMP N,MEMBER_INFO M   "
	 * +
	 * " WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID   "
	 * +
	 * " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
	 * + " AND APP_STATUS NOT IN ('RE')   " +
	 * " AND TRUNC(NPA_EFFECTIVE_DT) <= ?   " + " UNION ALL  " +
	 * " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, " +
	 * " DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  "
	 * +
	 * " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID,  S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS, "
	 * + " APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT,  " +
	 * " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,NPA_REASONS_TURNING_NPA REASON,NPA_OUTSTANDING_AMT_ON_NPA_DT,DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT) "
	 * +
	 * " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL N,MEMBER_INFO M  WHERE "
	 * + " A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID  " +
	 * " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
	 * + " AND APP_STATUS NOT IN ('RE')  AND TRUNC(NPA_EFFECTIVE_DT) " +
	 * " BETWEEN <= ?  ORDER BY 1,2,3,5 "; danRaisedStmt =
	 * connection.prepareStatement(query); danRaisedStmt.setDate(1, endDate);
	 * danRaisedStmt.setDate(2, endDate); GeneralReport generalReport; for
	 * (danRaisedResult = danRaisedStmt.executeQuery(); danRaisedResult.next();
	 * npaDetails.add(generalReport)) { generalReport = new GeneralReport();
	 * generalReport.setBankName(danRaisedResult.getString(1));
	 * generalReport.setZoneName(danRaisedResult.getString(2));
	 * generalReport.setName(danRaisedResult.getString(3));
	 * generalReport.setMemberId(danRaisedResult.getString(4));
	 * generalReport.setSsiName(danRaisedResult.getString(5));
	 * generalReport.setCgpan(danRaisedResult.getString(6));
	 * generalReport.setStatus(danRaisedResult.getString(7));
	 * generalReport.setDateOfTheDocument(danRaisedResult.getDate(8));
	 * generalReport.setDateOfTheDocument1(danRaisedResult.getDate(9));
	 * generalReport.setDateOfTheDocument10(danRaisedResult.getDate(10));
	 * generalReport.setSubject(danRaisedResult.getString(11));
	 * generalReport.setAmount(danRaisedResult.getDouble(12));
	 * generalReport.setCumAmount(danRaisedResult.getDouble(13)); }
	 * 
	 * danRaisedResult.close(); danRaisedResult = null; danRaisedStmt.close();
	 * danRaisedStmt = null; } catch (Exception exception) { throw new
	 * DatabaseException(exception.getMessage()); } finally {
	 * DBConnection.freeConnection(connection); } } else {
	 * 
	 * try { String query =
	 * " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,  DECODE(MEM_BRANCH_NAME,NULL, "
	 * +
	 * " APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID, "
	 * +
	 * " S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS,  APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT, "
	 * +
	 * " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,  NPA_REASONS_TURNING_NPA REASON,NPA_OUTSTANDING_AMT_ON_NPA_DT,DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)  "
	 * +
	 * " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL_TEMP N,MEMBER_INFO M   "
	 * +
	 * " WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID   "
	 * +
	 * " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
	 * + " AND APP_STATUS NOT IN ('RE')   " +
	 * " AND TRUNC(NPA_EFFECTIVE_DT) <= ?  AND M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID = ? "
	 * + " UNION ALL  " + " SELECT M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, "
	 * +
	 * " DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH,  "
	 * +
	 * " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID,  S.SSI_UNIT_NAME UNITNAME,A.CGPAN CGPAN,APP_STATUS STATUS, "
	 * + " APP_EXPIRY_DT EXPDT,N.NPA_EFFECTIVE_DT NPADT,  " +
	 * " NPA_CGTSI_REPORTING_DT NPAREPORTINGTOCGTSI,NPA_REASONS_TURNING_NPA REASON,NPA_OUTSTANDING_AMT_ON_NPA_DT,DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT) "
	 * +
	 * " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL N,MEMBER_INFO M  WHERE "
	 * + " A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND S.BID=N.BID  " +
	 * " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
	 * + " AND APP_STATUS NOT IN ('RE')  AND TRUNC(NPA_EFFECTIVE_DT) " +
	 * " BETWEEN <= ? AND M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID=? ORDER BY 1,2,3,5 "
	 * ; danRaisedStmt = connection.prepareStatement(query);
	 * danRaisedStmt.setDate(1, endDate); danRaisedStmt.setString(2, id);
	 * danRaisedStmt.setDate(3, endDate); danRaisedStmt.setString(4, id);
	 * GeneralReport generalReport; for (danRaisedResult =
	 * danRaisedStmt.executeQuery(); danRaisedResult.next();
	 * npaDetails.add(generalReport)) { generalReport = new GeneralReport();
	 * generalReport.setBankName(danRaisedResult.getString(1));
	 * generalReport.setZoneName(danRaisedResult.getString(2));
	 * generalReport.setName(danRaisedResult.getString(3));
	 * generalReport.setMemberId(danRaisedResult.getString(4));
	 * generalReport.setSsiName(danRaisedResult.getString(5));
	 * generalReport.setCgpan(danRaisedResult.getString(6));
	 * generalReport.setStatus(danRaisedResult.getString(7));
	 * generalReport.setDateOfTheDocument(danRaisedResult.getDate(8));
	 * generalReport.setDateOfTheDocument1(danRaisedResult.getDate(9));
	 * generalReport.setDateOfTheDocument10(danRaisedResult.getDate(10));
	 * generalReport.setSubject(danRaisedResult.getString(11));
	 * generalReport.setAmount(danRaisedResult.getDouble(12));
	 * generalReport.setCumAmount(danRaisedResult.getDouble(13)); }
	 * 
	 * danRaisedResult.close(); danRaisedResult = null; danRaisedStmt.close();
	 * danRaisedStmt = null; } catch (Exception exception) { throw new
	 * DatabaseException(exception.getMessage()); } finally {
	 * DBConnection.freeConnection(connection); } }
	 * 
	 * } Log.log(4, "ReportDAO", "NPAReportDetails", "Exited"); return
	 * npaDetails; }
	 */

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList declarationReceivedCases(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {
		Log.log(4, "ReportDAO", "declarationReceivedCases", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList declarationReceivedCases = new ArrayList();
		ResultSet danRaisedResult = null;
		Connection connection = DBConnection.getConnection();
		if (startDate != null)
			try {
				String query = " SELECT M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID, "
						+ " C.CLM_REF_NO,S.SSI_UNIT_NAME,CLM_DATE CLMDT,CLM_STATUS,CLM_DECLARATION_RECVD,  "
						+ " CLM_DECL_RECVD_DT,SUM(CAA_APPLIED_AMOUNT) FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S,MEMBER_INFO M, "
						+ " CLAIM_APPLICATION_AMOUNT_TEMP D "
						+ " WHERE C.BID=S.BID "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " AND TRUNC(CLM_DECL_RECVD_DT) BETWEEN ? AND ? "
						+ " AND CLM_DECLARATION_RECVD = 'Y' "
						+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,C.CLM_REF_NO, "
						+ " S.SSI_UNIT_NAME,CLM_DATE,CLM_STATUS,CLM_DECLARATION_RECVD,CLM_DECL_RECVD_DT "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID, "
						+ " C.CLM_REF_NO,S.SSI_UNIT_NAME,CLM_DATE CLMDT,CLM_STATUS,CLM_DECLARATION_RECVD, "
						+ " CLM_DECL_RECVD_DT,SUM(CAA_APPLIED_AMOUNT) FROM CLAIM_DETAIL C,SSI_DETAIL S,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D "
						+ " WHERE C.BID=S.BID "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " AND TRUNC(CLM_DECL_RECVD_DT) BETWEEN ? AND ? "
						+ " AND CLM_DECLARATION_RECVD = 'Y' "
						+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,C.CLM_REF_NO, "
						+ " S.SSI_UNIT_NAME,CLM_DATE,CLM_STATUS,CLM_DECLARATION_RECVD,CLM_DECL_RECVD_DT "
						+ " ORDER BY 9,1,2 ";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setDate(3, startDate);
				danRaisedStmt.setDate(4, endDate);
				GeneralReport generalReport;
				for (danRaisedResult = danRaisedStmt.executeQuery(); danRaisedResult
						.next(); declarationReceivedCases.add(generalReport)) {
					generalReport = new GeneralReport();
					generalReport.setBankName(danRaisedResult.getString(1));
					generalReport.setZoneName(danRaisedResult.getString(2));
					generalReport.setMemberId(danRaisedResult.getString(3));
					generalReport.setAppRefNo(danRaisedResult.getString(4));
					generalReport.setName(danRaisedResult.getString(5));
					generalReport.setDateOfTheDocument(danRaisedResult
							.getDate(6));
					generalReport.setSsiName(danRaisedResult.getString(7));
					generalReport.setStatus(danRaisedResult.getString(8));
					generalReport.setDateOfTheDocument10(danRaisedResult
							.getDate(9));
					generalReport.setAmount(danRaisedResult.getDouble(10));

				}

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		else if (startDate == null)
			try {
				String query = " SELECT M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID, "
						+ " C.CLM_REF_NO,S.SSI_UNIT_NAME,CLM_DATE CLMDT,CLM_STATUS,CLM_DECLARATION_RECVD,  "
						+ " CLM_DECL_RECVD_DT,SUM(CAA_APPLIED_AMOUNT) FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S,MEMBER_INFO M, "
						+ " CLAIM_APPLICATION_AMOUNT_TEMP D "
						+ " WHERE C.BID=S.BID "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " AND TRUNC(CLM_DECL_RECVD_DT) <= ? "
						+ " AND CLM_DECLARATION_RECVD = 'Y' "
						+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,C.CLM_REF_NO, "
						+ " S.SSI_UNIT_NAME,CLM_DATE,CLM_STATUS,CLM_DECLARATION_RECVD,CLM_DECL_RECVD_DT "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID, "
						+ " C.CLM_REF_NO,S.SSI_UNIT_NAME,CLM_DATE CLMDT,CLM_STATUS,CLM_DECLARATION_RECVD, "
						+ " CLM_DECL_RECVD_DT,SUM(CAA_APPLIED_AMOUNT) FROM CLAIM_DETAIL C,SSI_DETAIL S,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D "
						+ " WHERE C.BID=S.BID "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " AND TRUNC(CLM_DECL_RECVD_DT) <=? "
						+ " AND CLM_DECLARATION_RECVD = 'Y' "
						+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,C.CLM_REF_NO, "
						+ " S.SSI_UNIT_NAME,CLM_DATE,CLM_STATUS,CLM_DECLARATION_RECVD,CLM_DECL_RECVD_DT "
						+ " ORDER BY 9,1,2 ";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setDate(2, endDate);
				GeneralReport generalReport;
				for (danRaisedResult = danRaisedStmt.executeQuery(); danRaisedResult
						.next(); declarationReceivedCases.add(generalReport)) {
					generalReport = new GeneralReport();
					generalReport.setBankName(danRaisedResult.getString(1));
					generalReport.setZoneName(danRaisedResult.getString(2));
					generalReport.setMemberId(danRaisedResult.getString(3));
					generalReport.setAppRefNo(danRaisedResult.getString(4));
					generalReport.setName(danRaisedResult.getString(5));
					generalReport.setDateOfTheDocument(danRaisedResult
							.getDate(6));
					generalReport.setSsiName(danRaisedResult.getString(7));
					generalReport.setStatus(danRaisedResult.getString(8));
					generalReport.setDateOfTheDocument10(danRaisedResult
							.getDate(9));
					generalReport.setAmount(danRaisedResult.getDouble(10));
				}

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;
			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		Log.log(4, "ReportDAO", "declarationReceivedCases", "Exited");
		return declarationReceivedCases;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @param ssi
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList declarationReceivedCasesNew(java.sql.Date startDate,
			java.sql.Date endDate, String id, String ssi)
			throws DatabaseException {
		Log.log(4, "ReportDAO", "declarationReceivedCasesNew", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList declarationReceivedCases = new ArrayList();
		ResultSet danRaisedResult = null;
		Connection connection = DBConnection.getConnection();
		if (startDate != null) {
			if (((id == null) || (id.equals(""))) && (ssi != null)) {
				try {
					String query = " SELECT M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID, "
							+ " C.CLM_REF_NO,S.SSI_UNIT_NAME,CLM_DATE CLMDT,CLM_STATUS,CLM_DECLARATION_RECVD,  "
							+ " CLM_DECL_RECVD_DT,SUM(CAA_APPLIED_AMOUNT) FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S,MEMBER_INFO M, "
							+ " CLAIM_APPLICATION_AMOUNT_TEMP D "
							+ " WHERE C.BID=S.BID "
							+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
							+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
							+ " AND TRUNC(CLM_DECL_RECVD_DT) BETWEEN ? AND ? "
							+ " AND CLM_DECLARATION_RECVD = 'Y' AND LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
							+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,C.CLM_REF_NO, "
							+ " S.SSI_UNIT_NAME,CLM_DATE,CLM_STATUS,CLM_DECLARATION_RECVD,CLM_DECL_RECVD_DT "
							+ " UNION ALL "
							+ " SELECT M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID, "
							+ " C.CLM_REF_NO,S.SSI_UNIT_NAME,CLM_DATE CLMDT,CLM_STATUS,CLM_DECLARATION_RECVD, "
							+ " CLM_DECL_RECVD_DT,SUM(CAA_APPLIED_AMOUNT) FROM CLAIM_DETAIL C,SSI_DETAIL S,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D "
							+ " WHERE C.BID=S.BID "
							+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
							+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
							+ " AND TRUNC(CLM_DECL_RECVD_DT) BETWEEN ? AND ? "
							+ " AND CLM_DECLARATION_RECVD = 'Y' AND LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
							+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,C.CLM_REF_NO, "
							+ " S.SSI_UNIT_NAME,CLM_DATE,CLM_STATUS,CLM_DECLARATION_RECVD,CLM_DECL_RECVD_DT "
							+ " ORDER BY 9,1,2 ";
					danRaisedStmt = connection.prepareStatement(query);
					danRaisedStmt.setDate(1, startDate);
					danRaisedStmt.setDate(2, endDate);
					danRaisedStmt.setString(3, "%" + ssi + "%");
					danRaisedStmt.setDate(4, startDate);
					danRaisedStmt.setDate(5, endDate);
					danRaisedStmt.setString(6, "%" + ssi + "%");

					GeneralReport generalReport;
					for (danRaisedResult = danRaisedStmt.executeQuery(); danRaisedResult
							.next(); declarationReceivedCases
							.add(generalReport)) {
						generalReport = new GeneralReport();
						generalReport.setBankName(danRaisedResult.getString(1));
						generalReport.setZoneName(danRaisedResult.getString(2));
						generalReport.setMemberId(danRaisedResult.getString(3));
						generalReport.setAppRefNo(danRaisedResult.getString(4));
						generalReport.setName(danRaisedResult.getString(5));
						generalReport.setDateOfTheDocument(danRaisedResult
								.getDate(6));
						generalReport.setSsiName(danRaisedResult.getString(7));
						generalReport.setStatus(danRaisedResult.getString(8));
						generalReport.setDateOfTheDocument10(danRaisedResult
								.getDate(9));
						generalReport.setAmount(danRaisedResult.getDouble(10));

					}

					danRaisedResult.close();
					danRaisedResult = null;
					danRaisedStmt.close();
					danRaisedStmt = null;
				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}

			} else if (((ssi == null) || (ssi.equals(""))) && (id != null)) {
				try {
					String query = " SELECT M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID, "
							+ " C.CLM_REF_NO,S.SSI_UNIT_NAME,CLM_DATE CLMDT,CLM_STATUS,CLM_DECLARATION_RECVD,  "
							+ " CLM_DECL_RECVD_DT,SUM(CAA_APPLIED_AMOUNT) FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S,MEMBER_INFO M, "
							+ " CLAIM_APPLICATION_AMOUNT_TEMP D "
							+ " WHERE C.BID=S.BID "
							+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
							+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
							+ " AND TRUNC(CLM_DECL_RECVD_DT) BETWEEN ? AND ? "
							+ " AND CLM_DECLARATION_RECVD = 'Y' AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID= ? "
							+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,C.CLM_REF_NO, "
							+ " S.SSI_UNIT_NAME,CLM_DATE,CLM_STATUS,CLM_DECLARATION_RECVD,CLM_DECL_RECVD_DT "
							+ " UNION ALL "
							+ " SELECT M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID, "
							+ " C.CLM_REF_NO,S.SSI_UNIT_NAME,CLM_DATE CLMDT,CLM_STATUS,CLM_DECLARATION_RECVD, "
							+ " CLM_DECL_RECVD_DT,SUM(CAA_APPLIED_AMOUNT) FROM CLAIM_DETAIL C,SSI_DETAIL S,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D "
							+ " WHERE C.BID=S.BID "
							+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
							+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
							+ " AND TRUNC(CLM_DECL_RECVD_DT) BETWEEN ? AND ? "
							+ " AND CLM_DECLARATION_RECVD = 'Y' AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID= ? "
							+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,C.CLM_REF_NO, "
							+ " S.SSI_UNIT_NAME,CLM_DATE,CLM_STATUS,CLM_DECLARATION_RECVD,CLM_DECL_RECVD_DT "
							+ " ORDER BY 9,1,2 ";
					danRaisedStmt = connection.prepareStatement(query);
					danRaisedStmt.setDate(1, startDate);
					danRaisedStmt.setDate(2, endDate);
					danRaisedStmt.setString(3, id);
					danRaisedStmt.setDate(4, startDate);
					danRaisedStmt.setDate(5, endDate);
					danRaisedStmt.setString(6, id);

					GeneralReport generalReport;
					for (danRaisedResult = danRaisedStmt.executeQuery(); danRaisedResult
							.next(); declarationReceivedCases
							.add(generalReport)) {
						generalReport = new GeneralReport();
						generalReport.setBankName(danRaisedResult.getString(1));
						generalReport.setZoneName(danRaisedResult.getString(2));
						generalReport.setMemberId(danRaisedResult.getString(3));
						generalReport.setAppRefNo(danRaisedResult.getString(4));
						generalReport.setName(danRaisedResult.getString(5));
						generalReport.setDateOfTheDocument(danRaisedResult
								.getDate(6));
						generalReport.setSsiName(danRaisedResult.getString(7));
						generalReport.setStatus(danRaisedResult.getString(8));
						generalReport.setDateOfTheDocument10(danRaisedResult
								.getDate(9));
						generalReport.setAmount(danRaisedResult.getDouble(10));

					}

					danRaisedResult.close();
					danRaisedResult = null;
					danRaisedStmt.close();
					danRaisedStmt = null;
				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}

			} else {
				try {
					String query = " SELECT M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID, "
							+ " C.CLM_REF_NO,S.SSI_UNIT_NAME,CLM_DATE CLMDT,CLM_STATUS,CLM_DECLARATION_RECVD,  "
							+ " CLM_DECL_RECVD_DT,SUM(CAA_APPLIED_AMOUNT) FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S,MEMBER_INFO M, "
							+ " CLAIM_APPLICATION_AMOUNT_TEMP D "
							+ " WHERE C.BID=S.BID "
							+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
							+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
							+ " AND TRUNC(CLM_DECL_RECVD_DT) BETWEEN ? AND ? "
							+ " AND CLM_DECLARATION_RECVD = 'Y' AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID= ?  AND LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
							+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,C.CLM_REF_NO, "
							+ " S.SSI_UNIT_NAME,CLM_DATE,CLM_STATUS,CLM_DECLARATION_RECVD,CLM_DECL_RECVD_DT "
							+ " UNION ALL "
							+ " SELECT M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID, "
							+ " C.CLM_REF_NO,S.SSI_UNIT_NAME,CLM_DATE CLMDT,CLM_STATUS,CLM_DECLARATION_RECVD, "
							+ " CLM_DECL_RECVD_DT,SUM(CAA_APPLIED_AMOUNT) FROM CLAIM_DETAIL C,SSI_DETAIL S,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D "
							+ " WHERE C.BID=S.BID "
							+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
							+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
							+ " AND TRUNC(CLM_DECL_RECVD_DT) BETWEEN ? AND ? "
							+ " AND CLM_DECLARATION_RECVD = 'Y' AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID= ?   AND LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?)))"
							+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,C.CLM_REF_NO, "
							+ " S.SSI_UNIT_NAME,CLM_DATE,CLM_STATUS,CLM_DECLARATION_RECVD,CLM_DECL_RECVD_DT "
							+ " ORDER BY 9,1,2 ";
					danRaisedStmt = connection.prepareStatement(query);
					danRaisedStmt.setDate(1, startDate);
					danRaisedStmt.setDate(2, endDate);
					danRaisedStmt.setString(3, id);
					danRaisedStmt.setString(4, "%" + ssi + "%");
					danRaisedStmt.setDate(5, startDate);
					danRaisedStmt.setDate(6, endDate);
					danRaisedStmt.setString(7, id);
					danRaisedStmt.setString(8, "%" + ssi + "%");

					GeneralReport generalReport;
					for (danRaisedResult = danRaisedStmt.executeQuery(); danRaisedResult
							.next(); declarationReceivedCases
							.add(generalReport)) {
						generalReport = new GeneralReport();
						generalReport.setBankName(danRaisedResult.getString(1));
						generalReport.setZoneName(danRaisedResult.getString(2));
						generalReport.setMemberId(danRaisedResult.getString(3));
						generalReport.setAppRefNo(danRaisedResult.getString(4));
						generalReport.setName(danRaisedResult.getString(5));
						generalReport.setDateOfTheDocument(danRaisedResult
								.getDate(6));
						generalReport.setSsiName(danRaisedResult.getString(7));
						generalReport.setStatus(danRaisedResult.getString(8));
						generalReport.setDateOfTheDocument10(danRaisedResult
								.getDate(9));
						generalReport.setAmount(danRaisedResult.getDouble(10));

					}

					danRaisedResult.close();
					danRaisedResult = null;
					danRaisedStmt.close();
					danRaisedStmt = null;
				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if (((id == null) || (id.equals(""))) && (ssi != null)) {
				try {
					String query = " SELECT M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID, "
							+ " C.CLM_REF_NO,S.SSI_UNIT_NAME,CLM_DATE CLMDT,CLM_STATUS,CLM_DECLARATION_RECVD,  "
							+ " CLM_DECL_RECVD_DT,SUM(CAA_APPLIED_AMOUNT) FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S,MEMBER_INFO M, "
							+ " CLAIM_APPLICATION_AMOUNT_TEMP D "
							+ " WHERE C.BID=S.BID "
							+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
							+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
							+ " AND TRUNC(CLM_DECL_RECVD_DT) <= ? "
							+ " AND CLM_DECLARATION_RECVD = 'Y' AND LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
							+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,C.CLM_REF_NO, "
							+ " S.SSI_UNIT_NAME,CLM_DATE,CLM_STATUS,CLM_DECLARATION_RECVD,CLM_DECL_RECVD_DT "
							+ " UNION ALL "
							+ " SELECT M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID, "
							+ " C.CLM_REF_NO,S.SSI_UNIT_NAME,CLM_DATE CLMDT,CLM_STATUS,CLM_DECLARATION_RECVD, "
							+ " CLM_DECL_RECVD_DT,SUM(CAA_APPLIED_AMOUNT) FROM CLAIM_DETAIL C,SSI_DETAIL S,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D "
							+ " WHERE C.BID=S.BID "
							+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
							+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
							+ " AND TRUNC(CLM_DECL_RECVD_DT) <=? "
							+ " AND CLM_DECLARATION_RECVD = 'Y' AND LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?)))"
							+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,C.CLM_REF_NO, "
							+ " S.SSI_UNIT_NAME,CLM_DATE,CLM_STATUS,CLM_DECLARATION_RECVD,CLM_DECL_RECVD_DT "
							+ " ORDER BY 9,1,2 ";
					danRaisedStmt = connection.prepareStatement(query);
					danRaisedStmt.setDate(1, endDate);
					danRaisedStmt.setString(2, "%" + ssi + "%");
					danRaisedStmt.setDate(3, endDate);
					danRaisedStmt.setString(4, "%" + ssi + "%");
					GeneralReport generalReport;
					for (danRaisedResult = danRaisedStmt.executeQuery(); danRaisedResult
							.next(); declarationReceivedCases
							.add(generalReport)) {
						generalReport = new GeneralReport();
						generalReport.setBankName(danRaisedResult.getString(1));
						generalReport.setZoneName(danRaisedResult.getString(2));
						generalReport.setMemberId(danRaisedResult.getString(3));
						generalReport.setAppRefNo(danRaisedResult.getString(4));
						generalReport.setName(danRaisedResult.getString(5));
						generalReport.setDateOfTheDocument(danRaisedResult
								.getDate(6));
						generalReport.setSsiName(danRaisedResult.getString(7));
						generalReport.setStatus(danRaisedResult.getString(8));
						generalReport.setDateOfTheDocument10(danRaisedResult
								.getDate(9));
						generalReport.setAmount(danRaisedResult.getDouble(10));
					}

					danRaisedResult.close();
					danRaisedResult = null;
					danRaisedStmt.close();
					danRaisedStmt = null;
				} catch (Exception exception) {
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			} else if (((ssi == null) || (ssi.equals(""))) && (id != null)) {
				try {
					String query = " SELECT M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID, "
							+ " C.CLM_REF_NO,S.SSI_UNIT_NAME,CLM_DATE CLMDT,CLM_STATUS,CLM_DECLARATION_RECVD,  "
							+ " CLM_DECL_RECVD_DT,SUM(CAA_APPLIED_AMOUNT) FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S,MEMBER_INFO M, "
							+ " CLAIM_APPLICATION_AMOUNT_TEMP D "
							+ " WHERE C.BID=S.BID "
							+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
							+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
							+ " AND TRUNC(CLM_DECL_RECVD_DT) <= ? "
							+ " AND CLM_DECLARATION_RECVD = 'Y' AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=? "
							+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,C.CLM_REF_NO, "
							+ " S.SSI_UNIT_NAME,CLM_DATE,CLM_STATUS,CLM_DECLARATION_RECVD,CLM_DECL_RECVD_DT "
							+ " UNION ALL "
							+ " SELECT M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID, "
							+ " C.CLM_REF_NO,S.SSI_UNIT_NAME,CLM_DATE CLMDT,CLM_STATUS,CLM_DECLARATION_RECVD, "
							+ " CLM_DECL_RECVD_DT,SUM(CAA_APPLIED_AMOUNT) FROM CLAIM_DETAIL C,SSI_DETAIL S,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D "
							+ " WHERE C.BID=S.BID "
							+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
							+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
							+ " AND TRUNC(CLM_DECL_RECVD_DT) <=? "
							+ " AND CLM_DECLARATION_RECVD = 'Y' AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=? "
							+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,C.CLM_REF_NO, "
							+ " S.SSI_UNIT_NAME,CLM_DATE,CLM_STATUS,CLM_DECLARATION_RECVD,CLM_DECL_RECVD_DT "
							+ " ORDER BY 9,1,2 ";
					danRaisedStmt = connection.prepareStatement(query);
					danRaisedStmt.setDate(1, endDate);
					danRaisedStmt.setString(2, id);
					danRaisedStmt.setDate(3, endDate);
					danRaisedStmt.setString(4, id);
					GeneralReport generalReport;
					for (danRaisedResult = danRaisedStmt.executeQuery(); danRaisedResult
							.next(); declarationReceivedCases
							.add(generalReport)) {
						generalReport = new GeneralReport();
						generalReport.setBankName(danRaisedResult.getString(1));
						generalReport.setZoneName(danRaisedResult.getString(2));
						generalReport.setMemberId(danRaisedResult.getString(3));
						generalReport.setAppRefNo(danRaisedResult.getString(4));
						generalReport.setName(danRaisedResult.getString(5));
						generalReport.setDateOfTheDocument(danRaisedResult
								.getDate(6));
						generalReport.setSsiName(danRaisedResult.getString(7));
						generalReport.setStatus(danRaisedResult.getString(8));
						generalReport.setDateOfTheDocument10(danRaisedResult
								.getDate(9));
						generalReport.setAmount(danRaisedResult.getDouble(10));
					}

					danRaisedResult.close();
					danRaisedResult = null;
					danRaisedStmt.close();
					danRaisedStmt = null;
				} catch (Exception exception) {
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			} else {
				try {
					String query = " SELECT M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID, "
							+ " C.CLM_REF_NO,S.SSI_UNIT_NAME,CLM_DATE CLMDT,CLM_STATUS,CLM_DECLARATION_RECVD,  "
							+ " CLM_DECL_RECVD_DT,SUM(CAA_APPLIED_AMOUNT) FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S,MEMBER_INFO M, "
							+ " CLAIM_APPLICATION_AMOUNT_TEMP D "
							+ " WHERE C.BID=S.BID "
							+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
							+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
							+ " AND TRUNC(CLM_DECL_RECVD_DT) <= ? "
							+ " AND CLM_DECLARATION_RECVD = 'Y' AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=? AND LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
							+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,C.CLM_REF_NO, "
							+ " S.SSI_UNIT_NAME,CLM_DATE,CLM_STATUS,CLM_DECLARATION_RECVD,CLM_DECL_RECVD_DT "
							+ " UNION ALL "
							+ " SELECT M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID, "
							+ " C.CLM_REF_NO,S.SSI_UNIT_NAME,CLM_DATE CLMDT,CLM_STATUS,CLM_DECLARATION_RECVD, "
							+ " CLM_DECL_RECVD_DT,SUM(CAA_APPLIED_AMOUNT) FROM CLAIM_DETAIL C,SSI_DETAIL S,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D "
							+ " WHERE C.BID=S.BID "
							+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
							+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
							+ " AND TRUNC(CLM_DECL_RECVD_DT) <=? "
							+ " AND CLM_DECLARATION_RECVD = 'Y' AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=? AND LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
							+ " GROUP BY M.MEM_BANK_NAME,M.MEM_ZONE_NAME,M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,C.CLM_REF_NO, "
							+ " S.SSI_UNIT_NAME,CLM_DATE,CLM_STATUS,CLM_DECLARATION_RECVD,CLM_DECL_RECVD_DT "
							+ " ORDER BY 9,1,2 ";
					danRaisedStmt = connection.prepareStatement(query);
					danRaisedStmt.setDate(1, endDate);
					danRaisedStmt.setString(2, id);
					danRaisedStmt.setString(3, "%" + ssi + "%");
					danRaisedStmt.setDate(4, endDate);
					danRaisedStmt.setString(5, id);
					danRaisedStmt.setString(6, "%" + ssi + "%");

					GeneralReport generalReport;
					for (danRaisedResult = danRaisedStmt.executeQuery(); danRaisedResult
							.next(); declarationReceivedCases
							.add(generalReport)) {
						generalReport = new GeneralReport();
						generalReport.setBankName(danRaisedResult.getString(1));
						generalReport.setZoneName(danRaisedResult.getString(2));
						generalReport.setMemberId(danRaisedResult.getString(3));
						generalReport.setAppRefNo(danRaisedResult.getString(4));
						generalReport.setName(danRaisedResult.getString(5));
						generalReport.setDateOfTheDocument(danRaisedResult
								.getDate(6));
						generalReport.setSsiName(danRaisedResult.getString(7));
						generalReport.setStatus(danRaisedResult.getString(8));
						generalReport.setDateOfTheDocument10(danRaisedResult
								.getDate(9));
						generalReport.setAmount(danRaisedResult.getDouble(10));
					}

					danRaisedResult.close();
					danRaisedResult = null;
					danRaisedStmt.close();
					danRaisedStmt = null;
				} catch (Exception exception) {
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

		}
		Log.log(4, "ReportDAO", "declarationReceivedCasesNew", "Exited");
		return declarationReceivedCases;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList ddDepositReportDetails(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException

	{
		Log.log(Log.INFO, "ReportDAO", "ddDepositReportDetails", "Entered");

		PreparedStatement danRaisedStmt = null;
		ArrayList ddDepositedCases = new ArrayList();
		ResultSet danRaisedResult = null;
		Connection connection = DBConnection.getConnection();
		if (startDate != null)
			try {
				String query = "SELECT INW_ID,INW_DT,BANK_NAME,DRAWN_ON_BANK,PLACE,INSTRUMENT_NO, "
						+ " INSTRUMENT_DT,INSTRUMENT_AMT,INWARD_SEC,DEPOSITED_ON  "
						+ " FROM INWARD_NEW WHERE  TRUNC(DEPOSITED_ON) BETWEEN ? AND ? "
						+ " ORDER BY INWARD_SEC,INW_ID,INW_DT,INW_SEQ ";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				GeneralReport generalReport;
				for (danRaisedResult = danRaisedStmt.executeQuery(); danRaisedResult
						.next(); ddDepositedCases.add(generalReport)) {
					generalReport = new GeneralReport();
					generalReport.setInwardNum(danRaisedResult.getInt(1));
					generalReport.setDateOfTheDocument(danRaisedResult
							.getDate(2));
					generalReport.setBankName(danRaisedResult.getString(3));
					generalReport.setDrawnonBank(danRaisedResult.getString(4));
					generalReport.setPlace(danRaisedResult.getString(5));
					generalReport.setDdNum(danRaisedResult.getString(6));
					generalReport.setDateOfTheDocument1(danRaisedResult
							.getDate(7));
					generalReport
							.setInstrumentAmt(danRaisedResult.getDouble(8));
					generalReport
							.setInwardSection(danRaisedResult.getString(9));
					generalReport.setDateOfTheDocument10(danRaisedResult
							.getDate(10));
				}

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		else if (startDate == null)
			try {
				String query = "SELECT INW_ID,INW_DT,BANK_NAME,DRAWN_ON_BANK,PLACE,INSTRUMENT_NO, "
						+ " INSTRUMENT_DT,INSTRUMENT_AMT,INWARD_SEC,DEPOSITED_ON  "
						+ " FROM INWARD_NEW WHERE  TRUNC(DEPOSITED_ON) <= ? "
						+ " ORDER BY INWARD_SEC,INW_ID,INW_DT,INW_SEQ ";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				GeneralReport generalReport;
				for (danRaisedResult = danRaisedStmt.executeQuery(); danRaisedResult
						.next(); ddDepositedCases.add(generalReport)) {
					generalReport = new GeneralReport();
					generalReport.setInwardNum(danRaisedResult.getInt(1));
					generalReport.setDateOfTheDocument(danRaisedResult
							.getDate(2));
					generalReport.setBankName(danRaisedResult.getString(3));
					generalReport.setDrawnonBank(danRaisedResult.getString(4));
					generalReport.setPlace(danRaisedResult.getString(5));
					generalReport.setDdNum(danRaisedResult.getString(6));
					generalReport.setDateOfTheDocument1(danRaisedResult
							.getDate(7));
					generalReport
							.setInstrumentAmt(danRaisedResult.getDouble(8));
					generalReport
							.setInwardSection(danRaisedResult.getString(9));
					generalReport.setDateOfTheDocument10(danRaisedResult
							.getDate(10));
				}

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;
			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		Log.log(Log.INFO, "ReportDAO", "ddDepositReportDetails", "Exited");
		return ddDepositedCases;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList AfterNotAppropriatedDetailsfromInward(
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "AfterNotAppropriatedDetailsfromInward",
				"Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList notAppropriatedCasesList = new ArrayList();
		ResultSet danRaisedResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = "SELECT INW_DT,INW_ID,INWARD_SEC,BANK_NAME, "
						+ " PLACE,LTR_REF_NO,LTR_DT,SUBJECT,INSTRUMENT_NO, "
						+ " INSTRUMENT_DT,INSTRUMENT_AMT,DRAWN_ON_BANK FROM INWARD_NEW "
						+ " WHERE trunc(INW_DT)  between ? and ? AND PAY_ID IS NULL AND INSTRUMENT_AMT > 0 ORDER BY 1,2,3,INW_SEQ ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					GeneralReport generalReport = new GeneralReport();
					generalReport.setDateOfTheDocument1(danRaisedResult
							.getDate(1));
					generalReport.setInwardNum(danRaisedResult.getInt(2));
					generalReport
							.setInwardSection(danRaisedResult.getString(3));
					generalReport.setBankName(danRaisedResult.getString(4));
					generalReport.setPlace(danRaisedResult.getString(5));
					generalReport.setLtrRefNo(danRaisedResult.getString(6));
					generalReport.setDateOfTheDocument10(danRaisedResult
							.getDate(7));
					generalReport.setSubject(danRaisedResult.getString(8));
					generalReport.setInstrumentNum(danRaisedResult.getInt(9));
					generalReport.setDateOfTheDocument11(danRaisedResult
							.getDate(10));
					generalReport.setInstrumentAmt(danRaisedResult
							.getDouble(11));
					generalReport.setDrawnonBank(danRaisedResult.getString(12));

					notAppropriatedCasesList.add(generalReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = "SELECT INW_DT,INW_ID,INWARD_SEC,BANK_NAME, "
						+ " PLACE,LTR_REF_NO,LTR_DT,SUBJECT,INSTRUMENT_NO, "
						+ " INSTRUMENT_DT,INSTRUMENT_AMT,DRAWN_ON_BANK FROM INWARD_NEW "
						+ " WHERE trunc(INW_DT)  <= ? AND PAY_ID IS NULL AND INSTRUMENT_AMT > 0 ORDER BY 1,2,3,INW_SEQ ";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {

					GeneralReport generalReport = new GeneralReport();
					generalReport.setDateOfTheDocument1(danRaisedResult
							.getDate(1));
					generalReport.setInwardNum(danRaisedResult.getInt(2));
					generalReport
							.setInwardSection(danRaisedResult.getString(3));
					generalReport.setBankName(danRaisedResult.getString(4));
					generalReport.setPlace(danRaisedResult.getString(5));
					generalReport.setLtrRefNo(danRaisedResult.getString(6));
					generalReport.setDateOfTheDocument10(danRaisedResult
							.getDate(7));
					generalReport.setSubject(danRaisedResult.getString(8));
					generalReport.setInstrumentNum(danRaisedResult.getInt(9));
					generalReport.setDateOfTheDocument11(danRaisedResult
							.getDate(10));
					generalReport.setInstrumentAmt(danRaisedResult
							.getDouble(11));
					generalReport.setDrawnonBank(danRaisedResult.getString(12));
					notAppropriatedCasesList.add(generalReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "AfterNotAppropriatedDetailsfromInward",
				"Exited");
		return notAppropriatedCasesList;
	}

	// Fix Bug 07092004-23

	public ArrayList securitizationReportDetails(java.sql.Date startDate,
			java.sql.Date endDate, String flag) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "securitizationReportDetails", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = null;
		ArrayList securitizationArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = "select distinct(lm.MEM_BNK_ID||lm.MEM_ZNE_ID||lm.MEM_BRN_ID)"
						+ "  from LOAN_MEMBER_CRITERIA lm, SECURITIZATION_LOAN_POOL s, "
						+ " LOAN_SELECTION_CRITERIA ls where s.SLP_ID = ls.SLP_ID and "
						+ " ls.LSC_ID = lm.LSC_ID and s.SLP_NAME =? and "
						+ " trunc(s.SLP_CREATED_MODIFIED_DT)  between ? and ?";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setString(1, flag);
				danRaisedStmt.setDate(2, startDate);
				danRaisedStmt.setDate(3, endDate);

				danRaisedResult = danRaisedStmt.executeQuery();
				danRaisedArray = new ArrayList();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					Securitization securitization = new Securitization();
					securitization.setMemberid(danRaisedResult.getString(1));

					danRaisedArray.add(securitization);
				}

				securitizationArray.add(danRaisedArray);

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

				String query1 = "select e.LST_STATE_NAME from LOAN_STATE_CRITERIA e, "
						+ " LOAN_SELECTION_CRITERIA d ,SECURITIZATION_LOAN_POOL a where "
						+ " e.LSC_ID = d.LSC_ID and d.SLP_ID = a.SLP_ID and a.SLP_NAME = ? "
						+ " and trunc(a.SLP_CREATED_MODIFIED_DT)  between ? and ? ";
				danRaisedStmt = connection.prepareStatement(query1);
				danRaisedStmt.setDate(2, startDate);
				danRaisedStmt.setDate(3, endDate);
				danRaisedStmt.setString(1, flag);
				danRaisedResult = danRaisedStmt.executeQuery();
				danRaisedArray = new ArrayList();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					Securitization securitization = new Securitization();
					securitization.setState(danRaisedResult.getString(1));

					danRaisedArray.add(securitization);
				}

				securitizationArray.add(danRaisedArray);

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

				String query2 = "select c.LCT_SECTOR_NAME from LOAN_SECTOR_CRITERIA c,"
						+ " SECURITIZATION_LOAN_POOL a, LOAN_SELECTION_CRITERIA d where"
						+ "  c.LSC_ID = d.LSC_ID and  d.SLP_ID = a.SLP_ID and a.SLP_NAME = ? "
						+ " and trunc(a.SLP_CREATED_MODIFIED_DT)  between ? and ? ";
				danRaisedStmt = connection.prepareStatement(query2);
				danRaisedStmt.setDate(2, startDate);
				danRaisedStmt.setDate(3, endDate);
				danRaisedStmt.setString(1, flag);
				danRaisedResult = danRaisedStmt.executeQuery();
				danRaisedArray = new ArrayList();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					Securitization securitization = new Securitization();
					securitization.setSector(danRaisedResult.getString(1));

					danRaisedArray.add(securitization);
				}
				securitizationArray.add(danRaisedArray);

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

				String query3 = "select d.LSC_INTEREST_TYPE, d.LSC_LOAN_TYPE, "
						+ " d.LSC_MAX_INTEREST, d.LSC_MAX_LOAN_SIZE, d.LSC_MIN_INTEREST,"
						+ "  d.LSC_MIN_LOAN_SIZE, d.LSC_TENURE, d.LSC_TENURE_DT,"
						+ "  d.LSC_TRACK_RECORD from  LOAN_SELECTION_CRITERIA d , "
						+ " SECURITIZATION_LOAN_POOL a where d.SLP_ID = a.SLP_ID and "
						+ " a.SLP_NAME = ? and trunc(a.SLP_CREATED_MODIFIED_DT)  between ? and ? ";
				danRaisedStmt = connection.prepareStatement(query3);
				danRaisedStmt.setDate(2, startDate);
				danRaisedStmt.setDate(3, endDate);
				danRaisedStmt.setString(1, flag);
				danRaisedResult = danRaisedStmt.executeQuery();
				danRaisedArray = new ArrayList();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					Securitization securitization = new Securitization();
					securitization
							.setInterestType(danRaisedResult.getString(1));
					securitization.setLoanType(danRaisedResult.getString(2));
					securitization.setMaxInterest(danRaisedResult.getDouble(3));
					securitization.setMaxLoan(danRaisedResult.getDouble(4));
					securitization.setMinInterest(danRaisedResult.getDouble(5));
					securitization.setMinLoan(danRaisedResult.getDouble(6));
					securitization.setTenure(danRaisedResult.getInt(7));
					securitization.setTenureDate(danRaisedResult.getDate(8));
					securitization.setTrackRecord(danRaisedResult.getInt(9));

					danRaisedArray.add(securitization);
				}
				securitizationArray.add(danRaisedArray);

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

				String query4 = "select a.SLP_NAME, a.SLP_SPV_NAME, a.SLP_RATING, "
						+ " a.SLP_RATING_AGENCY_NAME, a.SLP_AMOUNT, a.SLP_INTEREST_RATE, "
						+ " a.SLP_SECURITIZATION_ISSUE_DT from  SECURITIZATION_LOAN_POOL a "
						+ " where a.SLP_NAME = ? and trunc(a.SLP_CREATED_MODIFIED_DT)  "
						+ " between ? and ? ";
				danRaisedStmt = connection.prepareStatement(query4);
				danRaisedStmt.setDate(2, startDate);
				danRaisedStmt.setDate(3, endDate);
				danRaisedStmt.setString(1, flag);
				danRaisedResult = danRaisedStmt.executeQuery();
				danRaisedArray = new ArrayList();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					Securitization securitization = new Securitization();
					securitization.setSlpname(danRaisedResult.getString(1));
					securitization.setSpvName(danRaisedResult.getString(2));
					securitization.setRating(danRaisedResult.getString(3));
					securitization
							.setRatingAgency(danRaisedResult.getString(4));
					securitization.setAmount(danRaisedResult.getDouble(5));
					securitization.setInterest(danRaisedResult.getDouble(6));
					securitization.setSecuritizationDate(danRaisedResult
							.getDate(7));

					danRaisedArray.add(securitization);
				}
				securitizationArray.add(danRaisedArray);

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

				String query5 = "select f.MEM_BNK_ID||f.MEM_ZNE_ID||f.MEM_BRN_ID, "
						+ " f.CGPAN from LOAN_POOL_APPLICATION f, SECURITIZATION_LOAN_POOL a "
						+ " where f.SLP_ID = a.SLP_ID and a.SLP_NAME = ? and "
						+ " trunc(a.SLP_CREATED_MODIFIED_DT)  between ? and ? ";
				danRaisedStmt = connection.prepareStatement(query5);
				danRaisedStmt.setDate(2, startDate);
				danRaisedStmt.setDate(3, endDate);
				danRaisedStmt.setString(1, flag);
				danRaisedResult = danRaisedStmt.executeQuery();
				danRaisedArray = new ArrayList();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					Securitization securitization = new Securitization();
					securitization.setMemberid(danRaisedResult.getString(1));
					securitization.setCgpan(danRaisedResult.getString(2));

					danRaisedArray.add(securitization);
				}
				securitizationArray.add(danRaisedArray);

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {
				String query = "select distinct(lm.MEM_BNK_ID||lm.MEM_ZNE_ID||lm.MEM_BRN_ID)"
						+ "  from LOAN_MEMBER_CRITERIA lm, SECURITIZATION_LOAN_POOL s, "
						+ " LOAN_SELECTION_CRITERIA ls where s.SLP_ID = ls.SLP_ID and "
						+ " ls.LSC_ID = lm.LSC_ID and s.SLP_NAME =? and "
						+ " trunc(s.SLP_CREATED_MODIFIED_DT)  <= ?";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setString(1, flag);
				danRaisedStmt.setDate(2, endDate);

				danRaisedResult = danRaisedStmt.executeQuery();
				danRaisedArray = new ArrayList();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					Securitization securitization = new Securitization();
					securitization.setMemberid(danRaisedResult.getString(1));

					danRaisedArray.add(securitization);
				}

				securitizationArray.add(danRaisedArray);

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

				String query1 = "select e.LST_STATE_NAME from LOAN_STATE_CRITERIA e, "
						+ " LOAN_SELECTION_CRITERIA d ,SECURITIZATION_LOAN_POOL a where "
						+ " e.LSC_ID = d.LSC_ID and d.SLP_ID = a.SLP_ID and a.SLP_NAME = ? "
						+ " and trunc(a.SLP_CREATED_MODIFIED_DT) <= ? ";
				danRaisedStmt = connection.prepareStatement(query1);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(1, flag);
				danRaisedResult = danRaisedStmt.executeQuery();
				danRaisedArray = new ArrayList();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					Securitization securitization = new Securitization();
					securitization.setState(danRaisedResult.getString(1));

					danRaisedArray.add(securitization);
				}

				securitizationArray.add(danRaisedArray);

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

				String query2 = "select c.LCT_SECTOR_NAME from LOAN_SECTOR_CRITERIA c,"
						+ " SECURITIZATION_LOAN_POOL a, LOAN_SELECTION_CRITERIA d where"
						+ "  c.LSC_ID = d.LSC_ID and  d.SLP_ID = a.SLP_ID and a.SLP_NAME = ? "
						+ " and trunc(a.SLP_CREATED_MODIFIED_DT) <= ? ";

				danRaisedStmt = connection.prepareStatement(query2);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(1, flag);
				danRaisedResult = danRaisedStmt.executeQuery();
				danRaisedArray = new ArrayList();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					Securitization securitization = new Securitization();
					securitization.setSector(danRaisedResult.getString(1));

					danRaisedArray.add(securitization);
				}
				securitizationArray.add(danRaisedArray);

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

				String query3 = "select d.LSC_INTEREST_TYPE, d.LSC_LOAN_TYPE, "
						+ " d.LSC_MAX_INTEREST, d.LSC_MAX_LOAN_SIZE, d.LSC_MIN_INTEREST,"
						+ "  d.LSC_MIN_LOAN_SIZE, d.LSC_TENURE, d.LSC_TENURE_DT,"
						+ "  d.LSC_TRACK_RECORD from  LOAN_SELECTION_CRITERIA d , "
						+ " SECURITIZATION_LOAN_POOL a where d.SLP_ID = a.SLP_ID and "
						+ " a.SLP_NAME = ? and trunc(a.SLP_CREATED_MODIFIED_DT)  <= ? ";
				danRaisedStmt = connection.prepareStatement(query3);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(1, flag);
				danRaisedResult = danRaisedStmt.executeQuery();
				danRaisedArray = new ArrayList();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					Securitization securitization = new Securitization();
					securitization
							.setInterestType(danRaisedResult.getString(1));
					securitization.setLoanType(danRaisedResult.getString(2));
					securitization.setMaxInterest(danRaisedResult.getDouble(3));
					securitization.setMaxLoan(danRaisedResult.getDouble(4));
					securitization.setMinInterest(danRaisedResult.getDouble(5));
					securitization.setMinLoan(danRaisedResult.getDouble(6));
					securitization.setTenure(danRaisedResult.getInt(7));
					securitization.setTenureDate(danRaisedResult.getDate(8));
					securitization.setTrackRecord(danRaisedResult.getInt(9));

					danRaisedArray.add(securitization);
				}
				securitizationArray.add(danRaisedArray);

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

				String query4 = "select a.SLP_NAME, a.SLP_SPV_NAME, a.SLP_RATING, "
						+ " a.SLP_RATING_AGENCY_NAME, a.SLP_AMOUNT, a.SLP_INTEREST_RATE, "
						+ " a.SLP_SECURITIZATION_ISSUE_DT from  SECURITIZATION_LOAN_POOL a "
						+ " where a.SLP_NAME = ? and trunc(a.SLP_CREATED_MODIFIED_DT) <= ?";

				danRaisedStmt = connection.prepareStatement(query4);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(1, flag);
				danRaisedResult = danRaisedStmt.executeQuery();
				danRaisedArray = new ArrayList();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					Securitization securitization = new Securitization();
					securitization.setSlpname(danRaisedResult.getString(1));
					securitization.setSpvName(danRaisedResult.getString(2));
					securitization.setRating(danRaisedResult.getString(3));
					securitization
							.setRatingAgency(danRaisedResult.getString(4));
					securitization.setAmount(danRaisedResult.getDouble(5));
					securitization.setInterest(danRaisedResult.getDouble(6));
					securitization.setSecuritizationDate(danRaisedResult
							.getDate(7));

					danRaisedArray.add(securitization);
				}
				securitizationArray.add(danRaisedArray);

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

				String query5 = "select f.MEM_BNK_ID||f.MEM_ZNE_ID||f.MEM_BRN_ID, "
						+ " f.CGPAN from LOAN_POOL_APPLICATION f, SECURITIZATION_LOAN_POOL a "
						+ " where f.SLP_ID = a.SLP_ID and a.SLP_NAME = ? and "
						+ " trunc(a.SLP_CREATED_MODIFIED_DT) <= ? ";
				danRaisedStmt = connection.prepareStatement(query5);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(1, flag);
				danRaisedResult = danRaisedStmt.executeQuery();
				danRaisedArray = new ArrayList();

				while (danRaisedResult.next()) {

					// Instantiate a Securitization value object
					Securitization securitization = new Securitization();
					securitization.setMemberid(danRaisedResult.getString(1));
					securitization.setCgpan(danRaisedResult.getString(2));

					danRaisedArray.add(securitization);
				}
				securitizationArray.add(danRaisedArray);

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "securitizationReportDetails", "Exited");
		return securitizationArray;
	}

	// Fix Completed

	public ApplicationReport securitizationReportDetailsForCgpan(
			String application) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "securitizationReportDetailsForCgpan",
				"Entered");
		ApplicationReport appReport = new ApplicationReport();
		ResultSet applicationResult;
		PreparedStatement applicationStmt = null;
		Connection connection = DBConnection.getConnection();

		try {
			String query = "select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
					+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
					+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
					+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
					+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
					+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
					+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, "
					+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
					+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
					+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
					+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR, s.BID, a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE,s.SSI_TYPE_OF_ACTIVITY,APP_EXPIRY_DT  "
					+ " from ssi_detail s, promoter_detail p, application_detail a where "
					+ " s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and "
					+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER and "
					+ " a.CGPAN = ? ";
			// System.out.println("query:-success:"+query);
			applicationStmt = connection.prepareStatement(query);
			Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
					"query-->Connection");
			applicationStmt.setString(1, application);
			applicationResult = applicationStmt.executeQuery();
			Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
					"query-->Executed");
			// appReport = new ApplicationReport();

			while (applicationResult.next()) {
				appReport.setSsiName(applicationResult.getString(1));
				appReport.setAddress(applicationResult.getString(2));
				appReport.setDistrict(applicationResult.getString(3));
				appReport.setState(applicationResult.getString(4));
				appReport.setUnitType(applicationResult.getString(5));
				appReport.setRegistrationNumber(applicationResult.getString(6));
				appReport.setStartDate(applicationResult.getDate(7));
				appReport.setEmployees(applicationResult.getInt(8));
				appReport.setStatus(applicationResult.getString(9));
				appReport.setOutstanding(applicationResult.getDouble(10));
				appReport.setIndustryType(applicationResult.getString(11));
				appReport.setTurnover(applicationResult.getDouble(12));
				appReport.setExport(applicationResult.getDouble(13));
				appReport.setChiefPromoter(applicationResult.getString(14));
				appReport.setItpan(applicationResult.getString(15));
				appReport.setGender(applicationResult.getString(16));
				appReport.setOthers(applicationResult.getString(17));
				appReport.setMemberId(applicationResult.getString(19));
				appReport.setCgpan(applicationResult.getString(18));
				appReport.setReferenceNumber(applicationResult.getString(25));
				appReport.setApplicationDate(applicationResult.getDate(21));
				appReport.setStatus(applicationResult.getString(23));
				appReport.setRemarks(applicationResult.getString(22));
				appReport.setLoanType(applicationResult.getString(24));
				appReport.setIndustrySector(applicationResult.getString(26));
				appReport.setBid(applicationResult.getString(27));
				appReport.setProjectOutlay(applicationResult.getDouble(28));
				appReport.setCity(applicationResult.getString(29));
				appReport.setTypeOfActivity(applicationResult.getString(30));
				appReport.setExpiryDate(applicationResult.getDate(31));
			}

			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;

			String query1 = " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
					+ " t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION,"
					+ " t.TRM_SUBSIDY_EQUITY_SUPPORT,"
					+ " t.TRM_OTHERS, a.APP_PROJECT_OUTLAY, "
					+ " t.TRM_REPAYMENT_MORATORIUM,t.TRM_FIRST_INSTALLMENT_DUE_DT,"
					+ " t.TRM_NO_OF_INSTALLMENTS, t.TRM_REPAYMENT_PERIODICITY,T.TRM_TENURE "
					+ "  from TERM_LOAN_DETAIL t, APPLICATION_DETAIL a "
					+ " where t.CGPAN = ? and  t.CGPAN = a.CGPAN ";

			applicationStmt = connection.prepareStatement(query1);
			Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
					"query1-->Connexion");
			applicationStmt.setString(1, application);
			applicationResult = applicationStmt.executeQuery();
			Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
					"query-->Executed");

			while (applicationResult.next()) {
				appReport.setTcSanctioned(applicationResult.getDouble(1));
				appReport.setTcSanctionedOn(applicationResult.getDate(2));
				appReport.setTcRate(applicationResult.getDouble(3));
				appReport.setTcPlr(applicationResult.getDouble(4));
				appReport.setTcPromoterContribution(applicationResult
						.getDouble(5));
				appReport.setTcSubsidy(applicationResult.getDouble(6));
				appReport.setTcEquity(applicationResult.getDouble(7));
				appReport.setTcProjectCost(applicationResult.getDouble(8));
				appReport.setRepaymentMoratorium(applicationResult.getInt(9));
				appReport.setFirstInstallmentDueDate(applicationResult
						.getDate(10));
				appReport.setNumberOfInstallments(applicationResult.getInt(11));
				int repayment = applicationResult.getInt(12);
				if (repayment == 0) {
					appReport.setRepaymentPeriodicity("");
				}
				if (repayment == 1) {
					appReport.setRepaymentPeriodicity("Monthly");
				}
				if (repayment == 2) {
					appReport.setRepaymentPeriodicity("Quarterly");
				}
				if (repayment == 3) {
					appReport.setRepaymentPeriodicity("Half yearly");
				}
				appReport.setTcTenure(applicationResult.getInt(13));
			}

			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;

			String query2 = " select t.WCP_FB_LIMIT_SANCTIONED, t.WCP_FB_LIMIT_SANCTIONED_DT,"
					+ " t.WCP_NFB_LIMIT_SANCTIONED, t.WCP_NFB_LIMIT_SANCTIONED_DT,"
					+ " t.WCP_INTEREST, t.WCP_PLR, t.WCP_PROMOTERS_CONTRIBUTION,"
					+ "  t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS,"
					+ " a.APP_PROJECT_OUTLAY ,NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0), "
					+ " NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0),T.WCP_TENURE  from working_capital_Detail t,"
					+ " wc_outstanding_detail tc , application_detail a where t.CGPAN = ? "
					+ " and t.APP_REF_NO = a.APP_REF_NO and t.APP_REF_NO = tc.APP_REF_NO(+) ";

			applicationStmt = connection.prepareStatement(query2);
			Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
					"query2-->Connection");
			applicationStmt.setString(1, application);
			applicationResult = applicationStmt.executeQuery();
			Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
					"query2-->Executed");

			while (applicationResult.next()) {
				appReport.setWcFbSanctioned(applicationResult.getDouble(1));
				appReport.setWcFbSanctionedOn(applicationResult.getDate(2));
				appReport.setWcNfbSanctioned(applicationResult.getDouble(3));
				appReport.setWcNfbSanctionedOn(applicationResult.getDate(4));
				appReport.setWcInterest(applicationResult.getDouble(5));
				appReport.setWcPlr(applicationResult.getDouble(6));
				appReport.setWcPromoterContribution(applicationResult
						.getDouble(7));
				appReport.setWcSubsidy(applicationResult.getDouble(8));
				appReport.setWcEquity(applicationResult.getDouble(9));
				appReport.setWcProjectCost(applicationResult.getDouble(10));
				appReport.setWcFbPrincipalOutstanding(applicationResult
						.getDouble(11));
				appReport.setWcNfbPrincipalOutstanding(applicationResult
						.getDouble(12));
				appReport.setWcTenure(applicationResult.getInt(13));
			}

			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;

			String query3 = "select DBR_AMOUNT, DBR_DT, DBR_FINAL_DISBURSEMENT_FLAG from "
					+ "disbursement_detail d, application_detail a where d.APP_REF_NO "
					+ "= a.APP_REF_NO and  DBR_DT = (select max(DBR_DT) "
					+ "from disbursement_detail where CGPAN = ?) and d.CGPAN = ? ";
			applicationStmt = connection.prepareStatement(query3);
			Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
					"query3-->Connection");
			applicationStmt.setString(1, application);
			applicationStmt.setString(2, application);
			applicationResult = applicationStmt.executeQuery();
			Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
					"query3-->Executed");

			while (applicationResult.next()) {
				appReport.setDisbursementAmount(applicationResult.getDouble(1));
				appReport.setDisbursementDate(applicationResult.getDate(2));
				appReport.setFinalDisbursement(applicationResult.getString(3));
			}
			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;

			String query4 = " select tc.TCO_OUTSTANDING_AMOUNT from TC_OUTSTANDING_DETAIL tc"
					+ "  where tc.CGPAN = ? and tc.tco_outstanding_on_dt =(select max(tco_outstanding_on_dt) from "
					+ " TC_OUTSTANDING_DETAIL where CGPAN = ?)";

			applicationStmt = connection.prepareStatement(query4);
			Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
					"query4-->Connection");
			applicationStmt.setString(1, application);
			applicationStmt.setString(2, application);
			applicationResult = applicationStmt.executeQuery();
			Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
					"query4-->Executed");

			while (applicationResult.next()) {
				appReport.setTcOutstanding(applicationResult.getDouble(1));
			}
			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;

		}

		catch (SQLException exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "securitizationReportDetailsForCgpan",
				"Exited");
		return appReport;
	}

	/*
	 * ##########################################################################
	 * #
	 */

	public ArrayList applicationWiseReport(java.sql.Date startDate,
			java.sql.Date endDate, String application) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "applicationWiseReport", "Entered");
		PreparedStatement daRaisedStmt = null;
		ResultSet daRaisedResult = null;
		Connection connection = DBConnection.getConnection();
		ArrayList progressArray = new ArrayList();
		String yes = "Y";
		String no = "N";
		String query = "";

		if (startDate != null) {
			if (application.equals("allocation")) {
				try { // Fix 070904 - 04
					/*
					 * query modification@sudeep.dhiman to get the resultset in
					 * sorted order
					 */
					/*
					 * @sudeep.dhiman Extra field is fetched to display the
					 * amount in report
					 */
					/**/
					/*
					 * @sudeep.dhiman Extra field is fetched to display the
					 * amount in report
					 */
					/**/query = "  SELECT  CGPAN,MEM_BANK_NAME,MLI_ID,xxx,APP_APPROVED_AMOUNT FROM (select distinct(a.CGPAN),m.MEM_BANK_NAME,  "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID MLI_ID,1 xxx,"
							+ " a.APP_APPROVED_AMOUNT "
							+ " from member_info m, application_detail a, dan_cgpan_info d "
							+ " where a.MEM_BNK_ID  || a.MEM_ZNE_ID || a.MEM_BRN_ID = "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID and "
							+ " d.DCI_ALLOCATION_FLAG = ? and d.DCI_APPROPRIATION_FLAG = ?"
							+ " and a.CGPAN = d.CGPAN and trunc(d.DCI_ALLOCATION_DT) "
							+ " between ? and ? "
							+ " union all "
							+ " select distinct(a.CGPAN),m.MEM_BANK_NAME,"
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID MLI_ID,2 xxx,"
							+ " a.APP_APPROVED_AMOUNT "
							+ " from member_info m, application_detail a, "
							+ " dan_cgpan_info_temp@cginter d where "
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID = "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID and "
							+ " d.DCI_ALLOCATION_FLAG = ? and d.DCI_APPROPRIATION_FLAG = ? "
							+ " and a.CGPAN = d.CGPAN and trunc(d.DCI_ALLOCATION_DT) "
							+ " between ? and ? ) order by mem_bank_name";

					daRaisedStmt = connection.prepareStatement(query);
					daRaisedStmt.setString(1, yes);
					daRaisedStmt.setString(2, no);
					daRaisedStmt.setDate(3, startDate);
					daRaisedStmt.setDate(4, endDate);
					daRaisedStmt.setString(5, yes);
					daRaisedStmt.setString(6, no);
					daRaisedStmt.setDate(7, startDate);
					daRaisedStmt.setDate(8, endDate);

					// System.out.println("the query is :::::::::   "+query);

					daRaisedResult = daRaisedStmt.executeQuery();

					while (daRaisedResult.next()) {
						int index = daRaisedResult.getInt(4);

						if (index == 1) {
							ProgressReport progressReport = new ProgressReport();
							progressReport.setBankName(daRaisedResult
									.getString(2));
							progressReport.setAppRefNo(daRaisedResult
									.getString(1));
							progressReport.setMemberId(daRaisedResult
									.getString(3));
							/*
							 * @sudeep.dhiman Extra field is set to display the
							 * amount in report
							 */
							/**/progressReport
									.setTotalSanctionedAmount(daRaisedResult
											.getDouble(5));
							progressArray.add(progressReport);
						}

						else if (index == 2) {
							ProgressReport progressReport = new ProgressReport();
							progressReport.setBankName(daRaisedResult
									.getString(2));
							progressReport.setAppRefNo(daRaisedResult
									.getString(1));
							progressReport.setMemberId(daRaisedResult
									.getString(3));
							/*
							 * @sudeep.dhiman Extra field is set to display the
							 * amount in report
							 */
							/**/progressReport
									.setTotalSanctionedAmount(daRaisedResult
											.getDouble(5));
							progressArray.add(progressReport);
						}
					} // Fix Completed

					daRaisedResult.close();
					daRaisedResult = null;
					daRaisedStmt.close();
					daRaisedStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (application.equals("appropriation")) {
				try {
					/*
					 * query modification@sudeep.dhiman to get the resultset in
					 * sorted order
					 */
					/*
					 * @sudeep.dhiman Extra field is fetched to display the
					 * amount in report
					 */
					/**/query = "select distinct(a.CGPAN),m.MEM_BANK_NAME, "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID,"
							+ " a.APP_APPROVED_AMOUNT from "
							+ " member_info m, application_detail a, dan_cgpan_info d"
							+ " where a.MEM_BNK_ID  || a.MEM_ZNE_ID || a.MEM_BRN_ID "
							+ "  = m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID "
							+ " and d.DCI_APPROPRIATION_FLAG = ? and a.CGPAN = d.CGPAN"
							+ " and trunc(d.DCI_APPROPRIATION_DT) between ? and ?"
							+ " order by m.MEM_BANK_NAME";
					daRaisedStmt = connection.prepareStatement(query);
					daRaisedStmt.setString(1, yes);
					daRaisedStmt.setDate(2, startDate);
					daRaisedStmt.setDate(3, endDate);
					daRaisedResult = daRaisedStmt.executeQuery();

					while (daRaisedResult.next()) {
						ProgressReport progressReport = new ProgressReport();
						progressReport.setBankName(daRaisedResult.getString(2));
						progressReport.setAppRefNo(daRaisedResult.getString(1));
						progressReport.setMemberId(daRaisedResult.getString(3));
						progressReport.setTotalSanctionedAmount(daRaisedResult
								.getDouble(4));
						progressArray.add(progressReport);
					}
					daRaisedResult.close();
					daRaisedResult = null;
					daRaisedStmt.close();
					daRaisedStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (application.equals("generation")) {
				try {
					/*
					 * query modification@sudeep.dhiman to get the resultset in
					 * sorted order
					 */
					/*
					 * @sudeep.dhiman Extra field is fetched to display the
					 * amount in report
					 */
					/**/query = "select distinct(a.CGPAN),m.MEM_BANK_NAME, "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID,"
							+ " a.APP_APPROVED_AMOUNT from member_info m, "
							+ " application_detail a, dan_cgpan_info d, demand_Advice_info da "
							+ " where a.MEM_BNK_ID  || a.MEM_ZNE_ID || a.MEM_BRN_ID = "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID and "
							+ " d.DAN_ID = da.DAN_ID and d.DCI_ALLOCATION_FLAG = ? and"
							+ "  a.CGPAN = d.CGPAN and trunc(da.DAN_GENERATED_DT)"
							+ "  between ? and ? "
							+ " order by m.MEM_BANK_NAME";
					daRaisedStmt = connection.prepareStatement(query);
					daRaisedStmt.setString(1, no);
					daRaisedStmt.setDate(2, startDate);
					daRaisedStmt.setDate(3, endDate);
					daRaisedResult = daRaisedStmt.executeQuery();
					while (daRaisedResult.next()) {
						ProgressReport progressReport = new ProgressReport();
						progressReport.setBankName(daRaisedResult.getString(2));
						progressReport.setAppRefNo(daRaisedResult.getString(1));
						progressReport.setMemberId(daRaisedResult.getString(3));
						/*
						 * @sudeep.dhiman Extra field is set to display the
						 * amount in report
						 */
						/**/progressReport
								.setTotalSanctionedAmount(daRaisedResult
										.getDouble(4));
						progressArray.add(progressReport);
					}
					daRaisedResult.close();
					daRaisedResult = null;
					daRaisedStmt.close();
					daRaisedStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}
			// System.out.println("the query is :"+query);

		} else if (startDate == null) {
			if (application.equals("allocation")) {
				try { // Fix 070904 - 04
					/*
					 * query modification@sudeep.dhiman to get the resultset in
					 * sorted order
					 */
					/*
					 * @sudeep.dhiman Extra field is fetched to display the
					 * amount in report
					 */
					/**/
					/*
					 * @sudeep.dhiman Extra field is fetched to display the
					 * amount in report
					 */
					/**/query = "select CGPAN,MEM_BANK_NAME,mli_id,xxx,APP_APPROVED_AMOUNT("
							+ " select distinct(a.CGPAN),m.MEM_BANK_NAME,  "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID mli_id,1 xxx,"
							+ " a.APP_APPROVED_AMOUNT "
							+ " from member_info m, application_detail a, dan_cgpan_info d "
							+ " where a.MEM_BNK_ID  || a.MEM_ZNE_ID || a.MEM_BRN_ID = "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID and "
							+ " d.DCI_ALLOCATION_FLAG = ? and d.DCI_APPROPRIATION_FLAG = ?"
							+ " and a.CGPAN = d.CGPAN and trunc(d.DCI_ALLOCATION_DT) "
							+ " <= ? "
							+ " union all "
							+ " select distinct(a.CGPAN),m.MEM_BANK_NAME,"
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID mli_id,2 xxx,"
							+ " a.APP_APPROVED_AMOUNT "
							+ " from member_info m, application_detail a, "
							+ " dan_cgpan_info_temp@cginter d where "
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID = "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID and "
							+ " d.DCI_ALLOCATION_FLAG = ? and d.DCI_APPROPRIATION_FLAG = ? "
							+ " and a.CGPAN = d.CGPAN and trunc(d.DCI_ALLOCATION_DT) "
							+ " <= ?";

					daRaisedStmt = connection.prepareStatement(query);
					daRaisedStmt.setString(1, yes);
					daRaisedStmt.setString(2, no);
					daRaisedStmt.setDate(3, endDate);
					daRaisedStmt.setString(4, yes);
					daRaisedStmt.setString(5, no);
					daRaisedStmt.setDate(6, endDate);

					// System.out.println("the query is *****************   "+query);

					daRaisedResult = daRaisedStmt.executeQuery();

					while (daRaisedResult.next()) {
						int index = daRaisedResult.getInt(4);

						if (index == 1) {
							ProgressReport progressReport = new ProgressReport();
							progressReport.setBankName(daRaisedResult
									.getString(2));
							progressReport.setAppRefNo(daRaisedResult
									.getString(1));
							progressReport.setMemberId(daRaisedResult
									.getString(3));
							/*
							 * @sudeep.dhiman Extra field is set to display the
							 * amount in report
							 */
							/**/progressReport
									.setTotalSanctionedAmount(daRaisedResult
											.getDouble(5));
							progressArray.add(progressReport);
						}

						else if (index == 2) {
							ProgressReport progressReport = new ProgressReport();
							progressReport.setBankName(daRaisedResult
									.getString(2));
							progressReport.setAppRefNo(daRaisedResult
									.getString(1));
							progressReport.setMemberId(daRaisedResult
									.getString(3));
							/*
							 * @sudeep.dhiman Extra field is set to display the
							 * amount in report
							 */
							/**/progressReport
									.setTotalSanctionedAmount(daRaisedResult
											.getDouble(5));
							progressArray.add(progressReport);
						}
					} // Fix Completed

					daRaisedResult.close();
					daRaisedResult = null;
					daRaisedStmt.close();
					daRaisedStmt = null;
				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (application.equals("appropriation")) {
				try {
					/*
					 * query modification@sudeep.dhiman to get the resultset in
					 * sorted order
					 */
					/*
					 * @sudeep.dhiman Extra field is fetched to display the
					 * amount in report
					 */
					/**/query = "select distinct(a.CGPAN),m.MEM_BANK_NAME, "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID,"
							+ " a.APP_APPROVED_AMOUNT from "
							+ " member_info m, application_detail a, dan_cgpan_info d"
							+ " where a.MEM_BNK_ID  || a.MEM_ZNE_ID || a.MEM_BRN_ID "
							+ "  = m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID "
							+ " and d.DCI_APPROPRIATION_FLAG = ? and a.CGPAN = d.CGPAN"
							+ " and trunc(d.DCI_APPROPRIATION_DT) <= ?"
							+ " order by m.MEM_BANK_NAME";
					daRaisedStmt = connection.prepareStatement(query);
					daRaisedStmt.setString(1, yes);
					daRaisedStmt.setDate(2, endDate);
					daRaisedResult = daRaisedStmt.executeQuery();

					while (daRaisedResult.next()) {
						ProgressReport progressReport = new ProgressReport();
						progressReport.setBankName(daRaisedResult.getString(2));
						progressReport.setAppRefNo(daRaisedResult.getString(1));
						progressReport.setMemberId(daRaisedResult.getString(3));
						/*
						 * @sudeep.dhiman Extra field is set to display the
						 * amount in report
						 */
						/**/progressReport
								.setTotalSanctionedAmount(daRaisedResult
										.getDouble(4));
						progressArray.add(progressReport);
					}
					daRaisedResult.close();
					daRaisedResult = null;
					daRaisedStmt.close();
					daRaisedStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (application.equals("generation")) {
				try {
					/*
					 * query modification@sudeep.dhiman to get the resultset in
					 * sorted order
					 */
					/*
					 * @sudeep.dhiman Extra field is fetched to display the
					 * amount in report
					 */
					/**/query = "select distinct(a.CGPAN),m.MEM_BANK_NAME, "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID,"
							+ " a.APP_APPROVED_AMOUNT from member_info m, "
							+ " application_detail a, dan_cgpan_info d, demand_Advice_info da "
							+ " where a.MEM_BNK_ID  || a.MEM_ZNE_ID || a.MEM_BRN_ID = "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID and "
							+ " d.DAN_ID = da.DAN_ID and d.DCI_ALLOCATION_FLAG = ? and"
							+ "  a.CGPAN = d.CGPAN and trunc(da.DAN_GENERATED_DT) <= ? "
							+ " order by m.MEM_BANK_NAME";

					daRaisedStmt = connection.prepareStatement(query);
					daRaisedStmt.setString(1, no);
					daRaisedStmt.setDate(2, endDate);
					daRaisedResult = daRaisedStmt.executeQuery();

					while (daRaisedResult.next()) {
						ProgressReport progressReport = new ProgressReport();
						progressReport.setBankName(daRaisedResult.getString(2));
						progressReport.setAppRefNo(daRaisedResult.getString(1));
						progressReport.setMemberId(daRaisedResult.getString(3));
						/*
						 * @sudeep.dhiman Extra field is set to display the
						 * amount in report
						 */
						/**/progressReport
								.setTotalSanctionedAmount(daRaisedResult
										.getDouble(4));
						progressArray.add(progressReport);
					}

					daRaisedResult.close();
					daRaisedResult = null;
					daRaisedStmt.close();
					daRaisedStmt = null;
				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "applicationWiseReport", "Exited");
		// System.out.println("the query is ==================   "+query);
		return progressArray;
	}

	public ApplicationReport applicationWiseReportDetails(
			java.sql.Date startDate, java.sql.Date endDate, String application)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
				"Entered");
		ApplicationReport appReport = new ApplicationReport();
		ResultSet applicationResult;
		PreparedStatement applicationStmt = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {
				String query = "select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR, s.BID, a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE,APP_EXPIRY_DT  "
						+ " from ssi_detail s, "
						+ " promoter_detail p, application_detail a where "
						+ " s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and "
						+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER and "
						+ " a.CGPAN = ?";

				applicationStmt = connection.prepareStatement(query);
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query-->Connection");
				applicationStmt.setString(1, application);
				applicationResult = applicationStmt.executeQuery();
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query-->Executed");
				// appReport = new ApplicationReport();

				while (applicationResult.next()) {
					// System.out.println("--------------------");
					appReport.setSsiName(applicationResult.getString(1));
					// System.out.println(applicationResult.getString(1));
					appReport.setAddress(applicationResult.getString(2));
					// System.out.println(applicationResult.getString(2));
					appReport.setDistrict(applicationResult.getString(3));
					// System.out.println(applicationResult.getString(3));
					appReport.setState(applicationResult.getString(4));
					// System.out.println(applicationResult.getString(4));
					appReport.setUnitType(applicationResult.getString(5));
					// System.out.println(applicationResult.getString(5));
					appReport.setRegistrationNumber(applicationResult
							.getString(6));
					// System.out.println(applicationResult.getString(6));
					appReport.setStartDate(applicationResult.getDate(7));
					// System.out.println(applicationResult.getDate(7));
					appReport.setEmployees(applicationResult.getInt(8));
					// System.out.println(applicationResult.getInt(8));
					appReport.setStatus(applicationResult.getString(9));
					// System.out.println(applicationResult.getString(9));
					appReport.setOutstanding(applicationResult.getDouble(10));
					// System.out.println(applicationResult.getDouble(10));
					appReport.setIndustryType(applicationResult.getString(11));
					// System.out.println(applicationResult.getString(11));
					appReport.setTurnover(applicationResult.getDouble(12));
					// System.out.println(applicationResult.getDouble(12));
					appReport.setExport(applicationResult.getDouble(13));
					// System.out.println(applicationResult.getDouble(13));
					appReport.setChiefPromoter(applicationResult.getString(14));
					// System.out.println(applicationResult.getString(14));
					appReport.setItpan(applicationResult.getString(15));
					// System.out.println(applicationResult.getString(15));
					appReport.setGender(applicationResult.getString(16));
					// System.out.println(applicationResult.getString(16));
					appReport.setOthers(applicationResult.getString(17));
					// System.out.println(applicationResult.getString(17));
					appReport.setMemberId(applicationResult.getString(19));
					// System.out.println(applicationResult.getString(19));
					appReport.setCgpan(applicationResult.getString(18));
					// System.out.println(applicationResult.getString(18));
					appReport.setReferenceNumber(applicationResult
							.getString(25));
					// System.out.println(applicationResult.getString(20));
					appReport.setApplicationDate(applicationResult.getDate(21));
					// System.out.println(applicationResult.getDate(21));
					appReport.setStatus(applicationResult.getString(23));
					// System.out.println(applicationResult.getString(22));
					appReport.setRemarks(applicationResult.getString(22));
					// System.out.println(applicationResult.getString(23));
					appReport.setLoanType(applicationResult.getString(24));
					// System.out.println(applicationResult.getString(24));
					appReport
							.setIndustrySector(applicationResult.getString(26));
					appReport.setBid(applicationResult.getString(27));
					appReport.setProjectOutlay(applicationResult.getDouble(28));
					appReport.setCity(applicationResult.getString(29));
					appReport.setExpiryDate(applicationResult.getDate(30));
				}

				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query1 = " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ " t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION,"
						+ " t.TRM_SUBSIDY_EQUITY_SUPPORT,"
						+ " t.TRM_OTHERS,a.APP_PROJECT_OUTLAY,"
						+ " t.TRM_REPAYMENT_MORATORIUM,t.TRM_FIRST_INSTALLMENT_DUE_DT,"
						+ " t.TRM_NO_OF_INSTALLMENTS, t.TRM_REPAYMENT_PERIODICITY "
						+ "  from TERM_LOAN_DETAIL t, APPLICATION_DETAIL a "
						+ " where t.CGPAN = ? and   a.CGPAN=t.CGPAN(+)  ";

				applicationStmt = connection.prepareStatement(query1);
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query1-->Connexion");
				applicationStmt.setString(1, application);
				applicationResult = applicationStmt.executeQuery();
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query-->Executed");

				while (applicationResult.next()) {
					appReport.setTcSanctioned(applicationResult.getDouble(1));
					// System.out.println(applicationResult.getDouble(1));
					appReport.setTcSanctionedOn(applicationResult.getDate(2));
					// System.out.println(applicationResult.getDate(2));
					appReport.setTcRate(applicationResult.getDouble(3));
					// System.out.println(applicationResult.getInt(3));
					appReport.setTcPlr(applicationResult.getDouble(4));
					// System.out.println(applicationResult.getInt(4));
					appReport.setTcPromoterContribution(applicationResult
							.getDouble(5));
					// System.out.println(applicationResult.getDouble(5));
					appReport.setTcSubsidy(applicationResult.getDouble(6));
					// System.out.println(applicationResult.getDouble(6));
					appReport.setTcEquity(applicationResult.getDouble(7));
					// System.out.println(applicationResult.getDouble(7));
					appReport.setTcProjectCost(applicationResult.getDouble(8));
					// System.out.println(applicationResult.getDouble(8));
					appReport.setRepaymentMoratorium(applicationResult
							.getInt(9));
					// System.out.println(applicationResult.getDouble(9));
					appReport.setFirstInstallmentDueDate(applicationResult
							.getDate(10));
					// System.out.println(applicationResult.getDate(10));
					appReport.setNumberOfInstallments(applicationResult
							.getInt(11));
					// System.out.println(applicationResult.getInt(12));
					int repayment = applicationResult.getInt(12);
					if (repayment == 0) {
						appReport.setRepaymentPeriodicity("");
					}
					if (repayment == 1) {
						appReport.setRepaymentPeriodicity("Monthly");
					}
					if (repayment == 2) {
						appReport.setRepaymentPeriodicity("Quarterly");
					}
					if (repayment == 3) {
						appReport.setRepaymentPeriodicity("Half yearly");
					}
				}

				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query2 = " select t.WCP_FB_LIMIT_SANCTIONED, t.WCP_FB_LIMIT_SANCTIONED_DT,"
						+ " t.WCP_NFB_LIMIT_SANCTIONED, t.WCP_NFB_LIMIT_SANCTIONED_DT,"
						+ " t.WCP_INTEREST, t.WCP_PLR, t.WCP_PROMOTERS_CONTRIBUTION,"
						+ "  t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS,"
						+ " a.APP_PROJECT_OUTLAY,NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0), "
						+ " NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0)  from working_capital_Detail t,"
						+ " wc_outstanding_detail tc , application_detail a where t.CGPAN = ? "
						+ " and  a.CGPAN=t.CGPAN(+) and t.CGPAN = tc.CGPAN(+)";

				applicationStmt = connection.prepareStatement(query2);
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query2-->Connection");
				applicationStmt.setString(1, application);
				applicationResult = applicationStmt.executeQuery();
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query2-->Executed");

				while (applicationResult.next()) {
					appReport.setWcFbSanctioned(applicationResult.getDouble(1));
					// System.out.println(applicationResult.getDouble(1));
					appReport.setWcFbSanctionedOn(applicationResult.getDate(2));
					// System.out.println(applicationResult.getDate(2));
					appReport
							.setWcNfbSanctioned(applicationResult.getDouble(3));
					// System.out.println(applicationResult.getDouble(3));
					appReport
							.setWcNfbSanctionedOn(applicationResult.getDate(4));
					// System.out.println(applicationResult.getDate(4));
					appReport.setWcInterest(applicationResult.getDouble(5));
					// System.out.println(applicationResult.getInt(5));
					appReport.setWcPlr(applicationResult.getDouble(6));
					// System.out.println(applicationResult.getInt(6));
					appReport.setWcPromoterContribution(applicationResult
							.getDouble(7));
					// System.out.println(applicationResult.getDouble(7));
					appReport.setWcSubsidy(applicationResult.getDouble(8));
					// System.out.println(applicationResult.getDouble(8));
					appReport.setWcEquity(applicationResult.getDouble(9));
					// System.out.println(applicationResult.getDouble(9));
					appReport.setWcProjectCost(applicationResult.getDouble(10));
					// System.out.println(applicationResult.getDouble(10));
					appReport.setWcFbPrincipalOutstanding(applicationResult
							.getDouble(11));
					// System.out.println(applicationResult.getDouble(11));
					appReport.setWcNfbPrincipalOutstanding(applicationResult
							.getDouble(12));
					// System.out.println(applicationResult.getDouble(12));

				}

				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query3 = "select DBR_AMOUNT, DBR_DT, DBR_FINAL_DISBURSEMENT_FLAG from "
						+ "disbursement_detail d, application_detail a where d.APP_REF_NO "
						+ "= a.APP_REF_NO and  DBR_DT = (select max(DBR_DT) "
						+ "from disbursement_detail where CGPAN = ?) and d.CGPAN = ? ";

				applicationStmt = connection.prepareStatement(query3);
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query3-->Connection");
				applicationStmt.setString(1, application);
				applicationStmt.setString(2, application);
				applicationResult = applicationStmt.executeQuery();
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query3-->Executed");

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					appReport.setDisbursementAmount(applicationResult
							.getDouble(1));
					appReport.setDisbursementDate(applicationResult.getDate(2));
					appReport.setFinalDisbursement(applicationResult
							.getString(3));
				}

				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query4 = " select tc.TCO_OUTSTANDING_AMOUNT from TC_OUTSTANDING_DETAIL tc"
						+ "  where tc.CGPAN = ? and tc.tco_outstanding_on_dt =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL where CGPAN = ?)";

				// System.out.println(query3);
				applicationStmt = connection.prepareStatement(query4);
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query4-->Connection");
				applicationStmt.setString(1, application);
				applicationStmt.setString(2, application);
				applicationResult = applicationStmt.executeQuery();
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query4-->Executed");

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					// System.out.println("-------TC -Outstanding---------");
					appReport.setTcOutstanding(applicationResult.getDouble(1));
					// System.out.println(applicationResult.getDouble(1));
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

			}

			catch (SQLException exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		} else if (startDate == null) {
			try {
				String query = "select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR, s.BID, a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE,APP_EXPIRY_DT   "
						+ " from ssi_detail s, "
						+ " promoter_detail p, application_detail a where "
						+ " a.CGPAN = ? "
						+ " and s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and "
						+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER ";

				applicationStmt = connection.prepareStatement(query);
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query-->Connexion");
				applicationStmt.setString(1, application);
				applicationResult = applicationStmt.executeQuery();
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query-->Executed");
				// appReport = new ApplicationReport();

				while (applicationResult.next()) {
					// System.out.println("--------------------");
					appReport.setSsiName(applicationResult.getString(1));
					// System.out.println(applicationResult.getString(1));
					appReport.setAddress(applicationResult.getString(2));
					// System.out.println(applicationResult.getString(2));
					appReport.setDistrict(applicationResult.getString(3));
					// System.out.println(applicationResult.getString(3));
					appReport.setState(applicationResult.getString(4));
					// System.out.println(applicationResult.getString(4));
					appReport.setUnitType(applicationResult.getString(5));
					// System.out.println(applicationResult.getString(5));
					appReport.setRegistrationNumber(applicationResult
							.getString(6));
					// System.out.println(applicationResult.getString(6));
					appReport.setStartDate(applicationResult.getDate(7));
					// System.out.println(applicationResult.getDate(7));
					appReport.setEmployees(applicationResult.getInt(8));
					// System.out.println(applicationResult.getInt(8));
					appReport.setStatus(applicationResult.getString(9));
					// System.out.println(applicationResult.getString(9));
					appReport.setOutstanding(applicationResult.getDouble(10));
					// System.out.println(applicationResult.getDouble(10));
					appReport.setIndustryType(applicationResult.getString(11));
					// System.out.println(applicationResult.getString(11));
					appReport.setTurnover(applicationResult.getDouble(12));
					// System.out.println(applicationResult.getDouble(12));
					appReport.setExport(applicationResult.getDouble(13));
					// System.out.println(applicationResult.getDouble(13));
					appReport.setChiefPromoter(applicationResult.getString(14));
					// System.out.println(applicationResult.getString(14));
					appReport.setItpan(applicationResult.getString(15));
					// System.out.println(applicationResult.getString(15));
					appReport.setGender(applicationResult.getString(16));
					// System.out.println(applicationResult.getString(16));
					appReport.setOthers(applicationResult.getString(17));
					// System.out.println(applicationResult.getString(17));
					appReport.setMemberId(applicationResult.getString(19));
					// System.out.println(applicationResult.getString(19));
					appReport.setCgpan(applicationResult.getString(18));
					// System.out.println(applicationResult.getString(18));
					appReport.setReferenceNumber(applicationResult
							.getString(25));
					// System.out.println(applicationResult.getString(20));
					appReport.setApplicationDate(applicationResult.getDate(21));
					// System.out.println(applicationResult.getDate(21));
					appReport.setStatus(applicationResult.getString(23));
					// System.out.println(applicationResult.getString(22));
					appReport.setRemarks(applicationResult.getString(22));
					// System.out.println(applicationResult.getString(23));
					appReport.setLoanType(applicationResult.getString(24));
					// System.out.println(applicationResult.getString(24));
					appReport
							.setIndustrySector(applicationResult.getString(26));
					appReport.setBid(applicationResult.getString(27));
					appReport.setProjectOutlay(applicationResult.getDouble(28));
					appReport.setCity(applicationResult.getString(29));
					appReport.setExpiryDate(applicationResult.getDate(30));
				}

				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query1 = " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ " t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION,"
						+ " t.TRM_SUBSIDY_EQUITY_SUPPORT,"
						+ " t.TRM_OTHERS,a.APP_PROJECT_OUTLAY,"
						+ " t.TRM_REPAYMENT_MORATORIUM,t.TRM_FIRST_INSTALLMENT_DUE_DT,"
						+ " t.TRM_NO_OF_INSTALLMENTS, t.TRM_REPAYMENT_PERIODICITY "
						+ "  from TERM_LOAN_DETAIL t, APPLICATION_DETAIL a "
						+ " where t.CGPAN = ?  and  a.CGPAN=t.CGPAN(+) ";

				applicationStmt = connection.prepareStatement(query1);
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query1-->Connexion");
				applicationStmt.setString(1, application);
				applicationResult = applicationStmt.executeQuery();
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query1-->Executed");

				while (applicationResult.next()) {
					appReport.setTcSanctioned(applicationResult.getDouble(1));
					// System.out.println(applicationResult.getDouble(1));
					appReport.setTcSanctionedOn(applicationResult.getDate(2));
					// System.out.println(applicationResult.getDate(2));
					appReport.setTcRate(applicationResult.getDouble(3));
					// System.out.println(applicationResult.getInt(3));
					appReport.setTcPlr(applicationResult.getDouble(4));
					// System.out.println(applicationResult.getInt(4));
					appReport.setTcPromoterContribution(applicationResult
							.getDouble(5));
					// System.out.println(applicationResult.getDouble(5));
					appReport.setTcSubsidy(applicationResult.getDouble(6));
					// System.out.println(applicationResult.getDouble(6));
					appReport.setTcEquity(applicationResult.getDouble(7));
					// System.out.println(applicationResult.getDouble(7));
					appReport.setTcProjectCost(applicationResult.getDouble(8));
					// System.out.println(applicationResult.getDouble(8));
					appReport.setRepaymentMoratorium(applicationResult
							.getInt(9));
					// System.out.println(applicationResult.getDouble(9));
					appReport.setFirstInstallmentDueDate(applicationResult
							.getDate(10));
					// System.out.println(applicationResult.getDate(10));
					appReport.setNumberOfInstallments(applicationResult
							.getInt(11));
					// System.out.println(applicationResult.getInt(12));
					int repayment = applicationResult.getInt(12);
					if (repayment == 0) {
						appReport.setRepaymentPeriodicity("");
					}
					if (repayment == 1) {
						appReport.setRepaymentPeriodicity("Monthly");
					}
					if (repayment == 2) {
						appReport.setRepaymentPeriodicity("Quarterly");
					}
					if (repayment == 3) {
						appReport.setRepaymentPeriodicity("Half yearly");
					}

				}

				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query2 = " select t.WCP_FB_LIMIT_SANCTIONED, t.WCP_FB_LIMIT_SANCTIONED_DT,"
						+ " t.WCP_NFB_LIMIT_SANCTIONED, t.WCP_NFB_LIMIT_SANCTIONED_DT,"
						+ " t.WCP_INTEREST, t.WCP_PLR, t.WCP_PROMOTERS_CONTRIBUTION,"
						+ "  t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS,"
						+ " a.APP_PROJECT_OUTLAY,NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0), "
						+ " NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0)  from working_capital_Detail t,"
						+ " wc_outstanding_detail tc , application_detail a where t.CGPAN = ? "
						+ " and a.CGPAN=t.CGPAN(+) and t.CGPAN = tc.CGPAN(+) ";

				applicationStmt = connection.prepareStatement(query2);
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query2-->Executed");
				applicationStmt.setString(1, application);
				applicationResult = applicationStmt.executeQuery();
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query2-->Connexion");

				while (applicationResult.next()) {
					appReport.setWcFbSanctioned(applicationResult.getDouble(1));
					// System.out.println(applicationResult.getDouble(1));
					appReport.setWcFbSanctionedOn(applicationResult.getDate(2));
					// System.out.println(applicationResult.getDate(2));
					appReport
							.setWcNfbSanctioned(applicationResult.getDouble(3));
					// System.out.println(applicationResult.getDouble(3));
					appReport
							.setWcNfbSanctionedOn(applicationResult.getDate(4));
					// System.out.println(applicationResult.getDate(4));
					appReport.setWcInterest(applicationResult.getDouble(5));
					// System.out.println(applicationResult.getInt(5));
					appReport.setWcPlr(applicationResult.getDouble(6));
					// System.out.println(applicationResult.getInt(6));
					appReport.setWcPromoterContribution(applicationResult
							.getDouble(7));
					// System.out.println(applicationResult.getDouble(7));
					appReport.setWcSubsidy(applicationResult.getDouble(8));
					// System.out.println(applicationResult.getDouble(8));
					appReport.setWcEquity(applicationResult.getDouble(9));
					// System.out.println(applicationResult.getDouble(9));
					appReport.setWcProjectCost(applicationResult.getDouble(10));
					// System.out.println(applicationResult.getDouble(10));
					appReport.setWcFbPrincipalOutstanding(applicationResult
							.getDouble(11));
					// System.out.println(applicationResult.getDouble(11));
					appReport.setWcNfbPrincipalOutstanding(applicationResult
							.getDouble(12));
					// System.out.println(applicationResult.getDouble(12));

				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query3 = "select DBR_AMOUNT, DBR_DT, DBR_FINAL_DISBURSEMENT_FLAG from "
						+ " disbursement_detail d, application_detail a where  d.CGPAN = ? "
						+ " and d.APP_REF_NO = a.APP_REF_NO and  DBR_DT = (select max(DBR_DT) "
						+ " from disbursement_detail where CGPAN = ?)   ";

				applicationStmt = connection.prepareStatement(query3);
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query3-->Connexion");
				applicationStmt.setString(1, application);
				applicationStmt.setString(2, application);
				applicationResult = applicationStmt.executeQuery();
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query3-->Executed");

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					appReport.setDisbursementAmount(applicationResult
							.getDouble(1));
					appReport.setDisbursementDate(applicationResult.getDate(2));
					appReport.setFinalDisbursement(applicationResult
							.getString(3));
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query4 = " select tc.TCO_OUTSTANDING_AMOUNT from TC_OUTSTANDING_DETAIL tc"
						+ "  where tc.CGPAN = ? and tc.tco_outstanding_on_dt =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL where CGPAN = ?)";

				// System.out.println(query3);
				applicationStmt = connection.prepareStatement(query4);
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query4-->Connexion");
				applicationStmt.setString(1, application);
				applicationStmt.setString(2, application);
				applicationResult = applicationStmt.executeQuery();
				Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails",
						"query4-->Executed");

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					// System.out.println("-------TC -Outstanding---------");
					appReport.setTcOutstanding(applicationResult.getDouble(1));
					// System.out.println(applicationResult.getDouble(1));
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

			} catch (SQLException exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "applicationWiseReportDetails", "Exited");
		return appReport;
	}

	public ArrayList getCgpan(String ssiName) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getCgpan", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();
		String status = "AP";

		try {
			String query = "select a.cgpan, s.SSI_UNIT_NAME from application_detail a, ssi_detail s"
					+ " where s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and"
					+ " LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?)))"
					+ " and a.APP_STATUS = ? ";
			danRaisedStmt = connection.prepareStatement(query);
			danRaisedStmt.setString(1, "%" + ssiName + "%");
			danRaisedStmt.setString(2, status);
			danRaisedResult = danRaisedStmt.executeQuery();

			while (danRaisedResult.next()) {
				// Instantiate a Gfee value object
				GFee gFee = new GFee();
				gFee.setDan(danRaisedResult.getString(1));
				gFee.setFlag(danRaisedResult.getString(2));

				danRaisedArray.add(gFee);
			}

			danRaisedResult.close();
			danRaisedResult = null;
			danRaisedStmt.close();
			danRaisedStmt = null;

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "getCgpan", "Exited");
		return danRaisedArray;
	}

	public ArrayList getCgpanForMember(String ssiName, String memberId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getCgpanForMember", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();
		String status = "AP";

		try {
			String query = "select a.cgpan, s.SSI_UNIT_NAME from application_detail a, ssi_detail s "
					+ " where s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and "
					+ " LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) LIKE LTRIM(RTRIM(UPPER(?))) "
					+ " and a.MEM_BNK_ID = ? and a.APP_STATUS = ?  ";
			danRaisedStmt = connection.prepareStatement(query);
			danRaisedStmt.setString(1, "%" + ssiName + "%");
			danRaisedStmt.setString(2, memberId);
			danRaisedStmt.setString(3, status);
			danRaisedResult = danRaisedStmt.executeQuery();

			while (danRaisedResult.next()) {
				// Instantiate a Gfee value object
				GFee gFee = new GFee();
				gFee.setDan(danRaisedResult.getString(1));
				gFee.setFlag(danRaisedResult.getString(2));

				danRaisedArray.add(gFee);
			}
			danRaisedResult.close();
			danRaisedResult = null;
			danRaisedStmt.close();
			danRaisedStmt = null;

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "getCgpanForMember", "Exited");
		return danRaisedArray;
	}

	public ArrayList getCgpanForBranch(String ssiName, String memberId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getCgpanForBranch", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();
		String status = "AP";

		try {
			/*
			 * String query =
			 * "select a.cgpan, s.SSI_UNIT_NAME from application_detail a, ssi_detail s "
			 * + " where s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and " +
			 * " LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) LIKE LTRIM(RTRIM(UPPER(?))) "
			 * + " and a.MEM_BNK_ID||a.MEM_ZNE_ID||a.MEM_BRN_ID = ? " +
			 * " and a.APP_STATUS = ?  ";
			 */
			// Diksha
			String query = "select a.cgpan, s.SSI_UNIT_NAME from application_detail a, ssi_detail s  where s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and  LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) LIKE LTRIM(RTRIM(UPPER(?))) ";
			danRaisedStmt = connection.prepareStatement(query);
			danRaisedStmt.setString(1, "%" + ssiName + "%");
			danRaisedStmt.setString(2, memberId);
			danRaisedStmt.setString(3, status);
			danRaisedResult = danRaisedStmt.executeQuery();

			while (danRaisedResult.next()) {
				// Instantiate a Gfee value object
				GFee gFee = new GFee();
				gFee.setDan(danRaisedResult.getString(1));
				gFee.setFlag(danRaisedResult.getString(2));

				danRaisedArray.add(gFee);
			}
			danRaisedResult.close();
			danRaisedResult = null;
			danRaisedStmt.close();
			danRaisedStmt = null;

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "getCgpanForBranch", "Exited");
		return danRaisedArray;
	}

	// Fix Bug 02 - 07092004

	public ArrayList getCgpanForZone(String ssiName, String bankId,
			String zoneId) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getCgpanForZone", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();
		String status = "AP";

		try {

			String query = "select a.cgpan, s.SSI_UNIT_NAME from application_detail a, ssi_detail s,"
					+ "  member_info m where s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER "
					+ " and a.MEM_BNK_ID||a.MEM_ZNE_ID||a.MEM_BRN_ID"
					+ "  = m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID "
					+ "  and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) LIKE LTRIM(RTRIM(UPPER(?))) "
					+ " and m.MEM_BNK_ID = ? and a.APP_STATUS = ? "
					+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) ";
			danRaisedStmt = connection.prepareStatement(query);
			danRaisedStmt.setString(1, "%" + ssiName + "%");
			danRaisedStmt.setString(2, bankId);
			danRaisedStmt.setString(3, status);
			danRaisedStmt.setString(4, zoneId);
			danRaisedStmt.setString(5, zoneId);
			danRaisedResult = danRaisedStmt.executeQuery();

			while (danRaisedResult.next()) {
				// Instantiate a Gfee value object
				GFee gFee = new GFee();
				gFee.setDan(danRaisedResult.getString(1));
				gFee.setFlag(danRaisedResult.getString(2));

				danRaisedArray.add(gFee);
			}
			danRaisedResult.close();
			danRaisedResult = null;
			danRaisedStmt.close();
			danRaisedStmt = null;

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "getCgpanForZone", "Exited");
		return danRaisedArray;
	}

	// Fix Completed

	public ArrayList BranchApplicationDetailsForState(java.sql.Date startDate,
			java.sql.Date endDate, String guarantee, String memberId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "BranchApplicationDetailsForState",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if ((guarantee.equals("yes")) && startDate == null) {
			try {
				String query = "select member.MEM_STATE_NAME, count(vw.cgpan),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN = vw.CGPAN "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) <= ? and"
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ " group by member.MEM_STATE_NAME ";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((guarantee.equals("yes")) && startDate != null) {
			try {
				String query = "select member.MEM_STATE_NAME, count(vw.cgpan),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN = vw.CGPAN "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? and"
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ " group by member.MEM_STATE_NAME ";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate == null) {
			try {
				String query = "select member.MEM_STATE_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN = vw.CGPAN"
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
						+ " trunc(app.APP_GUAR_START_DATE_TIME) <= ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " group by member.MEM_STATE_NAME ";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			}

			catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate != null) {
			try {
				String query = "select member.MEM_STATE_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN = vw.CGPAN"
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
						+ " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ " group by member.MEM_STATE_NAME ";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "BranchApplicationDetailsForState",
				"Exited");
		return mliApplicationArray;
	}

	public ArrayList ZoneApplicationDetailsForState(java.sql.Date startDate,
			java.sql.Date endDate, String guarantee, String memberId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "ZoneApplicationDetailsForState",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if ((guarantee.equals("yes")) && startDate == null) {
			try {
				String query = "select member.MEM_STATE_NAME, count(vw.cgpan),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, application_detail app,"
						+ " member_info member where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID   "
						+ " and trunc(app.APP_APPROVED_DATE_TIME) <= ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by "
						+ " member.MEM_STATE_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((guarantee.equals("yes")) && startDate != null) {
			try {
				String query = "select member.MEM_STATE_NAME, count(vw.cgpan),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, application_detail app,"
						+ " member_info member where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID   "
						+ " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by "
						+ " member.MEM_STATE_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate == null) {
			try {
				String query = "select member.MEM_STATE_NAME, count(vw.cgpan),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, application_detail app,"
						+ " member_info member where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID   "
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) <= ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by "
						+ " member.MEM_STATE_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate != null) {
			try {
				String query = "select member.MEM_STATE_NAME, count(vw.cgpan),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, application_detail app,"
						+ " member_info member where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID   "
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) between ? and  ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by "
						+ " member.MEM_STATE_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "ZoneApplicationDetailsForState",
				"Exited");
		return mliApplicationArray;
	}

	public ArrayList BankApplicationDetailsForState(java.sql.Date startDate,
			java.sql.Date endDate, String guarantee, String memberId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "BankApplicationDetailsForState",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if ((guarantee.equals("yes")) && startDate == null) {
			try {
				String query = "select member.MEM_STATE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw,"
						+ " application_detail app, member_info member where "
						+ " app.CGPAN = vw.CGPAN and  "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ "  trunc(app.APP_APPROVED_DATE_TIME) <= ? and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ " group by  member.MEM_STATE_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((guarantee.equals("yes")) && startDate != null) {
			try {
				String query = "select member.MEM_STATE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw,"
						+ " application_detail app, member_info member where "
						+ " app.CGPAN = vw.CGPAN and   "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID   "
						+ " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ " group by  member.MEM_STATE_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate == null) {
			try {
				String query = "select member.MEM_STATE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw,"
						+ " application_detail app, member_info member where "
						+ " app.CGPAN = vw.CGPAN and  "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID   "
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) <= ? and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ " group by  member.MEM_STATE_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate != null) {
			try {
				String query = "select member.MEM_STATE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw,"
						+ " application_detail app, member_info member where "
						+ " app.CGPAN = vw.CGPAN and  "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID   "
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ " group by  member.MEM_STATE_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "BankApplicationDetailsForState",
				"Exited");
		return mliApplicationArray;
	}

	public ArrayList BranchApplicationDetailsForDistrict(
			java.sql.Date startDate, java.sql.Date endDate, String guarantee,
			String memberId) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "BranchApplicationDetailsForDistrict",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if ((guarantee.equals("yes")) && startDate == null) {
			try {
				String query = "select member.MEM_DISTRICT_NAME, count(vw.cgpan),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN = vw.CGPAN "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) <= ? and"
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ " group by member.MEM_DISTRICT_NAME ";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((guarantee.equals("yes")) && startDate != null) {
			try {
				String query = "select member.MEM_DISTRICT_NAME, count(vw.cgpan),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN = vw.CGPAN "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? and"
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ " group by member.MEM_DISTRICT_NAME ";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate == null) {
			try {
				String query = "select member.MEM_DISTRICT_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN = vw.CGPAN"
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
						+ " trunc(app.APP_GUAR_START_DATE_TIME) <= ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID))) "
						+ "= LTRIM(RTRIM(UPPER(?))) "
						+ " group by member.MEM_DISTRICT_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate != null) {
			try {
				String query = "select member.MEM_DISTRICT_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN = vw.CGPAN"
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
						+ " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ " group by member.MEM_DISTRICT_NAME ";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "BranchApplicationDetailsForDistrict",
				"Exited");
		return mliApplicationArray;
	}

	public ArrayList ZoneApplicationDetailsForDistrict(java.sql.Date startDate,
			java.sql.Date endDate, String guarantee, String memberId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "ZoneApplicationDetailsForDistrict",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if ((guarantee.equals("yes")) && startDate == null) {
			try {
				String query = "select member.MEM_DISTRICT_NAME, count(vw.cgpan),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, application_detail app,"
						+ " member_info member where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID"
						+ " and trunc(app.APP_APPROVED_DATE_TIME) <= ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by "
						+ " member.MEM_DISTRICT_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((guarantee.equals("yes")) && startDate != null) {
			try {
				String query = "select member.MEM_DISTRICT_NAME, count(vw.cgpan),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, application_detail app,"
						+ " member_info member where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID"
						+ " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by "
						+ " member.MEM_DISTRICT_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate == null) {
			try {
				String query = "select member.MEM_DISTRICT_NAME, count(vw.cgpan),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, application_detail app,"
						+ " member_info member where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID"
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) <= ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by "
						+ " member.MEM_DISTRICT_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate != null) {
			try {
				String query = "select member.MEM_DISTRICT_NAME, count(vw.cgpan),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, application_detail app,"
						+ " member_info member where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID"
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) between ? and  ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by "
						+ " member.MEM_DISTRICT_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "ZoneApplicationDetailsForDistrict",
				"Exited");
		return mliApplicationArray;
	}

	public ArrayList BankApplicationDetailsForDistrict(java.sql.Date startDate,
			java.sql.Date endDate, String guarantee, String memberId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "BankApplicationDetailsForDistrict",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if ((guarantee.equals("yes")) && startDate == null) {
			try {
				String query = "select member.MEM_DISTRICT_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw,"
						+ " application_detail app, member_info member where "
						+ " app.CGPAN = vw.CGPAN and  "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID "
						+ " and trunc(app.APP_APPROVED_DATE_TIME) <= ? and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ "  group by  member.MEM_DISTRICT_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			}

			catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((guarantee.equals("yes")) && startDate != null) {
			try {
				String query = "select member.MEM_DISTRICT_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw,"
						+ " application_detail app, member_info member where "
						+ " app.CGPAN = vw.CGPAN and  "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID "
						+ " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ " group by  member.MEM_DISTRICT_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate == null) {
			try {
				String query = "select member.MEM_DISTRICT_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw,"
						+ " application_detail app, member_info member where "
						+ " app.CGPAN = vw.CGPAN and  "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID "
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) <= ? and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ " group by  member.MEM_DISTRICT_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate != null) {
			try {
				String query = "select member.MEM_DISTRICT_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw,"
						+ " application_detail app, member_info member where "
						+ " app.CGPAN = vw.CGPAN and  "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID "
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ "  group by  member.MEM_DISTRICT_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "BankApplicationDetailsForDistrict",
				"Exited");
		return mliApplicationArray;
	}

	/*
	 * ##########################################################################
	 * #################
	 */

	public ArrayList applicationRecievedReportDetails(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "applicationRecievedReportDetails",
				"Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select a.APP_SUBMITTED_DT, s.SSI_UNIT_NAME,"
						+ " s.SSI_INDUSTRY_SECTOR, p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME ,p.PMR_CHIEF_IT_PAN,"
						+ " t.TRM_AMOUNT_SANCTIONED,t.TRM_TENURE,t.TRM_INTEREST_RATE,t.TRM_PLR,"
						+ " sum(NVL(w.WCP_FB_LIMIT_SANCTIONED,0)+ NVL(w.WCP_NFB_LIMIT_SANCTIONED,0)),"
						+ " sum(NVL(t.TRM_PROMOTER_CONTRIBUTION,0)+NVL(t.TRM_SUBSIDY_EQUITY_SUPPORT,0)+ "
						+ " NVL(t.TRM_OTHERS,0)), sum(NVL(w.WCP_PROMOTERS_CONTRIBUTION,0)+"
						+ " NVL(w.WCP_SUBSIDY_EQUITY_SUPPORT,0)+ NVL(w.WCP_OTHERS,0)), "
						+ " w.WCP_PLR,a.APP_REMARKS  from application_detail a, "
						+ " ssi_detail s, promoter_detail p, term_loan_detail t,"
						+ " working_capital_detail w where a.SSI_REFERENCE_NUMBER = "
						+ " s.SSI_REFERENCE_NUMBER and s.SSI_REFERENCE_NUMBER ="
						+ " p.SSI_REFERENCE_NUMBER and a.APP_REF_NO = t.APP_REF_NO(+) and "
						+ " a.APP_REF_NO = w.APP_REF_NO(+) and trunc(a.APP_SUBMITTED_DT) between ? and ? "
						+ " group by a.APP_SUBMITTED_DT, s.SSI_UNIT_NAME, s.SSI_INDUSTRY_SECTOR, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME ,p.PMR_CHIEF_IT_PAN, t.TRM_AMOUNT_SANCTIONED,"
						+ " t.TRM_TENURE,t.TRM_INTEREST_RATE,t.TRM_PLR, a.APP_REMARKS, w.WCP_PLR order by s.SSI_UNIT_NAME";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					// Instantiate a ApplicationReport value object
					ApplicationReport report = new ApplicationReport();
					report.setApplicationDate(danRaisedResult.getDate(1));
					report.setSsiName(danRaisedResult.getString(2));
					report.setIndustryType(danRaisedResult.getString(3));
					report.setChiefPromoter(danRaisedResult.getString(4));
					report.setItpan(danRaisedResult.getString(5));
					report.setTcSanctioned(danRaisedResult.getDouble(6));
					report.setTcTenure(danRaisedResult.getInt(7));
					report.setTcRate(danRaisedResult.getInt(8));
					report.setTcPlr(danRaisedResult.getInt(9));
					report.setTotalSanctioned(danRaisedResult.getDouble(10));
					report.setTcProjectCost(danRaisedResult.getDouble(11));
					report.setWcProjectCost(danRaisedResult.getDouble(12));
					report.setWcPlr(danRaisedResult.getInt(13));
					report.setRemarks(danRaisedResult.getString(14));

					danRaisedArray.add(report);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		} else if (startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select a.APP_SUBMITTED_DT, s.SSI_UNIT_NAME,"
						+ " s.SSI_INDUSTRY_SECTOR, p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME ,p.PMR_CHIEF_IT_PAN,"
						+ " t.TRM_AMOUNT_SANCTIONED,t.TRM_TENURE,t.TRM_INTEREST_RATE,t.TRM_PLR,"
						+ " sum(NVL(w.WCP_FB_LIMIT_SANCTIONED,0)+ NVL(w.WCP_NFB_LIMIT_SANCTIONED,0)),"
						+ " sum(NVL(t.TRM_PROMOTER_CONTRIBUTION,0)+NVL(t.TRM_SUBSIDY_EQUITY_SUPPORT,0)+ "
						+ " NVL(t.TRM_OTHERS,0)), sum(NVL(w.WCP_PROMOTERS_CONTRIBUTION,0)+"
						+ " NVL(w.WCP_SUBSIDY_EQUITY_SUPPORT,0)+ NVL(w.WCP_OTHERS,0)), "
						+ " w.WCP_PLR,a.APP_REMARKS  from application_detail a, "
						+ " ssi_detail s, promoter_detail p, term_loan_detail t,"
						+ " working_capital_detail w where a.SSI_REFERENCE_NUMBER = "
						+ " s.SSI_REFERENCE_NUMBER and s.SSI_REFERENCE_NUMBER ="
						+ " p.SSI_REFERENCE_NUMBER and a.APP_REF_NO = t.APP_REF_NO(+) and "
						+ " a.APP_REF_NO = w.APP_REF_NO(+) and trunc(a.APP_SUBMITTED_DT) <= ? "
						+ " group by a.APP_SUBMITTED_DT, s.SSI_UNIT_NAME, s.SSI_INDUSTRY_SECTOR, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME ,p.PMR_CHIEF_IT_PAN, t.TRM_AMOUNT_SANCTIONED,"
						+ " t.TRM_TENURE,t.TRM_INTEREST_RATE,t.TRM_PLR, a.APP_REMARKS, w.WCP_PLR order by s.SSI_UNIT_NAME";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					// Instantiate a ApplicationReport value object
					ApplicationReport report = new ApplicationReport();
					report.setApplicationDate(danRaisedResult.getDate(1));
					report.setSsiName(danRaisedResult.getString(2));
					report.setIndustryType(danRaisedResult.getString(3));
					report.setChiefPromoter(danRaisedResult.getString(4));
					report.setItpan(danRaisedResult.getString(5));
					report.setTcSanctioned(danRaisedResult.getDouble(6));
					report.setTcTenure(danRaisedResult.getInt(7));
					report.setTcRate(danRaisedResult.getInt(8));
					report.setTcPlr(danRaisedResult.getInt(9));
					report.setTotalSanctioned(danRaisedResult.getDouble(10));
					report.setTcProjectCost(danRaisedResult.getDouble(11));
					report.setWcProjectCost(danRaisedResult.getDouble(12));
					report.setWcPlr(danRaisedResult.getInt(13));
					report.setRemarks(danRaisedResult.getString(14));

					danRaisedArray.add(report);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "applicationRecievedReportDetails",
				"Exited");
		return danRaisedArray;

	}

	public ArrayList StatusWiseReportDetails(java.sql.Date startDate,
			java.sql.Date endDate, String application) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "StatusWiseReportDetails", "Entered");
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();
		CallableStatement danRaisedStmt = null;
		// System.out.println("in dao");

		try {
			danRaisedStmt = connection
					.prepareCall("{? = call packGetApplnDetail.funcGetApplnDetail(?,?,?,?,?)}");
			danRaisedStmt.registerOutParameter(1, Types.INTEGER);
			danRaisedStmt.setDate(2, startDate);
			// System.out.println("startDate:"+startDate);
			danRaisedStmt.setDate(3, endDate);
			// System.out.println("endDate:"+endDate);
			danRaisedStmt.setString(4, application);
			// System.out.println("application:"+application);
			danRaisedStmt.registerOutParameter(5, Constants.CURSOR);
			danRaisedStmt.registerOutParameter(6, java.sql.Types.VARCHAR);

			danRaisedStmt.executeQuery();

			int status = danRaisedStmt.getInt(1);
			// System.out.println("status:"+status);
			String errorCode = danRaisedStmt.getString(6);
			// System.out.println("errorCode:"+errorCode);

			if (status == Constants.FUNCTION_FAILURE) {
				Log.log(Log.ERROR, "ReportDAO", "StatusWiseReportDetails",
						"SP returns a 1." + " Error code is :" + errorCode);
				danRaisedStmt.close();
				danRaisedStmt = null;
			} else if (status == Constants.FUNCTION_SUCCESS) {
				// The value returned by the Stored Procedure is stored as a
				// ResultSet
				danRaisedResult = (ResultSet) danRaisedStmt.getObject(5);

				while (danRaisedResult.next()) {
					ProgressReport progressReport = new ProgressReport();
					progressReport.setBankName(danRaisedResult.getString(1));
					// System.out.println("BankName:"+danRaisedResult.getString(1));
					progressReport.setAppRefNo(danRaisedResult.getString(2));
					// System.out.println("AppRefNo:"+danRaisedResult.getString(2));
					progressReport.setMemberId(danRaisedResult.getString(3));
					// System.out.println("MemberId:"+danRaisedResult.getString(3));

					danRaisedArray.add(progressReport);
					// danRaisedArray.add(danRaisedResult.getObject(1));
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			}
		}

		catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "StatusWiseReportDetails", "Exited");
		return danRaisedArray;
	}

	public ArrayList StatusDetailsForBranch(java.sql.Date startDate,
			java.sql.Date endDate, String memberId, String application)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "StatusDetailsForBranch", "Entered");
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();
		CallableStatement danRaisedStmt = null;

		try {
			danRaisedStmt = connection
					.prepareCall("{? = call packGetApplnDetailForBranchNew.funcGetApplnDetailForBranchNew(?,?,?,?,?,?)}");
			danRaisedStmt.registerOutParameter(1, Types.INTEGER);
			danRaisedStmt.setDate(2, startDate);
			// System.out.println("startDate:" + startDate);
			danRaisedStmt.setDate(3, endDate);
			// System.out.println("endDate:" + endDate);
			danRaisedStmt.setString(5, application);
			// System.out.println("application:" + application);
			danRaisedStmt.setString(4, memberId);
			// System.out.println("memberId:" + memberId);
			danRaisedStmt.registerOutParameter(6, Constants.CURSOR);
			danRaisedStmt.registerOutParameter(7, java.sql.Types.VARCHAR);

			danRaisedStmt.executeQuery();
			// System.out.println("Query Executed");
			int status = danRaisedStmt.getInt(1);
			// System.out.println("status:"+status);
			String errorCode = danRaisedStmt.getString(7);
			// System.out.println("errorCode:"+errorCode);

			if (status == Constants.FUNCTION_FAILURE) {
				Log.log(Log.ERROR, "ReportDAO", "StatusWiseReportDetails",
						"SP returns a 1." + " Error code is :" + errorCode);
				danRaisedStmt.close();
				danRaisedStmt = null;
			} else if (status == Constants.FUNCTION_SUCCESS) {
				// The value returned by the Stored Procedure is stored as a
				// ResultSet
				danRaisedResult = (ResultSet) danRaisedStmt.getObject(6);

				while (danRaisedResult.next()) {
					ProgressReport progressReport = new ProgressReport();
					progressReport.setMemberId(memberId);
					progressReport.setAppRefNo(danRaisedResult.getString(1));
					// System.out.println("App Ref No:"+
					// danRaisedResult.getString(1));
					progressReport.setSubmittedDate(danRaisedResult.getDate(2));
					progressReport.setSsiName(danRaisedResult.getString(3));
					progressReport.setTotalSanctionedAmount(danRaisedResult
							.getDouble(4));
					progressReport.setBranchName(danRaisedResult.getString(5));

					danRaisedArray.add(progressReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			}
		}

		catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "StatusDetailsForBranch", "Exited");
		return danRaisedArray;
	}

	// Fix Bug 07092004 - 02

	public ArrayList StatusDetailsForZone(java.sql.Date startDate,
			java.sql.Date endDate, String bankId, String zoneId,
			String application) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "StatusDetailsForZone", "Entered");
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		String memId = bankId + zoneId + "0000";
		Connection connection = DBConnection.getConnection();
		CallableStatement danRaisedStmt = null;

		try {
			danRaisedStmt = connection
					.prepareCall("{? = call packGetApplnDetailForZoneNew.funcGetApplnDetailForZoneNew(?,?,?,?,?,?,?,?)}");
			danRaisedStmt.registerOutParameter(1, Types.INTEGER);
			danRaisedStmt.setDate(2, startDate);
			danRaisedStmt.setDate(3, endDate);
			danRaisedStmt.setString(5, application);
			danRaisedStmt.setString(4, bankId);
			danRaisedStmt.setString(6, zoneId);
			danRaisedStmt.setString(7, zoneId);
			danRaisedStmt.registerOutParameter(8, Constants.CURSOR);
			danRaisedStmt.registerOutParameter(9, java.sql.Types.VARCHAR);

			danRaisedStmt.executeQuery();

			int status = danRaisedStmt.getInt(1);
			String errorCode = danRaisedStmt.getString(9);

			if (status == Constants.FUNCTION_FAILURE) {
				Log.log(Log.ERROR, "ReportDAO", "StatusWiseReportDetails",
						"SP returns a 1." + " Error code is :" + errorCode);
				danRaisedStmt.close();
				danRaisedStmt = null;
			} else if (status == Constants.FUNCTION_SUCCESS) {
				// The value returned by the Stored Procedure is stored as a
				// ResultSet
				danRaisedResult = (ResultSet) danRaisedStmt.getObject(8);

				while (danRaisedResult.next()) {
					ProgressReport progressReport = new ProgressReport();
					progressReport.setMemberId(memId);
					progressReport.setAppRefNo(danRaisedResult.getString(1));
					progressReport.setSubmittedDate(danRaisedResult.getDate(2));
					progressReport.setSsiName(danRaisedResult.getString(3));
					progressReport.setTotalSanctionedAmount(danRaisedResult
							.getDouble(4));
					progressReport.setBranchName(danRaisedResult.getString(5));
					progressReport.setApplicationRefNo(danRaisedResult
							.getString(6));
					danRaisedArray.add(progressReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			}
		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "StatusDetailsForZone", "Exited");
		return danRaisedArray;
	}

	// Fix Completed

	public ArrayList StatusDetailsForBank(java.sql.Date startDate,
			java.sql.Date endDate, String memberId, String application)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "StatusDetailsForBank", "Entered");
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();
		CallableStatement danRaisedStmt = null;
		String tempmemberId = memberId + "00000000";

		try {
			danRaisedStmt = connection
					.prepareCall("{? = call packGetApplnDetailForBankNew.funcGetApplnDetailForBankNew(?,?,?,?,?,?)}");
			danRaisedStmt.registerOutParameter(1, Types.INTEGER);
			danRaisedStmt.setDate(2, startDate);
			// System.out.println("startDate:"+startDate);
			danRaisedStmt.setDate(3, endDate);
			// System.out.println("endDate:"+endDate);
			danRaisedStmt.setString(4, memberId);
			// System.out.println("memberId:"+memberId);
			danRaisedStmt.setString(5, application);
			// System.out.println("application:"+application);
			danRaisedStmt.registerOutParameter(6, Constants.CURSOR);
			danRaisedStmt.registerOutParameter(7, java.sql.Types.VARCHAR);

			danRaisedStmt.executeQuery();

			int status = danRaisedStmt.getInt(1);
			// System.out.println("status:"+status);
			String errorCode = danRaisedStmt.getString(7);
			// System.out.println("errorCode:"+errorCode);

			if (status == Constants.FUNCTION_FAILURE) {
				Log.log(Log.ERROR, "ReportDAO", "StatusWiseReportDetails",
						"SP returns a 1." + " Error code is :" + errorCode);
				danRaisedStmt.close();
				danRaisedStmt = null;
			} else if (status == Constants.FUNCTION_SUCCESS) {
				// The value returned by the Stored Procedure is stored as a
				// ResultSet
				danRaisedResult = (ResultSet) danRaisedStmt.getObject(6);

				while (danRaisedResult.next()) {
					ProgressReport progressReport = new ProgressReport();

					// System.out.println("tempmemberId:"+tempmemberId);
					/*
					 * progressReport.setAppRefNo(danRaisedResult.getString(1));
					 * // System.out.println("danRaisedResult.getString(1):"+
					 * danRaisedResult.getString(1));
					 * progressReport.setSubmittedDate
					 * (danRaisedResult.getDate(2));
					 * progressReport.setSsiName(danRaisedResult.getString(3));
					 * progressReport
					 * .setTotalSanctionedAmount(danRaisedResult.getDouble(4));
					 */
					progressReport.setAppRefNo(danRaisedResult.getString(3));
					// System.out.println("danRaisedResult.getString(1):"+danRaisedResult.getString(1));
					progressReport.setSubmittedDate(danRaisedResult.getDate(2));
					progressReport.setSsiName(danRaisedResult.getString(4));
					progressReport.setTotalSanctionedAmount(danRaisedResult
							.getDouble(5));
					progressReport.setBranchName(danRaisedResult.getString(7));
					progressReport.setMemberId(danRaisedResult.getString(8));
					progressReport.setApplicationRefNo(danRaisedResult
							.getString(9));
					// System.out.println("AppRefNo:"+danRaisedResult.getString(3));

					danRaisedArray.add(progressReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			}
		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "StatusDetailsForBank", "Exited");
		return danRaisedArray;
	}

	public ArrayList StatusWiseReportDetails1(java.sql.Date startDate,
			java.sql.Date endDate, String application) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "StatusWiseReportDetails1", "Entered");
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();
		CallableStatement danRaisedStmt = null;
		// System.out.println("in dao");

		try {
			danRaisedStmt = connection
					.prepareCall("{? = call packCgpanForMember.funcCgpanForMember(?,?,?,?,?)}");
			danRaisedStmt.registerOutParameter(1, Types.INTEGER);
			danRaisedStmt.setDate(2, startDate);
			// System.out.println("startDate:"+startDate);
			danRaisedStmt.setDate(3, endDate);
			// System.out.println("endDate:"+endDate);
			danRaisedStmt.setString(4, application);
			// System.out.println("application:"+application);
			danRaisedStmt.registerOutParameter(5, Constants.CURSOR);
			danRaisedStmt.registerOutParameter(6, java.sql.Types.VARCHAR);

			danRaisedStmt.executeQuery();

			int status = danRaisedStmt.getInt(1);
			// System.out.println("status:"+status);
			String errorCode = danRaisedStmt.getString(6);
			// System.out.println("errorCode:"+errorCode);

			if (status == Constants.FUNCTION_FAILURE) {
				Log.log(Log.ERROR, "ReportDAO", "StatusWiseReportDetails",
						"SP returns a 1." + " Error code is :" + errorCode);
				danRaisedStmt.close();
				danRaisedStmt = null;
			} else if (status == Constants.FUNCTION_SUCCESS) {
				// The value returned by the Stored Procedure is stored as a
				// ResultSet
				danRaisedResult = (ResultSet) danRaisedStmt.getObject(5);

				while (danRaisedResult.next()) {
					ProgressReport progressReport = new ProgressReport();
					progressReport.setBankName(danRaisedResult.getString(1));
					// System.out.println("BankName:"+danRaisedResult.getString(1));
					progressReport.setAppRefNo(danRaisedResult.getString(2));
					// System.out.println("AppRefNo:"+danRaisedResult.getString(2));
					progressReport.setMemberId(danRaisedResult.getString(3));
					progressReport.setApplicationRefNo(danRaisedResult
							.getString(4));
					// System.out.println("MemberId:"+danRaisedResult.getString(3));

					danRaisedArray.add(progressReport);
					// danRaisedArray.add(danRaisedResult.getObject(1));
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			}
		}

		catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "StatusWiseReportDetails1", "Exited");
		return danRaisedArray;
	}

	public ArrayList StatusDetailsForBranch1(java.sql.Date startDate,
			java.sql.Date endDate, String memberId, String application)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "StatusDetailsForBranch1", "Entered");
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();
		CallableStatement danRaisedStmt = null;

		try {
			danRaisedStmt = connection
					.prepareCall("{? = call packCgpanForBranchNew.funcCgpanForBranchNew(?,?,?,?,?,?)}");
			danRaisedStmt.registerOutParameter(1, Types.INTEGER);
			danRaisedStmt.setDate(2, startDate);
			// System.out.println("startDate:"+startDate);
			danRaisedStmt.setDate(3, endDate);
			// System.out.println("endDate:"+endDate);
			danRaisedStmt.setString(5, application);
			// System.out.println("application:"+application);
			danRaisedStmt.setString(4, memberId);
			// System.out.println("memberId:"+memberId);
			danRaisedStmt.registerOutParameter(6, Constants.CURSOR);
			danRaisedStmt.registerOutParameter(7, java.sql.Types.VARCHAR);

			danRaisedStmt.executeQuery();

			int status = danRaisedStmt.getInt(1);
			// System.out.println("status:"+status);
			String errorCode = danRaisedStmt.getString(7);
			// System.out.println("errorCode:"+errorCode);

			if (status == Constants.FUNCTION_FAILURE) {
				Log.log(Log.ERROR, "ReportDAO", "StatusWiseReportDetails",
						"SP returns a 1." + " Error code is :" + errorCode);
				danRaisedStmt.close();
				danRaisedStmt = null;
			} else if (status == Constants.FUNCTION_SUCCESS) {
				// The value returned by the Stored Procedure is stored as a
				// ResultSet

				danRaisedResult = (ResultSet) danRaisedStmt.getObject(6);

				while (danRaisedResult.next()) {
					ProgressReport progressReport = new ProgressReport();
					progressReport.setMemberId(memberId);

					progressReport.setCgPan(danRaisedResult.getString(1));
					// System.out.println("danRaisedResult.getString(1):"+danRaisedResult.getString(1));
					progressReport.setSubmittedDate(danRaisedResult.getDate(2));
					progressReport.setApplicationRefNo(danRaisedResult
							.getString(3));
					progressReport.setSsiName(danRaisedResult.getString(4));
					progressReport.setTotalSanctionedAmount(danRaisedResult
							.getDouble(5));
					progressReport.setApprovedDate(danRaisedResult.getDate(6));
					progressReport.setBranchName(danRaisedResult.getString(7));
					progressReport.setExpiryDate(danRaisedResult.getDate(8));
					progressReport.setStatus(danRaisedResult.getString(9));
					progressReport
							.setGuarStartDate(danRaisedResult.getDate(10));
					progressReport.setAppRefNo(danRaisedResult.getString(11));
					// System.out.println("AppRefNo:"+danRaisedResult.getString(1));

					danRaisedArray.add(progressReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			}
		}

		catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "StatusDetailsForBranch1", "Exited");
		return danRaisedArray;
	}

	// Fix Bug 07092004 - 02

	public ArrayList StatusDetailsForZone1(java.sql.Date startDate,
			java.sql.Date endDate, String bankId, String zoneId,
			String application) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "StatusDetailsForZone1", "Entered");
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();
		CallableStatement danRaisedStmt = null;
		String mliId = bankId + zoneId + "0000";

		try {
			danRaisedStmt = connection
					.prepareCall("{? = call packCgpanForZoneNew.funcCgpanForZoneNew(?,?,?,?,?,?,?,?)}");
			danRaisedStmt.registerOutParameter(1, Types.INTEGER);
			danRaisedStmt.setDate(2, startDate);
			danRaisedStmt.setDate(3, endDate);
			danRaisedStmt.setString(5, application);
			danRaisedStmt.setString(4, bankId);
			danRaisedStmt.setString(6, zoneId);
			danRaisedStmt.setString(7, zoneId);
			danRaisedStmt.registerOutParameter(8, Constants.CURSOR);
			danRaisedStmt.registerOutParameter(9, java.sql.Types.VARCHAR);

			danRaisedStmt.executeQuery();

			int status = danRaisedStmt.getInt(1);
			// System.out.println("status:"+status);
			String errorCode = danRaisedStmt.getString(9);
			// System.out.println("errorCode:"+errorCode);

			if (status == Constants.FUNCTION_FAILURE) {
				Log.log(Log.ERROR, "ReportDAO", "StatusWiseReportDetails",
						"SP returns a 1." + " Error code is :" + errorCode);
				danRaisedStmt.close();
				danRaisedStmt = null;
			} else if (status == Constants.FUNCTION_SUCCESS) {
				// The value returned by the Stored Procedure is stored as a
				// ResultSet
				danRaisedResult = (ResultSet) danRaisedStmt.getObject(8);

				while (danRaisedResult.next()) {
					ProgressReport progressReport = new ProgressReport();
					progressReport.setMemberId(mliId);
					progressReport.setCgPan(danRaisedResult.getString(1));
					progressReport.setSubmittedDate(danRaisedResult.getDate(2));
					progressReport.setApplicationRefNo(danRaisedResult
							.getString(3));
					progressReport.setSsiName(danRaisedResult.getString(4));
					progressReport.setTotalSanctionedAmount(danRaisedResult
							.getDouble(5));
					progressReport.setApprovedDate(danRaisedResult.getDate(6));
					progressReport.setBranchName(danRaisedResult.getString(7));
					progressReport.setExpiryDate(danRaisedResult.getDate(8));
					progressReport.setStatus(danRaisedResult.getString(9));
					progressReport
							.setGuarStartDate(danRaisedResult.getDate(10));
					progressReport.setAppRefNo(danRaisedResult.getString(11));
					danRaisedArray.add(progressReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			}
		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "StatusDetailsForZone1", "Exited");
		return danRaisedArray;
	}

	// Fix Completed

	public ArrayList StatusDetailsForBank1(java.sql.Date startDate,
			java.sql.Date endDate, String memberId, String application)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "StatusDetailsForBank1", "Entered");
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();
		CallableStatement danRaisedStmt = null;
		String tempMemberId = memberId + "00000000";

		try {
			danRaisedStmt = connection
					.prepareCall("{? = call packCgpanForBankNew.funcCgpanForBankNew(?,?,?,?,?,?)}");
			danRaisedStmt.registerOutParameter(1, Types.INTEGER);
			danRaisedStmt.setDate(2, startDate);
			danRaisedStmt.setDate(3, endDate);
			danRaisedStmt.setString(5, application);
			// System.out.println("application:"+application);
			danRaisedStmt.setString(4, memberId);
			// System.out.println("tempMemberId:"+tempMemberId);
			danRaisedStmt.registerOutParameter(6, Constants.CURSOR);
			danRaisedStmt.registerOutParameter(7, java.sql.Types.VARCHAR);

			danRaisedStmt.executeQuery();

			int status = danRaisedStmt.getInt(1);
			// System.out.println("status:"+status);
			String errorCode = danRaisedStmt.getString(7);
			// System.out.println("errorCode:"+errorCode);

			if (status == Constants.FUNCTION_FAILURE) {
				Log.log(Log.ERROR, "ReportDAO", "StatusWiseReportDetails",
						"SP returns a 1." + " Error code is :" + errorCode);
				danRaisedStmt.close();
				danRaisedStmt = null;
			} else if (status == Constants.FUNCTION_SUCCESS) {
				// The value returned by the Stored Procedure is stored as a
				// ResultSet
				danRaisedResult = (ResultSet) danRaisedStmt.getObject(6);

				while (danRaisedResult.next()) {
					ProgressReport progressReport = new ProgressReport();
					progressReport.setMemberId(danRaisedResult.getString(8));
					progressReport.setCgPan(danRaisedResult.getString(1));
					progressReport.setSubmittedDate(danRaisedResult.getDate(2));
					progressReport.setApplicationRefNo(danRaisedResult
							.getString(3));
					progressReport.setSsiName(danRaisedResult.getString(4));
					progressReport.setTotalSanctionedAmount(danRaisedResult
							.getDouble(5));
					progressReport.setApprovedDate(danRaisedResult.getDate(6));
					progressReport.setBranchName(danRaisedResult.getString(7));
					progressReport.setExpiryDate(danRaisedResult.getDate(9));
					progressReport.setStatus(danRaisedResult.getString(10));
					progressReport
							.setGuarStartDate(danRaisedResult.getDate(11));
					progressReport.setAppRefNo(danRaisedResult.getString(12));
					danRaisedArray.add(progressReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			}
		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "StatusDetailsForBank1", "Exited");
		return danRaisedArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param memberId
	 * @param application
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList StatusDetailsForBranchMod(java.sql.Date startDate,
			java.sql.Date endDate, String memberId, String application)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "StatusDetailsForBank1", "Entered");
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();
		CallableStatement danRaisedStmt = null;
		String tempMemberId = memberId;

		try {
			danRaisedStmt = connection
					.prepareCall("{? = call packCgpanForBranchMod.funcCgpanForBranchMod(?,?,?,?,?,?)}");
			danRaisedStmt.registerOutParameter(1, Types.INTEGER);
			danRaisedStmt.setDate(2, startDate);
			danRaisedStmt.setDate(3, endDate);
			danRaisedStmt.setString(5, application);
			// System.out.println("application:"+application);
			danRaisedStmt.setString(4, memberId);
			// System.out.println("tempMemberId:"+tempMemberId);
			danRaisedStmt.registerOutParameter(6, Constants.CURSOR);
			danRaisedStmt.registerOutParameter(7, java.sql.Types.VARCHAR);

			danRaisedStmt.executeQuery();

			int status = danRaisedStmt.getInt(1);
			// System.out.println("status:"+status);
			String errorCode = danRaisedStmt.getString(7);
			// System.out.println("errorCode:"+errorCode);

			if (status == Constants.FUNCTION_FAILURE) {
				Log.log(Log.ERROR, "ReportDAO", "StatusWiseReportDetails",
						"SP returns a 1." + " Error code is :" + errorCode);
				danRaisedStmt.close();
				danRaisedStmt = null;
			} else if (status == Constants.FUNCTION_SUCCESS) {
				// The value returned by the Stored Procedure is stored as a
				// ResultSet
				danRaisedResult = (ResultSet) danRaisedStmt.getObject(6);

				while (danRaisedResult.next()) {
					ProgressReport progressReport = new ProgressReport();
					progressReport.setMemberId(danRaisedResult.getString(8));
					progressReport.setCgPan(danRaisedResult.getString(1));
					progressReport.setSubmittedDate(danRaisedResult.getDate(2));
					progressReport.setApplicationRefNo(danRaisedResult
							.getString(3));
					progressReport.setSsiName(danRaisedResult.getString(4));
					progressReport.setTotalSanctionedAmount(danRaisedResult
							.getDouble(5));
					progressReport.setApprovedDate(danRaisedResult.getDate(6));
					progressReport.setBranchName(danRaisedResult.getString(7));
					progressReport.setExpiryDate(danRaisedResult.getDate(9));
					progressReport.setStatus(danRaisedResult.getString(10));
					progressReport
							.setGuarStartDate(danRaisedResult.getDate(11));
					progressReport.setAppRefNo(danRaisedResult.getString(12));
					danRaisedArray.add(progressReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			}
		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "StatusDetailsForBank1", "Exited");
		return danRaisedArray;
	}

	public ApplicationReport ApplicationStatusWiseReportDetails(
			java.sql.Date startDate, java.sql.Date endDate, String application)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "ApplicationStatusWiseReportDetails",
				"Entered");
		ApplicationReport appReport = new ApplicationReport();
		ResultSet applicationResult;
		PreparedStatement applicationStmt = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {
				String query = "select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR,s.BID, 0, a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE, s.ssi_type_of_activity "
						+ " from ssi_detail s, "
						+ " promoter_detail p, application_detail a where "
						+ " s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and "
						+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER and "
						+ " a.APP_REF_NO = ?  "
						+ " union "
						+ " select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR,s.BID, 1,a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE, s.ssi_type_of_activity "
						+ " from ssi_detail_temp s, "
						+ " promoter_detail_temp p, application_detail_temp a where "
						+ " s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and "
						+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER and "
						+ " a.APP_REF_NO = ?  "
						+ " union "
						+ " select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME,"
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER,"
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE,"
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS,"
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ "  a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR,s.BID, 2,a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE, s.ssi_type_of_activity "
						+ " from ssi_detail s, promoter_detail p, application_detail_temp a where "
						+ " s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and"
						+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER and "
						+ " a.APP_REF_NO = ?  ";

				// System.out.println("Query:"+query);
				applicationStmt = connection.prepareStatement(query);
				applicationStmt.setString(1, application);
				applicationStmt.setString(2, application);
				applicationStmt.setString(3, application);

				applicationResult = applicationStmt.executeQuery();
				Log.log(Log.DEBUG, "ReportDAO",
						"ApplicationStatusWiseReportDetails", "Query Executed");
				// appReport = new ApplicationReport();

				while (applicationResult.next()) {
					Log.log(Log.DEBUG, "ReportDAO",
							"ApplicationStatusWiseReportDetails",
							"Result Set for general" + applicationResult);

					int index = applicationResult.getInt(28);
					// System.out.println(":index"+index);

					if (index == 0) {
						appReport.setSsiName(applicationResult.getString(1));
						appReport.setAddress(applicationResult.getString(2));
						appReport.setDistrict(applicationResult.getString(3));
						appReport.setState(applicationResult.getString(4));
						// System.out.println(applicationResult.getString(4));
						appReport.setUnitType(applicationResult.getString(5));
						// System.out.println(applicationResult.getString(5));
						appReport.setRegistrationNumber(applicationResult
								.getString(6));
						// System.out.println(applicationResult.getString(6));
						appReport.setStartDate(applicationResult.getDate(7));
						// System.out.println(applicationResult.getDate(7));
						appReport.setEmployees(applicationResult.getInt(8));
						// System.out.println(applicationResult.getInt(8));
						appReport.setStatus(applicationResult.getString(9));
						// System.out.println(applicationResult.getString(9));
						appReport.setOutstanding(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setIndustryType(applicationResult
								.getString(11));
						// System.out.println(applicationResult.getString(11));
						appReport.setTurnover(applicationResult.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
						appReport.setExport(applicationResult.getDouble(13));
						// System.out.println(applicationResult.getDouble(13));
						appReport.setChiefPromoter(applicationResult
								.getString(14));
						// System.out.println(applicationResult.getString(14));
						appReport.setItpan(applicationResult.getString(15));
						// System.out.println(applicationResult.getString(15));
						appReport.setGender(applicationResult.getString(16));
						// System.out.println(applicationResult.getString(16));
						appReport.setOthers(applicationResult.getString(17));
						// System.out.println(applicationResult.getString(17));
						appReport.setMemberId(applicationResult.getString(19));
						// System.out.println(applicationResult.getString(19));
						appReport.setCgpan(applicationResult.getString(18));
						// System.out.println(applicationResult.getString(18));
						appReport.setReferenceNumber(applicationResult
								.getString(25));
						// System.out.println(applicationResult.getString(25));
						appReport.setApplicationDate(applicationResult
								.getDate(21));
						// System.out.println(applicationResult.getDate(21));
						appReport.setStatus(applicationResult.getString(23));
						// System.out.println(applicationResult.getString(22));
						appReport.setRemarks(applicationResult.getString(22));
						// System.out.println(applicationResult.getString(23));
						appReport.setLoanType(applicationResult.getString(24));
						// System.out.println(applicationResult.getString(24));
						appReport.setIndustrySector(applicationResult
								.getString(26));
						// System.out.println(applicationResult.getString(26));
						appReport.setBid(applicationResult.getString(27));
						// System.out.println(applicationResult.getString(27));
						appReport.setProjectOutlay(applicationResult
								.getDouble(29));
						appReport.setCity(applicationResult.getString(30));
						appReport.setTypeOfActivity(applicationResult
								.getString(31));

					} else if (index == 1) {
						appReport.setSsiName(applicationResult.getString(1));
						appReport.setAddress(applicationResult.getString(2));
						appReport.setDistrict(applicationResult.getString(3));
						appReport.setState(applicationResult.getString(4));
						appReport.setUnitType(applicationResult.getString(5));
						// System.out.println(applicationResult.getString(5));
						appReport.setRegistrationNumber(applicationResult
								.getString(6));
						// System.out.println(applicationResult.getString(6));
						appReport.setStartDate(applicationResult.getDate(7));
						// System.out.println(applicationResult.getDate(7));
						appReport.setEmployees(applicationResult.getInt(8));
						// System.out.println(applicationResult.getInt(8));
						appReport.setStatus(applicationResult.getString(9));
						// System.out.println(applicationResult.getString(9));
						appReport.setOutstanding(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setIndustryType(applicationResult
								.getString(11));
						// System.out.println(applicationResult.getString(11));
						appReport.setTurnover(applicationResult.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
						appReport.setExport(applicationResult.getDouble(13));
						// System.out.println(applicationResult.getDouble(13));
						appReport.setChiefPromoter(applicationResult
								.getString(14));
						// System.out.println(applicationResult.getString(14));
						appReport.setItpan(applicationResult.getString(15));
						// System.out.println(applicationResult.getString(15));
						appReport.setGender(applicationResult.getString(16));
						// System.out.println(applicationResult.getString(16));
						appReport.setOthers(applicationResult.getString(17));
						// System.out.println(applicationResult.getString(17));
						appReport.setMemberId(applicationResult.getString(19));
						// System.out.println(applicationResult.getString(19));
						appReport.setCgpan(applicationResult.getString(18));
						// System.out.println(applicationResult.getString(18));
						appReport.setReferenceNumber(applicationResult
								.getString(25));
						// System.out.println(applicationResult.getString(25));
						appReport.setApplicationDate(applicationResult
								.getDate(21));
						// System.out.println(applicationResult.getDate(21));
						appReport.setStatus(applicationResult.getString(23));
						// System.out.println(applicationResult.getString(22));
						appReport.setRemarks(applicationResult.getString(22));
						// System.out.println(applicationResult.getString(23));
						appReport.setLoanType(applicationResult.getString(24));
						// System.out.println(applicationResult.getString(24));
						appReport.setIndustrySector(applicationResult
								.getString(26));
						// System.out.println(applicationResult.getString(26));
						appReport.setBid(applicationResult.getString(27));
						// System.out.println(applicationResult.getString(27));
						appReport.setProjectOutlay(applicationResult
								.getDouble(29));
						appReport.setCity(applicationResult.getString(30));
						appReport.setTypeOfActivity(applicationResult
								.getString(31));
					}

					else if (index == 2) {
						appReport.setSsiName(applicationResult.getString(1));
						appReport.setAddress(applicationResult.getString(2));
						appReport.setDistrict(applicationResult.getString(3));
						appReport.setState(applicationResult.getString(4));
						appReport.setUnitType(applicationResult.getString(5));
						// System.out.println(applicationResult.getString(5));
						appReport.setRegistrationNumber(applicationResult
								.getString(6));
						// System.out.println(applicationResult.getString(6));
						appReport.setStartDate(applicationResult.getDate(7));
						// System.out.println(applicationResult.getDate(7));
						appReport.setEmployees(applicationResult.getInt(8));
						// System.out.println(applicationResult.getInt(8));
						appReport.setStatus(applicationResult.getString(9));
						// System.out.println(applicationResult.getString(9));
						appReport.setOutstanding(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setIndustryType(applicationResult
								.getString(11));
						// System.out.println(applicationResult.getString(11));
						appReport.setTurnover(applicationResult.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
						appReport.setExport(applicationResult.getDouble(13));
						// System.out.println(applicationResult.getDouble(13));
						appReport.setChiefPromoter(applicationResult
								.getString(14));
						// System.out.println(applicationResult.getString(14));
						appReport.setItpan(applicationResult.getString(15));
						// System.out.println(applicationResult.getString(15));
						appReport.setGender(applicationResult.getString(16));
						// System.out.println(applicationResult.getString(16));
						appReport.setOthers(applicationResult.getString(17));
						// System.out.println(applicationResult.getString(17));
						appReport.setMemberId(applicationResult.getString(19));
						// System.out.println(applicationResult.getString(19));
						appReport.setCgpan(applicationResult.getString(18));
						// System.out.println(applicationResult.getString(18));
						appReport.setReferenceNumber(applicationResult
								.getString(25));
						// System.out.println(applicationResult.getString(25));
						appReport.setApplicationDate(applicationResult
								.getDate(21));
						// System.out.println(applicationResult.getDate(21));
						appReport.setStatus(applicationResult.getString(23));
						// System.out.println(applicationResult.getString(22));
						appReport.setRemarks(applicationResult.getString(22));
						// System.out.println(applicationResult.getString(23));
						appReport.setLoanType(applicationResult.getString(24));
						// System.out.println(applicationResult.getString(24));
						appReport.setIndustrySector(applicationResult
								.getString(26));
						// System.out.println(applicationResult.getString(26));
						appReport.setBid(applicationResult.getString(27));
						// System.out.println(applicationResult.getString(27));
						appReport.setProjectOutlay(applicationResult
								.getDouble(29));
						appReport.setCity(applicationResult.getString(30));
						appReport.setTypeOfActivity(applicationResult
								.getString(31));
					}
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query1 = " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ " t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION,"
						+ " t.TRM_SUBSIDY_EQUITY_SUPPORT,"
						+ " t.TRM_OTHERS,a.APP_PROJECT_OUTLAY,"
						+ " t.TRM_REPAYMENT_MORATORIUM,t.TRM_FIRST_INSTALLMENT_DUE_DT,"
						+ " t.TRM_NO_OF_INSTALLMENTS, t.TRM_REPAYMENT_PERIODICITY, "
						+ " 0 from TERM_LOAN_DETAIL t, APPLICATION_DETAIL a"
						+ " where t.APP_REF_NO = ? "
						+ " union "
						+ " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ " t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION,"
						+ " t.TRM_SUBSIDY_EQUITY_SUPPORT,"
						+ " t.TRM_OTHERS,a.APP_PROJECT_OUTLAY,"
						+ " t.TRM_REPAYMENT_MORATORIUM,t.TRM_FIRST_INSTALLMENT_DUE_DT,"
						+ " t.TRM_NO_OF_INSTALLMENTS, t.TRM_REPAYMENT_PERIODICITY, "
						+ " 1 from TERM_LOAN_DETAIL_temp t, APPLICATION_DETAIL_temp a"
						+ " where t.APP_REF_NO = ?  ";

				applicationStmt = connection.prepareStatement(query1);
				applicationStmt.setString(1, application);
				applicationStmt.setString(2, application);
				applicationResult = applicationStmt.executeQuery();

				// System.out.println("Query 1:"+query1);

				Log.log(Log.DEBUG, "ReportDAO",
						"ApplicationStatusWiseReportDetails",
						"Query 1 Executed");

				while (applicationResult.next()) {
					Log.log(Log.DEBUG, "ReportDAO",
							"ApplicationStatusWiseReportDetails",
							"Result Set for TC" + applicationResult);
					int index = applicationResult.getInt(13);
					// System.out.println(":index"+index);

					if (index == 0) {
						appReport.setTcSanctioned(applicationResult
								.getDouble(1));
						appReport.setTcSanctionedOn(applicationResult
								.getDate(2));
						appReport.setTcRate(applicationResult.getDouble(3));
						appReport.setTcPlr(applicationResult.getDouble(4));
						appReport.setTcPromoterContribution(applicationResult
								.getDouble(5));
						// System.out.println(applicationResult.getDouble(5));
						appReport.setTcSubsidy(applicationResult.getDouble(6));
						// System.out.println(applicationResult.getDouble(6));
						appReport.setTcEquity(applicationResult.getDouble(7));
						// System.out.println(applicationResult.getDouble(7));
						appReport.setTcProjectCost(applicationResult
								.getDouble(8));
						// System.out.println(applicationResult.getDouble(8));
						appReport.setRepaymentMoratorium(applicationResult
								.getInt(9));
						// System.out.println(applicationResult.getDouble(9));
						appReport.setFirstInstallmentDueDate(applicationResult
								.getDate(10));
						// System.out.println(applicationResult.getDate(10));
						appReport.setNumberOfInstallments(applicationResult
								.getInt(11));
						// System.out.println(applicationResult.getInt(12));
						int repayment = applicationResult.getInt(12);
						if (repayment == 0) {
							appReport.setRepaymentPeriodicity("");
						}
						if (repayment == 1) {
							appReport.setRepaymentPeriodicity("Monthly");
						}
						if (repayment == 2) {
							appReport.setRepaymentPeriodicity("Quarterly");
						}
						if (repayment == 3) {
							appReport.setRepaymentPeriodicity("Half yearly");
						}
					} else if (index == 1) {
						appReport.setTcSanctioned(applicationResult
								.getDouble(1));
						appReport.setTcSanctionedOn(applicationResult
								.getDate(2));
						appReport.setTcRate(applicationResult.getDouble(3));
						appReport.setTcPlr(applicationResult.getDouble(4));
						appReport.setTcPromoterContribution(applicationResult
								.getDouble(5));
						// System.out.println(applicationResult.getDouble(5));
						appReport.setTcSubsidy(applicationResult.getDouble(6));
						// System.out.println(applicationResult.getDouble(6));
						appReport.setTcEquity(applicationResult.getDouble(7));
						// System.out.println(applicationResult.getDouble(7));
						appReport.setTcProjectCost(applicationResult
								.getDouble(8));
						// System.out.println(applicationResult.getDouble(8));
						appReport.setRepaymentMoratorium(applicationResult
								.getInt(9));
						// System.out.println(applicationResult.getDouble(9));
						appReport.setFirstInstallmentDueDate(applicationResult
								.getDate(10));
						appReport.setNumberOfInstallments(applicationResult
								.getInt(11));
						int repayment = applicationResult.getInt(12);
						if (repayment == 0) {
							appReport.setRepaymentPeriodicity("");
						}
						if (repayment == 1) {
							appReport.setRepaymentPeriodicity("Monthly");
						}
						if (repayment == 2) {
							appReport.setRepaymentPeriodicity("Quarterly");
						}
						if (repayment == 3) {
							appReport.setRepaymentPeriodicity("Half yearly");
						}
					}
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query2 = " select t.WCP_FB_LIMIT_SANCTIONED, t.WCP_FB_LIMIT_SANCTIONED_DT,"
						+ " t.WCP_NFB_LIMIT_SANCTIONED, t.WCP_NFB_LIMIT_SANCTIONED_DT,"
						+ " t.WCP_INTEREST, t.WCP_PLR, t.WCP_PROMOTERS_CONTRIBUTION,"
						+ "  t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS,"
						+ " a.APP_PROJECT_OUTLAY,NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0),"
						+ " NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0),"
						+ " 0 from working_capital_Detail t,"
						+ " wc_outstanding_detail tc , application_detail a where t.APP_REF_NO = ? "
						+ " and t.APP_REF_NO = a.APP_REF_NO and t.APP_REF_NO = tc.APP_REF_NO(+) "
						+ " union"
						+ "  select  t.WCP_FB_LIMIT_SANCTIONED, t.WCP_FB_LIMIT_SANCTIONED_DT, "
						+ " t.WCP_NFB_LIMIT_SANCTIONED, t.WCP_NFB_LIMIT_SANCTIONED_DT, "
						+ " t.WCP_INTEREST, t.WCP_PLR, t.WCP_PROMOTERS_CONTRIBUTION, "
						+ " t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS,  "
						+ "  a.APP_PROJECT_OUTLAY, NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0), "
						+ "  NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0), 1 from WORKING_CAPITAL_DETAIL_temp t,"
						+ "  WC_OUTSTANDING_DETAIL_temp tc, APPLICATION_DETAIL_temp a where t.APP_REF_NO = ?"
						+ "  and t.APP_REF_NO = a.APP_REF_NO and t.APP_REF_NO = tc.APP_REF_NO(+) ";

				// System.out.println(query2);
				applicationStmt = connection.prepareStatement(query2);
				applicationStmt.setString(1, application);
				applicationStmt.setString(2, application);
				// System.out.println("parameters set");
				applicationResult = applicationStmt.executeQuery();
				Log.log(Log.DEBUG, "ReportDAO",
						"ApplicationStatusWiseReportDetails",
						"Query 2 Executed");
				// System.out.println("query executed");

				while (applicationResult.next()) {
					Log.log(Log.DEBUG, "ReportDAO",
							"ApplicationStatusWiseReportDetails",
							"Result Set for WC" + applicationResult);
					int index = applicationResult.getInt(13);
					// System.out.println("index:"+index);

					if (index == 0) {
						appReport.setWcFbSanctioned(applicationResult
								.getDouble(1));
						appReport.setWcFbSanctionedOn(applicationResult
								.getDate(2));
						appReport.setWcNfbSanctioned(applicationResult
								.getDouble(3));
						appReport.setWcNfbSanctionedOn(applicationResult
								.getDate(4));
						appReport.setWcInterest(applicationResult.getDouble(5));
						// System.out.println(applicationResult.getInt(5));
						appReport.setWcPlr(applicationResult.getDouble(6));
						// System.out.println(applicationResult.getInt(6));
						appReport.setWcPromoterContribution(applicationResult
								.getDouble(7));
						// System.out.println(applicationResult.getDouble(7));
						appReport.setWcSubsidy(applicationResult.getDouble(8));
						// System.out.println(applicationResult.getDouble(8));
						appReport.setWcEquity(applicationResult.getDouble(9));
						// System.out.println(applicationResult.getDouble(9));
						appReport.setWcProjectCost(applicationResult
								.getDouble(10));
						appReport.setWcFbPrincipalOutstanding(applicationResult
								.getDouble(11));
						appReport
								.setWcNfbPrincipalOutstanding(applicationResult
										.getDouble(12));

					} else if (index == 1) {
						appReport.setWcFbSanctioned(applicationResult
								.getDouble(1));
						appReport.setWcFbSanctionedOn(applicationResult
								.getDate(2));
						appReport.setWcNfbSanctioned(applicationResult
								.getDouble(3));
						appReport.setWcNfbSanctionedOn(applicationResult
								.getDate(4));
						appReport.setWcInterest(applicationResult.getDouble(5));
						// System.out.println(applicationResult.getInt(5));
						appReport.setWcPlr(applicationResult.getDouble(6));
						// System.out.println(applicationResult.getInt(6));
						appReport.setWcPromoterContribution(applicationResult
								.getDouble(7));
						// System.out.println(applicationResult.getDouble(7));
						appReport.setWcSubsidy(applicationResult.getDouble(8));
						// System.out.println(applicationResult.getDouble(8));
						appReport.setWcEquity(applicationResult.getDouble(9));
						// System.out.println(applicationResult.getDouble(9));
						appReport.setWcProjectCost(applicationResult
								.getDouble(10));
						appReport.setWcFbPrincipalOutstanding(applicationResult
								.getDouble(11));
						appReport
								.setWcNfbPrincipalOutstanding(applicationResult
										.getDouble(12));

					}
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query3 = "select d.DBR_AMOUNT, d.DBR_DT, d.DBR_FINAL_DISBURSEMENT_FLAG,0 from "
						+ " disbursement_detail d, application_detail a where d.APP_REF_NO "
						+ " = a.APP_REF_NO and  d.DBR_DT = (select max(DBR_DT) "
						+ " from disbursement_detail where APP_REF_NO = '"
						+ application
						+ "')"
						+ " and d.APP_REF_NO = '"
						+ application
						+ "' "
						+ " union "
						+ " select d.DBR_AMOUNT, d.DBR_DT, d.DBR_FINAL_DISBURSEMENT_FLAG,1 from "
						+ " DISBURSEMENT_DETAIL_temp d, APPLICATION_DETAIL_temp a "
						+ " where d.APP_REF_NO = a.APP_REF_NO and  d.DBR_DT = (select max(DBR_DT) "
						+ " from DISBURSEMENT_DETAIL_temp where APP_REF_NO = '"
						+ application
						+ "') and d.APP_REF_NO = '"
						+ application
						+ "'";

				applicationStmt = connection.prepareStatement(query3);
				applicationResult = applicationStmt.executeQuery();
				Log.log(Log.DEBUG, "ReportDAO",
						"ApplicationStatusWiseReportDetails",
						"Query 3 Executed");
				// System.out.println("query3:"+query3);

				while (applicationResult.next()) {
					Log.log(Log.DEBUG, "ReportDAO",
							"ApplicationStatusWiseReportDetails",
							"Result Set for Disbursement" + applicationResult);
					int index = applicationResult.getInt(4);

					if (index == 0) {
						// appReport = new ApplicationReport();
						appReport.setDisbursementAmount(applicationResult
								.getDouble(1));
						appReport.setDisbursementDate(applicationResult
								.getDate(2));
						appReport.setFinalDisbursement(applicationResult
								.getString(3));

					} else if (index == 1) {
						// appReport = new ApplicationReport();
						appReport.setDisbursementAmount(applicationResult
								.getDouble(1));
						appReport.setDisbursementDate(applicationResult
								.getDate(2));
						appReport.setFinalDisbursement(applicationResult
								.getString(3));

					}
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query4 = "select tc.TCO_OUTSTANDING_AMOUNT,0 from TC_OUTSTANDING_DETAIL_temp tc"
						+ " where tc.APP_REF_NO = '"
						+ application
						+ "' and  tc.tco_outstanding_on_dt =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL_temp where APP_REF_NO = '"
						+ application
						+ "')"
						+ " union"
						+ " select tc.TCO_OUTSTANDING_AMOUNT,1 from TC_OUTSTANDING_DETAIL tc"
						+ "  where tc.APP_REF_NO = '"
						+ application
						+ "' and tc.tco_outstanding_on_dt =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL where APP_REF_NO = '"
						+ application + "')";

				// System.out.println("query4:"+query4);
				applicationStmt = connection.prepareStatement(query4);
				applicationResult = applicationStmt.executeQuery();
				Log.log(Log.DEBUG, "ReportDAO",
						"ApplicationStatusWiseReportDetails", "Query 4 Excuted");

				while (applicationResult.next()) {
					Log.log(Log.DEBUG, "ReportDAO",
							"ApplicationStatusWiseReportDetails",
							"Result Set for TC Outstanding "
									+ applicationResult);
					int index = applicationResult.getInt(2);

					if (index == 0) {
						appReport.setTcOutstanding(applicationResult
								.getDouble(1));
						// System.out.println("----------------");
					} else if (index == 1) {
						appReport.setTcOutstanding(applicationResult
								.getDouble(1));
						// System.out.println("----------------");
					}

				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

			} catch (SQLException exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		} else if (startDate == null) {
			// System.out.println("*******************General*******************");
			try {
				String query = "select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR,s.BID, 0,a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE  "
						+ " from ssi_detail s, "
						+ " promoter_detail p, application_detail a where "
						+ " s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and "
						+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER and "
						+ " a.APP_REF_NO = ?  "
						+ " union "
						+ " select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR,s.BID, 1,a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE  "
						+ " from ssi_detail_temp@cginter s, "
						+ " promoter_detail_temp@cginter p, application_detail_temp@cginter a where "
						+ " s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and "
						+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER and "
						+ " a.APP_REF_NO = ?  "
						+ " union "
						+ " select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME,"
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER,"
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE,"
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS,"
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ "  a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR,s.BID, 2,a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE  "
						+ " from ssi_detail s, promoter_detail p, application_detail_temp@cginter a where "
						+ " s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and"
						+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER and "
						+ " a.APP_REF_NO = ?  ";

				applicationStmt = connection.prepareStatement(query);
				applicationStmt.setString(1, application);
				applicationStmt.setString(2, application);
				applicationStmt.setString(3, application);
				applicationResult = applicationStmt.executeQuery();
				// appReport = new ApplicationReport();

				while (applicationResult.next()) {

					int index = applicationResult.getInt(28);
					// System.out.println(":index"+index);

					if (index == 0) {
						// System.out.println("--------------------");
						appReport.setSsiName(applicationResult.getString(1));
						// System.out.println(applicationResult.getString(1));
						appReport.setAddress(applicationResult.getString(2));
						// System.out.println(applicationResult.getString(2));
						appReport.setDistrict(applicationResult.getString(3));
						// System.out.println(applicationResult.getString(3));
						appReport.setState(applicationResult.getString(4));
						// System.out.println(applicationResult.getString(4));
						appReport.setUnitType(applicationResult.getString(5));
						// System.out.println(applicationResult.getString(5));
						appReport.setRegistrationNumber(applicationResult
								.getString(6));
						// System.out.println(applicationResult.getString(6));
						appReport.setStartDate(applicationResult.getDate(7));
						// System.out.println(applicationResult.getDate(7));
						appReport.setEmployees(applicationResult.getInt(8));
						// System.out.println(applicationResult.getInt(8));
						appReport.setStatus(applicationResult.getString(9));
						// System.out.println(applicationResult.getString(9));
						appReport.setOutstanding(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setIndustryType(applicationResult
								.getString(11));
						// System.out.println(applicationResult.getString(11));
						appReport.setTurnover(applicationResult.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
						appReport.setExport(applicationResult.getDouble(13));
						// System.out.println(applicationResult.getDouble(13));
						appReport.setChiefPromoter(applicationResult
								.getString(14));
						// System.out.println(applicationResult.getString(14));
						appReport.setItpan(applicationResult.getString(15));
						// System.out.println(applicationResult.getString(15));
						appReport.setGender(applicationResult.getString(16));
						// System.out.println(applicationResult.getString(16));
						appReport.setOthers(applicationResult.getString(17));
						// System.out.println(applicationResult.getString(17));
						appReport.setMemberId(applicationResult.getString(19));
						// System.out.println(applicationResult.getString(19));
						appReport.setCgpan(applicationResult.getString(18));
						// System.out.println(applicationResult.getString(18));
						appReport.setReferenceNumber(applicationResult
								.getString(25));
						// System.out.println(applicationResult.getString(25));
						appReport.setApplicationDate(applicationResult
								.getDate(21));
						// System.out.println(applicationResult.getDate(21));
						appReport.setStatus(applicationResult.getString(23));
						// System.out.println(applicationResult.getString(22));
						appReport.setRemarks(applicationResult.getString(22));
						// System.out.println(applicationResult.getString(23));
						appReport.setLoanType(applicationResult.getString(24));
						// System.out.println(applicationResult.getString(24));
						appReport.setIndustrySector(applicationResult
								.getString(26));
						// System.out.println(applicationResult.getString(26));
						appReport.setBid(applicationResult.getString(27));
						// System.out.println(applicationResult.getString(27));
						appReport.setProjectOutlay(applicationResult
								.getDouble(29));
						appReport.setCity(applicationResult.getString(30));
					} else if (index == 1) {
						// System.out.println("--------------------");
						appReport.setSsiName(applicationResult.getString(1));
						// System.out.println(applicationResult.getString(1));
						appReport.setAddress(applicationResult.getString(2));
						// System.out.println(applicationResult.getString(2));
						appReport.setDistrict(applicationResult.getString(3));
						// System.out.println(applicationResult.getString(3));
						appReport.setState(applicationResult.getString(4));
						// System.out.println(applicationResult.getString(4));
						appReport.setUnitType(applicationResult.getString(5));
						// System.out.println(applicationResult.getString(5));
						appReport.setRegistrationNumber(applicationResult
								.getString(6));
						// System.out.println(applicationResult.getString(6));
						appReport.setStartDate(applicationResult.getDate(7));
						// System.out.println(applicationResult.getDate(7));
						appReport.setEmployees(applicationResult.getInt(8));
						// System.out.println(applicationResult.getInt(8));
						appReport.setStatus(applicationResult.getString(9));
						// System.out.println(applicationResult.getString(9));
						appReport.setOutstanding(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setIndustryType(applicationResult
								.getString(11));
						// System.out.println(applicationResult.getString(11));
						appReport.setTurnover(applicationResult.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
						appReport.setExport(applicationResult.getDouble(13));
						// System.out.println(applicationResult.getDouble(13));
						appReport.setChiefPromoter(applicationResult
								.getString(14));
						// System.out.println(applicationResult.getString(14));
						appReport.setItpan(applicationResult.getString(15));
						// System.out.println(applicationResult.getString(15));
						appReport.setGender(applicationResult.getString(16));
						// System.out.println(applicationResult.getString(16));
						appReport.setOthers(applicationResult.getString(17));
						// System.out.println(applicationResult.getString(17));
						appReport.setMemberId(applicationResult.getString(19));
						// System.out.println(applicationResult.getString(19));
						appReport.setCgpan(applicationResult.getString(18));
						// System.out.println(applicationResult.getString(18));
						appReport.setReferenceNumber(applicationResult
								.getString(25));
						// System.out.println(applicationResult.getString(25));
						appReport.setApplicationDate(applicationResult
								.getDate(21));
						// System.out.println(applicationResult.getDate(21));
						appReport.setStatus(applicationResult.getString(23));
						// System.out.println(applicationResult.getString(22));
						appReport.setRemarks(applicationResult.getString(22));
						// System.out.println(applicationResult.getString(23));
						appReport.setLoanType(applicationResult.getString(24));
						// System.out.println(applicationResult.getString(24));
						appReport.setIndustrySector(applicationResult
								.getString(26));
						// System.out.println(applicationResult.getString(26));
						appReport.setBid(applicationResult.getString(27));
						// System.out.println(applicationResult.getString(27));
						appReport.setProjectOutlay(applicationResult
								.getDouble(29));
						appReport.setCity(applicationResult.getString(30));
					}

					else if (index == 2) {
						// System.out.println("--------------------");
						appReport.setSsiName(applicationResult.getString(1));
						// System.out.println(applicationResult.getString(1));
						appReport.setAddress(applicationResult.getString(2));
						// System.out.println(applicationResult.getString(2));
						appReport.setDistrict(applicationResult.getString(3));
						// System.out.println(applicationResult.getString(3));
						appReport.setState(applicationResult.getString(4));
						// System.out.println(applicationResult.getString(4));
						appReport.setUnitType(applicationResult.getString(5));
						// System.out.println(applicationResult.getString(5));
						appReport.setRegistrationNumber(applicationResult
								.getString(6));
						// System.out.println(applicationResult.getString(6));
						appReport.setStartDate(applicationResult.getDate(7));
						// System.out.println(applicationResult.getDate(7));
						appReport.setEmployees(applicationResult.getInt(8));
						// System.out.println(applicationResult.getInt(8));
						appReport.setStatus(applicationResult.getString(9));
						// System.out.println(applicationResult.getString(9));
						appReport.setOutstanding(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setIndustryType(applicationResult
								.getString(11));
						// System.out.println(applicationResult.getString(11));
						appReport.setTurnover(applicationResult.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
						appReport.setExport(applicationResult.getDouble(13));
						// System.out.println(applicationResult.getDouble(13));
						appReport.setChiefPromoter(applicationResult
								.getString(14));
						// System.out.println(applicationResult.getString(14));
						appReport.setItpan(applicationResult.getString(15));
						// System.out.println(applicationResult.getString(15));
						appReport.setGender(applicationResult.getString(16));
						// System.out.println(applicationResult.getString(16));
						appReport.setOthers(applicationResult.getString(17));
						// System.out.println(applicationResult.getString(17));
						appReport.setMemberId(applicationResult.getString(19));
						// System.out.println(applicationResult.getString(19));
						appReport.setCgpan(applicationResult.getString(18));
						// System.out.println(applicationResult.getString(18));
						appReport.setReferenceNumber(applicationResult
								.getString(25));
						// System.out.println(applicationResult.getString(25));
						appReport.setApplicationDate(applicationResult
								.getDate(21));
						// System.out.println(applicationResult.getDate(21));
						appReport.setStatus(applicationResult.getString(23));
						// System.out.println(applicationResult.getString(22));
						appReport.setRemarks(applicationResult.getString(22));
						// System.out.println(applicationResult.getString(23));
						appReport.setLoanType(applicationResult.getString(24));
						// System.out.println(applicationResult.getString(24));
						appReport.setIndustrySector(applicationResult
								.getString(26));
						// System.out.println(applicationResult.getString(26));
						appReport.setBid(applicationResult.getString(27));
						// System.out.println(applicationResult.getString(27));
						appReport.setProjectOutlay(applicationResult
								.getDouble(29));
						appReport.setCity(applicationResult.getString(30));
					}
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				// System.out.println("*******************TC*******************");

				String query1 = " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ " t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION,"
						+ " t.TRM_SUBSIDY_EQUITY_SUPPORT,"
						+ " t.TRM_OTHERS,a.APP_PROJECT_OUTLAY,"
						+ " t.TRM_REPAYMENT_MORATORIUM,t.TRM_FIRST_INSTALLMENT_DUE_DT,"
						+ " t.TRM_NO_OF_INSTALLMENTS, t.TRM_REPAYMENT_PERIODICITY, "
						+ " 0 from TERM_LOAN_DETAIL t, APPLICATION_DETAIL a"
						+ " where t.APP_REF_NO = ?  "
						+ " union "
						+ " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ " t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION,"
						+ " t.TRM_SUBSIDY_EQUITY_SUPPORT,"
						+ " t.TRM_OTHERS,a.APP_PROJECT_OUTLAY,"
						+ " t.TRM_REPAYMENT_MORATORIUM,t.TRM_FIRST_INSTALLMENT_DUE_DT,"
						+ " t.TRM_NO_OF_INSTALLMENTS, t.TRM_REPAYMENT_PERIODICITY, "
						+ " 1 from TERM_LOAN_DETAIL_temp@cginter t, APPLICATION_DETAIL_temp@cginter a"
						+ " where t.APP_REF_NO = ?  ";

				applicationStmt = connection.prepareStatement(query1);
				applicationStmt.setString(1, application);
				applicationStmt.setString(2, application);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					int index = applicationResult.getInt(13);
					// System.out.println(":index"+index);

					if (index == 0) {
						// System.out.println("-------TC-----------");
						appReport.setTcSanctioned(applicationResult
								.getDouble(1));
						// System.out.println(applicationResult.getDouble(1));
						appReport.setTcSanctionedOn(applicationResult
								.getDate(2));
						// System.out.println(applicationResult.getDate(2));
						appReport.setTcRate(applicationResult.getDouble(3));
						// System.out.println(applicationResult.getInt(3));
						appReport.setTcPlr(applicationResult.getDouble(4));
						// System.out.println(applicationResult.getInt(4));
						appReport.setTcPromoterContribution(applicationResult
								.getDouble(5));
						// System.out.println(applicationResult.getDouble(5));
						appReport.setTcSubsidy(applicationResult.getDouble(6));
						// System.out.println(applicationResult.getDouble(6));
						appReport.setTcEquity(applicationResult.getDouble(7));
						// System.out.println(applicationResult.getDouble(7));
						appReport.setTcProjectCost(applicationResult
								.getDouble(8));
						// System.out.println(applicationResult.getDouble(8));
						appReport.setRepaymentMoratorium(applicationResult
								.getInt(9));
						// System.out.println(applicationResult.getDouble(9));
						appReport.setFirstInstallmentDueDate(applicationResult
								.getDate(10));
						// System.out.println(applicationResult.getDate(10));
						appReport.setNumberOfInstallments(applicationResult
								.getInt(11));
						// System.out.println(applicationResult.getInt(12));
						int repayment = applicationResult.getInt(12);
						if (repayment == 0) {
							appReport.setRepaymentPeriodicity("");
						}
						if (repayment == 1) {
							appReport.setRepaymentPeriodicity("Monthly");
						}
						if (repayment == 2) {
							appReport.setRepaymentPeriodicity("Quarterly");
						}
						if (repayment == 3) {
							appReport.setRepaymentPeriodicity("Half yearly");
						}
					} else if (index == 1) {
						// System.out.println("-------TC-----------");
						appReport.setTcSanctioned(applicationResult
								.getDouble(1));
						// System.out.println(applicationResult.getDouble(1));
						appReport.setTcSanctionedOn(applicationResult
								.getDate(2));
						// System.out.println(applicationResult.getDate(2));
						appReport.setTcRate(applicationResult.getDouble(3));
						// System.out.println(applicationResult.getInt(3));
						appReport.setTcPlr(applicationResult.getDouble(4));
						// System.out.println(applicationResult.getInt(4));
						appReport.setTcPromoterContribution(applicationResult
								.getDouble(5));
						// System.out.println(applicationResult.getDouble(5));
						appReport.setTcSubsidy(applicationResult.getDouble(6));
						// System.out.println(applicationResult.getDouble(6));
						appReport.setTcEquity(applicationResult.getDouble(7));
						// System.out.println(applicationResult.getDouble(7));
						appReport.setTcProjectCost(applicationResult
								.getDouble(8));
						// System.out.println(applicationResult.getDouble(8));
						appReport.setRepaymentMoratorium(applicationResult
								.getInt(9));
						// System.out.println(applicationResult.getDouble(9));
						appReport.setFirstInstallmentDueDate(applicationResult
								.getDate(10));
						// System.out.println(applicationResult.getDate(10));
						appReport.setNumberOfInstallments(applicationResult
								.getInt(11));
						// System.out.println(applicationResult.getInt(12));
						int repayment = applicationResult.getInt(12);
						if (repayment == 0) {
							appReport.setRepaymentPeriodicity("");
						}
						if (repayment == 1) {
							appReport.setRepaymentPeriodicity("Monthly");
						}
						if (repayment == 2) {
							appReport.setRepaymentPeriodicity("Quarterly");
						}
						if (repayment == 3) {
							appReport.setRepaymentPeriodicity("Half yearly");
						}
					}
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query2 = " select t.WCP_FB_LIMIT_SANCTIONED, t.WCP_FB_LIMIT_SANCTIONED_DT,"
						+ " t.WCP_NFB_LIMIT_SANCTIONED, t.WCP_NFB_LIMIT_SANCTIONED_DT,"
						+ " t.WCP_INTEREST, t.WCP_PLR, t.WCP_PROMOTERS_CONTRIBUTION,"
						+ "  t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS,"
						+ " a.APP_PROJECT_OUTLAY,NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0),"
						+ " NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0),"
						+ " 0 from working_capital_Detail t,"
						+ " wc_outstanding_detail tc , application_detail a where t.APP_REF_NO = ? "
						+ " and t.APP_REF_NO = a.APP_REF_NO and t.APP_REF_NO = tc.APP_REF_NO(+) "
						+ " union"
						+ "  select  t.WCP_FB_LIMIT_SANCTIONED, t.WCP_FB_LIMIT_SANCTIONED_DT, "
						+ " t.WCP_NFB_LIMIT_SANCTIONED, t.WCP_NFB_LIMIT_SANCTIONED_DT, "
						+ " t.WCP_INTEREST, t.WCP_PLR, t.WCP_PROMOTERS_CONTRIBUTION, "
						+ " t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS,  "
						+ "  a.APP_PROJECT_OUTLAY, NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0), "
						+ "  NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0), 1 from WORKING_CAPITAL_DETAIL_temp@cginter t,"
						+ "  WC_OUTSTANDING_DETAIL_temp@cginter tc, APPLICATION_DETAIL_temp@cginter a where t.APP_REF_NO = ?"
						+ "  and t.APP_REF_NO = a.APP_REF_NO and t.APP_REF_NO = tc.APP_REF_NO(+)  ";

				// System.out.println(query2);
				applicationStmt = connection.prepareStatement(query2);
				applicationStmt.setString(1, application);
				applicationStmt.setString(2, application);
				// System.out.println("parameters set");
				applicationResult = applicationStmt.executeQuery();
				// System.out.println("query executed");

				while (applicationResult.next()) {
					int index = applicationResult.getInt(13);
					// System.out.println("index:"+index);

					if (index == 0) {
						// System.out.println("--------WC--------");
						appReport.setWcFbSanctioned(applicationResult
								.getDouble(1));
						// System.out.println(applicationResult.getDouble(1));
						appReport.setWcFbSanctionedOn(applicationResult
								.getDate(2));
						// System.out.println(applicationResult.getDate(2));
						appReport.setWcNfbSanctioned(applicationResult
								.getDouble(3));
						// System.out.println(applicationResult.getDouble(3));
						appReport.setWcNfbSanctionedOn(applicationResult
								.getDate(4));
						// System.out.println(applicationResult.getDate(4));
						appReport.setWcInterest(applicationResult.getDouble(5));
						// System.out.println(applicationResult.getInt(5));
						appReport.setWcPlr(applicationResult.getDouble(6));
						// System.out.println(applicationResult.getInt(6));
						appReport.setWcPromoterContribution(applicationResult
								.getDouble(7));
						// System.out.println(applicationResult.getDouble(7));
						appReport.setWcSubsidy(applicationResult.getDouble(8));
						// System.out.println(applicationResult.getDouble(8));
						appReport.setWcEquity(applicationResult.getDouble(9));
						// System.out.println(applicationResult.getDouble(9));
						appReport.setWcProjectCost(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setWcFbPrincipalOutstanding(applicationResult
								.getDouble(11));
						// System.out.println(applicationResult.getDouble(11));
						appReport
								.setWcNfbPrincipalOutstanding(applicationResult
										.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
					} else if (index == 1) {
						// System.out.println("--------WC--------");
						appReport.setWcFbSanctioned(applicationResult
								.getDouble(1));
						// System.out.println(applicationResult.getDouble(1));
						appReport.setWcFbSanctionedOn(applicationResult
								.getDate(2));
						// System.out.println(applicationResult.getDate(2));
						appReport.setWcNfbSanctioned(applicationResult
								.getDouble(3));
						// System.out.println(applicationResult.getDouble(3));
						appReport.setWcNfbSanctionedOn(applicationResult
								.getDate(4));
						// System.out.println(applicationResult.getDate(4));
						appReport.setWcInterest(applicationResult.getDouble(5));
						// System.out.println(applicationResult.getInt(5));
						appReport.setWcPlr(applicationResult.getDouble(6));
						// System.out.println(applicationResult.getInt(6));
						appReport.setWcPromoterContribution(applicationResult
								.getDouble(7));
						// System.out.println(applicationResult.getDouble(7));
						appReport.setWcSubsidy(applicationResult.getDouble(8));
						// System.out.println(applicationResult.getDouble(8));
						appReport.setWcEquity(applicationResult.getDouble(9));
						// System.out.println(applicationResult.getDouble(9));
						appReport.setWcProjectCost(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setWcFbPrincipalOutstanding(applicationResult
								.getDouble(11));
						// System.out.println(applicationResult.getDouble(11));
						appReport
								.setWcNfbPrincipalOutstanding(applicationResult
										.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
					}
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query3 = "select d.DBR_AMOUNT, d.DBR_DT, d.DBR_FINAL_DISBURSEMENT_FLAG,0 from "
						+ " disbursement_detail d, application_detail a where d.APP_REF_NO "
						+ " = a.APP_REF_NO and  d.DBR_DT = (select max(DBR_DT) "
						+ " from disbursement_detail where APP_REF_NO = '"
						+ application
						+ "')"
						+ " and d.APP_REF_NO = '"
						+ application
						+ "' "
						+ " union "
						+ " select d.DBR_AMOUNT, d.DBR_DT, d.DBR_FINAL_DISBURSEMENT_FLAG,1 from "
						+ " DISBURSEMENT_DETAIL_temp@cginter d, APPLICATION_DETAIL_temp@cginter a "
						+ " where d.APP_REF_NO = a.APP_REF_NO and  d.DBR_DT = (select max(DBR_DT) "
						+ " from DISBURSEMENT_DETAIL_temp@cginter where APP_REF_NO = '"
						+ application
						+ "') "
						+ "and d.APP_REF_NO = '"
						+ application + "' ";

				// System.out.println(query3);
				applicationStmt = connection.prepareStatement(query3);
				applicationResult = applicationStmt.executeQuery();
				// System.out.println("query executed");

				while (applicationResult.next()) {
					int index = applicationResult.getInt(4);

					if (index == 0) {
						appReport.setDisbursementAmount(applicationResult
								.getDouble(1));
						// System.out.println(applicationResult.getDouble(1));
						appReport.setDisbursementDate(applicationResult
								.getDate(2));
						// System.out.println(applicationResult.getDate(2));
						appReport.setFinalDisbursement(applicationResult
								.getString(3));
					} else if (index == 1) {
						appReport.setDisbursementAmount(applicationResult
								.getDouble(1));
						// System.out.println(applicationResult.getDouble(1));
						appReport.setDisbursementDate(applicationResult
								.getDate(2));
						// System.out.println(applicationResult.getDate(2));
						appReport.setFinalDisbursement(applicationResult
								.getString(3));
					}
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query4 = "select tc.TCO_OUTSTANDING_AMOUNT,0 from TC_OUTSTANDING_DETAIL_temp@cginter tc"
						+ " where tc.APP_REF_NO = '"
						+ application
						+ "' and  tc.tco_outstanding_on_dt =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL_temp@cginter where APP_REF_NO = '"
						+ application
						+ "')"
						+ " union"
						+ " select tc.TCO_OUTSTANDING_AMOUNT,1 from TC_OUTSTANDING_DETAIL tc"
						+ "  where tc.APP_REF_NO = '"
						+ application
						+ "' and tc.tco_outstanding_on_dt =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL where APP_REF_NO = '"
						+ application + "')";

				applicationStmt = connection.prepareStatement(query4);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					int index = applicationResult.getInt(2);

					if (index == 0) {
						appReport.setTcOutstanding(applicationResult
								.getDouble(1));
					} else if (index == 1) {
						appReport.setTcOutstanding(applicationResult
								.getDouble(1));
					}

				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

			} catch (SQLException exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "ApplicationStatusWiseReportDetails",
				"Exited");
		return appReport;
	}

	public ApplicationReport ApplicationStatusWiseReportDetails1(
			java.sql.Date startDate, java.sql.Date endDate, String application)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "ApplicationStatusWiseReportDetails1",
				"Entered");
		ApplicationReport appReport = new ApplicationReport();
		ResultSet applicationResult;
		PreparedStatement applicationStmt = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {
				String query = "select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR,s.BID, 0,a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE   "
						+ " from ssi_detail s, "
						+ " promoter_detail p, application_detail a where "
						+ " s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and "
						+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER and "
						+ " a.APP_REF_NO = ?  "
						+ " union "
						+ " select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR,s.BID, 1,a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE  "
						+ " from ssi_detail_temp s, "
						+ " promoter_detail_temp p, application_detail_temp a where "
						+ " s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and "
						+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER and "
						+ " a.APP_REF_NO = ?  "
						+ " union "
						+ " select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME,"
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER,"
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE,"
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS,"
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ "  a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR,s.BID, 2,a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE  "
						+ " from ssi_detail s, promoter_detail p, application_detail_temp a where "
						+ " s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and"
						+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER and "
						+ " a.APP_REF_NO = ?   ";

				applicationStmt = connection.prepareStatement(query);
				applicationStmt.setString(1, application);
				applicationStmt.setString(2, application);
				applicationStmt.setString(3, application);

				applicationResult = applicationStmt.executeQuery();
				// appReport = new ApplicationReport();

				while (applicationResult.next()) {

					int index = applicationResult.getInt(28);
					// System.out.println(":index"+index);

					if (index == 0) {
						// System.out.println("--------------------");
						appReport.setSsiName(applicationResult.getString(1));
						// System.out.println(applicationResult.getString(1));
						appReport.setAddress(applicationResult.getString(2));
						// System.out.println(applicationResult.getString(2));
						appReport.setDistrict(applicationResult.getString(3));
						// System.out.println(applicationResult.getString(3));
						appReport.setState(applicationResult.getString(4));
						// System.out.println(applicationResult.getString(4));
						appReport.setUnitType(applicationResult.getString(5));
						// System.out.println(applicationResult.getString(5));
						appReport.setRegistrationNumber(applicationResult
								.getString(6));
						// System.out.println(applicationResult.getString(6));
						appReport.setStartDate(applicationResult.getDate(7));
						// System.out.println(applicationResult.getDate(7));
						appReport.setEmployees(applicationResult.getInt(8));
						// System.out.println(applicationResult.getInt(8));
						appReport.setStatus(applicationResult.getString(9));
						// System.out.println(applicationResult.getString(9));
						appReport.setOutstanding(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setIndustryType(applicationResult
								.getString(11));
						// System.out.println(applicationResult.getString(11));
						appReport.setTurnover(applicationResult.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
						appReport.setExport(applicationResult.getDouble(13));
						// System.out.println(applicationResult.getDouble(13));
						appReport.setChiefPromoter(applicationResult
								.getString(14));
						// System.out.println(applicationResult.getString(14));
						appReport.setItpan(applicationResult.getString(15));
						// System.out.println(applicationResult.getString(15));
						appReport.setGender(applicationResult.getString(16));
						// System.out.println(applicationResult.getString(16));
						appReport.setOthers(applicationResult.getString(17));
						// System.out.println(applicationResult.getString(17));
						appReport.setMemberId(applicationResult.getString(19));
						// System.out.println(applicationResult.getString(19));
						appReport.setCgpan(applicationResult.getString(18));
						// System.out.println(applicationResult.getString(18));
						appReport.setReferenceNumber(applicationResult
								.getString(25));
						// System.out.println(applicationResult.getString(25));
						appReport.setApplicationDate(applicationResult
								.getDate(21));
						// System.out.println(applicationResult.getDate(21));
						appReport.setStatus(applicationResult.getString(23));
						// System.out.println(applicationResult.getString(22));
						appReport.setRemarks(applicationResult.getString(22));
						// System.out.println(applicationResult.getString(23));
						appReport.setLoanType(applicationResult.getString(24));
						// System.out.println(applicationResult.getString(24));
						appReport.setIndustrySector(applicationResult
								.getString(26));
						// System.out.println(applicationResult.getString(26));
						appReport.setBid(applicationResult.getString(27));
						// System.out.println(applicationResult.getString(27));
						appReport.setProjectOutlay(applicationResult
								.getDouble(29));
						appReport.setCity(applicationResult.getString(30));
					} else if (index == 1) {
						// System.out.println("--------------------");
						appReport.setSsiName(applicationResult.getString(1));
						// System.out.println(applicationResult.getString(1));
						appReport.setAddress(applicationResult.getString(2));
						// System.out.println(applicationResult.getString(2));
						appReport.setDistrict(applicationResult.getString(3));
						// System.out.println(applicationResult.getString(3));
						appReport.setState(applicationResult.getString(4));
						// System.out.println(applicationResult.getString(4));
						appReport.setUnitType(applicationResult.getString(5));
						// System.out.println(applicationResult.getString(5));
						appReport.setRegistrationNumber(applicationResult
								.getString(6));
						// System.out.println(applicationResult.getString(6));
						appReport.setStartDate(applicationResult.getDate(7));
						// System.out.println(applicationResult.getDate(7));
						appReport.setEmployees(applicationResult.getInt(8));
						// System.out.println(applicationResult.getInt(8));
						appReport.setStatus(applicationResult.getString(9));
						// System.out.println(applicationResult.getString(9));
						appReport.setOutstanding(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setIndustryType(applicationResult
								.getString(11));
						// System.out.println(applicationResult.getString(11));
						appReport.setTurnover(applicationResult.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
						appReport.setExport(applicationResult.getDouble(13));
						// System.out.println(applicationResult.getDouble(13));
						appReport.setChiefPromoter(applicationResult
								.getString(14));
						// System.out.println(applicationResult.getString(14));
						appReport.setItpan(applicationResult.getString(15));
						// System.out.println(applicationResult.getString(15));
						appReport.setGender(applicationResult.getString(16));
						// System.out.println(applicationResult.getString(16));
						appReport.setOthers(applicationResult.getString(17));
						// System.out.println(applicationResult.getString(17));
						appReport.setMemberId(applicationResult.getString(19));
						// System.out.println(applicationResult.getString(19));
						appReport.setCgpan(applicationResult.getString(18));
						// System.out.println(applicationResult.getString(18));
						appReport.setReferenceNumber(applicationResult
								.getString(25));
						// System.out.println(applicationResult.getString(25));
						appReport.setApplicationDate(applicationResult
								.getDate(21));
						// System.out.println(applicationResult.getDate(21));
						appReport.setStatus(applicationResult.getString(23));
						// System.out.println(applicationResult.getString(22));
						appReport.setRemarks(applicationResult.getString(22));
						// System.out.println(applicationResult.getString(23));
						appReport.setLoanType(applicationResult.getString(24));
						// System.out.println(applicationResult.getString(24));
						appReport.setIndustrySector(applicationResult
								.getString(26));
						// System.out.println(applicationResult.getString(26));
						appReport.setBid(applicationResult.getString(27));
						// System.out.println(applicationResult.getString(27));
						appReport.setProjectOutlay(applicationResult
								.getDouble(29));
						appReport.setCity(applicationResult.getString(30));
					}

					else if (index == 2) {
						// System.out.println("--------------------");
						appReport.setSsiName(applicationResult.getString(1));
						// System.out.println(applicationResult.getString(1));
						appReport.setAddress(applicationResult.getString(2));
						// System.out.println(applicationResult.getString(2));
						appReport.setDistrict(applicationResult.getString(3));
						// System.out.println(applicationResult.getString(3));
						appReport.setState(applicationResult.getString(4));
						// System.out.println(applicationResult.getString(4));
						appReport.setUnitType(applicationResult.getString(5));
						// System.out.println(applicationResult.getString(5));
						appReport.setRegistrationNumber(applicationResult
								.getString(6));
						// System.out.println(applicationResult.getString(6));
						appReport.setStartDate(applicationResult.getDate(7));
						// System.out.println(applicationResult.getDate(7));
						appReport.setEmployees(applicationResult.getInt(8));
						// System.out.println(applicationResult.getInt(8));
						appReport.setStatus(applicationResult.getString(9));
						// System.out.println(applicationResult.getString(9));
						appReport.setOutstanding(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setIndustryType(applicationResult
								.getString(11));
						// System.out.println(applicationResult.getString(11));
						appReport.setTurnover(applicationResult.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
						appReport.setExport(applicationResult.getDouble(13));
						// System.out.println(applicationResult.getDouble(13));
						appReport.setChiefPromoter(applicationResult
								.getString(14));
						// System.out.println(applicationResult.getString(14));
						appReport.setItpan(applicationResult.getString(15));
						// System.out.println(applicationResult.getString(15));
						appReport.setGender(applicationResult.getString(16));
						// System.out.println(applicationResult.getString(16));
						appReport.setOthers(applicationResult.getString(17));
						// System.out.println(applicationResult.getString(17));
						appReport.setMemberId(applicationResult.getString(19));
						// System.out.println(applicationResult.getString(19));
						appReport.setCgpan(applicationResult.getString(18));
						// System.out.println(applicationResult.getString(18));
						appReport.setReferenceNumber(applicationResult
								.getString(25));
						// System.out.println(applicationResult.getString(25));
						appReport.setApplicationDate(applicationResult
								.getDate(21));
						// System.out.println(applicationResult.getDate(21));
						appReport.setStatus(applicationResult.getString(23));
						// System.out.println(applicationResult.getString(22));
						appReport.setRemarks(applicationResult.getString(22));
						// System.out.println(applicationResult.getString(23));
						appReport.setLoanType(applicationResult.getString(24));
						// System.out.println(applicationResult.getString(24));
						appReport.setIndustrySector(applicationResult
								.getString(26));
						// System.out.println(applicationResult.getString(26));
						appReport.setBid(applicationResult.getString(27));
						// System.out.println(applicationResult.getString(27));
						appReport.setProjectOutlay(applicationResult
								.getDouble(29));
						appReport.setCity(applicationResult.getString(30));
					}
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query1 = " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ " t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION,"
						+ " t.TRM_SUBSIDY_EQUITY_SUPPORT,"
						+ " t.TRM_OTHERS,a.APP_PROJECT_OUTLAY,"
						+ " t.TRM_REPAYMENT_MORATORIUM,t.TRM_FIRST_INSTALLMENT_DUE_DT,"
						+ " t.TRM_NO_OF_INSTALLMENTS, t.TRM_REPAYMENT_PERIODICITY, "
						+ " 0 from TERM_LOAN_DETAIL t, APPLICATION_DETAIL a"
						+ " where t.APP_REF_NO = ? "
						+ " union "
						+ " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ " t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION,"
						+ " t.TRM_SUBSIDY_EQUITY_SUPPORT,"
						+ " t.TRM_OTHERS,a.APP_PROJECT_OUTLAY,"
						+ " t.TRM_REPAYMENT_MORATORIUM,t.TRM_FIRST_INSTALLMENT_DUE_DT,"
						+ " t.TRM_NO_OF_INSTALLMENTS, t.TRM_REPAYMENT_PERIODICITY, "
						+ " 1 from TERM_LOAN_DETAIL_temp t, APPLICATION_DETAIL_temp a"
						+ " where t.APP_REF_NO = ?   ";

				applicationStmt = connection.prepareStatement(query1);
				applicationStmt.setString(1, application);
				applicationStmt.setString(2, application);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					int index = applicationResult.getInt(13);
					// System.out.println(":index"+index);

					if (index == 0) {
						appReport.setTcSanctioned(applicationResult
								.getDouble(1));
						// System.out.println(applicationResult.getDouble(1));
						appReport.setTcSanctionedOn(applicationResult
								.getDate(2));
						// System.out.println(applicationResult.getDate(2));
						appReport.setTcRate(applicationResult.getDouble(3));
						// System.out.println(applicationResult.getInt(3));
						appReport.setTcPlr(applicationResult.getDouble(4));
						// System.out.println(applicationResult.getInt(4));
						appReport.setTcPromoterContribution(applicationResult
								.getDouble(5));
						// System.out.println(applicationResult.getDouble(5));
						appReport.setTcSubsidy(applicationResult.getDouble(6));
						// System.out.println(applicationResult.getDouble(6));
						appReport.setTcEquity(applicationResult.getDouble(7));
						// System.out.println(applicationResult.getDouble(7));
						appReport.setTcProjectCost(applicationResult
								.getDouble(8));
						// System.out.println(applicationResult.getDouble(8));
						appReport.setRepaymentMoratorium(applicationResult
								.getInt(9));
						// System.out.println(applicationResult.getDouble(9));
						appReport.setFirstInstallmentDueDate(applicationResult
								.getDate(10));
						// System.out.println(applicationResult.getDate(10));
						appReport.setNumberOfInstallments(applicationResult
								.getInt(11));
						// System.out.println(applicationResult.getInt(12));
						int repayment = applicationResult.getInt(12);
						if (repayment == 0) {
							appReport.setRepaymentPeriodicity("");
						}
						if (repayment == 1) {
							appReport.setRepaymentPeriodicity("Monthly");
						}
						if (repayment == 2) {
							appReport.setRepaymentPeriodicity("Quarterly");
						}
						if (repayment == 3) {
							appReport.setRepaymentPeriodicity("Half yearly");
						}
					} else if (index == 1) {
						appReport.setTcSanctioned(applicationResult
								.getDouble(1));
						// System.out.println(applicationResult.getDouble(1));
						appReport.setTcSanctionedOn(applicationResult
								.getDate(2));
						// System.out.println(applicationResult.getDate(2));
						appReport.setTcRate(applicationResult.getDouble(3));
						// System.out.println(applicationResult.getInt(3));
						appReport.setTcPlr(applicationResult.getDouble(4));
						// System.out.println(applicationResult.getInt(4));
						appReport.setTcPromoterContribution(applicationResult
								.getDouble(5));
						// System.out.println(applicationResult.getDouble(5));
						appReport.setTcSubsidy(applicationResult.getDouble(6));
						// System.out.println(applicationResult.getDouble(6));
						appReport.setTcEquity(applicationResult.getDouble(7));
						// System.out.println(applicationResult.getDouble(7));
						appReport.setTcProjectCost(applicationResult
								.getDouble(8));
						// System.out.println(applicationResult.getDouble(8));
						appReport.setRepaymentMoratorium(applicationResult
								.getInt(9));
						// System.out.println(applicationResult.getDouble(9));
						appReport.setFirstInstallmentDueDate(applicationResult
								.getDate(10));
						// System.out.println(applicationResult.getDate(10));
						appReport.setNumberOfInstallments(applicationResult
								.getInt(11));
						// System.out.println(applicationResult.getInt(12));
						int repayment = applicationResult.getInt(12);
						if (repayment == 0) {
							appReport.setRepaymentPeriodicity("");
						}
						if (repayment == 1) {
							appReport.setRepaymentPeriodicity("Monthly");
						}
						if (repayment == 2) {
							appReport.setRepaymentPeriodicity("Quarterly");
						}
						if (repayment == 3) {
							appReport.setRepaymentPeriodicity("Half yearly");
						}
					}
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query2 = " select t.WCP_FB_LIMIT_SANCTIONED, t.WCP_FB_LIMIT_SANCTIONED_DT,"
						+ " t.WCP_NFB_LIMIT_SANCTIONED, t.WCP_NFB_LIMIT_SANCTIONED_DT,"
						+ " t.WCP_INTEREST, t.WCP_PLR, t.WCP_PROMOTERS_CONTRIBUTION,"
						+ "  t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS,"
						+ " a.APP_PROJECT_OUTLAY,NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0),"
						+ " NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0),"
						+ " 0 from working_capital_Detail t,"
						+ " wc_outstanding_detail tc , application_detail a where t.APP_REF_NO = ? "
						+ " and t.APP_REF_NO = a.APP_REF_NO and t.APP_REF_NO = tc.APP_REF_NO(+) "
						+ " union"
						+ "  select  t.WCP_FB_LIMIT_SANCTIONED, t.WCP_FB_LIMIT_SANCTIONED_DT, "
						+ " t.WCP_NFB_LIMIT_SANCTIONED, t.WCP_NFB_LIMIT_SANCTIONED_DT, "
						+ " t.WCP_INTEREST, t.WCP_PLR, t.WCP_PROMOTERS_CONTRIBUTION, "
						+ " t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS,  "
						+ "  a.APP_PROJECT_OUTLAY, NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0), "
						+ "  NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0), 1 from WORKING_CAPITAL_DETAIL_temp t,"
						+ "  WC_OUTSTANDING_DETAIL_temp tc, APPLICATION_DETAIL_temp a where t.APP_REF_NO = ?"
						+ "  and t.APP_REF_NO = a.APP_REF_NO and t.APP_REF_NO = tc.APP_REF_NO(+) ";

				// System.out.println(query2);
				applicationStmt = connection.prepareStatement(query2);
				applicationStmt.setString(1, application);
				applicationStmt.setString(2, application);
				// System.out.println("parameters set");
				applicationResult = applicationStmt.executeQuery();
				// System.out.println("query executed");

				while (applicationResult.next()) {
					int index = applicationResult.getInt(13);
					// System.out.println("index:"+index);

					if (index == 0) {
						appReport.setWcFbSanctioned(applicationResult
								.getDouble(1));
						appReport.setWcFbSanctionedOn(applicationResult
								.getDate(2));
						appReport.setWcNfbSanctioned(applicationResult
								.getDouble(3));
						appReport.setWcNfbSanctionedOn(applicationResult
								.getDate(4));
						appReport.setWcInterest(applicationResult.getDouble(5));
						// System.out.println(applicationResult.getInt(5));
						appReport.setWcPlr(applicationResult.getDouble(6));
						// System.out.println(applicationResult.getInt(6));
						appReport.setWcPromoterContribution(applicationResult
								.getDouble(7));
						// System.out.println(applicationResult.getDouble(7));
						appReport.setWcSubsidy(applicationResult.getDouble(8));
						// System.out.println(applicationResult.getDouble(8));
						appReport.setWcEquity(applicationResult.getDouble(9));
						// System.out.println(applicationResult.getDouble(9));
						appReport.setWcProjectCost(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setWcFbPrincipalOutstanding(applicationResult
								.getDouble(11));
						// System.out.println(applicationResult.getDouble(11));
						appReport
								.setWcNfbPrincipalOutstanding(applicationResult
										.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
					} else if (index == 1) {
						appReport.setWcFbSanctioned(applicationResult
								.getDouble(1));
						appReport.setWcFbSanctionedOn(applicationResult
								.getDate(2));
						appReport.setWcNfbSanctioned(applicationResult
								.getDouble(3));
						appReport.setWcNfbSanctionedOn(applicationResult
								.getDate(4));
						appReport.setWcInterest(applicationResult.getDouble(5));
						// System.out.println(applicationResult.getInt(5));
						appReport.setWcPlr(applicationResult.getDouble(6));
						// System.out.println(applicationResult.getInt(6));
						appReport.setWcPromoterContribution(applicationResult
								.getDouble(7));
						// System.out.println(applicationResult.getDouble(7));
						appReport.setWcSubsidy(applicationResult.getDouble(8));
						// System.out.println(applicationResult.getDouble(8));
						appReport.setWcEquity(applicationResult.getDouble(9));
						// System.out.println(applicationResult.getDouble(9));
						appReport.setWcProjectCost(applicationResult
								.getDouble(10));
						appReport.setWcFbPrincipalOutstanding(applicationResult
								.getDouble(11));
						appReport
								.setWcNfbPrincipalOutstanding(applicationResult
										.getDouble(12));

					}
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query3 = "select d.DBR_AMOUNT, d.DBR_DT, d.DBR_FINAL_DISBURSEMENT_FLAG,0 from "
						+ " disbursement_detail d, application_detail a where d.APP_REF_NO "
						+ " = a.APP_REF_NO and  d.DBR_DT = (select max(DBR_DT) "
						+ " from disbursement_detail where APP_REF_NO = '"
						+ application
						+ "')"
						+ " and d.APP_REF_NO = '"
						+ application
						+ "' "
						+ " union "
						+ " select d.DBR_AMOUNT, d.DBR_DT, d.DBR_FINAL_DISBURSEMENT_FLAG,1 from "
						+ " DISBURSEMENT_DETAIL_temp d, APPLICATION_DETAIL_temp a "
						+ " where d.APP_REF_NO = a.APP_REF_NO and  d.DBR_DT = (select max(DBR_DT) "
						+ " from DISBURSEMENT_DETAIL_temp where APP_REF_NO = '"
						+ application
						+ "')"
						+ " and d.APP_REF_NO = '"
						+ application + "' ";

				applicationStmt = connection.prepareStatement(query3);
				applicationResult = applicationStmt.executeQuery();
				Log.log(Log.DEBUG, "ReportDAO",
						"ApplicationStatusWiseReportDetails",
						"Query 3 Executed");
				// System.out.println("query executed");

				while (applicationResult.next()) {
					Log.log(Log.DEBUG, "ReportDAO",
							"ApplicationStatusWiseReportDetails",
							"Result Set for Disbursement" + applicationResult);
					int index = applicationResult.getInt(4);

					if (index == 0) {
						// appReport = new ApplicationReport();
						appReport.setDisbursementAmount(applicationResult
								.getDouble(1));
						appReport.setDisbursementDate(applicationResult
								.getDate(2));
						appReport.setFinalDisbursement(applicationResult
								.getString(3));

					} else if (index == 1) {
						// appReport = new ApplicationReport();
						appReport.setDisbursementAmount(applicationResult
								.getDouble(1));
						appReport.setDisbursementDate(applicationResult
								.getDate(2));
						appReport.setFinalDisbursement(applicationResult
								.getString(3));

					}
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query4 = "select tc.TCO_OUTSTANDING_AMOUNT,0 from TC_OUTSTANDING_DETAIL_temp tc"
						+ " where tc.APP_REF_NO = '"
						+ application
						+ "' and  tc.tco_outstanding_on_dt =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL_temp where APP_REF_NO = '"
						+ application
						+ "')"
						+ " union"
						+ " select tc.TCO_OUTSTANDING_AMOUNT,1 from TC_OUTSTANDING_DETAIL tc"
						+ "  where tc.APP_REF_NO = '"
						+ application
						+ "' and tc.tco_outstanding_on_dt =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL where APP_REF_NO = '"
						+ application + "')";

				// System.out.println(query3);
				applicationStmt = connection.prepareStatement(query4);
				applicationResult = applicationStmt.executeQuery();
				Log.log(Log.DEBUG, "ReportDAO",
						"ApplicationStatusWiseReportDetails", "Query 4 Excuted");

				while (applicationResult.next()) {
					Log.log(Log.DEBUG, "ReportDAO",
							"ApplicationStatusWiseReportDetails",
							"Result Set for TC Outstanding "
									+ applicationResult);
					int index = applicationResult.getInt(2);

					if (index == 0) {
						appReport.setTcOutstanding(applicationResult
								.getDouble(1));
						// System.out.println("----------------");
					} else if (index == 1) {
						appReport.setTcOutstanding(applicationResult
								.getDouble(1));
						// System.out.println("----------------");
					}

				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

			} catch (SQLException exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		} else if (startDate == null) {
			// System.out.println("*******************General*******************");
			try {
				String query = "select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR,s.BID, 0,a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE   "
						+ " from ssi_detail s, "
						+ " promoter_detail p, application_detail a where "
						+ " s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and "
						+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER and "
						+ " a.APP_REF_NO = ?  "
						+ " union "
						+ " select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR,s.BID, 1,a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE  "
						+ " from ssi_detail_temp s, "
						+ " promoter_detail_temp p, application_detail_temp a where "
						+ " s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and "
						+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER and "
						+ " a.APP_REF_NO = ?  "
						+ " union "
						+ " select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME,"
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER,"
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE,"
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS,"
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ "  a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR,s.BID, 2,a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE  "
						+ " from ssi_detail s, promoter_detail p, application_detail_temp a where "
						+ " s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and"
						+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER and "
						+ " a.APP_REF_NO = ?  ";

				applicationStmt = connection.prepareStatement(query);
				applicationStmt.setString(1, application);
				applicationStmt.setString(2, application);
				applicationStmt.setString(3, application);
				applicationResult = applicationStmt.executeQuery();
				// appReport = new ApplicationReport();

				while (applicationResult.next()) {

					int index = applicationResult.getInt(28);
					// System.out.println(":index"+index);

					if (index == 0) {
						// System.out.println("--------------------");
						appReport.setSsiName(applicationResult.getString(1));
						// System.out.println(applicationResult.getString(1));
						appReport.setAddress(applicationResult.getString(2));
						// System.out.println(applicationResult.getString(2));
						appReport.setDistrict(applicationResult.getString(3));
						// System.out.println(applicationResult.getString(3));
						appReport.setState(applicationResult.getString(4));
						// System.out.println(applicationResult.getString(4));
						appReport.setUnitType(applicationResult.getString(5));
						// System.out.println(applicationResult.getString(5));
						appReport.setRegistrationNumber(applicationResult
								.getString(6));
						// System.out.println(applicationResult.getString(6));
						appReport.setStartDate(applicationResult.getDate(7));
						// System.out.println(applicationResult.getDate(7));
						appReport.setEmployees(applicationResult.getInt(8));
						// System.out.println(applicationResult.getInt(8));
						appReport.setStatus(applicationResult.getString(9));
						// System.out.println(applicationResult.getString(9));
						appReport.setOutstanding(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setIndustryType(applicationResult
								.getString(11));
						// System.out.println(applicationResult.getString(11));
						appReport.setTurnover(applicationResult.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
						appReport.setExport(applicationResult.getDouble(13));
						// System.out.println(applicationResult.getDouble(13));
						appReport.setChiefPromoter(applicationResult
								.getString(14));
						// System.out.println(applicationResult.getString(14));
						appReport.setItpan(applicationResult.getString(15));
						// System.out.println(applicationResult.getString(15));
						appReport.setGender(applicationResult.getString(16));
						// System.out.println(applicationResult.getString(16));
						appReport.setOthers(applicationResult.getString(17));
						// System.out.println(applicationResult.getString(17));
						appReport.setMemberId(applicationResult.getString(19));
						// System.out.println(applicationResult.getString(19));
						appReport.setCgpan(applicationResult.getString(18));
						// System.out.println(applicationResult.getString(18));
						appReport.setReferenceNumber(applicationResult
								.getString(25));
						// System.out.println(applicationResult.getString(25));
						appReport.setApplicationDate(applicationResult
								.getDate(21));
						// System.out.println(applicationResult.getDate(21));
						appReport.setStatus(applicationResult.getString(23));
						// System.out.println(applicationResult.getString(22));
						appReport.setRemarks(applicationResult.getString(22));
						// System.out.println(applicationResult.getString(23));
						appReport.setLoanType(applicationResult.getString(24));
						// System.out.println(applicationResult.getString(24));
						appReport.setIndustrySector(applicationResult
								.getString(26));
						// System.out.println(applicationResult.getString(26));
						appReport.setBid(applicationResult.getString(27));
						// System.out.println(applicationResult.getString(27));
						appReport.setProjectOutlay(applicationResult
								.getDouble(29));
						appReport.setCity(applicationResult.getString(30));
					} else if (index == 1) {
						// System.out.println("--------------------");
						appReport.setSsiName(applicationResult.getString(1));
						// System.out.println(applicationResult.getString(1));
						appReport.setAddress(applicationResult.getString(2));
						// System.out.println(applicationResult.getString(2));
						appReport.setDistrict(applicationResult.getString(3));
						// System.out.println(applicationResult.getString(3));
						appReport.setState(applicationResult.getString(4));
						// System.out.println(applicationResult.getString(4));
						appReport.setUnitType(applicationResult.getString(5));
						// System.out.println(applicationResult.getString(5));
						appReport.setRegistrationNumber(applicationResult
								.getString(6));
						// System.out.println(applicationResult.getString(6));
						appReport.setStartDate(applicationResult.getDate(7));
						// System.out.println(applicationResult.getDate(7));
						appReport.setEmployees(applicationResult.getInt(8));
						// System.out.println(applicationResult.getInt(8));
						appReport.setStatus(applicationResult.getString(9));
						// System.out.println(applicationResult.getString(9));
						appReport.setOutstanding(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setIndustryType(applicationResult
								.getString(11));
						// System.out.println(applicationResult.getString(11));
						appReport.setTurnover(applicationResult.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
						appReport.setExport(applicationResult.getDouble(13));
						// System.out.println(applicationResult.getDouble(13));
						appReport.setChiefPromoter(applicationResult
								.getString(14));
						// System.out.println(applicationResult.getString(14));
						appReport.setItpan(applicationResult.getString(15));
						// System.out.println(applicationResult.getString(15));
						appReport.setGender(applicationResult.getString(16));
						// System.out.println(applicationResult.getString(16));
						appReport.setOthers(applicationResult.getString(17));
						// System.out.println(applicationResult.getString(17));
						appReport.setMemberId(applicationResult.getString(19));
						// System.out.println(applicationResult.getString(19));
						appReport.setCgpan(applicationResult.getString(18));
						// System.out.println(applicationResult.getString(18));
						appReport.setReferenceNumber(applicationResult
								.getString(25));
						// System.out.println(applicationResult.getString(25));
						appReport.setApplicationDate(applicationResult
								.getDate(21));
						// System.out.println(applicationResult.getDate(21));
						appReport.setStatus(applicationResult.getString(23));
						// System.out.println(applicationResult.getString(22));
						appReport.setRemarks(applicationResult.getString(22));
						// System.out.println(applicationResult.getString(23));
						appReport.setLoanType(applicationResult.getString(24));
						// System.out.println(applicationResult.getString(24));
						appReport.setIndustrySector(applicationResult
								.getString(26));
						// System.out.println(applicationResult.getString(26));
						appReport.setBid(applicationResult.getString(27));
						// System.out.println(applicationResult.getString(27));
						appReport.setProjectOutlay(applicationResult
								.getDouble(29));
						appReport.setCity(applicationResult.getString(30));
					}

					else if (index == 2) {
						// System.out.println("--------------------");
						appReport.setSsiName(applicationResult.getString(1));
						// System.out.println(applicationResult.getString(1));
						appReport.setAddress(applicationResult.getString(2));
						// System.out.println(applicationResult.getString(2));
						appReport.setDistrict(applicationResult.getString(3));
						// System.out.println(applicationResult.getString(3));
						appReport.setState(applicationResult.getString(4));
						// System.out.println(applicationResult.getString(4));
						appReport.setUnitType(applicationResult.getString(5));
						// System.out.println(applicationResult.getString(5));
						appReport.setRegistrationNumber(applicationResult
								.getString(6));
						// System.out.println(applicationResult.getString(6));
						appReport.setStartDate(applicationResult.getDate(7));
						// System.out.println(applicationResult.getDate(7));
						appReport.setEmployees(applicationResult.getInt(8));
						// System.out.println(applicationResult.getInt(8));
						appReport.setStatus(applicationResult.getString(9));
						// System.out.println(applicationResult.getString(9));
						appReport.setOutstanding(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setIndustryType(applicationResult
								.getString(11));
						// System.out.println(applicationResult.getString(11));
						appReport.setTurnover(applicationResult.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
						appReport.setExport(applicationResult.getDouble(13));
						// System.out.println(applicationResult.getDouble(13));
						appReport.setChiefPromoter(applicationResult
								.getString(14));
						// System.out.println(applicationResult.getString(14));
						appReport.setItpan(applicationResult.getString(15));
						// System.out.println(applicationResult.getString(15));
						appReport.setGender(applicationResult.getString(16));
						// System.out.println(applicationResult.getString(16));
						appReport.setOthers(applicationResult.getString(17));
						// System.out.println(applicationResult.getString(17));
						appReport.setMemberId(applicationResult.getString(19));
						// System.out.println(applicationResult.getString(19));
						appReport.setCgpan(applicationResult.getString(18));
						// System.out.println(applicationResult.getString(18));
						appReport.setReferenceNumber(applicationResult
								.getString(25));
						// System.out.println(applicationResult.getString(25));
						appReport.setApplicationDate(applicationResult
								.getDate(21));
						// System.out.println(applicationResult.getDate(21));
						appReport.setStatus(applicationResult.getString(23));
						// System.out.println(applicationResult.getString(22));
						appReport.setRemarks(applicationResult.getString(22));
						// System.out.println(applicationResult.getString(23));
						appReport.setLoanType(applicationResult.getString(24));
						// System.out.println(applicationResult.getString(24));
						appReport.setIndustrySector(applicationResult
								.getString(26));
						// System.out.println(applicationResult.getString(26));
						appReport.setBid(applicationResult.getString(27));
						// System.out.println(applicationResult.getString(27));
						appReport.setProjectOutlay(applicationResult
								.getDouble(29));
						appReport.setCity(applicationResult.getString(30));
					}
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				// System.out.println("*******************TC*******************");

				String query1 = " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ " t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION,"
						+ " t.TRM_SUBSIDY_EQUITY_SUPPORT,"
						+ " t.TRM_OTHERS,a.APP_PROJECT_OUTLAY,"
						+ " t.TRM_REPAYMENT_MORATORIUM,t.TRM_FIRST_INSTALLMENT_DUE_DT,"
						+ " t.TRM_NO_OF_INSTALLMENTS, t.TRM_REPAYMENT_PERIODICITY, "
						+ " 0 from TERM_LOAN_DETAIL t, APPLICATION_DETAIL a"
						+ " where t.APP_REF_NO = ?  "
						+ " union "
						+ " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ " t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION,"
						+ " t.TRM_SUBSIDY_EQUITY_SUPPORT,"
						+ " t.TRM_OTHERS,a.APP_PROJECT_OUTLAY,"
						+ " t.TRM_REPAYMENT_MORATORIUM,t.TRM_FIRST_INSTALLMENT_DUE_DT,"
						+ " t.TRM_NO_OF_INSTALLMENTS, t.TRM_REPAYMENT_PERIODICITY, "
						+ " 1 from TERM_LOAN_DETAIL_temp t, APPLICATION_DETAIL_temp a"
						+ " where t.APP_REF_NO = ?  ";

				applicationStmt = connection.prepareStatement(query1);
				applicationStmt.setString(1, application);
				applicationStmt.setString(2, application);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					int index = applicationResult.getInt(13);
					// System.out.println(":index"+index);

					if (index == 0) {
						// System.out.println("-------TC-----------");
						appReport.setTcSanctioned(applicationResult
								.getDouble(1));
						// System.out.println(applicationResult.getDouble(1));
						appReport.setTcSanctionedOn(applicationResult
								.getDate(2));
						// System.out.println(applicationResult.getDate(2));
						appReport.setTcRate(applicationResult.getDouble(3));
						// System.out.println(applicationResult.getInt(3));
						appReport.setTcPlr(applicationResult.getDouble(4));
						// System.out.println(applicationResult.getInt(4));
						appReport.setTcPromoterContribution(applicationResult
								.getDouble(5));
						// System.out.println(applicationResult.getDouble(5));
						appReport.setTcSubsidy(applicationResult.getDouble(6));
						// System.out.println(applicationResult.getDouble(6));
						appReport.setTcEquity(applicationResult.getDouble(7));
						// System.out.println(applicationResult.getDouble(7));
						appReport.setTcProjectCost(applicationResult
								.getDouble(8));
						// System.out.println(applicationResult.getDouble(8));
						appReport.setRepaymentMoratorium(applicationResult
								.getInt(9));
						// System.out.println(applicationResult.getDouble(9));
						appReport.setFirstInstallmentDueDate(applicationResult
								.getDate(10));
						// System.out.println(applicationResult.getDate(10));
						appReport.setNumberOfInstallments(applicationResult
								.getInt(11));
						// System.out.println(applicationResult.getInt(12));
						int repayment = applicationResult.getInt(12);
						if (repayment == 0) {
							appReport.setRepaymentPeriodicity("");
						}
						if (repayment == 1) {
							appReport.setRepaymentPeriodicity("Monthly");
						}
						if (repayment == 2) {
							appReport.setRepaymentPeriodicity("Quarterly");
						}
						if (repayment == 3) {
							appReport.setRepaymentPeriodicity("Half yearly");
						}
					} else if (index == 1) {
						// System.out.println("-------TC-----------");
						appReport.setTcSanctioned(applicationResult
								.getDouble(1));
						// System.out.println(applicationResult.getDouble(1));
						appReport.setTcSanctionedOn(applicationResult
								.getDate(2));
						// System.out.println(applicationResult.getDate(2));
						appReport.setTcRate(applicationResult.getDouble(3));
						// System.out.println(applicationResult.getInt(3));
						appReport.setTcPlr(applicationResult.getDouble(4));
						// System.out.println(applicationResult.getInt(4));
						appReport.setTcPromoterContribution(applicationResult
								.getDouble(5));
						// System.out.println(applicationResult.getDouble(5));
						appReport.setTcSubsidy(applicationResult.getDouble(6));
						// System.out.println(applicationResult.getDouble(6));
						appReport.setTcEquity(applicationResult.getDouble(7));
						// System.out.println(applicationResult.getDouble(7));
						appReport.setTcProjectCost(applicationResult
								.getDouble(8));
						// System.out.println(applicationResult.getDouble(8));
						appReport.setRepaymentMoratorium(applicationResult
								.getInt(9));
						// System.out.println(applicationResult.getDouble(9));
						appReport.setFirstInstallmentDueDate(applicationResult
								.getDate(10));
						// System.out.println(applicationResult.getDate(10));
						appReport.setNumberOfInstallments(applicationResult
								.getInt(11));
						// System.out.println(applicationResult.getInt(12));
						int repayment = applicationResult.getInt(12);
						if (repayment == 0) {
							appReport.setRepaymentPeriodicity("");
						}
						if (repayment == 1) {
							appReport.setRepaymentPeriodicity("Monthly");
						}
						if (repayment == 2) {
							appReport.setRepaymentPeriodicity("Quarterly");
						}
						if (repayment == 3) {
							appReport.setRepaymentPeriodicity("Half yearly");
						}
					}
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query2 = " select t.WCP_FB_LIMIT_SANCTIONED, t.WCP_FB_LIMIT_SANCTIONED_DT,"
						+ " t.WCP_NFB_LIMIT_SANCTIONED, t.WCP_NFB_LIMIT_SANCTIONED_DT,"
						+ " t.WCP_INTEREST, t.WCP_PLR, t.WCP_PROMOTERS_CONTRIBUTION,"
						+ "  t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS,"
						+ " a.APP_PROJECT_OUTLAY,NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0),"
						+ " NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0),"
						+ " 0 from working_capital_Detail t,"
						+ " wc_outstanding_detail tc , application_detail a where t.APP_REF_NO = ? "
						+ " and t.APP_REF_NO = a.APP_REF_NO and t.APP_REF_NO = tc.APP_REF_NO(+) "
						+ " union"
						+ "  select  t.WCP_FB_LIMIT_SANCTIONED, t.WCP_FB_LIMIT_SANCTIONED_DT, "
						+ " t.WCP_NFB_LIMIT_SANCTIONED, t.WCP_NFB_LIMIT_SANCTIONED_DT, "
						+ " t.WCP_INTEREST, t.WCP_PLR, t.WCP_PROMOTERS_CONTRIBUTION, "
						+ " t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS,  "
						+ "  a.APP_PROJECT_OUTLAY, NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0), "
						+ "  NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0), 1 from WORKING_CAPITAL_DETAIL_temp t,"
						+ "  WC_OUTSTANDING_DETAIL_temp tc, APPLICATION_DETAIL_temp a where t.APP_REF_NO = ?"
						+ "  and t.APP_REF_NO = a.APP_REF_NO and t.APP_REF_NO = tc.APP_REF_NO(+)  ";

				// System.out.println(query2);
				applicationStmt = connection.prepareStatement(query2);
				applicationStmt.setString(1, application);
				applicationStmt.setString(2, application);
				// System.out.println("parameters set");
				applicationResult = applicationStmt.executeQuery();
				// System.out.println("query executed");

				while (applicationResult.next()) {
					int index = applicationResult.getInt(13);
					// System.out.println("index:"+index);

					if (index == 0) {
						// System.out.println("--------WC--------");
						appReport.setWcFbSanctioned(applicationResult
								.getDouble(1));
						// System.out.println(applicationResult.getDouble(1));
						appReport.setWcFbSanctionedOn(applicationResult
								.getDate(2));
						// System.out.println(applicationResult.getDate(2));
						appReport.setWcNfbSanctioned(applicationResult
								.getDouble(3));
						// System.out.println(applicationResult.getDouble(3));
						appReport.setWcNfbSanctionedOn(applicationResult
								.getDate(4));
						// System.out.println(applicationResult.getDate(4));
						appReport.setWcInterest(applicationResult.getDouble(5));
						// System.out.println(applicationResult.getInt(5));
						appReport.setWcPlr(applicationResult.getDouble(6));
						// System.out.println(applicationResult.getInt(6));
						appReport.setWcPromoterContribution(applicationResult
								.getDouble(7));
						// System.out.println(applicationResult.getDouble(7));
						appReport.setWcSubsidy(applicationResult.getDouble(8));
						// System.out.println(applicationResult.getDouble(8));
						appReport.setWcEquity(applicationResult.getDouble(9));
						// System.out.println(applicationResult.getDouble(9));
						appReport.setWcProjectCost(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setWcFbPrincipalOutstanding(applicationResult
								.getDouble(11));
						// System.out.println(applicationResult.getDouble(11));
						appReport
								.setWcNfbPrincipalOutstanding(applicationResult
										.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
					} else if (index == 1) {
						// System.out.println("--------WC--------");
						appReport.setWcFbSanctioned(applicationResult
								.getDouble(1));
						// System.out.println(applicationResult.getDouble(1));
						appReport.setWcFbSanctionedOn(applicationResult
								.getDate(2));
						// System.out.println(applicationResult.getDate(2));
						appReport.setWcNfbSanctioned(applicationResult
								.getDouble(3));
						// System.out.println(applicationResult.getDouble(3));
						appReport.setWcNfbSanctionedOn(applicationResult
								.getDate(4));
						// System.out.println(applicationResult.getDate(4));
						appReport.setWcInterest(applicationResult.getDouble(5));
						// System.out.println(applicationResult.getInt(5));
						appReport.setWcPlr(applicationResult.getDouble(6));
						// System.out.println(applicationResult.getInt(6));
						appReport.setWcPromoterContribution(applicationResult
								.getDouble(7));
						// System.out.println(applicationResult.getDouble(7));
						appReport.setWcSubsidy(applicationResult.getDouble(8));
						// System.out.println(applicationResult.getDouble(8));
						appReport.setWcEquity(applicationResult.getDouble(9));
						// System.out.println(applicationResult.getDouble(9));
						appReport.setWcProjectCost(applicationResult
								.getDouble(10));
						// System.out.println(applicationResult.getDouble(10));
						appReport.setWcFbPrincipalOutstanding(applicationResult
								.getDouble(11));
						// System.out.println(applicationResult.getDouble(11));
						appReport
								.setWcNfbPrincipalOutstanding(applicationResult
										.getDouble(12));
						// System.out.println(applicationResult.getDouble(12));
					}
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query3 = "select d.DBR_AMOUNT, d.DBR_DT, d.DBR_FINAL_DISBURSEMENT_FLAG,0 from "
						+ " disbursement_detail d, application_detail a where d.APP_REF_NO "
						+ " = a.APP_REF_NO and  d.DBR_DT = (select max(DBR_DT) "
						+ " from disbursement_detail where APP_REF_NO = '"
						+ application
						+ "')"
						+ " and d.APP_REF_NO = '"
						+ application
						+ "' "
						+ " union "
						+ " select d.DBR_AMOUNT, d.DBR_DT, d.DBR_FINAL_DISBURSEMENT_FLAG,1 from "
						+ " DISBURSEMENT_DETAIL_temp d, APPLICATION_DETAIL_temp a "
						+ " where d.APP_REF_NO = a.APP_REF_NO and  d.DBR_DT = (select max(DBR_DT) "
						+ " from DISBURSEMENT_DETAIL_temp where APP_REF_NO = '"
						+ application
						+ "')"
						+ " and d.APP_REF_NO = '"
						+ application + "' ";

				// System.out.println(query3);
				applicationStmt = connection.prepareStatement(query3);
				applicationResult = applicationStmt.executeQuery();
				// System.out.println("query executed");

				while (applicationResult.next()) {
					int index = applicationResult.getInt(4);

					if (index == 0) {
						appReport.setDisbursementAmount(applicationResult
								.getDouble(1));
						// System.out.println(applicationResult.getDouble(1));
						appReport.setDisbursementDate(applicationResult
								.getDate(2));
						// System.out.println(applicationResult.getDate(2));
						appReport.setFinalDisbursement(applicationResult
								.getString(3));
					} else if (index == 1) {
						appReport.setDisbursementAmount(applicationResult
								.getDouble(1));
						// System.out.println(applicationResult.getDouble(1));
						appReport.setDisbursementDate(applicationResult
								.getDate(2));
						// System.out.println(applicationResult.getDate(2));
						appReport.setFinalDisbursement(applicationResult
								.getString(3));
					}
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query4 = "select tc.TCO_OUTSTANDING_AMOUNT,0 from TC_OUTSTANDING_DETAIL_temp tc"
						+ " where tc.APP_REF_NO = '"
						+ application
						+ "' and  tc.tco_outstanding_on_dt =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL_temp where APP_REF_NO = '"
						+ application
						+ "')"
						+ " union"
						+ " select tc.TCO_OUTSTANDING_AMOUNT,1 from TC_OUTSTANDING_DETAIL tc"
						+ "  where tc.APP_REF_NO = '"
						+ application
						+ "' and tc.tco_outstanding_on_dt =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL where APP_REF_NO = '"
						+ application + "')";

				applicationStmt = connection.prepareStatement(query4);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					int index = applicationResult.getInt(2);

					if (index == 0) {
						appReport.setTcOutstanding(applicationResult
								.getDouble(1));
					} else if (index == 1) {
						appReport.setTcOutstanding(applicationResult
								.getDouble(1));
					}

				}

				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

			} catch (SQLException exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "ApplicationStatusWiseReportDetails1",
				"Exited");
		return appReport;
	}

	/*
	 * ##########################################################################
	 * ###########33
	 */

	public ArrayList danRaisedMlis(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "danRaisedMlis", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult;
		Connection connection = DBConnection.getConnection();
		String active = "A";

		if (startDate != null) {
			try {
				/*
				 * modified@sudeep.dhiman to get the data in sorted order at
				 * column bankname
				 */
				String query = "select bnkname from(select distinct(m.MEM_BANK_NAME) bnkname"
						+ " from member_info m,"
						+ " demand_advice_info a, dan_cgpan_info b where"
						+ " a.dan_id = b.dan_id and  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID="
						+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and trunc(a.DAN_GENERATED_DT) "
						+ " between ? and ? and m.MEM_STATUS = ?"
						+ " )order by bnkname";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, active);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					// Instantiate a Gfee value object
					GeneralReport generalReport = new GeneralReport();
					generalReport.setType(danRaisedResult.getString(1));

					danRaisedArray.add(generalReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {
				/*
				 * modified@sudeep.dhiman to get the data in sorted order at
				 * column bankname
				 */
				String query = "select bnkname from(select distinct(m.MEM_BANK_NAME) bnkname"
						+ " from member_info m,"
						+ " demand_advice_info a, dan_cgpan_info b where"
						+ " a.dan_id = b.dan_id and  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID="
						+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and trunc(a.DAN_GENERATED_DT) "
						+ " <= ? and m.MEM_STATUS = ?" + " )order by bnkname";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setString(2, active);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					// Instantiate a Gfee value object
					GeneralReport generalReport = new GeneralReport();
					generalReport.setType(danRaisedResult.getString(1));

					danRaisedArray.add(generalReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "danRaisedMlis", "Exited");
		return danRaisedArray;
	}

	public ArrayList DanRaisedReport(java.sql.Date startDate,
			java.sql.Date endDate, String bank) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "DanRaisedReport", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArrayFinal = new ArrayList();
		Connection connection = DBConnection.getConnection();
		ResultSet danRaisedResult;

		if (startDate != null) {
			try {
				String query = "select a.DAN_ID, a.DAN_GENERATED_DT, "
						+ " count(b.cgpan),sum(b.DCI_AMOUNT_RAISED), "
						+ " b.DCI_APPROPRIATION_FLAG,c.MEM_BNK_ID||c.MEM_zne_ID||c.MEM_BRN_ID, "
						+ " c.MEM_ZONE_NAME,c.MEM_BRANCH_NAME from demand_advice_info a, "
						+ " dan_cgpan_info b, member_info c where a.DAN_ID = b.DAN_ID and "
						+ " a.MEM_BNK_ID = c.MEM_BNK_ID AND a.MEM_ZNE_ID =c.MEM_ZNE_ID "
						+ " AND a.MEM_BRN_ID =c.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(c.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and trunc(a.DAN_GENERATED_DT)  between ? and ? "
						+ " group by a.DAN_ID,a.DAN_GENERATED_DT,b.DCI_APPROPRIATION_FLAG, "
						+ " c.MEM_BNK_ID,c.MEM_zne_ID,c.MEM_BRN_ID,c.MEM_ZONE_NAME,c.MEM_BRANCH_NAME "
						+ " order by c.MEM_ZONE_NAME,C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID ";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setString(1, bank);
				danRaisedStmt.setDate(2, startDate);
				danRaisedStmt.setDate(3, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				ArrayList danDetailsArray = new ArrayList();

				// String lastDanId = null;
				String danId = null;
				String memberId = null;
				String zone = null;
				String branch = null;
				java.sql.Date danDate = null;
				int danApplications = 0;
				double danGuaranteeFeeDemanded = 0.0;
				String danFlag = null;
				// double gfeeforN = 0.0;
				// double gfeeforY = 0.0;
				while (danRaisedResult.next()) {
					GFee danReport = new GFee();
					danId = danRaisedResult.getString(1);
					danDate = danRaisedResult.getDate(2);
					danApplications = danRaisedResult.getInt(3);
					danGuaranteeFeeDemanded = danRaisedResult.getDouble(4);
					danFlag = danRaisedResult.getString(5);
					memberId = danRaisedResult.getString(6);
					zone = danRaisedResult.getString(7);
					branch = danRaisedResult.getString(8);

					danReport.setDan(danId);
					danReport.setDanDate(danDate);
					danReport.setApplications(danApplications);
					danReport.setGuaranteeFee(danGuaranteeFeeDemanded);
					danReport.setFlag(danFlag);
					danReport.setMemberId(memberId);
					danReport.setZone(zone);
					danReport.setBranch(branch);

					danDetailsArray.add(danReport);
				}

				// int arraySize = danDetailsArray.size();
				for (int i = 0; i < danDetailsArray.size(); i++) {

					GFee danReport1 = new GFee();
					danReport1 = (GFee) danDetailsArray.get(i);
					String danId1 = danReport1.getDan();
					int cgpans1 = danReport1.getApplications();
					double gFee1 = danReport1.getGuaranteeFee();
					String flag1 = danReport1.getFlag();
					boolean setFlag = false;

					for (int j = 0; j < danDetailsArray.size(); j++) {

						GFee danReport2 = new GFee();
						danReport2 = (GFee) danDetailsArray.get(j);
						String danId2 = danReport2.getDan();
						int cgpans2 = danReport2.getApplications();
						double gFee2 = danReport2.getGuaranteeFee();
						String flag2 = danReport2.getFlag();
						if (i != j) {
							if (danId1.equals(danId2)) {
								GFee danReportFinal = null;
								double totalGFee = gFee1 + gFee2;
								int totalCgpans = cgpans1 + cgpans2;

								if (flag1.equals("Y") && flag2.equals("N")) {
									danReportFinal = new GFee();
									danReportFinal.setDan(danReport1.getDan());
									danReportFinal.setDanDate(danReport1
											.getDanDate());
									danReportFinal.setApplications(totalCgpans);
									danReportFinal.setGuaranteeFee(totalGFee);
									danReportFinal.setGuaranteeFeePaid(gFee1);
									danReportFinal.setMemberId(danReport1
											.getMemberId());
									danReportFinal
											.setZone(danReport1.getZone());
									danReportFinal.setBranch(danReport1
											.getBranch());
									double outstanding = totalGFee - gFee1;
									danReportFinal.setOutstanding(outstanding);

								} else if (flag1.equals("N")
										&& flag2.equals("Y")) {
									danReportFinal = new GFee();
									danReportFinal.setDan(danReport1.getDan());
									danReportFinal.setDanDate(danReport1
											.getDanDate());
									danReportFinal.setApplications(totalCgpans);
									danReportFinal.setGuaranteeFee(totalGFee);
									danReportFinal.setGuaranteeFeePaid(gFee2);
									danReportFinal.setMemberId(danReport1
											.getMemberId());
									danReportFinal
											.setZone(danReport1.getZone());
									danReportFinal.setBranch(danReport1
											.getBranch());
									double outstanding = totalGFee - gFee2;
									danReportFinal.setOutstanding(outstanding);

								}
								setFlag = true;
								danRaisedArrayFinal.add(danReportFinal);

								danDetailsArray.remove(j);
								j--;

							} // end of if block
						} // end of verification(i!=j) block
					} // end of j loop

					if (!setFlag) {
						String flag = danReport1.getFlag();

						if (flag.equals("Y")) {
							double setGuaranteeFee = danReport1
									.getGuaranteeFee();
							double setGuaranteeFeePaid = danReport1
									.getGuaranteeFee();
							double outstanding = setGuaranteeFee
									- setGuaranteeFeePaid;
							danReport1.setDan(danReport1.getDan());
							danReport1.setDanDate(danReport1.getDanDate());
							danReport1.setApplications(danReport1
									.getApplications());
							danReport1.setGuaranteeFee(danReport1
									.getGuaranteeFee());
							danReport1.setGuaranteeFeePaid(setGuaranteeFeePaid);
							danReport1.setMemberId(danReport1.getMemberId());
							danReport1.setZone(danReport1.getZone());
							danReport1.setBranch(danReport1.getBranch());
							danReport1.setOutstanding(outstanding);

						} else if (flag.equals("N")) {
							// double setGuaranteeFee =
							// danReport1.getGuaranteeFee();
							double setGuaranteeFeePaid = 0.0;
							double outstanding = danReport1.getGuaranteeFee();
							danReport1.setDan(danReport1.getDan());
							danReport1.setDanDate(danReport1.getDanDate());
							danReport1.setApplications(danReport1
									.getApplications());
							danReport1.setGuaranteeFee(danReport1
									.getGuaranteeFee());
							danReport1.setGuaranteeFeePaid(setGuaranteeFeePaid);
							danReport1.setMemberId(danReport1.getMemberId());
							danReport1.setZone(danReport1.getZone());
							danReport1.setBranch(danReport1.getBranch());
							danReport1.setOutstanding(outstanding);

						}
						danRaisedArrayFinal.add(danReport1);
					} // end of if block
				} // end of i loop

				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} // end of try block

			catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {
				String query = "select a.DAN_ID, a.DAN_GENERATED_DT, "
						+ " count(b.cgpan),sum(b.DCI_AMOUNT_RAISED), "
						+ " b.DCI_APPROPRIATION_FLAG,c.MEM_BNK_ID||c.MEM_zne_ID||c.MEM_BRN_ID, "
						+ " c.MEM_ZONE_NAME,c.MEM_BRANCH_NAME from demand_advice_info a, "
						+ " dan_cgpan_info b, member_info c where a.DAN_ID = b.DAN_ID and "
						+ " a.MEM_BNK_ID = c.MEM_BNK_ID AND a.MEM_ZNE_ID =c.MEM_ZNE_ID "
						+ " AND a.MEM_BRN_ID =c.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(c.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and trunc(a.DAN_GENERATED_DT)  <= ? "
						+ " group by a.DAN_ID,a.DAN_GENERATED_DT,b.DCI_APPROPRIATION_FLAG, "
						+ " c.MEM_BNK_ID,c.MEM_zne_ID,c.MEM_BRN_ID,c.MEM_ZONE_NAME,c.MEM_BRANCH_NAME "
						+ " order by c.MEM_ZONE_NAME,C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID ";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setString(1, bank);
				danRaisedStmt.setDate(2, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				ArrayList danDetailsArray = new ArrayList();

				// String lastDanId = null;
				String danId = null;
				String memberId = null;
				String zone = null;
				String branch = null;
				java.sql.Date danDate = null;
				int danApplications = 0;
				double danGuaranteeFeeDemanded = 0.0;
				String danFlag = null;
				// double gfeeforN = 0.0;
				// double gfeeforY = 0.0;
				while (danRaisedResult.next()) {
					GFee danReport = new GFee();
					danId = danRaisedResult.getString(1);
					danDate = danRaisedResult.getDate(2);
					danApplications = danRaisedResult.getInt(3);
					danGuaranteeFeeDemanded = danRaisedResult.getDouble(4);
					danFlag = danRaisedResult.getString(5);
					memberId = danRaisedResult.getString(6);
					zone = danRaisedResult.getString(7);
					branch = danRaisedResult.getString(8);

					danReport.setDan(danId);
					danReport.setDanDate(danDate);
					danReport.setApplications(danApplications);
					danReport.setGuaranteeFee(danGuaranteeFeeDemanded);
					danReport.setFlag(danFlag);
					danReport.setMemberId(memberId);
					danReport.setZone(zone);
					danReport.setBranch(branch);

					danDetailsArray.add(danReport);
				}

				// int arraySize = danDetailsArray.size();
				for (int i = 0; i < danDetailsArray.size(); i++) {

					GFee danReport1 = new GFee();
					danReport1 = (GFee) danDetailsArray.get(i);
					String danId1 = danReport1.getDan();
					int cgpans1 = danReport1.getApplications();
					double gFee1 = danReport1.getGuaranteeFee();
					String flag1 = danReport1.getFlag();
					boolean setFlag = false;

					for (int j = 0; j < danDetailsArray.size(); j++) {

						GFee danReport2 = new GFee();
						danReport2 = (GFee) danDetailsArray.get(j);
						String danId2 = danReport2.getDan();
						int cgpans2 = danReport2.getApplications();
						double gFee2 = danReport2.getGuaranteeFee();
						String flag2 = danReport2.getFlag();

						if (i != j) {
							if (danId1.equals(danId2)) {
								GFee danReportFinal = null;
								double totalGFee = gFee1 + gFee2;
								int totalCgpans = cgpans1 + cgpans2;

								if (flag1.equals("Y") && flag2.equals("N")) {
									danReportFinal = new GFee();
									danReportFinal.setDan(danReport1.getDan());
									danReportFinal.setDanDate(danReport1
											.getDanDate());
									danReportFinal.setApplications(totalCgpans);
									danReportFinal.setGuaranteeFee(totalGFee);
									danReportFinal.setGuaranteeFeePaid(gFee1);
									danReportFinal.setMemberId(danReport1
											.getMemberId());
									danReportFinal
											.setZone(danReport1.getZone());
									danReportFinal.setBranch(danReport1
											.getBranch());
									double outstanding = totalGFee - gFee1;
									danReportFinal.setOutstanding(outstanding);

								} else if (flag1.equals("N")
										&& flag2.equals("Y")) {
									danReportFinal = new GFee();
									danReportFinal.setDan(danReport1.getDan());
									danReportFinal.setDanDate(danReport1
											.getDanDate());
									danReportFinal.setApplications(totalCgpans);
									danReportFinal.setGuaranteeFee(totalGFee);
									danReportFinal.setGuaranteeFeePaid(gFee2);
									danReportFinal.setMemberId(danReport1
											.getMemberId());
									danReportFinal
											.setZone(danReport1.getZone());
									danReportFinal.setBranch(danReport1
											.getBranch());
									double outstanding = totalGFee - gFee2;
									danReportFinal.setOutstanding(outstanding);

								}
								setFlag = true;
								danRaisedArrayFinal.add(danReportFinal);

								danDetailsArray.remove(j);
								j--;

							} // end of if block
						} // end of verification(i!=j) block
					} // end of j loop

					if (!setFlag) {
						String flag = danReport1.getFlag();

						if (flag.equals("Y")) {
							double setGuaranteeFee = danReport1
									.getGuaranteeFee();
							double setGuaranteeFeePaid = danReport1
									.getGuaranteeFee();
							double outstanding = setGuaranteeFee
									- setGuaranteeFeePaid;
							danReport1.setDan(danReport1.getDan());
							danReport1.setDanDate(danReport1.getDanDate());
							danReport1.setApplications(danReport1
									.getApplications());
							danReport1.setGuaranteeFee(danReport1
									.getGuaranteeFee());
							danReport1.setGuaranteeFeePaid(setGuaranteeFeePaid);
							danReport1.setMemberId(danReport1.getMemberId());
							danReport1.setZone(danReport1.getZone());
							danReport1.setBranch(danReport1.getBranch());
							danReport1.setOutstanding(outstanding);

						} else if (flag.equals("N")) {
							// double setGuaranteeFee =
							// danReport1.getGuaranteeFee();
							double setGuaranteeFeePaid = 0.0;
							double outstanding = danReport1.getGuaranteeFee();
							danReport1.setDan(danReport1.getDan());
							danReport1.setDanDate(danReport1.getDanDate());
							danReport1.setApplications(danReport1
									.getApplications());
							danReport1.setGuaranteeFee(danReport1
									.getGuaranteeFee());
							danReport1.setGuaranteeFeePaid(setGuaranteeFeePaid);
							danReport1.setMemberId(danReport1.getMemberId());
							danReport1.setZone(danReport1.getZone());
							danReport1.setBranch(danReport1.getBranch());
							danReport1.setOutstanding(outstanding);

						}
						danRaisedArrayFinal.add(danReport1);
					} // end of if block
				} // end of i loop
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} // end of try block

			catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "DanRaisedReport", "Exited");
		return danRaisedArrayFinal;

	}

	public ArrayList danDetails(java.sql.Date startDate, java.sql.Date endDate,
			String bank, String cgdan) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "danDetails", "Entered");
		PreparedStatement danDetailsStmt = null;
		ResultSet danDetailsResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danDetailsArray = new ArrayList();

		if (startDate != null) {
			try {
				String query = "select a.CGPAN, s.SSI_UNIT_NAME, "
						+ "(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)), "
						+ "c.DCI_AMOUNT_RAISED, a.APP_GUAR_START_DATE_TIME"
						+ " from demand_advice_info d, application_detail a,ssi_detail s,"
						+ " dan_cgpan_info c, member_info m  where d.DAN_ID = c.DAN_ID and"
						+ " d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID ="
						+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID and"
						+ " a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER and"
						+ " c.CGPAN = a.CGPAN and LTRIM(RTRIM(UPPER(m.MEM_BANK_NAME))) ="
						+ " LTRIM(RTRIM(UPPER(?))) and trunc(d.DAN_GENERATED_DT) between ? and  ? and "
						+ " LTRIM(RTRIM(UPPER(d.DAN_ID))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by a.CGPAN, s.SSI_UNIT_NAME,"
						+ " (decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)), "
						+ " c.DCI_AMOUNT_RAISED, a.APP_GUAR_START_DATE_TIME";
				danDetailsStmt = connection.prepareStatement(query);
				danDetailsStmt.setString(1, bank);
				danDetailsStmt.setDate(2, startDate);
				danDetailsStmt.setDate(3, endDate);
				danDetailsStmt.setString(4, cgdan);
				danDetailsResult = danDetailsStmt.executeQuery();

				while (danDetailsResult.next()) {
					GuaranteeCover danDetailsReport = new GuaranteeCover();
					danDetailsReport.setCgpan(danDetailsResult.getString(1));
					danDetailsReport.setSsiName(danDetailsResult.getString(2));
					danDetailsReport.setTotal(danDetailsResult.getDouble(3));
					danDetailsReport.setGuaranteeFee(danDetailsResult
							.getDouble(4));
					danDetailsReport.setDate(danDetailsResult.getDate(5));

					danDetailsArray.add(danDetailsReport);
				}
				danDetailsResult.close();
				danDetailsResult = null;
				danDetailsStmt.close();
				danDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {
				String query = "select a.CGPAN, s.SSI_UNIT_NAME, "
						+ "(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)), "
						+ " c.DCI_AMOUNT_RAISED, a.APP_GUAR_START_DATE_TIME"
						+ " from demand_advice_info d, application_detail a,ssi_detail s,"
						+ " dan_cgpan_info c, member_info m  where d.DAN_ID = c.DAN_ID and"
						+ " d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID ="
						+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID and"
						+ " a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER and"
						+ " c.CGPAN = a.CGPAN and LTRIM(RTRIM(UPPER(m.MEM_BANK_NAME))) ="
						+ " LTRIM(RTRIM(UPPER(?))) and trunc(d.DAN_GENERATED_DT) <=  ? and "
						+ " LTRIM(RTRIM(UPPER(d.DAN_ID))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by a.CGPAN, s.SSI_UNIT_NAME,"
						+ " (decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)), "
						+ " c.DCI_AMOUNT_RAISED, a.APP_GUAR_START_DATE_TIME";
				danDetailsStmt = connection.prepareStatement(query);
				danDetailsStmt.setString(1, bank);
				danDetailsStmt.setDate(2, endDate);
				danDetailsStmt.setString(3, cgdan);
				danDetailsResult = danDetailsStmt.executeQuery();

				while (danDetailsResult.next()) {
					GuaranteeCover danDetailsReport = new GuaranteeCover();
					danDetailsReport.setCgpan(danDetailsResult.getString(1));
					danDetailsReport.setSsiName(danDetailsResult.getString(2));
					danDetailsReport.setTotal(danDetailsResult.getDouble(3));
					danDetailsReport.setGuaranteeFee(danDetailsResult
							.getDouble(4));
					danDetailsReport.setDate(danDetailsResult.getDate(5));

					danDetailsArray.add(danDetailsReport);
				}
				danDetailsResult.close();
				danDetailsResult = null;
				danDetailsStmt.close();
				danDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "danDetails", "Exited");
		return danDetailsArray;
	}

	/*
	 * ##########################################################################
	 * ##########################
	 */

	public ArrayList gfOutstandingMlis(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "gfOutstandingMlis", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList danRaisedArray = new ArrayList();
		ResultSet danRaisedResult = null;
		Connection connection = DBConnection.getConnection();
		String flag = "N";
		String active = "A";

		if (startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = " select bnkname from(select distinct(m.MEM_BANK_NAME) bnkname"
						+ " from member_info m, "
						+ " dan_cgpan_info c, demand_advice_info d  "
						+ " where  trunc(d.DAN_GENERATED_DT) between ? and ? and c.DCI_APPROPRIATION_FLAG = ? "
						+ " and m.MEM_STATUS = ? and c.DAN_ID=d.DAN_ID and "
						+ " m.MEM_BNK_ID =d.MEM_BNK_ID and m.MEM_ZNE_ID =d.MEM_ZNE_ID and m.MEM_BRN_ID = d.MEM_BRN_ID"
						+ " )order by bnkname";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, flag);
				danRaisedStmt.setString(4, active);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					// Instantiate a Gfee value object
					GeneralReport generalReport = new GeneralReport();
					generalReport.setType(danRaisedResult.getString(1));

					danRaisedArray.add(generalReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = " select bnkname from(select distinct(m.MEM_BANK_NAME) bnkname"
						+ " from member_info m, "
						+ " dan_cgpan_info c, demand_advice_info d  "
						+ " where  trunc(d.DAN_GENERATED_DT) <=  ? and c.DCI_APPROPRIATION_FLAG = ? "
						+ " and m.MEM_STATUS = ? and c.DAN_ID=d.DAN_ID and "
						+ " m.MEM_BNK_ID =d.MEM_BNK_ID and m.MEM_ZNE_ID =d.MEM_ZNE_ID and m.MEM_BRN_ID = d.MEM_BRN_ID"
						+ " )order by bnkname";
				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedStmt.setString(2, flag);
				danRaisedStmt.setString(3, active);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					// Instantiate a Gfee value object
					GeneralReport generalReport = new GeneralReport();
					generalReport.setType(danRaisedResult.getString(1));

					danRaisedArray.add(generalReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "gfOutstandingMlis", "Exited");
		return danRaisedArray;
	}

	public ArrayList gfOutstandingReport(java.sql.Date startDate,
			java.sql.Date endDate, String bank) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "gfOutstandingReport", "Entered");
		PreparedStatement danRaisedStmt = null;
		Connection connection = DBConnection.getConnection();
		ResultSet danRaisedResult;
		String checkFlag = "N";
		ArrayList danDetailsArray = new ArrayList();

		if (startDate != null) {
			try {
				String query = "select a.DAN_ID, a.DAN_GENERATED_DT, count(b.cgpan),"
						+ " sum(b.DCI_AMOUNT_RAISED - NVL(b.DCI_AMOUNT_CANCELLED,0)), b.DCI_APPROPRIATION_FLAG, "
						+ " c.MEM_BNK_ID||c.MEM_zne_ID||c.MEM_BRN_ID, c.MEM_ZONE_NAME,"
						+ " c.MEM_BRANCH_NAME from demand_advice_info a, dan_cgpan_info b,"
						+ " member_info c where "
						+ " LTRIM(RTRIM(UPPER(c.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) and "
						+ " trunc(a.DAN_GENERATED_DT)  between ? and ? and b.DCI_APPROPRIATION_FLAG =?  and "
						+ " a.DAN_ID = b.DAN_ID and "
						+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID = "
						+ " c.MEM_BNK_ID || c.MEM_ZNE_ID || c.MEM_BRN_ID "
						+ " group by a.DAN_ID,a.DAN_GENERATED_DT,b.DCI_APPROPRIATION_FLAG,"
						+ " c.MEM_BNK_ID||c.MEM_zne_ID||c.MEM_BRN_ID, c.MEM_ZONE_NAME,"
						+ " c.MEM_BRANCH_NAME order by c.MEM_ZONE_NAME,"
						+ " C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setString(1, bank);
				danRaisedStmt.setDate(2, startDate);
				danRaisedStmt.setDate(3, endDate);
				danRaisedStmt.setString(4, checkFlag);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					GFee danReport = new GFee();

					danReport.setDan(danRaisedResult.getString(1));
					danReport.setDanDate(danRaisedResult.getDate(2));
					danReport.setApplications(danRaisedResult.getInt(3));
					danReport.setGuaranteeFee(danRaisedResult.getDouble(4));
					danReport.setFlag(danRaisedResult.getString(5));
					danReport.setGuaranteeFeePaid(0.0);
					danReport.setOutstanding(danRaisedResult.getDouble(4));
					danReport.setMemberId(danRaisedResult.getString(6));
					danReport.setZone(danRaisedResult.getString(7));
					danReport.setBranch(danRaisedResult.getString(8));

					danDetailsArray.add(danReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if (startDate == null) {
			try {
				String query = "select a.DAN_ID, a.DAN_GENERATED_DT, count(b.cgpan),"
						+ " sum(b.DCI_AMOUNT_RAISED - NVL(b.DCI_AMOUNT_CANCELLED,0)), b.DCI_APPROPRIATION_FLAG, "
						+ " c.MEM_BNK_ID||c.MEM_zne_ID||c.MEM_BRN_ID, c.MEM_ZONE_NAME,"
						+ " c.MEM_BRANCH_NAME from demand_advice_info a, dan_cgpan_info b,"
						+ " member_info c where "
						+ " LTRIM(RTRIM(UPPER(c.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) and "
						+ " trunc(a.DAN_GENERATED_DT)  <= ? and b.DCI_APPROPRIATION_FLAG =?  and "
						+ " a.DAN_ID = b.DAN_ID and "
						+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID = "
						+ " c.MEM_BNK_ID || c.MEM_ZNE_ID || c.MEM_BRN_ID "
						+ " group by a.DAN_ID,a.DAN_GENERATED_DT,b.DCI_APPROPRIATION_FLAG,"
						+ " c.MEM_BNK_ID||c.MEM_zne_ID||c.MEM_BRN_ID, c.MEM_ZONE_NAME,"
						+ " c.MEM_BRANCH_NAME order by c.MEM_ZONE_NAME,"
						+ " C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID";

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setString(1, bank);
				danRaisedStmt.setDate(2, endDate);
				danRaisedStmt.setString(3, checkFlag);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					GFee danReport = new GFee();

					danReport.setDan(danRaisedResult.getString(1));
					danReport.setDanDate(danRaisedResult.getDate(2));
					danReport.setApplications(danRaisedResult.getInt(3));
					danReport.setGuaranteeFee(danRaisedResult.getDouble(4));
					danReport.setFlag(danRaisedResult.getString(5));
					danReport.setGuaranteeFeePaid(0.0);
					danReport.setOutstanding(danRaisedResult.getDouble(4));
					danReport.setMemberId(danRaisedResult.getString(6));
					danReport.setZone(danRaisedResult.getString(7));
					danReport.setBranch(danRaisedResult.getString(8));
					danDetailsArray.add(danReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "gfOutstandingReport", "Exited");
		return danDetailsArray;
	}

	public ArrayList danDetailsGf(java.sql.Date startDate,
			java.sql.Date endDate, String bank, String cgdan)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "danDetailsGf", "Entered");
		PreparedStatement danDetailsStmt = null;
		ResultSet danDetailsResult;
		Connection connection = DBConnection.getConnection();
		String flag = "N";
		ArrayList danDetailsArray = new ArrayList();

		if (startDate != null) {
			try {
				String query = "select a.CGPAN, s.SSI_UNIT_NAME, "
						+ " (decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)), "
						+ " (c.DCI_AMOUNT_RAISED-nvl(c.DCI_AMOUNT_CANCELLED,0)), a.APP_GUAR_START_DATE_TIME  "
						+ " from demand_advice_info d, application_detail a,ssi_detail s, "
						+ " dan_cgpan_info c, member_info m  where d.DAN_ID = c.DAN_ID and "
						+ " d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID ="
						+ "  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID and "
						+ " a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER and "
						+ " c.CGPAN = a.CGPAN and LTRIM(RTRIM(UPPER(m.MEM_BANK_NAME))) = "
						+ " LTRIM(RTRIM(UPPER(?))) and  trunc(d.DAN_GENERATED_DT) between ? and  ? "
						+ " and  LTRIM(RTRIM(UPPER(d.DAN_ID))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and c.DCI_APPROPRIATION_FLAG = ? "
						+ " group by a.CGPAN, s.SSI_UNIT_NAME, "
						+ " (decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)),"
						+ " (c.DCI_AMOUNT_RAISED-nvl(c.DCI_AMOUNT_CANCELLED,0)), a.APP_GUAR_START_DATE_TIME ";
				danDetailsStmt = connection.prepareStatement(query);
				danDetailsStmt.setString(1, bank);
				danDetailsStmt.setDate(2, startDate);
				danDetailsStmt.setDate(3, endDate);
				danDetailsStmt.setString(4, cgdan);
				danDetailsStmt.setString(5, flag);
				danDetailsResult = danDetailsStmt.executeQuery();

				while (danDetailsResult.next()) {
					GuaranteeCover danDetailsReport = new GuaranteeCover();
					danDetailsReport.setCgpan(danDetailsResult.getString(1));
					danDetailsReport.setSsiName(danDetailsResult.getString(2));
					danDetailsReport.setTotal(danDetailsResult.getDouble(3));
					danDetailsReport.setGuaranteeFee(danDetailsResult
							.getDouble(4));
					danDetailsReport.setDate(danDetailsResult.getDate(5));

					danDetailsArray.add(danDetailsReport);
				}
				danDetailsResult.close();
				danDetailsResult = null;
				danDetailsStmt.close();
				danDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {
				String query = "select a.CGPAN, s.SSI_UNIT_NAME, "
						+ " (decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)), "
						+ " (c.DCI_AMOUNT_RAISED-nvl(c.DCI_AMOUNT_CANCELLED,0)), a.APP_GUAR_START_DATE_TIME  "
						+ " from demand_advice_info d, application_detail a,ssi_detail s, "
						+ " dan_cgpan_info c, member_info m  where d.DAN_ID = c.DAN_ID and "
						+ " d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID ="
						+ "  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID and "
						+ " a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER and "
						+ " c.CGPAN = a.CGPAN and LTRIM(RTRIM(UPPER(m.MEM_BANK_NAME))) = "
						+ " LTRIM(RTRIM(UPPER(?))) and  trunc(d.DAN_GENERATED_DT) <=  ? "
						+ " and  LTRIM(RTRIM(UPPER(d.DAN_ID))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and c.DCI_APPROPRIATION_FLAG = ? "
						+ " group by a.CGPAN, s.SSI_UNIT_NAME, "
						+ " (decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)),"
						+ " (c.DCI_AMOUNT_RAISED-nvl(c.DCI_AMOUNT_CANCELLED,0)), a.APP_GUAR_START_DATE_TIME ";
				danDetailsStmt = connection.prepareStatement(query);
				danDetailsStmt.setString(1, bank);
				danDetailsStmt.setDate(2, endDate);
				danDetailsStmt.setString(3, cgdan);
				danDetailsStmt.setString(4, flag);
				danDetailsResult = danDetailsStmt.executeQuery();

				while (danDetailsResult.next()) {
					GuaranteeCover danDetailsReport = new GuaranteeCover();
					danDetailsReport.setCgpan(danDetailsResult.getString(1));
					danDetailsReport.setSsiName(danDetailsResult.getString(2));
					danDetailsReport.setTotal(danDetailsResult.getDouble(3));
					danDetailsReport.setGuaranteeFee(danDetailsResult
							.getDouble(4));
					danDetailsReport.setDate(danDetailsResult.getDate(5));

					danDetailsArray.add(danDetailsReport);
				}
				danDetailsResult.close();
				danDetailsResult = null;
				danDetailsStmt.close();
				danDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "danDetailsGf", "Exited");
		return danDetailsArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getmliWiseNEReportDetailsNew(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "mliApplicationDetails", "Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();
		if (startDate != null) {
			try {

				/*
				 * String query =
				 * "select mem_bank_name,sum(appcnt),sum(appamt),sum(isscnt),sum(issamt) from "
				 * + " ( " +
				 * " select mem_bank_name,count(a.cgpan) APPCNT,sum(app_approved_amount) APPAMT,0 ISSCNT,0 ISSAMT "
				 * + " from application_detail a,ssi_detail s,member_info m " +
				 * " where a.ssi_reference_number = s.ssi_reference_number " +
				 * " and m.MEM_STATE_NAME in (select scr_state_name from state_gr_map) "
				 * + " and a.mem_bnk_id = m.mem_bnk_id " +
				 * " and a.mem_zne_id = m.mem_zne_id " +
				 * " and a.mem_brn_id = m.mem_brn_id " +
				 * " and a.app_status not in ('RE')" +
				 * " and trunc(app_approved_date_time) between ? and ? " +
				 * " group by mem_bank_name " + " union all " +
				 * " select mem_bank_name,0 appcnt,0 appamt, count(a.cgpan) ISSCNT,sum(app_approved_amount) ISSAMT "
				 * + " from application_detail a,ssi_detail s,member_info m " +
				 * " where a.ssi_reference_number = s.ssi_reference_number " +
				 * " and m.MEM_STATE_NAME in (select scr_state_name from state_gr_map) "
				 * + " and a.mem_bnk_id = m.mem_bnk_id " +
				 * " and a.mem_zne_id = m.mem_zne_id " +
				 * " and a.mem_brn_id = m.mem_brn_id " +
				 * " and a.app_status not in ('RE')" +
				 * " and trunc(app_guar_start_date_time) between ? and ? " +
				 * " group by mem_bank_name " + " ) " +
				 * " group by mem_bank_name ";
				 */

				/* Formatted on 5/10/2018 3:01:58 PM (QP5 v5.240.12305.39446) */
				/*
				 * String query = "  SELECT mem_bank_name, " +
				 * "  SUM (appcnt), " + "  SUM (appamt), " +
				 * "    SUM (isscnt), " + "    SUM (issamt) " +
				 * " FROM (  SELECT mem_bank_name, " +
				 * "              COUNT (a.cgpan) APPCNT, " +
				 * "               SUM (DECODE (a.APP_REAPPROVE_AMOUNT,NULL, a.APP_APPROVED_AMOUNT,a.APP_REAPPROVE_AMOUNT)) APPAMT, "
				 * + "               0 ISSCNT, " + "              0 ISSAMT " +
				 * "          FROM application_detail a, ssi_detail s, member_info m,promoter_detail p "
				 * +
				 * "         WHERE     a.ssi_reference_number = s.ssi_reference_number "
				 * + "               AND m.MEM_STATE_NAME IN " +
				 * "                      (SELECT scr_state_name FROM state_gr_map) "
				 * + "            AND a.mem_bnk_id = m.mem_bnk_id " +
				 * "            AND a.mem_zne_id = m.mem_zne_id " +
				 * "            AND a.mem_brn_id = m.mem_brn_id " +
				 * "            AND a.app_status NOT IN ('RE') " +
				 * "            AND TRUNC (app_approved_date_time) BETWEEN ? AND ?  "
				 * + "   GROUP BY mem_bank_name  " + "   UNION ALL " +
				 * "     SELECT mem_bank_name, " + "            0 appcnt, " +
				 * "            0 appamt, " +
				 * "            COUNT (a.cgpan) ISSCNT, " +
				 * "           SUM (DECODE (a.APP_REAPPROVE_AMOUNT,NULL, a.APP_APPROVED_AMOUNT,a.APP_REAPPROVE_AMOUNT)) ISSAMT "
				 * +
				 * "       FROM application_detail a, ssi_detail s, member_info m,promoter_detail p "
				 * +
				 * "      WHERE     a.ssi_reference_number = s.ssi_reference_number "
				 * +
				 * "            and a.ssi_reference_number = p.ssi_reference_number "
				 * + "            AND m.MEM_STATE_NAME IN " +
				 * "                   (SELECT scr_state_name FROM state_gr_map) "
				 * + "            AND a.mem_bnk_id = m.mem_bnk_id " +
				 * "            AND a.mem_zne_id = m.mem_zne_id " +
				 * "            AND a.mem_brn_id = m.mem_brn_id " +
				 * "            AND a.app_status NOT IN ('RE') " +
				 * "            AND TRUNC (app_guar_start_date_time) BETWEEN ? AND ? "
				 * + "   GROUP BY mem_bank_name) " +
				 * "   GROUP BY mem_bank_name ";
				 */

				String query = "  SELECT mem_bank_name, "
						+ "  SUM (appcnt), "
						+ "  SUM (appamt), "
						+ "    SUM (isscnt), "
						+ "    SUM (issamt) "
						+ " FROM (  SELECT mem_bank_name, "
						+ "              COUNT (a.cgpan) APPCNT, "
						+ "               SUM (DECODE (a.APP_REAPPROVE_AMOUNT,NULL, a.APP_APPROVED_AMOUNT,a.APP_REAPPROVE_AMOUNT)) APPAMT, "
						+ "               0 ISSCNT, "
						+ "              0 ISSAMT "
						+ "          FROM application_detail a, ssi_detail s, member_info m,promoter_detail p "
						+ "         WHERE     a.ssi_reference_number = s.ssi_reference_number "
						+ "         and     a.ssi_reference_number = p.ssi_reference_number "
						+ "               AND s.SSI_STATE_NAME IN "
						+ "                      (SELECT scr_state_name FROM state_gr_map) "
						+ "            AND a.mem_bnk_id = m.mem_bnk_id "
						+ "            AND a.mem_zne_id = m.mem_zne_id "
						+ "            AND a.mem_brn_id = m.mem_brn_id "
						+ "            AND a.app_status NOT IN ('RE') "
						+ "            AND TRUNC (app_approved_date_time) BETWEEN ? AND ?  "
						+ "   GROUP BY mem_bank_name  "
						+ "   UNION ALL "
						+ "     SELECT mem_bank_name, "
						+ "            0 appcnt, "
						+ "            0 appamt, "
						+ "            COUNT (a.cgpan) ISSCNT, "
						+ "           SUM (DECODE (a.APP_REAPPROVE_AMOUNT,NULL, a.APP_APPROVED_AMOUNT,a.APP_REAPPROVE_AMOUNT)) ISSAMT "
						+ "       FROM application_detail a, ssi_detail s, member_info m,promoter_detail p "
						+ "      WHERE     a.ssi_reference_number = s.ssi_reference_number "
						+ "            and a.ssi_reference_number = p.ssi_reference_number "
						+ "            AND s.SSI_STATE_NAME IN "
						+ "                   (SELECT scr_state_name FROM state_gr_map) "
						+ "            AND a.mem_bnk_id = m.mem_bnk_id "
						+ "            AND a.mem_zne_id = m.mem_zne_id "
						+ "            AND a.mem_brn_id = m.mem_brn_id "
						+ "            AND a.app_status NOT IN ('RE') "
						+ "            AND TRUNC (app_guar_start_date_time) BETWEEN ? AND ? "
						+ "   GROUP BY mem_bank_name) "
						+ "   GROUP BY mem_bank_name ";
				//System.out.println("query:1" + query);

				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setDate(3, startDate);
				mliApplicationStmt.setDate(4, endDate);
				mliApplicationResult = mliApplicationStmt.executeQuery();
				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setBankName(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setProposal(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setCumAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		} else if (startDate == null) {

			try {

				/*
				 * String query =
				 * "select mem_bank_name,sum(appcnt),sum(appamt),sum(isscnt),sum(issamt) from "
				 * + " ( " +
				 * " select mem_bank_name,count(a.cgpan) APPCNT,sum(app_approved_amount) APPAMT,0 ISSCNT,0 ISSAMT "
				 * + " from application_detail a,ssi_detail s,member_info m " +
				 * " where a.ssi_reference_number = s.ssi_reference_number " +
				 * " and m.MEM_STATE_NAME in (select scr_state_name from state_gr_map) "
				 * + " and a.mem_bnk_id = m.mem_bnk_id " +
				 * " and a.mem_zne_id = m.mem_zne_id " +
				 * " and a.mem_brn_id = m.mem_brn_id " +
				 * " and a.app_status not in ('RE')" +
				 * " and trunc(app_approved_date_time) <= ? " +
				 * " group by mem_bank_name " + " union all " +
				 * " select mem_bank_name,0 appcnt,0 appamt, count(a.cgpan) ISSCNT,sum(app_approved_amount) ISSAMT "
				 * + " from application_detail a,ssi_detail s,member_info m " +
				 * " where a.ssi_reference_number = s.ssi_reference_number " +
				 * " and m.MEM_STATE_NAME in (select scr_state_name from state_gr_map) "
				 * + " and a.mem_bnk_id = m.mem_bnk_id " +
				 * " and a.mem_zne_id = m.mem_zne_id " +
				 * " and a.mem_brn_id = m.mem_brn_id " +
				 * " and a.app_status not in ('RE')" +
				 * " and trunc(app_guar_start_date_time) <= ? " +
				 * " group by mem_bank_name " + " ) " +
				 * " group by mem_bank_name ";
				 */

				/* Formatted on 5/10/2018 3:19:56 PM (QP5 v5.240.12305.39446) */
				/*
				 * String query = " SELECT mem_bank_name, " + " SUM (appcnt), "
				 * + "  SUM (appamt), " + "  SUM (isscnt), " + "  SUM (issamt) "
				 * + " FROM (  SELECT mem_bank_name, " +
				 * "            COUNT (a.cgpan) APPCNT, " +
				 * "            SUM (DECODE (a.APP_REAPPROVE_AMOUNT,NULL, a.APP_APPROVED_AMOUNT,a.APP_REAPPROVE_AMOUNT)) APPAMT, "
				 * + "            0 ISSCNT, " + "            0 ISSAMT " +
				 * "       FROM application_detail a, ssi_detail s, member_info m,promoter_detail p "
				 * +
				 * "      WHERE     a.ssi_reference_number = s.ssi_reference_number "
				 * +
				 * "            AND a.ssi_reference_number = p.ssi_reference_number "
				 * + "            AND m.MEM_STATE_NAME IN " +
				 * "                   (SELECT scr_state_name FROM state_gr_map) "
				 * + "            AND a.mem_bnk_id = m.mem_bnk_id " +
				 * "            AND a.mem_zne_id = m.mem_zne_id " +
				 * "            AND a.mem_brn_id = m.mem_brn_id " +
				 * "            AND a.app_status NOT IN ('RE') " +
				 * "            AND TRUNC (app_approved_date_time) <= ? " +
				 * "   GROUP BY mem_bank_name " + "   UNION ALL " +
				 * "     SELECT mem_bank_name, " + "            0 appcnt, " +
				 * "            0 appamt, " +
				 * "            COUNT (a.cgpan) ISSCNT, " +
				 * "           SUM (DECODE (a.APP_REAPPROVE_AMOUNT,NULL, a.APP_APPROVED_AMOUNT,a.APP_REAPPROVE_AMOUNT)) ISSAMT "
				 * +
				 * "       FROM application_detail a, ssi_detail s, member_info m ,promoter_detail p  "
				 * +
				 * "      WHERE     a.ssi_reference_number = s.ssi_reference_number "
				 * +
				 * "            and a.ssi_reference_number = p.ssi_reference_number "
				 * + "            AND m.MEM_STATE_NAME IN " +
				 * "                   (SELECT scr_state_name FROM state_gr_map) "
				 * + "            AND a.mem_bnk_id = m.mem_bnk_id " +
				 * "            AND a.mem_zne_id = m.mem_zne_id " +
				 * "            AND a.mem_brn_id = m.mem_brn_id " +
				 * "            AND a.app_status NOT IN ('RE') " +
				 * "            AND TRUNC (app_guar_start_date_time) <= ? " +
				 * "   GROUP BY mem_bank_name) " + "  GROUP BY mem_bank_name  ";
				 */

				String query = " SELECT mem_bank_name, "
						+ " SUM (appcnt), "
						+ "  SUM (appamt), "
						+ "  SUM (isscnt), "
						+ "  SUM (issamt) "
						+ " FROM (  SELECT mem_bank_name, "
						+ "            COUNT (a.cgpan) APPCNT, "
						+ "            SUM (DECODE (a.APP_REAPPROVE_AMOUNT,NULL, a.APP_APPROVED_AMOUNT,a.APP_REAPPROVE_AMOUNT)) APPAMT, "
						+ "            0 ISSCNT, "
						+ "            0 ISSAMT "
						+ "       FROM application_detail a, ssi_detail s, member_info m,promoter_detail p "
						+ "      WHERE     a.ssi_reference_number = s.ssi_reference_number "
						+ "            AND a.ssi_reference_number = p.ssi_reference_number "
						+ "            AND s.SSI_STATE_NAME IN "
						+ "                   (SELECT scr_state_name FROM state_gr_map) "
						+ "            AND a.mem_bnk_id = m.mem_bnk_id "
						+ "            AND a.mem_zne_id = m.mem_zne_id "
						+ "            AND a.mem_brn_id = m.mem_brn_id "
						+ "            AND a.app_status NOT IN ('RE') "
						+ "            AND TRUNC (app_approved_date_time) <= ? "
						+ "   GROUP BY mem_bank_name "
						+ "   UNION ALL "
						+ "     SELECT mem_bank_name, "
						+ "            0 appcnt, "
						+ "            0 appamt, "
						+ "            COUNT (a.cgpan) ISSCNT, "
						+ "           SUM (DECODE (a.APP_REAPPROVE_AMOUNT,NULL, a.APP_APPROVED_AMOUNT,a.APP_REAPPROVE_AMOUNT)) ISSAMT "
						+ "       FROM application_detail a, ssi_detail s, member_info m ,promoter_detail p  "
						+ "      WHERE     a.ssi_reference_number = s.ssi_reference_number "
						+ "            and a.ssi_reference_number = p.ssi_reference_number "
						+ "            AND s.SSI_STATE_NAME IN "
						+ "                   (SELECT scr_state_name FROM state_gr_map) "
						+ "            AND a.mem_bnk_id = m.mem_bnk_id "
						+ "            AND a.mem_zne_id = m.mem_zne_id "
						+ "            AND a.mem_brn_id = m.mem_brn_id "
						+ "            AND a.app_status NOT IN ('RE') "
						+ "            AND TRUNC (app_guar_start_date_time) <= ? "
						+ "   GROUP BY mem_bank_name) "
						+ "  GROUP BY mem_bank_name  ";
				System.out.println("query:2" + query);
				mliApplicationStmt = connection.prepareStatement(query);

				mliApplicationStmt.setDate(1, endDate);

				mliApplicationStmt.setDate(2, endDate);
				mliApplicationResult = mliApplicationStmt.executeQuery();
				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setBankName(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setProposal(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setCumAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}

		return mliApplicationArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getmliWiseNEStateReportDetailsNew(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "getmliWiseNEStateReportDetailsNew",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();
		if (startDate != null) {
			try {
				/*
				 * String query =
				 * " select MEM_STATE_NAME,sum(appcnt),sum(appamt),sum(isscnt),sum(issamt) from "
				 * + " ( " +
				 * " select MEM_STATE_NAME,count(cgpan) APPCNT,sum(app_approved_amount) APPAMT,0 ISSCNT,0 ISSAMT "
				 * + " from application_detail a,ssi_detail s,member_info m " +
				 * " where a.ssi_reference_number = s.ssi_reference_number " +
				 * " and m.MEM_STATE_NAME in (select scr_state_name from state_gr_map) "
				 * + " and a.mem_bnk_id = m.mem_bnk_id " +
				 * " and a.mem_zne_id = m.mem_zne_id " +
				 * " and a.mem_brn_id = m.mem_brn_id " +
				 * " and trunc(app_approved_date_time) between ? and ? " +
				 * " group by MEM_STATE_NAME " + " union all " +
				 * " select MEM_STATE_NAME,0 appcnt,0 appamt, count(cgpan) ISSCNT,sum(app_approved_amount) ISSAMT "
				 * + " from application_detail a,ssi_detail s,member_info m " +
				 * " where a.ssi_reference_number = s.ssi_reference_number " +
				 * " and m.MEM_STATE_NAME in (select scr_state_name from state_gr_map) "
				 * + " and a.mem_bnk_id = m.mem_bnk_id " +
				 * " and a.mem_zne_id = m.mem_zne_id " +
				 * " and a.mem_brn_id = m.mem_brn_id " +
				 * " and trunc(app_guar_start_date_time) between ? and ? " +
				 * " group by MEM_STATE_NAME " + " ) " +
				 * " group by MEM_STATE_NAME ";
				 */
				/*
				 * String query = "SELECT MEM_STATE_NAME, " + " SUM (appcnt), "
				 * + " SUM (appamt), " + " SUM (isscnt), " + " SUM (issamt) " +
				 * " FROM (  SELECT MEM_STATE_NAME, " +
				 * " COUNT (a.cgpan) APPCNT, " +
				 * " SUM(DECODE (a.APP_REAPPROVE_AMOUNT, NULL, a.APP_APPROVED_AMOUNT, a.APP_REAPPROVE_AMOUNT)) APPAMT, "
				 * + " 0 ISSCNT, " + " 0 ISSAMT " +
				 * " FROM application_detail a, ssi_detail s, member_info m,promoter_detail p "
				 * + " WHERE   a.ssi_reference_number = p.ssi_reference_number "
				 * + " and a.ssi_reference_number = s.ssi_reference_number " +
				 * " AND m.MEM_STATE_NAME IN  (SELECT scr_state_name FROM state_gr_map) "
				 * + " AND a.mem_bnk_id = m.mem_bnk_id " +
				 * " AND a.mem_zne_id = m.mem_zne_id " +
				 * " AND a.mem_brn_id = m.mem_brn_id " +
				 * " AND a.app_status NOT IN ('RE') " +
				 * " AND TRUNC (app_approved_date_time) BETWEEN ? AND ? " +
				 * " GROUP BY MEM_STATE_NAME " + " UNION ALL " +
				 * " SELECT MEM_STATE_NAME, " + " 0 appcnt, " + " 0 appamt, " +
				 * " COUNT (a.cgpan) ISSCNT, " +
				 * " SUM(DECODE (a.APP_REAPPROVE_AMOUNT, NULL, a.APP_APPROVED_AMOUNT, a.APP_REAPPROVE_AMOUNT)) ISSAMT "
				 * +
				 * " FROM application_detail a, ssi_detail s, member_info m, promoter_detail p "
				 * + " WHERE   a.ssi_reference_number = p.ssi_reference_number "
				 * + " and  a.ssi_reference_number = s.ssi_reference_number " +
				 * " AND m.MEM_STATE_NAME IN  (SELECT scr_state_name FROM state_gr_map) "
				 * + " AND a.mem_bnk_id = m.mem_bnk_id " +
				 * " AND a.mem_zne_id = m.mem_zne_id " +
				 * " AND a.mem_brn_id = m.mem_brn_id " +
				 * " AND a.app_status NOT IN ('RE') " +
				 * " AND TRUNC (app_guar_start_date_time) BETWEEN ? AND ? " +
				 * " GROUP BY MEM_STATE_NAME) " + " GROUP BY MEM_STATE_NAME ";
				 */
				String query = "SELECT SSI_STATE_NAME, "
						+ " SUM (appcnt), "
						+ " SUM (appamt), "
						+ " SUM (isscnt), "
						+ " SUM (issamt) "
						+ " FROM (  SELECT SSI_STATE_NAME, "
						+ " COUNT (a.cgpan) APPCNT, "
						+ " SUM(DECODE (a.APP_REAPPROVE_AMOUNT, NULL, a.APP_APPROVED_AMOUNT, a.APP_REAPPROVE_AMOUNT)) APPAMT, "
						+ " 0 ISSCNT, "
						+ " 0 ISSAMT "
						+ " FROM application_detail a, ssi_detail s, member_info m,promoter_detail p "
						+ " WHERE   a.ssi_reference_number = p.ssi_reference_number "
						+ " and a.ssi_reference_number = s.ssi_reference_number "
						+ " AND s.SSI_STATE_NAME IN  (SELECT scr_state_name FROM state_gr_map) "
						+ " AND a.mem_bnk_id = m.mem_bnk_id "
						+ " AND a.mem_zne_id = m.mem_zne_id "
						+ " AND a.mem_brn_id = m.mem_brn_id "
						+ " AND a.app_status NOT IN ('RE') "
						+ " AND TRUNC (app_approved_date_time) BETWEEN ? AND ? "
						+ " GROUP BY SSI_STATE_NAME "
						+ " UNION ALL "
						+ " SELECT SSI_STATE_NAME, "
						+ " 0 appcnt, "
						+ " 0 appamt, "
						+ " COUNT (a.cgpan) ISSCNT, "
						+ " SUM(DECODE (a.APP_REAPPROVE_AMOUNT, NULL, a.APP_APPROVED_AMOUNT, a.APP_REAPPROVE_AMOUNT)) ISSAMT "
						+ " FROM application_detail a, ssi_detail s, member_info m, promoter_detail p "
						+ " WHERE   a.ssi_reference_number = p.ssi_reference_number "
						+ " and  a.ssi_reference_number = s.ssi_reference_number "
						+ " AND s.SSI_STATE_NAME IN  (SELECT scr_state_name FROM state_gr_map) "
						+ " AND a.mem_bnk_id = m.mem_bnk_id "
						+ " AND a.mem_zne_id = m.mem_zne_id "
						+ " AND a.mem_brn_id = m.mem_brn_id "
						+ " AND a.app_status NOT IN ('RE') "
						+ " AND TRUNC (app_guar_start_date_time) BETWEEN ? AND ? "
						+ " GROUP BY SSI_STATE_NAME) "
						+ " GROUP BY SSI_STATE_NAME ";

				System.out.println("query:" + query);

				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setDate(3, startDate);
				mliApplicationStmt.setDate(4, endDate);
				mliApplicationResult = mliApplicationStmt.executeQuery();
				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setName(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setProposal(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setCumAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		} else if (startDate == null) {

			try {
				/*
				 * String query =
				 * " select ssi_state_name,sum(appcnt),sum(appamt),sum(isscnt),sum(issamt) from "
				 * + " ( " +
				 * " select ssi_state_name,count(a.cgpan) APPCNT,sum(app_approved_amount) APPAMT,0 ISSCNT,0 ISSAMT "
				 * + " from application_detail a,ssi_detail s,member_info m " +
				 * " where a.ssi_reference_number = s.ssi_reference_number " +
				 * " and s.ssi_state_name in (select scr_state_name from state_gr_map) "
				 * + " and a.mem_bnk_id = m.mem_bnk_id " +
				 * " and a.mem_zne_id = m.mem_zne_id " +
				 * " and a.mem_brn_id = m.mem_brn_id " +
				 * " and trunc(app_approved_date_time) <= ? " +
				 * " group by ssi_state_name " + " union all " +
				 * " select ssi_state_name,0 appcnt,0 appamt, count(cgpan) ISSCNT,sum(app_approved_amount) ISSAMT "
				 * + " from application_detail a,ssi_detail s,member_info m " +
				 * " where a.ssi_reference_number = s.ssi_reference_number " +
				 * " and s.ssi_state_name in (select scr_state_name from state_gr_map) "
				 * + " and a.mem_bnk_id = m.mem_bnk_id " +
				 * " and a.mem_zne_id = m.mem_zne_id " +
				 * " and a.mem_brn_id = m.mem_brn_id " +
				 * " and trunc(app_guar_start_date_time) <= ? " +
				 * " group by ssi_state_name " + " ) " +
				 * " group by ssi_state_name ";
				 */
				/*
				 * 
				 * String query = "SELECT MEM_STATE_NAME, " + " SUM (appcnt), "
				 * + " SUM (appamt), " + " SUM (isscnt), " + " SUM (issamt) " +
				 * " FROM (  SELECT MEM_STATE_NAME, " +
				 * "      COUNT (a.cgpan) APPCNT, " +
				 * "      SUM(DECODE (a.APP_REAPPROVE_AMOUNT, NULL, a.APP_APPROVED_AMOUNT, a.APP_REAPPROVE_AMOUNT)) APPAMT, "
				 * + "      0 ISSCNT, " + "      0 ISSAMT " +
				 * " FROM application_detail a, ssi_detail s, member_info m, promoter_detail p  "
				 * +
				 * " WHERE     a.ssi_reference_number = s.ssi_reference_number  "
				 * +
				 * "       and a.ssi_reference_number = p.ssi_reference_number  "
				 * + " AND a.app_status NOT IN ('RE') " +
				 * "      AND m.MEM_STATE_NAME IN (SELECT scr_state_name FROM state_gr_map)  "
				 * + "      AND a.mem_bnk_id = m.mem_bnk_id  " +
				 * "      AND a.mem_zne_id = m.mem_zne_id  " +
				 * "      AND a.mem_brn_id = m.mem_brn_id " +
				 * "      AND TRUNC (app_approved_date_time) <= ?   " +
				 * " GROUP BY MEM_STATE_NAME  " + " UNION ALL  " +
				 * " SELECT MEM_STATE_NAME, " + " 0 appcnt, " + " 0 appamt, " +
				 * " COUNT (a.cgpan) ISSCNT, " +
				 * " SUM(DECODE (a.APP_REAPPROVE_AMOUNT, NULL, a.APP_APPROVED_AMOUNT, a.APP_REAPPROVE_AMOUNT)) ISSAMT "
				 * +
				 * " FROM application_detail a, ssi_detail s, member_info m , promoter_detail p  "
				 * +
				 * " WHERE     a.ssi_reference_number = s.ssi_reference_number "
				 * + " and a.ssi_reference_number = p.ssi_reference_number " +
				 * " AND a.app_status NOT IN ('RE') " +
				 * "      AND m.MEM_STATE_NAME IN  (SELECT scr_state_name FROM state_gr_map) "
				 * + "      AND a.mem_bnk_id = m.mem_bnk_id " +
				 * "      AND a.mem_zne_id = m.mem_zne_id " +
				 * "      AND a.mem_brn_id = m.mem_brn_id " +
				 * "      AND TRUNC (app_guar_start_date_time) <= ? " +
				 * " GROUP BY MEM_STATE_NAME) " + " GROUP BY MEM_STATE_NAME  ";
				 */
				String query = "SELECT SSI_STATE_NAME, "
						+ " SUM (appcnt), "
						+ " SUM (appamt), "
						+ " SUM (isscnt), "
						+ " SUM (issamt) "
						+ " FROM (  SELECT SSI_STATE_NAME, "
						+ "      COUNT (a.cgpan) APPCNT, "
						+ "      SUM(DECODE (a.APP_REAPPROVE_AMOUNT, NULL, a.APP_APPROVED_AMOUNT, a.APP_REAPPROVE_AMOUNT)) APPAMT, "
						+ "      0 ISSCNT, "
						+ "      0 ISSAMT "
						+ " FROM application_detail a, ssi_detail s, member_info m, promoter_detail p  "
						+ " WHERE     a.ssi_reference_number = s.ssi_reference_number  "
						+ "       and a.ssi_reference_number = p.ssi_reference_number  "
						+ " AND a.app_status NOT IN ('RE') "
						+ "      AND s.SSI_STATE_NAME IN (SELECT scr_state_name FROM state_gr_map)  "
						+ "      AND a.mem_bnk_id = m.mem_bnk_id  "
						+ "      AND a.mem_zne_id = m.mem_zne_id  "
						+ "      AND a.mem_brn_id = m.mem_brn_id "
						+ "      AND TRUNC (app_approved_date_time) <= ?   "
						+ " GROUP BY SSI_STATE_NAME  "
						+ " UNION ALL  "
						+ " SELECT SSI_STATE_NAME, "
						+ " 0 appcnt, "
						+ " 0 appamt, "
						+ " COUNT (a.cgpan) ISSCNT, "
						+ " SUM(DECODE (a.APP_REAPPROVE_AMOUNT, NULL, a.APP_APPROVED_AMOUNT, a.APP_REAPPROVE_AMOUNT)) ISSAMT "
						+ " FROM application_detail a, ssi_detail s, member_info m , promoter_detail p  "
						+ " WHERE     a.ssi_reference_number = s.ssi_reference_number "
						+ " and a.ssi_reference_number = p.ssi_reference_number "
						+ " AND a.app_status NOT IN ('RE') "
						+ "      AND s.SSI_STATE_NAME IN  (SELECT scr_state_name FROM state_gr_map) "
						+ "      AND a.mem_bnk_id = m.mem_bnk_id "
						+ "      AND a.mem_zne_id = m.mem_zne_id "
						+ "      AND a.mem_brn_id = m.mem_brn_id "
						+ "      AND TRUNC (app_guar_start_date_time) <= ? "
						+ " GROUP BY SSI_STATE_NAME) "
						+ " GROUP BY SSI_STATE_NAME  ";

				System.out.println("query:1" + query);
				mliApplicationStmt = connection.prepareStatement(query);

				mliApplicationStmt.setDate(1, endDate);

				mliApplicationStmt.setDate(2, endDate);
				mliApplicationResult = mliApplicationStmt.executeQuery();
				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setName(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setProposal(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setCumAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}

		return mliApplicationArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param state
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList mliWiseNEDistrictReportDetailsNew(java.sql.Date startDate,
			java.sql.Date endDate, String state) throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "mliWiseNEDistrictReportDetailsNew",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();
		// System.out.println("Test-Start Dt:"+startDate);
		// System.out.println("Test-End Dt:"+endDate);

		if (startDate != null) {
			try {
				/*
				 * String query =
				 * " select MEM_DISTRICT_NAME,sum(appcnt),sum(appamt),sum(isscnt),sum(issamt) from "
				 * + " ( " +
				 * "  select MEM_DISTRICT_NAME,count(a.cgpan) APPCNT,SUM (DECODE (a.APP_REAPPROVE_AMOUNT,NULL, a.APP_APPROVED_AMOUNT,a.APP_REAPPROVE_AMOUNT)) APPAMT,0 ISSCNT,0 ISSAMT "
				 * +
				 * " from application_detail a,ssi_detail s,member_info m ,promoter_detail p"
				 * + " where a.ssi_reference_number = s.ssi_reference_number " +
				 * " AND a.ssi_reference_number = p.ssi_reference_number " +
				 * " AND a.app_status NOT IN ('RE') " +
				 * " and M.MEM_STATE_NAME in (select scr_state_name from state_gr_map) "
				 * + " and a.mem_bnk_id = m.mem_bnk_id " +
				 * " and a.mem_zne_id = m.mem_zne_id " +
				 * " and a.mem_brn_id = m.mem_brn_id " +
				 * " and LTRIM(RTRIM(UPPER(MEM_STATE_NAME))) =LTRIM(RTRIM(UPPER(?))) "
				 * + " and trunc(app_approved_date_time) between ? and ? " +
				 * " group by MEM_DISTRICT_NAME " + " union all " +
				 * " select MEM_DISTRICT_NAME,0 appcnt,0 appamt, count(a.cgpan) ISSCNT,SUM (DECODE (a.APP_REAPPROVE_AMOUNT,NULL, a.APP_APPROVED_AMOUNT,a.APP_REAPPROVE_AMOUNT)) ISSAMT "
				 * +
				 * " from application_detail a,ssi_detail s,member_info m,promoter_detail p "
				 * + " where a.ssi_reference_number = s.ssi_reference_number " +
				 * " AND a.ssi_reference_number = p.ssi_reference_number " +
				 * " AND a.app_status NOT IN ('RE') " +
				 * " and M.MEM_STATE_NAME in (select scr_state_name from state_gr_map) "
				 * + " and a.mem_bnk_id = m.mem_bnk_id " +
				 * " and a.mem_zne_id = m.mem_zne_id " +
				 * " and a.mem_brn_id = m.mem_brn_id " +
				 * " and LTRIM(RTRIM(UPPER(MEM_STATE_NAME))) = LTRIM(RTRIM(UPPER(?))) "
				 * + " and trunc(app_guar_start_date_time) between ? and ? " +
				 * " group by MEM_DISTRICT_NAME " + " ) " +
				 * " group by MEM_DISTRICT_NAME ";
				 */

				String query = " select SSI_DISTRICT_NAME,sum(appcnt),sum(appamt),sum(isscnt),sum(issamt) from "
						+ " ( "
						+ "  select SSI_DISTRICT_NAME,count(a.cgpan) APPCNT,SUM (DECODE (a.APP_REAPPROVE_AMOUNT,NULL, a.APP_APPROVED_AMOUNT,a.APP_REAPPROVE_AMOUNT)) APPAMT,0 ISSCNT,0 ISSAMT "
						+ " from application_detail a,ssi_detail s,member_info m ,promoter_detail p"
						+ " where a.ssi_reference_number = s.ssi_reference_number "
						+ " AND a.ssi_reference_number = p.ssi_reference_number "
						+ " AND a.app_status NOT IN ('RE') "
						+ " and s.ssi_state_name in (select scr_state_name from state_gr_map) "
						+ " and a.mem_bnk_id = m.mem_bnk_id "
						+ " and a.mem_zne_id = m.mem_zne_id "
						+ " and a.mem_brn_id = m.mem_brn_id "
						+ " and LTRIM(RTRIM(UPPER(ssi_state_name))) =LTRIM(RTRIM(UPPER(?))) "
						+ " and trunc(app_approved_date_time) between ? and ? "
						+ " group by SSI_DISTRICT_NAME "
						+ " union all "
						+ " select SSI_DISTRICT_NAME,0 appcnt,0 appamt, count(a.cgpan) ISSCNT,SUM (DECODE (a.APP_REAPPROVE_AMOUNT,NULL, a.APP_APPROVED_AMOUNT,a.APP_REAPPROVE_AMOUNT)) ISSAMT "
						+ " from application_detail a,ssi_detail s,member_info m,promoter_detail p "
						+ " where a.ssi_reference_number = s.ssi_reference_number "
						+ " AND a.ssi_reference_number = p.ssi_reference_number "
						+ " AND a.app_status NOT IN ('RE') "
						+ " and s.ssi_state_name in (select scr_state_name from state_gr_map) "
						+ " and a.mem_bnk_id = m.mem_bnk_id "
						+ " and a.mem_zne_id = m.mem_zne_id "
						+ " and a.mem_brn_id = m.mem_brn_id "
						+ " and LTRIM(RTRIM(UPPER(ssi_state_name))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and trunc(app_guar_start_date_time) between ? and ? "
						+ " group by SSI_DISTRICT_NAME "
						+ " ) "
						+ " group by SSI_DISTRICT_NAME ";
				System.out.println("query:1" + query);

				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setString(1, state);
				mliApplicationStmt.setDate(2, startDate);
				mliApplicationStmt.setDate(3, endDate);
				mliApplicationStmt.setString(4, state);
				mliApplicationStmt.setDate(5, startDate);
				mliApplicationStmt.setDate(6, endDate);
				mliApplicationResult = mliApplicationStmt.executeQuery();
				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setName(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setProposal(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setCumAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		} else if (startDate == null) {

			try {
				/*
				 * String query =
				 * " select SSI_DISTRICT_NAME,sum(appcnt),sum(appamt),sum(isscnt),sum(issamt) from "
				 * + " ( " +
				 * "  select ssi_district_name,count(cgpan) APPCNT,sum(app_approved_amount) APPAMT,0 ISSCNT,0 ISSAMT "
				 * + " from application_detail a,ssi_detail s,member_info m " +
				 * " where a.ssi_reference_number = s.ssi_reference_number " +
				 * " and s.ssi_state_name in (select scr_state_name from state_gr_map) "
				 * + " and a.mem_bnk_id = m.mem_bnk_id " +
				 * " and a.mem_zne_id = m.mem_zne_id " +
				 * " and a.mem_brn_id = m.mem_brn_id " +
				 * " and LTRIM(RTRIM(UPPER(ssi_state_name))) = LTRIM(RTRIM(UPPER(?))) "
				 * + " and trunc(app_approved_date_time) <= ? " +
				 * " group by ssi_district_name " + " union all " +
				 * " select ssi_district_name,0 appcnt,0 appamt, count(cgpan) ISSCNT,sum(app_approved_amount) ISSAMT "
				 * + " from application_detail a,ssi_detail s,member_info m " +
				 * " where a.ssi_reference_number = s.ssi_reference_number " +
				 * " and s.ssi_state_name in (select scr_state_name from state_gr_map) "
				 * + " and a.mem_bnk_id = m.mem_bnk_id " +
				 * " and a.mem_zne_id = m.mem_zne_id " +
				 * " and a.mem_brn_id = m.mem_brn_id " +
				 * " and LTRIM(RTRIM(UPPER(ssi_state_name))) = LTRIM(RTRIM(UPPER(?))) "
				 * + " and trunc(app_guar_start_date_time) <= ? " +
				 * " group by ssi_district_name " + " ) " +
				 * " group by ssi_district_name ";
				 */
				/*
				 * String query =
				 * " select MEM_DISTRICT_NAME,sum(appcnt),sum(appamt),sum(isscnt),sum(issamt) from "
				 * +
				 * "  ( select MEM_DISTRICT_NAME,count(cgpan) APPCNT,sum(app_approved_amount) APPAMT,0 ISSCNT,0 ISSAMT "
				 * + " from application_detail a,ssi_detail s,member_info m " +
				 * "  where a.ssi_reference_number = s.ssi_reference_number " +
				 * "    and m.MEM_STATE_NAME in (select scr_state_name from state_gr_map) "
				 * + "  and a.mem_bnk_id = m.mem_bnk_id " +
				 * "   and a.mem_zne_id = m.mem_zne_id " +
				 * "  and a.mem_brn_id = m.mem_brn_id " +
				 * "  and LTRIM(RTRIM(UPPER(MEM_STATE_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + "  and trunc(app_approved_date_time) <= ? " +
				 * "  group by MEM_DISTRICT_NAME " + "  union all " +
				 * "  select MEM_DISTRICT_NAME,0 appcnt,0 appamt, count(cgpan) ISSCNT,sum(app_approved_amount) ISSAMT "
				 * + "  from application_detail a,ssi_detail s,member_info m " +
				 * "  where a.ssi_reference_number = s.ssi_reference_number " +
				 * "  and m.MEM_STATE_NAME in (select scr_state_name from state_gr_map) "
				 * + "  and a.mem_bnk_id = m.mem_bnk_id " +
				 * "  and a.mem_zne_id = m.mem_zne_id " +
				 * "  and a.mem_brn_id = m.mem_brn_id " +
				 * "  and LTRIM(RTRIM(UPPER(MEM_STATE_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + "  and trunc(app_guar_start_date_time) <= ? " +
				 * "  group by MEM_DISTRICT_NAME )" +
				 * "  group by MEM_DISTRICT_NAME " ;
				 */

				String query = " select SSI_DISTRICT_NAME,sum(appcnt),sum(appamt),sum(isscnt),sum(issamt) from "
						+ "  ( select SSI_DISTRICT_NAME,count(cgpan) APPCNT,sum(app_approved_amount) APPAMT,0 ISSCNT,0 ISSAMT "
						+ " from application_detail a,ssi_detail s,member_info m "
						+ "  where a.ssi_reference_number = s.ssi_reference_number "
						+ "    and s.ssi_state_name in (select scr_state_name from state_gr_map) "
						+ "  and a.mem_bnk_id = m.mem_bnk_id "
						+ "   and a.mem_zne_id = m.mem_zne_id "
						+ "  and a.mem_brn_id = m.mem_brn_id "
						+ "  and LTRIM(RTRIM(UPPER(ssi_state_name))) = LTRIM(RTRIM(UPPER(?)))"
						+ "  and trunc(app_approved_date_time) <= ? "
						+ "  group by SSI_DISTRICT_NAME "
						+ "  union all "
						+ "  select SSI_DISTRICT_NAME,0 appcnt,0 appamt, count(cgpan) ISSCNT,sum(app_approved_amount) ISSAMT "
						+ "  from application_detail a,ssi_detail s,member_info m "
						+ "  where a.ssi_reference_number = s.ssi_reference_number "
						+ "  and s.ssi_state_name in (select scr_state_name from state_gr_map) "
						+ "  and a.mem_bnk_id = m.mem_bnk_id "
						+ "  and a.mem_zne_id = m.mem_zne_id "
						+ "  and a.mem_brn_id = m.mem_brn_id "
						+ "  and LTRIM(RTRIM(UPPER(ssi_state_name))) = LTRIM(RTRIM(UPPER(?)))"
						+ "  and trunc(app_guar_start_date_time) <= ? "
						+ "  group by SSI_DISTRICT_NAME )"
						+ "  group by SSI_DISTRICT_NAME ";
				System.out.println("query:2===" + query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setString(1, state);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setString(3, state);
				mliApplicationStmt.setDate(4, endDate);

				mliApplicationResult = mliApplicationStmt.executeQuery();
				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setName(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setProposal(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setCumAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}

		return mliApplicationArray;
	}

	/*
	 * ##########################################################################
	 * ##############
	 */

	public ArrayList mliApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate, String guarantee) throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "mliApplicationDetails", "Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if ((guarantee.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */

				/*
				 * String query =
				 * "select member.MEM_BANK_NAME, count(vw.cgpan)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from view_appl_amounts vw, application_detail " +
				 * " app, member_info member where app.CGPAN=vw.CGPAN and " +
				 * " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID =" +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
				 * + " trunc(app.APP_APPROVED_DATE_TIME) <= ? group by " +
				 * " member.mem_bank_name" + " order by member.MEM_BANK_NAME";
				 */

				/*
				 * String query =
				 * "select member.MEM_BANK_NAME, count(vw.cgpan)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from view_appl_amounts vw, application_detail " +
				 * " app, member_info member where app.CGPAN=vw.CGPAN and " +
				 * " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID =" +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
				 * + " trunc(app.APP_APPROVED_DATE_TIME) <= ? group by " +
				 * " member.mem_bank_name" + " order by member.MEM_BANK_NAME";
				 */

				String query = " select member.MEM_BANK_NAME, count(APP.cgpan),"
						+ "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ "  from application_detail   "
						+ "  app, member_info member ,SSI_DETAIL S, PROMOTER_DETAIL P where "
						+ "  APP.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER "
						+ "  AND APP.SSI_REFERENCE_NUMBER=P.SSI_REFERENCE_NUMBER "
						+ "  and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ "  member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ "  trunc(app.APP_APPROVED_DATE_TIME) <= ?  group by    "
						+ "  member.mem_bank_name   order by member.MEM_BANK_NAME ";
				//System.out.println("query:1R--" + query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((guarantee.equals("yes")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_BANK_NAME, count(vw.cgpan)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from view_appl_amounts vw, application_detail " +
				 * " app, member_info member where app.CGPAN=vw.CGPAN and " +
				 * " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID =" +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
				 * + // " app_status = 'AP' and"+
				 * " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? group by "
				 * + " member.mem_bank_name"+ " order by member.MEM_BANK_NAME";
				 */
				// System.out.println("1:"+startDate);
				// System.out.println("2:" + endDate);

				/*
				 * String query =
				 * "select MEM,SUM(CURCGPAN),SUM(CURAMT),SUM(PREVCG),SUM(PREVAMT),sum(cumcg),sum(cumamt) FROM "
				 * + " ( " +
				 * " select member.MEM_BANK_NAME MEM, count(vw.cgpan) curcgpan, "
				 * +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) curamt, "
				 * + " 0 prevcg,0 prevamt,0 cumcg,0 cumamt " +
				 * " from view_appl_amounts vw, application_detail  app," +
				 * " member_info member where app.CGPAN=vw.CGPAN and  " +
				 * " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID =  " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
				 * + " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? " +
				 * " group by member.mem_bank_name " + " union all " +
				 * " select member.MEM_BANK_NAME, 0 curcgpan, 0 curamt, " +
				 * " count(vw.cgpan) prevcg, " +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) prevamt,0 cumcg,0 cumamt "
				 * +
				 * " from view_appl_amounts vw, application_detail  app, member_info member "
				 * + " where app.CGPAN=vw.CGPAN and  " +
				 * " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
				 * + " trunc(app.APP_APPROVED_DATE_TIME) between " +
				 * "add_months(?,-12) and " + " add_months(?,-12) " +
				 * " group by member.mem_bank_name " + " union all " +
				 * " select member.MEM_BANK_NAME, 0 curcgpan, 0 curamt,0 prevcg,0 precamt, "
				 * + " count(vw.cgpan) cumcg, " +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) cumamt "
				 * +
				 * " from view_appl_amounts vw, application_detail  app, member_info member "
				 * + " where app.CGPAN=vw.CGPAN and  " +
				 * " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
				 * + " trunc(app.APP_APPROVED_DATE_TIME) <= ? " +
				 * " group by member.mem_bank_name " + " ) " + " GROUP BY MEM "
				 * + " ORDER BY 1 ";
				 */
				String query = " SELECT MEM, "
						+ " SUM (CURCGPAN), "
						+ " SUM (CURAMT), "
						+ " SUM (PREVCG), "
						+ " SUM (PREVAMT), "
						+ " SUM (cumcg), "
						+ " SUM (cumamt) "
						+ " FROM (  SELECT MEMBER.MEM_BANK_NAME MEM, "
						+ " COUNT (app.cgpan) curcgpan, "
						+ " SUM (DECODE (app.APP_REAPPROVE_AMOUNT, NULL, app.APP_APPROVED_AMOUNT, app.APP_REAPPROVE_AMOUNT)) curamt, "
						+ " 0 prevcg, "
						+ " 0 prevamt, "
						+ " 0 cumcg, "
						+ " 0 cumamt "
						+ " FROM promoter_detail p, "
						+ " ssI_detail s, "
						+ " application_detail app, "
						+ " member_info MEMBER "
						+ " WHERE     app.ssi_reference_number=s.ssi_reference_number  "
						+ " and app.ssi_reference_number=p.ssi_reference_number  "
						+ " AND app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID = MEMBER.MEM_BNK_ID ||MEMBER.MEM_ZNE_ID || MEMBER.MEM_BRN_ID "
						+ " and app.app_status not in ('RE')  "
						+ " AND TRUNC (app.APP_APPROVED_DATE_TIME) BETWEEN ? AND ? "
						+ " GROUP BY MEMBER.mem_bank_name "
						+ " UNION ALL "
						+ " SELECT MEMBER.MEM_BANK_NAME, "
						+ " 0 curcgpan, "
						+ " 0 curamt, "
						+ " COUNT (app.cgpan) prevcg, "
						+ " SUM ( DECODE (app.APP_REAPPROVE_AMOUNT, NULL, app.APP_APPROVED_AMOUNT, app.APP_REAPPROVE_AMOUNT)) prevamt, "
						+ " 0 cumcg, "
						+ " 0 cumamt "
						+ " FROM application_detail app, "
						+ " member_info MEMBER, "
						+ " promoter_detail p, "
						+ " ssI_detail s "
						+ " WHERE     app.ssi_reference_number=s.ssi_reference_number "
						+ " and app.ssi_reference_number=p.ssi_reference_number "
						+ " AND app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID = MEMBER.MEM_BNK_ID|| MEMBER.MEM_ZNE_ID || MEMBER.MEM_BRN_ID "
						+ "           and app.app_status not in ('RE')  "
						+ "           AND TRUNC (app.APP_APPROVED_DATE_TIME) BETWEEN ADD_MONTHS ( ?,  -12) AND ADD_MONTHS ( ?,  -12) "
						+ " GROUP BY MEMBER.mem_bank_name "
						+ " UNION ALL "
						+ " SELECT MEMBER.MEM_BANK_NAME, "
						+ " 0 curcgpan, "
						+ " 0 curamt, "
						+ " 0 prevcg, "
						+ " 0 precamt, "
						+ " COUNT (app.cgpan) cumcg, "
						+ " SUM ( DECODE (app.APP_REAPPROVE_AMOUNT, NULL, app.APP_APPROVED_AMOUNT, app.APP_REAPPROVE_AMOUNT)) cumamt "
						+ " FROM application_detail app, "
						+ " member_info MEMBER, "
						+ " promoter_detail p, "
						+ " ssI_detail s "
						+ " WHERE app.ssi_reference_number=s.ssi_reference_number "
						+ " and app.ssi_reference_number =p.ssi_reference_number "
						+ "               and app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID = MEMBER.MEM_BNK_ID || MEMBER.MEM_ZNE_ID || MEMBER.MEM_BRN_ID "
						+ "  and app.app_status not in ('RE')  "
						+ "               AND TRUNC (app.APP_APPROVED_DATE_TIME) <= ? "
						+ "  GROUP BY MEMBER.mem_bank_name) "
						+ " GROUP BY MEM " + " ORDER BY 1";
				System.out.println("query:2R-----222" + query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setDate(3, startDate);
				mliApplicationStmt.setDate(4, endDate);
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationReport.setCumProposals(mliApplicationResult
							.getInt(6));
					mliApplicationReport.setCumAmount(mliApplicationResult
							.getDouble(7));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */

				/*
				 * String query =
				 * "select member.MEM_BANK_NAME, count(vw.CGPAN)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * +
				 * " from view_appl_amounts vw, application_detail app, member_info member where "
				 * +
				 * " app.CGPAN = vw.CGPAN and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID ="
				 * +
				 * " member.MEM_BNK_ID ||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
				 * + " trunc(app.APP_GUAR_START_DATE_TIME) <= ?" +
				 * " group by member.mem_bank_name" +
				 * " order by member.MEM_BANK_NAME";
				 */

				String query = "select member.MEM_BANK_NAME, count(APP.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from  application_detail app, member_info member,SSI_DETAIL S, PROMOTER_DETAIL P   where  "
						+ " APP.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER "
						+ " AND APP.SSI_REFERENCE_NUMBER=P.SSI_REFERENCE_NUMBER "
						+ " AND app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =  "
						+ " member.MEM_BNK_ID ||member.MEM_ZNE_ID||member.MEM_BRN_ID  "
						+ " and app.app_status not in ('RE')   "
						+ " and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) <= ? "
						+ " group by member.mem_bank_name  "
						+ " order by member.MEM_BANK_NAME ";
			//	System.out.println("query:3R--" + query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_BANK_NAME, count(vw.CGPAN)," +
				 * "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * +
				 * " from view_appl_amounts vw, application_detail app, member_info member where "
				 * +
				 * " app.CGPAN = vw.CGPAN and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID ="
				 * +
				 * " member.MEM_BNK_ID ||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
				 * + " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ?" +
				 * " group by member.mem_bank_name"+
				 * " order by member.MEM_BANK_NAME"; mliApplicationStmt =
				 * connection.prepareStatement(query);
				 * mliApplicationStmt.setDate(1,startDate);
				 * mliApplicationStmt.setDate(2,endDate);
				 */

				/*
				 * String query =
				 * "select MEM,SUM(CURCGPAN),SUM(CURAMT),SUM(PREVCG),SUM(PREVAMT),sum(cumcg),sum(cumamt) FROM "
				 * + " ( " +
				 * " select member.MEM_BANK_NAME MEM, count(vw.cgpan) curcgpan, "
				 * +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) curamt, "
				 * + " 0 prevcg,0 prevamt,0 cumcg,0 cumamt " +
				 * " from view_appl_amounts vw, application_detail  app," +
				 * " member_info member where app.CGPAN=vw.CGPAN and  " +
				 * " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID =  " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
				 * + " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? " +
				 * " group by member.mem_bank_name " + " union all " +
				 * " select member.MEM_BANK_NAME, 0 curcgpan, 0 curamt, " +
				 * " count(vw.cgpan) prevcg, " +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) prevamt,0 cumcg,0 cumamt "
				 * +
				 * " from view_appl_amounts vw, application_detail  app, member_info member "
				 * + " where app.CGPAN=vw.CGPAN and  " +
				 * " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
				 * + " trunc(app.APP_GUAR_START_DATE_TIME) between " +
				 * "add_months(?,-12) and " + " add_months(?,-12) " +
				 * " group by member.mem_bank_name " + " union all " +
				 * " select member.MEM_BANK_NAME, 0 curcgpan, 0 curamt,0 prevcg,0 precamt, "
				 * + " count(vw.cgpan) cumcg, " +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) cumamt "
				 * +
				 * " from view_appl_amounts vw, application_detail  app, member_info member "
				 * + " where app.CGPAN=vw.CGPAN and  " +
				 * " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
				 * + " trunc(app.APP_GUAR_START_DATE_TIME) <= ? " +
				 * " group by member.mem_bank_name " + " ) " + " GROUP BY MEM "
				 * + " ORDER BY 1 ";
				 */

				String query = "SELECT MEM, "
						+ "  SUM (CURCGPAN), "
						+ " SUM (CURAMT), "
						+ " SUM (PREVCG), "
						+ " SUM (PREVAMT), "
						+ " SUM (cumcg), "
						+ " SUM (cumamt) "
						+ " FROM (  SELECT MEMBER.MEM_BANK_NAME MEM, "
						+ " COUNT (app.cgpan) curcgpan, "
						+ " SUM ( DECODE (app.APP_REAPPROVE_AMOUNT, NULL, app.APP_APPROVED_AMOUNT, app.APP_REAPPROVE_AMOUNT)) curamt, "
						+ "   0 prevcg, "
						+ " 0 prevamt, "
						+ " 0 cumcg, "
						+ " 0 cumamt "
						+ " FROM   "
						+ " application_detail app, "
						+ " member_info MEMBER, "
						+ " promoter_detail p, "
						+ " ssI_detail s "
						+ " WHERE "
						+ " app  .ssi_reference_number = s.ssi_reference_number "
						+ " AND app.ssi_reference_number = p.ssi_reference_number "
						+ " AND app.app_status NOT IN ('RE') "
						+ " AND app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID = MEMBER.MEM_BNK_ID || MEMBER.MEM_ZNE_ID || MEMBER.MEM_BRN_ID "
						+ " AND TRUNC (app.APP_GUAR_START_DATE_TIME) BETWEEN ? AND ? "
						+ " GROUP BY MEMBER.mem_bank_name "
						+ " UNION ALL "
						+ " SELECT MEMBER.MEM_BANK_NAME, "
						+ " 0 curcgpan, "
						+ " 0 curamt, "
						+ " COUNT (app.cgpan) prevcg, "
						+ " SUM ( DECODE (app.APP_REAPPROVE_AMOUNT, NULL, app.APP_APPROVED_AMOUNT, app.APP_REAPPROVE_AMOUNT)) prevamt, "
						+ " 0 cumcg, "
						+ " 0 cumamt "
						+ " FROM    "
						+ " application_detail app, "
						+ " member_info MEMBER, "
						+ " promoter_detail p, "
						+ " ssI_detail s "
						+ " WHERE   "
						+ " app  .ssi_reference_number = s.ssi_reference_number "
						+ " AND app.ssi_reference_number = p.ssi_reference_number "
						+ " AND app.app_status NOT IN ('RE') "
						+ " AND app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID = MEMBER.MEM_BNK_ID || MEMBER.MEM_ZNE_ID || MEMBER.MEM_BRN_ID "
						+ " AND TRUNC (app.APP_GUAR_START_DATE_TIME) BETWEEN ADD_MONTHS (  ?,  -12)  AND ADD_MONTHS ( ?,   -12) "
						+ " GROUP BY MEMBER.mem_bank_name "
						+ " UNION ALL "
						+ " SELECT MEMBER.MEM_BANK_NAME, "
						+ " 0 curcgpan, "
						+ " 0 curamt, "
						+ " 0 prevcg, "
						+ " 0 precamt, "
						+ " COUNT (app.cgpan) cumcg, "
						+ " SUM ( DECODE (app.APP_REAPPROVE_AMOUNT, NULL, app.APP_APPROVED_AMOUNT, app.APP_REAPPROVE_AMOUNT)) cumamt "
						+ " FROM   "
						+ " application_detail app, "
						+ " member_info MEMBER, "
						+ " promoter_detail p, "
						+ " ssI_detail s "
						+ " WHERE  "
						+ " app  .ssi_reference_number = s.ssi_reference_number "
						+ " AND app.ssi_reference_number = p.ssi_reference_number "
						+ " AND app.app_status NOT IN ('RE') "
						+ " AND app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID = "
						+ " MEMBER.MEM_BNK_ID " + " || MEMBER.MEM_ZNE_ID "
						+ " || MEMBER.MEM_BRN_ID "
						+ " AND TRUNC (app.APP_GUAR_START_DATE_TIME) <= ? "
						+ " GROUP BY MEMBER.mem_bank_name) " + " GROUP BY MEM "
						+ " ORDER BY 1 ";
				//System.out.println("query:4R" + query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setDate(3, startDate);
				mliApplicationStmt.setDate(4, endDate);
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationReport.setCumProposals(mliApplicationResult
							.getInt(6));
					mliApplicationReport.setCumAmount(mliApplicationResult
							.getDouble(7));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportsDAO", "mliApplicationDetails", "Exited");
		return mliApplicationArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList mliClaimApplicationDetailsNew(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "mliClaimApplicationDetails", "Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if (startDate == null) {
			try {
				/*String query = " SELECT BANK,SUM(APPLIEDCASES) APPLIEDCASES,SUM(APPLIEDAMT) APPLIEDAMT, "
						+ " SUM(SETTLEDCASES) SETTLEDCASES,SUM(SETTLEDAMT) SETTLEDAMT FROM "
						+ " ( "
						+ " SELECT M.MEM_BANK_NAME BANK,COUNT(D.CGPAN) APPLIEDCASES,SUM(CAA_APPLIED_AMOUNT) APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D "
						+ " WHERE C.BID=S.BID  "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_DATE) <=? "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,COUNT(D.CGPAN) APPLIEDCASES,SUM(CAA_APPLIED_AMOUNT) APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL C,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D "
						+ "  WHERE C.BID=S.BID  "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_DATE)  <=? "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,0 APPLIEDCASES,0 APPLIEDAMT,  "
						+ " COUNT(A.CGPAN) SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M  "
						+ " WHERE CGCLAN IS NOT NULL  "
						+ " AND C.BID=S.BID  "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_APPROVED_DT)  <=? "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL  "
						+ " SELECT M.MEM_BANK_NAME BANK,0 APPLIEDCASES,0 APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,SUM(CLM_APPROVED_AMT)  SETTLEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M  "
						+ " WHERE CGCLAN IS NOT NULL  "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_APPROVED_DT)  <=? "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " ) GROUP BY BANK "
						+ " ORDER BY 1 ";
				*/
				
				String query=" SELECT BANK, "
					+ " SUM (APPLIEDCASES) APPLIEDCASES, "
					+ " SUM (APPLIEDAMT) APPLIEDAMT, "
					+ " SUM (SETTLEDCASES) SETTLEDCASES, "
					+ " SUM (SETTLEDAMT) SETTLEDAMT "
					+ " FROM (  SELECT M.MEM_BANK_NAME BANK, "
					+ " COUNT (D.CGPAN) APPLIEDCASES, "
					+ " SUM (CAA_APPLIED_AMOUNT) APPLIEDAMT, "
					+ " 0 SETTLEDCASES, "
					+ " 0 SETTLEDAMT "
					+ " FROM CLAIM_DETAIL_TEMP C, "
					+ " SSI_DETAIL S, "
					+ " MEMBER_INFO M, "
					+ " CLAIM_APPLICATION_AMOUNT_TEMP D "
					+ " WHERE     C.BID = S.BID "
					+ " AND C.CLM_REF_NO = D.CLM_REF_NO "
					+ " AND C.MEM_BNK_ID || C.MEM_ZNE_ID || C.MEM_BRN_ID = "
					+ " M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND TRUNC (CLM_DATE) <=? "
					+ " GROUP BY M.MEM_BANK_NAME "
					+ " UNION ALL "
					+ " SELECT M.MEM_BANK_NAME BANK, "
					+ " COUNT (D.CGPAN) APPLIEDCASES, "
					+ " SUM (CAA_APPLIED_AMOUNT) APPLIEDAMT, "
					+ " 0 SETTLEDCASES, "
					+ " 0 SETTLEDAMT "
					+ " FROM CLAIM_DETAIL C, "
					+ " SSI_DETAIL S, "
					+ " MEMBER_INFO M, "
					+ " CLAIM_APPLICATION_AMOUNT D "
					+ " WHERE     C.BID = S.BID "
					+ " AND C.CLM_REF_NO = D.CLM_REF_NO "
					+ " AND C.MEM_BNK_ID || C.MEM_ZNE_ID || C.MEM_BRN_ID = "
					+ " M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND TRUNC (CLM_DATE) <=?  "
					+ " GROUP BY M.MEM_BANK_NAME " 
					+ " UNION ALL "
					+ " SELECT M.MEM_BANK_NAME BANK, "
					+ " 0 APPLIEDCASES, "
					+ " 0 APPLIEDAMT, "
					+ " COUNT (A.CGPAN) SETTLEDCASES, "
					+ " 0 SETTLEDAMT "
					+ " FROM CLAIM_DETAIL C, "
					+ " APPLICATION_DETAIL A, "
					+ " SSI_DETAIL S, "
					+ " MEMBER_INFO M, "
					+ " CLAIM_APPLICATION_AMOUNT CAA "
					+ " WHERE     CGCLAN IS NOT NULL "
					+ " AND C.CLM_REF_NO = CAA.CLM_REF_NO "
					+ " AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
					+ " AND A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID = "
					+ " M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND A.CGPAN = CAA.CGPAN "
					+ " AND TRUNC (CLM_APPROVED_DT) <=?   "
					+ " GROUP BY M.MEM_BANK_NAME "
					+ " UNION ALL "
					+ " SELECT M.MEM_BANK_NAME BANK, "
					+ " 0 APPLIEDCASES, "
					+ " 0 APPLIEDAMT, "
					+ " 0 SETTLEDCASES, "
					//+ " --SUM (CLM_APPROVED_AMT) SETTLEDAMT "
					+ " SUM (  NVL ( (SELECT MAX (CTD_TC_FIRST_INST_PAY_AMT) FROM CLAIM_TC_DETAIL TC WHERE TC.CGPAN = A.CGPAN), 0) "
					+ " + NVL ( (SELECT MAX (WC.CWD_WC_FIRST_INST_PAY_AMT) FROM CLAIM_WC_DETAIL WC WHERE WC.CGPAN = A.CGPAN), 0)) AS SETTLEDAMT "
					+ " FROM CLAIM_DETAIL C, "
					+ " MEMBER_INFO M, "
					+ " SSI_DETAIL S, "
					+ " APPLICATION_DETAIL A, "
					+ " CLAIM_APPLICATION_AMOUNT CAA "
					+ " WHERE     CGCLAN IS NOT NULL "
					+ " AND C.MEM_BNK_ID || C.MEM_ZNE_ID || C.MEM_BRN_ID = "
					+ " M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND A.CGPAN = CAA.CGPAN "
					+ " AND C.CLM_REF_NO = CAA.CLM_REF_NO "
					+ " AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
					+ " AND TRUNC (CLM_APPROVED_DT) <=?   "
					+ " GROUP BY M.MEM_BANK_NAME) "
					+ " GROUP BY BANK "
					+ " ORDER BY 1"; 
				
				System.out.println("1==query==@@"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setDate(3, endDate);
				mliApplicationStmt.setDate(4, endDate);
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if (startDate != null) {
			try {
				/*String query = " SELECT BANK,SUM(APPLIEDCASES) APPLIEDCASES,SUM(APPLIEDAMT) APPLIEDAMT, "
						+ " SUM(SETTLEDCASES) SETTLEDCASES,SUM(SETTLEDAMT) SETTLEDAMT FROM "
						+ " ( "
						+ " SELECT M.MEM_BANK_NAME BANK,COUNT(D.CGPAN) APPLIEDCASES,SUM(CAA_APPLIED_AMOUNT) APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D "
						+ " WHERE C.BID=S.BID  "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_DATE) BETWEEN ? AND ? "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,COUNT(D.CGPAN) APPLIEDCASES,SUM(CAA_APPLIED_AMOUNT) APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL C,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D "
						+ "  WHERE C.BID=S.BID  "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_DATE)  BETWEEN ? AND ? "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,0 APPLIEDCASES,0 APPLIEDAMT,  "
						+ " COUNT(A.CGPAN) SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M  "
						+ " WHERE CGCLAN IS NOT NULL  "
						+ " AND C.BID=S.BID  "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL  "
						+ " SELECT M.MEM_BANK_NAME BANK,0 APPLIEDCASES,0 APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,SUM(CLM_APPROVED_AMT)  SETTLEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M  "
						+ " WHERE CGCLAN IS NOT NULL  "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_APPROVED_DT)  BETWEEN ? AND ? "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " ) GROUP BY BANK "
						+ " ORDER BY 1 ";*/
				String query=" SELECT BANK, "
					+ " SUM (APPLIEDCASES) APPLIEDCASES, "
					+ " SUM (APPLIEDAMT) APPLIEDAMT, "
					+ " SUM (SETTLEDCASES) SETTLEDCASES, "
					+ " SUM (SETTLEDAMT) SETTLEDAMT "
					+ " FROM (  SELECT M.MEM_BANK_NAME BANK, "
					+ " COUNT (D.CGPAN) APPLIEDCASES, "
					+ " SUM (CAA_APPLIED_AMOUNT) APPLIEDAMT, "
					+ " 0 SETTLEDCASES, "
					+ " 0 SETTLEDAMT "
					+ " FROM CLAIM_DETAIL_TEMP C, "
					+ " SSI_DETAIL S, "
					+ " MEMBER_INFO M, "
					+ " CLAIM_APPLICATION_AMOUNT_TEMP D "
					+ " WHERE     C.BID = S.BID "
					+ " AND C.CLM_REF_NO = D.CLM_REF_NO "
					+ " AND C.MEM_BNK_ID || C.MEM_ZNE_ID || C.MEM_BRN_ID = "
					+ " M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND TRUNC (CLM_DATE) BETWEEN ? AND ? "
					+ " GROUP BY M.MEM_BANK_NAME "
					+ " UNION ALL "
					+ " SELECT M.MEM_BANK_NAME BANK, "
					+ " COUNT (D.CGPAN) APPLIEDCASES, "
					+ " SUM (CAA_APPLIED_AMOUNT) APPLIEDAMT, "
					+ " 0 SETTLEDCASES, "
					+ " 0 SETTLEDAMT "
					+ " FROM CLAIM_DETAIL C, "
					+ " SSI_DETAIL S, "
					+ " MEMBER_INFO M, "
					+ " CLAIM_APPLICATION_AMOUNT D "
					+ " WHERE     C.BID = S.BID "
					+ " AND C.CLM_REF_NO = D.CLM_REF_NO "
					+ " AND C.MEM_BNK_ID || C.MEM_ZNE_ID || C.MEM_BRN_ID = "
					+ " M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND TRUNC (CLM_DATE) BETWEEN ? AND ? "
					+ " GROUP BY M.MEM_BANK_NAME " 
					+ " UNION ALL "
					+ " SELECT M.MEM_BANK_NAME BANK, "
					+ " 0 APPLIEDCASES, "
					+ " 0 APPLIEDAMT, "
					+ " COUNT (A.CGPAN) SETTLEDCASES, "
					+ " 0 SETTLEDAMT "
					+ " FROM CLAIM_DETAIL C, "
					+ " APPLICATION_DETAIL A, "
					+ " SSI_DETAIL S, "
					+ " MEMBER_INFO M, "
					+ " CLAIM_APPLICATION_AMOUNT CAA "
					+ " WHERE     CGCLAN IS NOT NULL "
					+ " AND C.CLM_REF_NO = CAA.CLM_REF_NO "
					+ " AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
					+ " AND A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID = "
					+ " M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND A.CGPAN = CAA.CGPAN "
					+ " AND TRUNC (CLM_APPROVED_DT) BETWEEN ? AND ? "
					+ " GROUP BY M.MEM_BANK_NAME "
					+ " UNION ALL "
					+ " SELECT M.MEM_BANK_NAME BANK, "
					+ " 0 APPLIEDCASES, "
					+ " 0 APPLIEDAMT, "
					+ " 0 SETTLEDCASES, "
					//+ " --SUM (CLM_APPROVED_AMT) SETTLEDAMT "
					+ " SUM (  NVL ( (SELECT MAX (CTD_TC_FIRST_INST_PAY_AMT) FROM CLAIM_TC_DETAIL TC WHERE TC.CGPAN = A.CGPAN), 0) "
					+ " + NVL ( (SELECT MAX (WC.CWD_WC_FIRST_INST_PAY_AMT) FROM CLAIM_WC_DETAIL WC WHERE WC.CGPAN = A.CGPAN), 0)) AS SETTLEDAMT "
					+ " FROM CLAIM_DETAIL C, "
					+ " MEMBER_INFO M, "
					+ " SSI_DETAIL S, "
					+ " APPLICATION_DETAIL A, "
					+ " CLAIM_APPLICATION_AMOUNT CAA "
					+ " WHERE     CGCLAN IS NOT NULL "
					+ " AND C.MEM_BNK_ID || C.MEM_ZNE_ID || C.MEM_BRN_ID = "
					+ " M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND A.CGPAN = CAA.CGPAN "
					+ " AND C.CLM_REF_NO = CAA.CLM_REF_NO "
					+ " AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
					+ " AND TRUNC (CLM_APPROVED_DT) BETWEEN ? AND ? "
					+ " GROUP BY M.MEM_BANK_NAME) "
					+ " GROUP BY BANK "
					+ " ORDER BY 1"; 
				System.out.println("2==query==@@"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setDate(3, startDate);
				mliApplicationStmt.setDate(4, endDate);
				mliApplicationStmt.setDate(5, startDate);
				mliApplicationStmt.setDate(6, endDate);
				mliApplicationStmt.setDate(7, startDate);
				mliApplicationStmt.setDate(8, endDate);

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportsDAO", "mliClaimApplicationDetails", "Exited");
		return mliApplicationArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList StateClaimApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "StateClaimApplicationDetails",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if (startDate == null) {
			try {
				/*
				 * String query =
				 * " SELECT STATE,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM "
				 * + " ( " +
				 * " SELECT S.SSI_STATE_NAME STATE,COUNT(A.CGPAN) CASES,0 APPROVEDAMT, "
				 * +
				 * " 0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S , "
				 * + " MEMBER_INFO M " + " WHERE CGCLAN IS NOT NULL " +
				 * " AND C.BID=S.BID " +
				 * " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER " +
				 * " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
				 * + " AND TRUNC(CLM_APPROVED_DT) <= ? " +
				 * " GROUP BY S.SSI_STATE_NAME " + "  UNION ALL " +
				 * " SELECT S.SSI_STATE_NAME STATE,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT, "
				 * +
				 * "  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M,SSI_DETAIL S "
				 * + "  WHERE CGCLAN IS NOT NULL AND C.BID=S.BID " +
				 * "   AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
				 * + "  AND TRUNC(CLM_APPROVED_DT) <= ? " +
				 * "   GROUP BY S.SSI_STATE_NAME " + " UNION ALL " +
				 * " SELECT S.SSI_STATE_NAME STATE,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES, "
				 * +
				 * " SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT "
				 * + " FROM APPLICATION_DETAIL A,MEMBER_INFO M,SSI_DETAIL S " +
				 * " WHERE APP_STATUS <> 'RE' AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
				 * + " AND TRUNC(APP_GUAR_START_DATE_TIME) <=? " +
				 * " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
				 * + " GROUP BY S.SSI_STATE_NAME " + " ) GROUP BY STATE " +
				 * "  ORDER BY 1 ";
				 */

				/* Formatted on 5/14/2018 10:59:15 AM (QP5 v5.240.12305.39446) */

				/*
				 * String query = " SELECT STATE," + " SUM (CASES), " +
				 * "  SUM (APPROVEDAMT)," + "  SUM (GUARISSUEDCASES)," +
				 * "  SUM (GUARISSUEDAMT)" +
				 * " FROM (  SELECT m.MEM_STATE_NAME STATE," +
				 * "            COUNT (A.CGPAN) CASES," +
				 * "            0 APPROVEDAMT," +
				 * "            0 GUARISSUEDCASES," +
				 * "            0 GUARISSUEDAMT " +
				 * "       FROM CLAIM_DETAIL C," +
				 * "            APPLICATION_DETAIL A," +
				 * "            SSI_DETAIL S," + "            MEMBER_INFO M " +
				 * "      WHERE     CGCLAN IS NOT NULL " +
				 * "            AND C.BID = S.BID " +
				 * "            AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
				 * +
				 * "            AND A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID = M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
				 * + "            AND TRUNC (CLM_APPROVED_DT) <= ? " +
				 * "   GROUP BY m.MEM_STATE_NAME " + "   UNION ALL  " +
				 * "     SELECT m.MEM_STATE_NAME STATE, " +
				 * "            0 CASES, " +
				 * "            SUM (CLM_APPROVED_AMT) APPROVEDAMT, " +
				 * "            0 GUARISSUEDCASES, " +
				 * "            0 GUARISSUEDAMT " +
				 * "       FROM CLAIM_DETAIL C, MEMBER_INFO M, SSI_DETAIL S " +
				 * "      WHERE     CGCLAN IS NOT NULL " +
				 * "            AND C.BID = S.BID " +
				 * "            AND C.MEM_BNK_ID || C.MEM_ZNE_ID || C.MEM_BRN_ID = M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
				 * + "            AND TRUNC (CLM_APPROVED_DT) <= ?  " +
				 * "   GROUP BY m.MEM_STATE_NAME " + "   UNION ALL " +
				 * "     SELECT m.MEM_STATE_NAME STATE, " +
				 * "            0 CASES, " + "            0 APPROVEDAMT, " +
				 * "            COUNT (CGPAN) GUARISSUEDCASES, " +
				 * "            SUM (DECODE (APP_REAPPROVE_AMOUNT, " +
				 * "                       NULL, APP_APPROVED_AMOUNT, " +
				 * "                       APP_REAPPROVE_AMOUNT)) " +
				 * "               GUARISSUEDAMT " +
				 * "       FROM APPLICATION_DETAIL A, MEMBER_INFO M, SSI_DETAIL S "
				 * + "      WHERE     APP_STATUS <> 'RE' " +
				 * "            AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
				 * + "            AND TRUNC (APP_GUAR_START_DATE_TIME) <= ?  " +
				 * "            AND A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID = M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
				 * + "   GROUP BY m.MEM_STATE_NAME) " + "   GROUP BY STATE " +
				 * "   ORDER BY 1 ";
				 */

				/*String query = " SELECT STATE,"
						+ " SUM (CASES), "
						+ "  SUM (APPROVEDAMT),"
						+ "  SUM (GUARISSUEDCASES),"
						+ "  SUM (GUARISSUEDAMT)"
						+ " FROM (  SELECT s.SSI_STATE_NAME STATE,"
						+ "            COUNT (A.CGPAN) CASES,"
						+ "            0 APPROVEDAMT,"
						+ "            0 GUARISSUEDCASES,"
						+ "            0 GUARISSUEDAMT "
						+ "       FROM CLAIM_DETAIL C,"
						+ "            APPLICATION_DETAIL A,"
						+ "            SSI_DETAIL S,"
						+ "            MEMBER_INFO M "
						+ "      WHERE     CGCLAN IS NOT NULL "
						+ "            AND C.BID = S.BID "
						+ "            AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
						+ "            AND A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID = M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
						+ "            AND TRUNC (CLM_APPROVED_DT) <= ? "
						+ "   GROUP BY s.SSI_STATE_NAME "
						+ "   UNION ALL  "
						+ "     SELECT s.SSI_STATE_NAME STATE, "
						+ "            0 CASES, "
						+ "            SUM (CLM_APPROVED_AMT) APPROVEDAMT, "
						+ "            0 GUARISSUEDCASES, "
						+ "            0 GUARISSUEDAMT "
						+ "       FROM CLAIM_DETAIL C, MEMBER_INFO M, SSI_DETAIL S "
						+ "      WHERE     CGCLAN IS NOT NULL "
						+ "            AND C.BID = S.BID "
						+ "            AND C.MEM_BNK_ID || C.MEM_ZNE_ID || C.MEM_BRN_ID = M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
						+ "            AND TRUNC (CLM_APPROVED_DT) <= ?  "
						+ "   GROUP BY s.SSI_STATE_NAME "
						+ "   UNION ALL "
						+ "     SELECT s.SSI_STATE_NAME STATE, "
						+ "            0 CASES, "
						+ "            0 APPROVEDAMT, "
						+ "            COUNT (CGPAN) GUARISSUEDCASES, "
						+ "            SUM (DECODE (APP_REAPPROVE_AMOUNT, "
						+ "                       NULL, APP_APPROVED_AMOUNT, "
						+ "                       APP_REAPPROVE_AMOUNT)) "
						+ "               GUARISSUEDAMT "
						+ "       FROM APPLICATION_DETAIL A, MEMBER_INFO M, SSI_DETAIL S "
						+ "      WHERE     APP_STATUS <> 'RE' "
						+ "            AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
						+ "            AND TRUNC (APP_GUAR_START_DATE_TIME) <= ?  "
						+ "            AND A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID = M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
						+ "   GROUP BY s.SSI_STATE_NAME) "
						+ "   GROUP BY STATE " + "   ORDER BY 1 ";
*/
				
				String query="SELECT SSI_STATE_NAME, "
					+ "  SUM (CASES), "
					+ "  SUM (APPROVEDAMT), "
					+ " SUM (GUARISSUEDCASES), "
					+ " SUM (GUARISSUEDAMT) "
					+ " FROM (  SELECT s.SSI_STATE_NAME, "
					+ " COUNT (A.CGPAN) CASES, "
					+ " 0 APPROVEDAMT, "
					+ "  0 GUARISSUEDCASES, "
					+ " 0 GUARISSUEDAMT "
					+ " FROM CLAIM_DETAIL C, "
					+ "  APPLICATION_DETAIL A, "
					+ "  SSI_DETAIL S, "
					+ " MEMBER_INFO M, "
					+ "  CLAIM_APPLICATION_AMOUNT CAA "
					+ " WHERE     CGCLAN IS NOT NULL "
					+ "  AND C.CLM_REF_NO = CAA.CLM_REF_NO "
					+ "  AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
					+ " AND A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID = "
					+ " M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND A.CGPAN = CAA.CGPAN "
					+ " AND TRUNC (CLM_APPROVED_DT) <= ?  "
					+ " GROUP BY s.SSI_STATE_NAME "
					+ " UNION ALL "
					+ " SELECT s.SSI_STATE_NAME STATE, "
					+ "   0 CASES, "
					//+ " --SUM (CLM_APPROVED_AMT) APPROVEDAMT,
					+ " SUM (  NVL ( (SELECT MAX (CTD_TC_FIRST_INST_PAY_AMT) FROM CLAIM_TC_DETAIL TC WHERE TC.CGPAN = A.CGPAN), 0) "
					+ "   + NVL ( (SELECT MAX (WC.CWD_WC_FIRST_INST_PAY_AMT) FROM CLAIM_WC_DETAIL WC WHERE WC.CGPAN = A.CGPAN), 0)) AS APPROVEDAMT, "
					+ "   0 GUARISSUEDCASES, "
					+ "  0 GUARISSUEDAMT "
					+ " FROM CLAIM_DETAIL C, "
					+ "  MEMBER_INFO M, "
					+ "  SSI_DETAIL S, "
					+ "  APPLICATION_DETAIL A, "
					+ " CLAIM_APPLICATION_AMOUNT CAA "
					+ " WHERE     CGCLAN IS NOT NULL "
					+ " AND C.MEM_BNK_ID || C.MEM_ZNE_ID || C.MEM_BRN_ID = "
					+ "      M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND A.CGPAN = CAA.CGPAN "
					+ "   AND C.CLM_REF_NO = CAA.CLM_REF_NO "
					+ " AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
					+ " AND TRUNC (CLM_APPROVED_DT)<= ?  "
					+ " GROUP BY s.SSI_STATE_NAME "
					+ " UNION ALL "
					+ " SELECT s.SSI_STATE_NAME, "
					+ " 0 CASES, "
					+ " 0 APPROVEDAMT, "
					+ " COUNT (CGPAN) GUARISSUEDCASES, "
					+ " SUM (DECODE (APP_REAPPROVE_AMOUNT, NULL, APP_APPROVED_AMOUNT, APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT "
					+ " FROM APPLICATION_DETAIL A, MEMBER_INFO M, SSI_DETAIL S "
					+ " WHERE     APP_STATUS <> 'RE' "
					+ " AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
					+ " AND A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID = M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND TRUNC (APP_GUAR_START_DATE_TIME) <= ? "
					+ " GROUP BY s.SSI_STATE_NAME) "
					+ " GROUP BY SSI_STATE_NAME "
					+ " ORDER BY 1";
				System.out.println("query===1==" + query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setDate(3, endDate);
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if (startDate != null) {
			try {
				/*
				 * String query =
				 * " SELECT MEM_STATE_NAME,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM "
				 * + " ( " +
				 * " SELECT M.MEM_STATE_NAME,COUNT(A.CGPAN) CASES,0 APPROVEDAMT, "
				 * +
				 * " 0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S , "
				 * + " MEMBER_INFO M " + " WHERE CGCLAN IS NOT NULL " +
				 * " AND C.BID=S.BID " +
				 * " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER " +
				 * " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
				 * + " AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? " +
				 * " GROUP BY M.MEM_STATE_NAME " + "  UNION ALL " +
				 * " SELECT M.MEM_STATE_NAME STATE,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT, "
				 * +
				 * "  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M,SSI_DETAIL S "
				 * + "  WHERE CGCLAN IS NOT NULL AND C.BID=S.BID " +
				 * "   AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
				 * + "  AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? " +
				 * "   GROUP BY M.MEM_STATE_NAME " + " UNION ALL " +
				 * " SELECT M.MEM_STATE_NAME,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES, "
				 * +
				 * " SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT "
				 * + " FROM APPLICATION_DETAIL A,MEMBER_INFO M,SSI_DETAIL S " +
				 * " WHERE APP_STATUS <> 'RE' AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
				 * + " AND TRUNC(APP_GUAR_START_DATE_TIME) BETWEEN ? AND ? " +
				 * " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
				 * + " GROUP BY M.MEM_STATE_NAME " +
				 * " ) GROUP BY MEM_STATE_NAME " + "  ORDER BY 1 ";
				 */

				/*String query = " SELECT SSI_STATE_NAME,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM "
						+ " ( "
						+ " SELECT s.SSI_STATE_NAME,COUNT(A.CGPAN) CASES,0 APPROVEDAMT, "
						+ " 0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S , "
						+ " MEMBER_INFO M "
						+ " WHERE CGCLAN IS NOT NULL "
						+ " AND C.BID=S.BID "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? "
						+ " GROUP BY s.SSI_STATE_NAME "
						+ "  UNION ALL "
						+ " SELECT s.SSI_STATE_NAME STATE,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT, "
						+ "  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M,SSI_DETAIL S "
						+ "  WHERE CGCLAN IS NOT NULL AND C.BID=S.BID "
						+ "   AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ "  AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? "
						+ "   GROUP BY s.SSI_STATE_NAME "
						+ " UNION ALL "
						+ " SELECT s.SSI_STATE_NAME,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES, "
						+ " SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT "
						+ " FROM APPLICATION_DETAIL A,MEMBER_INFO M,SSI_DETAIL S "
						+ " WHERE APP_STATUS <> 'RE' AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) BETWEEN ? AND ? "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " GROUP BY s.SSI_STATE_NAME "
						+ " ) GROUP BY SSI_STATE_NAME " + "  ORDER BY 1 ";*/
				String query="SELECT SSI_STATE_NAME, "
					+ "  SUM (CASES), "
					+ "  SUM (APPROVEDAMT), "
					+ " SUM (GUARISSUEDCASES), "
					+ " SUM (GUARISSUEDAMT) "
					+ " FROM (  SELECT s.SSI_STATE_NAME, "
					+ " COUNT (A.CGPAN) CASES, "
					+ " 0 APPROVEDAMT, "
					+ "  0 GUARISSUEDCASES, "
					+ " 0 GUARISSUEDAMT "
					+ " FROM CLAIM_DETAIL C, "
					+ "  APPLICATION_DETAIL A, "
					+ "  SSI_DETAIL S, "
					+ " MEMBER_INFO M, "
					+ "  CLAIM_APPLICATION_AMOUNT CAA "
					+ " WHERE     CGCLAN IS NOT NULL "
					+ "  AND C.CLM_REF_NO = CAA.CLM_REF_NO "
					+ "  AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
					+ " AND A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID = "
					+ " M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND A.CGPAN = CAA.CGPAN "
					+ " AND TRUNC (CLM_APPROVED_DT) BETWEEN ? AND ? "
					+ " GROUP BY s.SSI_STATE_NAME "
					+ " UNION ALL "
					+ " SELECT s.SSI_STATE_NAME STATE, "
					+ "   0 CASES, "
					//+ " --SUM (CLM_APPROVED_AMT) APPROVEDAMT,
					+ " SUM (  NVL ( (SELECT MAX (CTD_TC_FIRST_INST_PAY_AMT) FROM CLAIM_TC_DETAIL TC WHERE TC.CGPAN = A.CGPAN), 0) "
					+ "   + NVL ( (SELECT MAX (WC.CWD_WC_FIRST_INST_PAY_AMT) FROM CLAIM_WC_DETAIL WC WHERE WC.CGPAN = A.CGPAN), 0)) AS APPROVEDAMT, "
					+ "   0 GUARISSUEDCASES, "
					+ "  0 GUARISSUEDAMT "
					+ " FROM CLAIM_DETAIL C, "
					+ "  MEMBER_INFO M, "
					+ "  SSI_DETAIL S, "
					+ "  APPLICATION_DETAIL A, "
					+ " CLAIM_APPLICATION_AMOUNT CAA "
					+ " WHERE     CGCLAN IS NOT NULL "
					+ " AND C.MEM_BNK_ID || C.MEM_ZNE_ID || C.MEM_BRN_ID = "
					+ "      M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND A.CGPAN = CAA.CGPAN "
					+ "   AND C.CLM_REF_NO = CAA.CLM_REF_NO "
					+ " AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
					+ " AND TRUNC (CLM_APPROVED_DT) BETWEEN ? AND ? "
					+ " GROUP BY s.SSI_STATE_NAME "
					+ " UNION ALL "
					+ " SELECT s.SSI_STATE_NAME, "
					+ " 0 CASES, "
					+ " 0 APPROVEDAMT, "
					+ " COUNT (CGPAN) GUARISSUEDCASES, "
					+ " SUM (DECODE (APP_REAPPROVE_AMOUNT, NULL, APP_APPROVED_AMOUNT, APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT "
					+ " FROM APPLICATION_DETAIL A, MEMBER_INFO M, SSI_DETAIL S "
					+ " WHERE     APP_STATUS <> 'RE' "
					+ " AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
					+ " AND A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID = M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND TRUNC (APP_GUAR_START_DATE_TIME) BETWEEN ? AND ? "
					+ " GROUP BY s.SSI_STATE_NAME) "
					+ " GROUP BY SSI_STATE_NAME "
					+ " ORDER BY 1";
				System.out.println("query:2**" + query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setDate(3, startDate);
				mliApplicationStmt.setDate(4, endDate);
				mliApplicationStmt.setDate(5, startDate);
				mliApplicationStmt.setDate(6, endDate);

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportsDAO", "StateClaimApplicationDetails",
				"Exited");
		return mliApplicationArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList SectorClaimApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "SectorClaimApplicationDetails",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if (startDate == null) {
			try {
				/*String query = "SELECT SECTOR,SUM(CASES) CASES,SUM(APPROVEDAMT) APPROVEDAMT FROM  "
						+ "  (   "
						+ " SELECT  DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) SECTOR,  "
						+ " COUNT(A.CGPAN) CASES,0 APPROVEDAMT  "
						+ " FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S "
						+ " WHERE CGCLAN IS NOT NULL "
						+ " AND C.BID=S.BID "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND TRUNC(CLM_APPROVED_DT) <= ? "
						+ " GROUP BY  DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) "
						+ " UNION ALL "
						+ " SELECT DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) SECTOR, "
						+ " 0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT "
						+ " FROM CLAIM_DETAIL C,SSI_DETAIL S "
						+ " WHERE CGCLAN IS NOT NULL AND C.BID=S.BID "
						+ " AND TRUNC(CLM_APPROVED_DT) <= ? "
						+ " GROUP BY DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) "
						+ " ) " + " GROUP BY SECTOR " + "ORDER BY 1";*/
				String query=" SELECT SECTOR, " 
					+ " SUM (CASES) CASES, " 
					+ " SUM (APPROVEDAMT) APPROVEDAMT "
					+ " FROM (  SELECT NVL (UPPER (S.SSI_INDUSTRY_SECTOR), 'OTHERS') SECTOR, "
					+ " COUNT (A.CGPAN) CASES, "
					+ " 0 APPROVEDAMT "
					+ " FROM CLAIM_DETAIL C, "
					+ " MEMBER_INFO M, "
					+ " SSI_DETAIL S, "
					+ " APPLICATION_DETAIL A, "
					+ " CLAIM_APPLICATION_AMOUNT CAA "
					+ " WHERE     CGCLAN IS NOT NULL "
					+ " AND C.MEM_BNK_ID || C.MEM_ZNE_ID || C.MEM_BRN_ID = "
					+ " M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND A.CGPAN = CAA.CGPAN "
					+ " AND C.CLM_REF_NO = CAA.CLM_REF_NO "
					+ " AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
					+ " AND TRUNC (CLM_APPROVED_DT) <= ? "
					+ " GROUP BY NVL (UPPER (S.SSI_INDUSTRY_SECTOR), 'OTHERS') "
					+ " UNION ALL "
					+ " SELECT NVL (UPPER (S.SSI_INDUSTRY_SECTOR), 'OTHERS') SECTOR, "
					+ " 0 CASES, "
					+ " SUM (  NVL ( (SELECT MAX (CTD_TC_FIRST_INST_PAY_AMT) FROM CLAIM_TC_DETAIL TC WHERE TC.CGPAN = A.CGPAN), 0) "
					+ " + NVL ( (SELECT MAX (WC.CWD_WC_FIRST_INST_PAY_AMT) FROM CLAIM_WC_DETAIL WC WHERE WC.CGPAN = A.CGPAN),  0)) AS APPROVEDAMT "
					//+ " --  SUM (CLM_APPROVED_AMT) APPROVEDAMT
					+ " FROM CLAIM_DETAIL C, "
					+ " MEMBER_INFO M, "
					+ " SSI_DETAIL S, "
					+ " APPLICATION_DETAIL A, "
					+ " CLAIM_APPLICATION_AMOUNT CAA "
					+ " WHERE     CGCLAN IS NOT NULL "
					+ " AND C.MEM_BNK_ID || C.MEM_ZNE_ID || C.MEM_BRN_ID = "
					+ " M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND A.CGPAN = CAA.CGPAN "
					+ " AND C.CLM_REF_NO = CAA.CLM_REF_NO "
					+ " AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
					+ " AND TRUNC (CLM_APPROVED_DT)  <= ?  "
					+ " GROUP BY NVL (UPPER (S.SSI_INDUSTRY_SECTOR), 'OTHERS')) "
					+ " GROUP BY SECTOR "
					+ " ORDER BY 1";
				System.out.println("the query is 1@#$=========="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if (startDate != null) {
			try {
			/*	String query = "SELECT SECTOR,SUM(CASES) CASES,SUM(APPROVEDAMT) APPROVEDAMT FROM  "
						+ "  (   "
						+ " SELECT  DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) SECTOR,  "
						+ " COUNT(A.CGPAN) CASES,0 APPROVEDAMT  "
						+ " FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S "
						+ " WHERE CGCLAN IS NOT NULL "
						+ " AND C.BID=S.BID "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? "
						+ " GROUP BY  DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) "
						+ " UNION ALL "
						+ " SELECT DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) SECTOR, "
						+ " 0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT "
						+ " FROM CLAIM_DETAIL C,SSI_DETAIL S "
						+ " WHERE CGCLAN IS NOT NULL AND C.BID=S.BID "
						+ " AND TRUNC(CLM_APPROVED_DT)  BETWEEN ? AND ?  "
						+ " GROUP BY DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) "
						+ " ) " + " GROUP BY SECTOR " + "ORDER BY 1";*/
				String query=" SELECT SECTOR, " 
					+ " SUM (CASES) CASES, " 
					+ " SUM (APPROVEDAMT) APPROVEDAMT "
					+ " FROM (  SELECT NVL (UPPER (S.SSI_INDUSTRY_SECTOR), 'OTHERS') SECTOR, "
					+ " COUNT (A.CGPAN) CASES, "
					+ " 0 APPROVEDAMT "
					+ " FROM CLAIM_DETAIL C, "
					+ " MEMBER_INFO M, "
					+ " SSI_DETAIL S, "
					+ " APPLICATION_DETAIL A, "
					+ " CLAIM_APPLICATION_AMOUNT CAA "
					+ " WHERE     CGCLAN IS NOT NULL "
					+ " AND C.MEM_BNK_ID || C.MEM_ZNE_ID || C.MEM_BRN_ID = "
					+ " M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND A.CGPAN = CAA.CGPAN "
					+ " AND C.CLM_REF_NO = CAA.CLM_REF_NO "
					+ " AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
					+ " AND TRUNC (CLM_APPROVED_DT) BETWEEN ? AND ? "
					+ " GROUP BY NVL (UPPER (S.SSI_INDUSTRY_SECTOR), 'OTHERS') "
					+ " UNION ALL "
					+ " SELECT NVL (UPPER (S.SSI_INDUSTRY_SECTOR), 'OTHERS') SECTOR, "
					+ " 0 CASES, "
					+ " SUM (  NVL ( (SELECT MAX (CTD_TC_FIRST_INST_PAY_AMT) FROM CLAIM_TC_DETAIL TC WHERE TC.CGPAN = A.CGPAN), 0) "
					+ " + NVL ( (SELECT MAX (WC.CWD_WC_FIRST_INST_PAY_AMT) FROM CLAIM_WC_DETAIL WC WHERE WC.CGPAN = A.CGPAN),  0)) AS APPROVEDAMT "
					//+ " --  SUM (CLM_APPROVED_AMT) APPROVEDAMT
					+ " FROM CLAIM_DETAIL C, "
					+ " MEMBER_INFO M, "
					+ " SSI_DETAIL S, "
					+ " APPLICATION_DETAIL A, "
					+ " CLAIM_APPLICATION_AMOUNT CAA "
					+ " WHERE     CGCLAN IS NOT NULL "
					+ " AND C.MEM_BNK_ID || C.MEM_ZNE_ID || C.MEM_BRN_ID = "
					+ " M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID "
					+ " AND A.CGPAN = CAA.CGPAN "
					+ " AND C.CLM_REF_NO = CAA.CLM_REF_NO "
					+ " AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER "
					+ " AND TRUNC (CLM_APPROVED_DT) BETWEEN ? AND ? "
					+ " GROUP BY NVL (UPPER (S.SSI_INDUSTRY_SECTOR), 'OTHERS')) "
					+ " GROUP BY SECTOR "
					+ " ORDER BY 1";
				 System.out.println("query!!!:"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setDate(3, startDate);
				mliApplicationStmt.setDate(4, endDate);

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportsDAO", "SectorClaimApplicationDetails",
				"Exited");
		return mliApplicationArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param guarantee
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList mliApplicationDetailsForRsf(java.sql.Date startDate,
			java.sql.Date endDate, String guarantee) throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "mliApplicationDetailsForRsf",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if ((guarantee.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_BANK_NAME, COUNT(UNIQUE SSI_REFERENCE_NUMBER),"
				 * +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from view_appl_amounts vw, application_detail " +
				 * " app, member_info member where app.CGPAN=vw.CGPAN and scm_id=3 and app.app_status NOT IN ('RE') and "
				 * + " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID =" +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
				 * + " trunc(app.APP_APPROVED_DATE_TIME) <= ? group by " +
				 * " member.mem_bank_name" + " order by member.MEM_BANK_NAME";
				 */

				String query = "select member.MEM_BANK_NAME, COUNT(UNIQUE s.SSI_REFERENCE_NUMBER),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from  application_detail "
						+ " app, member_info member ,ssi_detail s,promoter_detail p where app.ssi_reference_number = s.ssi_reference_number "
						+ "    AND app.ssi_reference_number = p.ssi_reference_number  and scm_id=3 and app.app_status NOT IN ('RE') and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) <= ? group by "
						+ " member.mem_bank_name"
						+ " order by member.MEM_BANK_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((guarantee.equals("yes")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_BANK_NAME, count(vw.cgpan)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from view_appl_amounts vw, application_detail " +
				 * " app, member_info member where app.CGPAN=vw.CGPAN and " +
				 * " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID =" +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
				 * + // " app_status = 'AP' and"+
				 * " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? group by "
				 * + " member.mem_bank_name"+ " order by member.MEM_BANK_NAME";
				 */
				// System.out.println("1:"+startDate);
				// System.out.println("2:"+endDate);

				String query = "select MEM,SUM(CURCGPAN),SUM(CURAMT),SUM(PREVCG),SUM(PREVAMT),sum(cumcg),sum(cumamt) FROM "
						+ " ( "
						+ " select member.MEM_BANK_NAME MEM, COUNT(UNIQUE s.SSI_REFERENCE_NUMBER) curcgpan, "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) curamt, "
						+ " 0 prevcg,0 prevamt,0 cumcg,0 cumamt "
						+ " from  application_detail  app,"
						+ " member_info member,ssi_detail s,promoter_detail p where   app.ssi_reference_number = s.ssi_reference_number "
						+ " AND app.ssi_reference_number = p.ssi_reference_number and scm_id=3 and app.app_status NOT IN ('RE') and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID =  "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? "
						+ " group by member.mem_bank_name "
						+ " union all "
						+ " select member.MEM_BANK_NAME, 0 curcgpan, 0 curamt, "
						+ " COUNT(UNIQUE s.SSI_REFERENCE_NUMBER) prevcg, "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) prevamt,0 cumcg,0 cumamt "
						+ " from ssi_detail s,promoter_detail p, application_detail  app, member_info member "
						+ " where  app.ssi_reference_number = s.ssi_reference_number "
						+ " AND app.ssi_reference_number = p.ssi_reference_number and scm_id=3 and app.app_status NOT IN ('RE') and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " trunc(app.APP_APPROVED_DATE_TIME) between "
						+ "add_months(?,-12) and "
						+ " add_months(?,-12) "
						+ " group by member.mem_bank_name "
						+ " union all "
						+ " select member.MEM_BANK_NAME, 0 curcgpan, 0 curamt,0 prevcg,0 precamt, "
						+ " COUNT(UNIQUE s.SSI_REFERENCE_NUMBER) cumcg, "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) cumamt "
						+ " from ssi_detail s,promoter_detail p, application_detail  app, member_info member "
						+ " where app.ssi_reference_number = s.ssi_reference_number "
						+ " AND app.ssi_reference_number = p.ssi_reference_number and scm_id=3 and app.app_status NOT IN ('RE') and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " trunc(app.APP_APPROVED_DATE_TIME) <= ? "
						+ " group by member.mem_bank_name "
						+ " ) "
						+ " GROUP BY MEM " + " ORDER BY 1 ";
				System.out.println("query:" + query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setDate(3, startDate);
				mliApplicationStmt.setDate(4, endDate);
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationReport.setCumProposals(mliApplicationResult
							.getInt(6));
					mliApplicationReport.setCumAmount(mliApplicationResult
							.getDouble(7));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select member.MEM_BANK_NAME, COUNT(UNIQUE s.SSI_REFERENCE_NUMBER),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from  ssi_detail s,promoter_detail p,application_detail app, member_info member where "
						+ " app.ssi_reference_number = s.ssi_reference_number "
						+ " AND app.ssi_reference_number = p.ssi_reference_number and scm_id=3 and app.app_status NOT IN ('RE') and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID ||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) <= ?"
						+ " group by member.mem_bank_name"
						+ " order by member.MEM_BANK_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_BANK_NAME, count(vw.CGPAN)," +
				 * "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * +
				 * " from view_appl_amounts vw, application_detail app, member_info member where "
				 * +
				 * " app.CGPAN = vw.CGPAN and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID ="
				 * +
				 * " member.MEM_BNK_ID ||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
				 * + " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ?" +
				 * " group by member.mem_bank_name"+
				 * " order by member.MEM_BANK_NAME"; mliApplicationStmt =
				 * connection.prepareStatement(query);
				 * mliApplicationStmt.setDate(1,startDate);
				 * mliApplicationStmt.setDate(2,endDate);
				 */
				String query = "select MEM,SUM(CURCGPAN),SUM(CURAMT),SUM(PREVCG),SUM(PREVAMT),sum(cumcg),sum(cumamt) FROM "
						+ " ( "
						+ " select member.MEM_BANK_NAME MEM, COUNT(UNIQUE s.SSI_REFERENCE_NUMBER) curcgpan, "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) curamt, "
						+ " 0 prevcg,0 prevamt,0 cumcg,0 cumamt "
						+ " from ssi_detail s,promoter_detail p, application_detail  app,"
						+ " member_info member where app.ssi_reference_number = s.ssi_reference_number "
						+ " AND app.ssi_reference_number = p.ssi_reference_number  and scm_id=3 and app.app_status NOT IN ('RE') and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID =  "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? "
						+ " group by member.mem_bank_name "
						+ " union all "
						+ " select member.MEM_BANK_NAME, 0 curcgpan, 0 curamt, "
						+ " COUNT(UNIQUE s.SSI_REFERENCE_NUMBER) prevcg, "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) prevamt,0 cumcg,0 cumamt "
						+ " from ssi_detail s,promoter_detail p, application_detail  app, member_info member "
						+ " where app.ssi_reference_number = s.ssi_reference_number "
						+ " AND app.ssi_reference_number = p.ssi_reference_number and scm_id=3 and app.app_status NOT IN ('RE') and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) between "
						+ "add_months(?,-12) and "
						+ " add_months(?,-12) "
						+ " group by member.mem_bank_name "
						+ " union all "
						+ " select member.MEM_BANK_NAME, 0 curcgpan, 0 curamt,0 prevcg,0 precamt, "
						+ " COUNT(UNIQUE s.SSI_REFERENCE_NUMBER) cumcg, "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) cumamt "
						+ " from ssi_detail s,promoter_detail p, application_detail  app, member_info member "
						+ " where app.ssi_reference_number = s.ssi_reference_number "
						+ " AND app.ssi_reference_number = p.ssi_reference_number and scm_id=3 and app.app_status NOT IN ('RE') and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) <= ? "
						+ " group by member.mem_bank_name "
						+ " ) "
						+ " GROUP BY MEM " + " ORDER BY 1 ";
				// System.out.println("query:"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setDate(3, startDate);
				mliApplicationStmt.setDate(4, endDate);
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationReport.setCumProposals(mliApplicationResult
							.getInt(6));
					mliApplicationReport.setCumAmount(mliApplicationResult
							.getDouble(7));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportsDAO", "mliApplicationDetails", "Exited");
		return mliApplicationArray;
	}

	public ArrayList mliApplicationDetailsForRsfPend(java.sql.Date startDate,
			java.sql.Date endDate, String guarantee) throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "mliApplicationDetailsForRsf",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if ((guarantee.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select member.MEM_BANK_NAME, count(vw.APPREF),"
						+ " SUM(nvl(TC_CREDIT_TO_GUARANTEE,0)+nvl(WC_FB_CREDIT_TO_GUARANTEE,0)+nvl(WC_NFB_CREDIT_TO_GUARANTEE,0))"
						+ " from VIEW_APPL_AMT_TO_GUARANTEE vw, application_detail_temp "
						+ " app, member_info member where app.app_ref_no=vw.APPREF and scm_id=3 and app.app_status IN ('NE','MO') and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(vw.SUBMITTED_DT) <= ? group by "
						+ " member.mem_bank_name"
						+ " order by member.MEM_BANK_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((guarantee.equals("yes")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_BANK_NAME, count(vw.cgpan)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from view_appl_amounts vw, application_detail " +
				 * " app, member_info member where app.CGPAN=vw.CGPAN and " +
				 * " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID =" +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
				 * + // " app_status = 'AP' and"+
				 * " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? group by "
				 * + " member.mem_bank_name"+ " order by member.MEM_BANK_NAME";
				 */
				// System.out.println("1:"+startDate);
				// System.out.println("2:"+endDate);

				String query = "select MEM,SUM(CURCGPAN),SUM(CURAMT),SUM(PREVCG),SUM(PREVAMT),sum(cumcg),sum(cumamt) FROM "
						+ " ( "
						+ " select member.MEM_BANK_NAME MEM, count(vw.APPREF) curcgpan, "
						+ " SUM(nvl(TC_CREDIT_TO_GUARANTEE,0)+nvl(WC_FB_CREDIT_TO_GUARANTEE,0)+nvl(WC_NFB_CREDIT_TO_GUARANTEE,0)) curamt, "
						+ " 0 prevcg,0 prevamt,0 cumcg,0 cumamt "
						+ " from VIEW_APPL_AMT_TO_GUARANTEE vw, application_detail_temp  app,"
						+ " member_info member where app.app_ref_no=vw.APPREF and scm_id=3 and app.app_status IN ('NE','MO') and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID =  "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " trunc(vw.SUBMITTED_DT) between ? and ? "
						+ " group by member.mem_bank_name "
						+ " union all "
						+ " select member.MEM_BANK_NAME, 0 curcgpan, 0 curamt, "
						+ " count(vw.APPREF) prevcg, "
						+ " SUM(nvl(TC_CREDIT_TO_GUARANTEE,0)+nvl(WC_FB_CREDIT_TO_GUARANTEE,0)+nvl(WC_NFB_CREDIT_TO_GUARANTEE,0)) prevamt,0 cumcg,0 cumamt "
						+ " from VIEW_APPL_AMT_TO_GUARANTEE vw, application_detail_temp  app, member_info member "
						+ " where app.app_ref_no=vw.APPREF and scm_id=3 and app.app_status IN ('NE','MO') and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " trunc(vw.SUBMITTED_DT) between "
						+ "add_months(?,-12) and "
						+ " add_months(?,-12) "
						+ " group by member.mem_bank_name "
						+ " union all "
						+ " select member.MEM_BANK_NAME, 0 curcgpan, 0 curamt,0 prevcg,0 precamt, "
						+ " count(vw.APPREF) cumcg, "
						+ " SUM(nvl(TC_CREDIT_TO_GUARANTEE,0)+nvl(WC_FB_CREDIT_TO_GUARANTEE,0)+nvl(WC_NFB_CREDIT_TO_GUARANTEE,0)) cumamt "
						+ " from VIEW_APPL_AMT_TO_GUARANTEE vw, application_detail_temp  app, member_info member "
						+ " where app.app_ref_no=vw.APPREF and scm_id=3 and app.app_status IN ('NE','MO') and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " trunc(vw.SUBMITTED_DT) <= ? "
						+ " group by member.mem_bank_name "
						+ " ) "
						+ " GROUP BY MEM " + " ORDER BY 1 ";
				// System.out.println("query:"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setDate(3, startDate);
				mliApplicationStmt.setDate(4, endDate);
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationReport.setCumProposals(mliApplicationResult
							.getInt(6));
					mliApplicationReport.setCumAmount(mliApplicationResult
							.getDouble(7));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select member.MEM_BANK_NAME, count(vw.APPREF),"
						+ " SUM(nvl(TC_CREDIT_TO_GUARANTEE,0)+nvl(WC_FB_CREDIT_TO_GUARANTEE,0)+nvl(WC_NFB_CREDIT_TO_GUARANTEE,0))"
						+ " from VIEW_APPL_AMT_TO_GUARANTEE vw, application_detail_temp app, member_info member where "
						+ " app.app_ref_no=vw.APPREF and scm_id=3 and app.app_status IN ('NE','MO') and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID ||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(vw.SUBMITTED_DT) <= ?"
						+ " group by member.mem_bank_name"
						+ " order by member.MEM_BANK_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_BANK_NAME, count(vw.CGPAN)," +
				 * "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * +
				 * " from view_appl_amounts vw, application_detail app, member_info member where "
				 * +
				 * " app.CGPAN = vw.CGPAN and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID ="
				 * +
				 * " member.MEM_BNK_ID ||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
				 * + " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ?" +
				 * " group by member.mem_bank_name"+
				 * " order by member.MEM_BANK_NAME"; mliApplicationStmt =
				 * connection.prepareStatement(query);
				 * mliApplicationStmt.setDate(1,startDate);
				 * mliApplicationStmt.setDate(2,endDate);
				 */
				String query = "select MEM,SUM(CURCGPAN),SUM(CURAMT),SUM(PREVCG),SUM(PREVAMT),sum(cumcg),sum(cumamt) FROM "
						+ " ( "
						+ " select member.MEM_BANK_NAME MEM, count(vw.APPREF) curcgpan, "
						+ " SUM(nvl(TC_CREDIT_TO_GUARANTEE,0)+nvl(WC_FB_CREDIT_TO_GUARANTEE,0)+nvl(WC_NFB_CREDIT_TO_GUARANTEE,0)) curamt, "
						+ " 0 prevcg,0 prevamt,0 cumcg,0 cumamt "
						+ " from VIEW_APPL_AMT_TO_GUARANTEE vw, application_detail_temp  app,"
						+ " member_info member where app.app_ref_no=vw.APPREF and scm_id=3 and app.app_status IN ('NE','MO') and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID =  "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " trunc(vw.SUBMITTED_DT) between ? and ? "
						+ " group by member.mem_bank_name "
						+ " union all "
						+ " select member.MEM_BANK_NAME, 0 curcgpan, 0 curamt, "
						+ " count(vw.APPREF) prevcg, "
						+ " SUM(nvl(TC_CREDIT_TO_GUARANTEE,0)+nvl(WC_FB_CREDIT_TO_GUARANTEE,0)+nvl(WC_NFB_CREDIT_TO_GUARANTEE,0)) prevamt,0 cumcg,0 cumamt "
						+ " from VIEW_APPL_AMT_TO_GUARANTEE vw, application_detail_temp  app, member_info member "
						+ " where app.app_ref_no=vw.APPREF and scm_id=3 and app.app_status IN ('NE','MO') and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " trunc(vw.SUBMITTED_DT) between "
						+ "add_months(?,-12) and "
						+ " add_months(?,-12) "
						+ " group by member.mem_bank_name "
						+ " union all "
						+ " select member.MEM_BANK_NAME, 0 curcgpan, 0 curamt,0 prevcg,0 precamt, "
						+ " count(vw.APPREF) cumcg, "
						+ " SUM(nvl(TC_CREDIT_TO_GUARANTEE,0)+nvl(WC_FB_CREDIT_TO_GUARANTEE,0)+nvl(WC_NFB_CREDIT_TO_GUARANTEE,0)) cumamt "
						+ " from VIEW_APPL_AMT_TO_GUARANTEE vw, application_detail_temp  app, member_info member "
						+ " where app.app_ref_no=vw.APPREF and scm_id=3 and app.app_status IN ('NE','MO') and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " trunc(vw.SUBMITTED_DT) <= ? "
						+ " group by member.mem_bank_name "
						+ " ) "
						+ " GROUP BY MEM " + " ORDER BY 1 ";
				// System.out.println("query:"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setDate(3, startDate);
				mliApplicationStmt.setDate(4, endDate);
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationReport.setCumProposals(mliApplicationResult
							.getInt(6));
					mliApplicationReport.setCumAmount(mliApplicationResult
							.getDouble(7));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportsDAO", "mliApplicationDetails", "Exited");
		return mliApplicationArray;
	}

	/**
	 * 
	 * @param bank
	 * @param zone
	 * @param id
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList branchDetails(String bank, String zone, String id,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "branchDetails", "Entered");
		PreparedStatement bankDetailsStmt = null;
		ArrayList bankDetailsArray = new ArrayList();
		ResultSet bankDetailsResult = null;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_BRANCH_NAME, count(vw.CGPAN)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from member_info member, application_detail" +
				 * " app, view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) and "
				 * +
				 * " LTRIM(RTRIM(UPPER(MEMBER.MEM_ZONE_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? " +
				 * " group by member.MEM_BRANCH_NAME" +
				 * " order by member.MEM_BRANCH_NAME";
				 */

				/*
				 * String query =
				 * "select member.MEM_BRANCH_NAME, count(vw.CGPAN)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from member_info member, application_detail" +
				 * " app, view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) and "
				 * +
				 * " LTRIM(RTRIM(UPPER(MEMBER.MEM_ZONE_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? " +
				 * " group by member.MEM_BRANCH_NAME" +
				 * " order by member.MEM_BRANCH_NAME";
				 */

				String query = " select member.MEM_BRANCH_NAME, count(app.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from member_info member, application_detail "
						+ " app, SSI_DETAIL S, PROMOTER_DETAIL P  where APP.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER "
						+ " AND APP.SSI_REFERENCE_NUMBER=P.SSI_REFERENCE_NUMBER and  "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =  "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) and "
						+ " LTRIM(RTRIM(UPPER(MEMBER.MEM_ZONE_NAME))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and app.app_status not in ('RE') "
						+ " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ?  "
						+ " group by member.MEM_BRANCH_NAME "
						+ " order by member.MEM_BRANCH_NAME ";

				System.out.println(query);
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, bank);
				bankDetailsStmt.setString(2, zone); // Set zone parameter
				bankDetailsStmt.setDate(3, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(4, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_BRANCH_NAME, count(vw.CGPAN)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from member_info member, application_detail" +
				 * " app, view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) and "
				 * +
				 * " LTRIM(RTRIM(UPPER(MEMBER.MEM_ZONE_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_APPROVED_DATE_TIME) <= ? " +
				 * " group by member.MEM_BRANCH_NAME" +
				 * " order by member.MEM_BRANCH_NAME";
				 */

				String query = " select member.MEM_BRANCH_NAME, count(app.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from member_info member, application_detail "
						+ " app, SSI_DETAIL S, PROMOTER_DETAIL P  where APP.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER "
						+ " AND APP.SSI_REFERENCE_NUMBER=P.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) and "
						+ " LTRIM(RTRIM(UPPER(MEMBER.MEM_ZONE_NAME))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and app.app_status not in ('RE') "
						+ " and trunc(app.APP_APPROVED_DATE_TIME) <= ?  "
						+ " group by member.MEM_BRANCH_NAME "
						+ " order by member.MEM_BRANCH_NAME ";

				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, bank); // Set bank parameter
				bankDetailsStmt.setString(2, zone); // Set zone parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_BRANCH_NAME, count(vw.CGPAN)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from member_info member, application_detail" +
				 * " app, view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) and "
				 * +
				 * " LTRIM(RTRIM(UPPER(MEMBER.MEM_ZONE_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_guar_start_DATE_TIME) between ? and ? "
				 * + " group by member.MEM_BRANCH_NAME" +
				 * " order by member.MEM_BRANCH_NAME";
				 */

				String query = "select member.MEM_BRANCH_NAME, count(app.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from member_info member, application_detail"
						+ " app,  SSI_DETAIL S, PROMOTER_DETAIL P  where APP.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER "
						+ " AND APP.SSI_REFERENCE_NUMBER=P.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) and "
						+ " LTRIM(RTRIM(UPPER(MEMBER.MEM_ZONE_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and app.app_status not in ('RE') "
						+ " and trunc(app.APP_guar_start_DATE_TIME) between ? and ? "
						+ " group by member.MEM_BRANCH_NAME"
						+ " order by member.MEM_BRANCH_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, bank); // Set bank parameter
				bankDetailsStmt.setString(2, zone); // Set zone parameter
				bankDetailsStmt.setDate(3, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(4, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}

		else if ((id.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_BRANCH_NAME, count(vw.CGPAN)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from member_info member, application_detail" +
				 * " app, view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) and "
				 * +
				 * " LTRIM(RTRIM(UPPER(MEMBER.MEM_ZONE_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_GUAR_START_DATE_TIME) <= ? " +
				 * " group by member.MEM_BRANCH_NAME" +
				 * " order by member.MEM_BRANCH_NAME";
				 */

				String query = "select member.MEM_BRANCH_NAME, count(app.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from member_info member, application_detail"
						+ " app, SSI_DETAIL S, PROMOTER_DETAIL P  where APP.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER "
						+ " AND APP.SSI_REFERENCE_NUMBER=P.SSI_REFERENCE_NUMBER  and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) and "
						+ " LTRIM(RTRIM(UPPER(MEMBER.MEM_ZONE_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and app.app_status not in ('RE') "
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) <= ? "
						+ " group by member.MEM_BRANCH_NAME"
						+ " order by member.MEM_BRANCH_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, bank); // Set bank parameter
				bankDetailsStmt.setString(2, zone); // Set zone parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}
		Log.log(Log.INFO, "ReportDAO", "branchDetails", "Exited");
		return bankDetailsArray;
	}

	/*
	 * ##########################################################################
	 * #######################
	 */

	public ArrayList zoneDetails(String zone, String id,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "zoneDetails", "Entered");
		PreparedStatement bankDetailsStmt = null;
		ArrayList bankDetailsArray = new ArrayList();
		ResultSet bankDetailsResult = null;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */

				/*
				 * rrrrr String query =
				 * "select member.MEM_ZONE_NAME, count(vw.CGPAN)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from member_info member, application_detail" +
				 * " app, view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? " +
				 * " group by member.MEM_ZONE_NAME" +
				 * " order by member.MEM_ZONE_NAME";
				 */

				String query = "select member.MEM_ZONE_NAME, count(APP.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from member_info member, application_detail "
						+ " app, SSI_DETAIL S, PROMOTER_DETAIL P where "
						+ " APP.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER "
						+ " AND APP.SSI_REFERENCE_NUMBER=P.SSI_REFERENCE_NUMBER "
						+ " AND app.app_status NOT IN ('RE')"
						+ " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =  "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ?  "
						+ " group by member.MEM_ZONE_NAME "
						+ " order by member.MEM_ZONE_NAME ";
				
				
				 //System.out.println("query zone======"+query);
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_ZONE_NAME, count(vw.CGPAN)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from member_info member, application_detail" +
				 * " app, view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_APPROVED_DATE_TIME) <= ? " +
				 * " group by member.MEM_ZONE_NAME" +
				 * " order by member.MEM_ZONE_NAME";
				 */

				String query = " select member.MEM_ZONE_NAME, count(APP.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from member_info member, application_detail "
						+ " app, SSI_DETAIL S, PROMOTER_DETAIL P  where  "
						+ " APP.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER "
						+ " AND APP.SSI_REFERENCE_NUMBER=P.SSI_REFERENCE_NUMBE "
						+ " AND app.app_status NOT IN ('RE')"
						+ " AND app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and trunc(app.APP_APPROVED_DATE_TIME) <= ?  "
						+ " group by member.MEM_ZONE_NAME "
						+ " order by member.MEM_ZONE_NAME ";
				//System.out.println("query zone2======"+query);
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_ZONE_NAME, count(vw.CGPAN), " +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from member_info member, application_detail app," +
				 * " view_appl_amounts vw where app.CGPAN = vw.CGPAN and " +
				 * " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =" +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
				 * + " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = " +
				 * " LTRIM(RTRIM(UPPER(?))) and " +
				 * " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ?" +
				 * " group by member.MEM_ZONE_NAME" +
				 * " order by member.MEM_ZONE_NAME";
				 */

				String query = " select member.MEM_ZONE_NAME, count(APP.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from member_info member, application_detail app,SSI_DETAIL S, PROMOTER_DETAIL P "
						+ " where APP.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER "
						+ " AND APP.SSI_REFERENCE_NUMBER=P.SSI_REFERENCE_NUMBER "
						+ " AND app.app_status NOT IN ('RE')"
						+ " AND  app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) =  "
						+ " LTRIM(RTRIM(UPPER(?))) and  "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? "
						+ " group by member.MEM_ZONE_NAME "
						+ " order by member.MEM_ZONE_NAME ";
				System.out.println("query zone3======"+query);
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}

		else if ((id.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_ZONE_NAME, count(vw.CGPAN), " +
				 * "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from member_info member, application_detail app," +
				 * " view_appl_amounts vw where app.CGPAN = vw.CGPAN and " +
				 * " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =" +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
				 * + " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = " +
				 * " LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME) <= ? "
				 * + " group by member.MEM_ZONE_NAME" +
				 * " order by member.MEM_ZONE_NAME";
				 */

				String query = "select member.MEM_ZONE_NAME, count(APP.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from member_info member, application_detail app, "
						+ " SSI_DETAIL S, PROMOTER_DETAIL P   "
						+ " where APP.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER "
						+ " AND APP.SSI_REFERENCE_NUMBER=P.SSI_REFERENCE_NUMBER "
						+ " AND app.app_status NOT IN ('RE')"
						+ " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) =  "
						+ " LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME) <= ? "
						+ " group by member.MEM_ZONE_NAME "
						+ " order by member.MEM_ZONE_NAME ";
				System.out.println("query zone4======"+query);
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}
		Log.log(Log.INFO, "ReportDAO", "zoneDetails", "Exited");
		return bankDetailsArray;
	}

	/**
	 * 
	 * @param zone
	 * @param id
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList zoneDetailsNew(String zone, String id,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "zoneDetailsNew", "Entered");
		PreparedStatement bankDetailsStmt = null;
		ArrayList bankDetailsArray = new ArrayList();
		ResultSet bankDetailsResult = null;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try {
				String query = "SELECT MEM_ZONE_NAME,SUM(CYCNT),SUM(CYAMT),SUM(PYCNT),SUM(PYAMT),SUM(CUMCNT),SUM(CUMAMT) FROM "
						+ " ( "
						+ " SELECT MEM_ZONE_NAME,COUNT(*) CYCNT, "
						+ " SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) CYAMT, "
						+ " 0 PYCNT,0 PYAMT,0 CUMCNT,0 CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_APPROVED_DATE_TIME) BETWEEN ? AND ? "
						+ " AND MEM_BANK_NAME = LTRIM(RTRIM(?)) "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY MEM_ZONE_NAME "
						+ " UNION ALL "
						+ " SELECT MEM_ZONE_NAME,0 CYCNT,0 CYAMT, "
						+ " COUNT(*) PYCNT,SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) PYAMT, "
						+ " 0 CUMCNT,0 CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_APPROVED_DATE_TIME) BETWEEN  ADD_MONTHS(?,-12) AND  ADD_MONTHS(?,-12) "
						+ " AND MEM_BANK_NAME = LTRIM(RTRIM(?)) "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY MEM_ZONE_NAME  "
						+ " UNION ALL "
						+ " SELECT MEM_ZONE_NAME,0 CYCNT,0 CYAMT,0 PYCNT,0 PYAMT, "
						+ " COUNT(*) CUMCNT,SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_APPROVED_DATE_TIME) <= ? "
						+ " AND MEM_BANK_NAME = LTRIM(RTRIM(?)) "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY MEM_ZONE_NAME  "
						+ " ) "
						+ " GROUP BY MEM_ZONE_NAME " + " ORDER BY 1 ";

				// System.out.println("query1 is==="+query);
				bankDetailsStmt = connection.prepareStatement(query);

				// System.out.println("query1 is==="+bankDetailsStmt);

				bankDetailsStmt.setDate(1, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsStmt.setString(3, zone); // Set zone parameter
				bankDetailsStmt.setDate(4, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(5, endDate); // Set endDate parameter
				bankDetailsStmt.setString(6, zone); // Set zone parameter
				bankDetailsStmt.setDate(7, endDate); // Set endDate parameter
				bankDetailsStmt.setString(8, zone); // Set zone parameter

				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));
					bankDetailsList.setPrevProposals(bankDetailsResult
							.getInt(4));
					bankDetailsList.setPrevAmount(bankDetailsResult
							.getDouble(5));
					bankDetailsList
							.setCumProposals(bankDetailsResult.getInt(6));
					bankDetailsList
							.setCumAmount(bankDetailsResult.getDouble(7));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("yes")) && startDate == null) {
			try {
				String query = "select member.MEM_ZONE_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from member_info member, application_detail"
						+ " app, view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and trunc(app.APP_APPROVED_DATE_TIME) <= ? "
						+ " group by member.MEM_ZONE_NAME"
						+ " order by member.MEM_ZONE_NAME";

				// System.out.println("query2 is==="+query);
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try {
				String query = " SELECT MEM_ZONE_NAME,SUM(CYCNT),SUM(CYAMT),SUM(PYCNT),SUM(PYAMT),SUM(CUMCNT),SUM(CUMAMT) FROM "
						+ " ( "
						+ " SELECT MEM_ZONE_NAME,COUNT(*) CYCNT, "
						+ " SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) CYAMT, "
						+ " 0 PYCNT,0 PYAMT,0 CUMCNT,0 CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) BETWEEN ? AND ? "
						+ " AND MEM_BANK_NAME = LTRIM(RTRIM(?)) "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY MEM_ZONE_NAME "
						+ " UNION ALL "
						+ " SELECT MEM_ZONE_NAME,0 CYCNT,0 CYAMT, "
						+ " COUNT(*) PYCNT,SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) PYAMT, "
						+ " 0 CUMCNT,0 CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) >= ADD_MONTHS(?,-12) "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) <= ADD_MONTHS(?,-12) "
						+ " AND MEM_BANK_NAME = LTRIM(RTRIM(?)) "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY MEM_ZONE_NAME  "
						+ " UNION ALL "
						+ " SELECT MEM_ZONE_NAME,0 CYCNT,0 CYAMT,0 PYCNT,0 PYAMT, "
						+ " COUNT(*) CUMCNT,SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) <= ? "
						+ " AND MEM_BANK_NAME = ? "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY MEM_ZONE_NAME  "
						+ " ) "
						+ " GROUP BY MEM_ZONE_NAME " + " ORDER BY 1 ";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setDate(1, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsStmt.setString(3, zone); // Set zone parameter
				bankDetailsStmt.setDate(4, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(5, endDate); // Set endDate parameter
				bankDetailsStmt.setString(6, zone); // Set zone parameter
				bankDetailsStmt.setDate(7, endDate); // Set endDate parameter
				bankDetailsStmt.setString(8, zone); // Set zone parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));
					bankDetailsList.setPrevProposals(bankDetailsResult
							.getInt(4));
					bankDetailsList.setPrevAmount(bankDetailsResult
							.getDouble(5));
					bankDetailsList
							.setCumProposals(bankDetailsResult.getInt(6));
					bankDetailsList
							.setCumAmount(bankDetailsResult.getDouble(7));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}

		else if ((id.equals("no")) && startDate == null) {
			try {
				String query = "select member.MEM_ZONE_NAME, count(vw.CGPAN), "
						+ "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from member_info member, application_detail app,"
						+ " view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = "
						+ " LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME) <= ? "
						+ " group by member.MEM_ZONE_NAME"
						+ " order by member.MEM_ZONE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}
		Log.log(Log.INFO, "ReportDAO", "zoneDetailsNew", "Exited");
		return bankDetailsArray;
	}

	/**
	 * 
	 * @param zone
	 * @param id
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getRSFDetails(String zone, String id,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "getRSFDetails", "Entered");
		PreparedStatement bankDetailsStmt = null;
		ArrayList bankDetailsArray = new ArrayList();
		ResultSet bankDetailsResult = null;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query = // " group by member.MEM_ZONE_NAME"+
				 * "select member.MEM_BANK_NAME,member.MEM_ZONE_NAME, DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME),vw.CGPAN,"
				 * +
				 * " decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT),s.SSI_UNIT_NAME,S.SSI_TYPE_OF_ACTIVITY,app.APP_REF_NO,app.mem_bnk_Id||app.mem_zne_id||app.mem_brn_id "
				 * + " from member_info member, application_detail" +
				 * " app, view_appl_amounts vw,ssi_detail s where app.CGPAN = vw.CGPAN and app.ssi_reference_number=s.ssi_reference_number and app_status <> 'RE' and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and app.scm_id='3' and "
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? " +
				 * " order by member.MEM_ZONE_NAME";
				 */

				String query =
				// " group by member.MEM_ZONE_NAME"+
				"select member.MEM_BANK_NAME,member.MEM_ZONE_NAME, DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME),app.CGPAN,"
						+ " decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT),s.SSI_UNIT_NAME,S.SSI_TYPE_OF_ACTIVITY,app.APP_REF_NO,app.mem_bnk_Id||app.mem_zne_id||app.mem_brn_id "
						+ " from member_info member, application_detail"
						+ " app, promoter_detail p,ssi_detail s where  app.ssi_reference_number=p.ssi_reference_number and app.ssi_reference_number=s.ssi_reference_number and app_status <> 'RE' and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and app.scm_id='3' and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? "
						+ " order by member.MEM_ZONE_NAME";

				System.out.println("query===" + query);
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setBankName(bankDetailsResult.getString(1));
					bankDetailsList.setZoneName(bankDetailsResult.getString(2));
					bankDetailsList.setName(bankDetailsResult.getString(3));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(5));
					bankDetailsList.setCgpan(bankDetailsResult.getString(4));
					bankDetailsList.setSsiName(bankDetailsResult.getString(6));
					bankDetailsList.setType(bankDetailsResult.getString(7));
					bankDetailsList.setAppRefNo(bankDetailsResult.getString(8));
					bankDetailsList.setMemberId(bankDetailsResult.getString(9));
					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query = // " group by member.MEM_ZONE_NAME"+
				 * "select member.MEM_BANK_NAME,member.MEM_ZONE_NAME, DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME),vw.CGPAN,"
				 * +
				 * " decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT),s.SSI_UNIT_NAME,S.SSI_TYPE_OF_ACTIVITY,app.APP_REF_NO,app.mem_bnk_Id||app.mem_zne_id||app.mem_brn_id  "
				 * + " from member_info member, application_detail" +
				 * " app, view_appl_amounts vw,ssi_detail s where app.CGPAN = vw.CGPAN and app.ssi_reference_number=s.ssi_reference_number and app_status <> 'RE' and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and app.scm_id='3' and "
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_APPROVED_DATE_TIME) <=? " +
				 * " order by member.MEM_ZONE_NAME";
				 */

				String query =
				// " group by member.MEM_ZONE_NAME"+
				"select member.MEM_BANK_NAME,member.MEM_ZONE_NAME, DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME),app.CGPAN,"
						+ " decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT),s.SSI_UNIT_NAME,S.SSI_TYPE_OF_ACTIVITY,app.APP_REF_NO,app.mem_bnk_Id||app.mem_zne_id||app.mem_brn_id  "
						+ " from member_info member, application_detail"
						+ " app,  promoter_detail p,ssi_detail s where app.ssi_reference_number=p.ssi_reference_number and app.ssi_reference_number=s.ssi_reference_number and app_status <> 'RE' and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and app.scm_id='3' and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and trunc(app.APP_APPROVED_DATE_TIME) <=? "
						+ " order by member.MEM_ZONE_NAME";

				System.out.println("query===1" + query);
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setBankName(bankDetailsResult.getString(1));
					bankDetailsList.setZoneName(bankDetailsResult.getString(2));
					bankDetailsList.setName(bankDetailsResult.getString(3));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(5));
					bankDetailsList.setCgpan(bankDetailsResult.getString(4));
					bankDetailsList.setSsiName(bankDetailsResult.getString(6));
					bankDetailsList.setType(bankDetailsResult.getString(7));
					bankDetailsList.setAppRefNo(bankDetailsResult.getString(8));
					bankDetailsList.setMemberId(bankDetailsResult.getString(9));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query = // " group by member.MEM_ZONE_NAME"+
				 * "select member.MEM_BANK_NAME,member.MEM_ZONE_NAME, DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME),vw.CGPAN,"
				 * +
				 * " decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT),s.SSI_UNIT_NAME,S.SSI_TYPE_OF_ACTIVITY,app.APP_REF_NO,app.mem_bnk_Id||app.mem_zne_id||app.mem_brn_id  "
				 * + " from member_info member, application_detail" +
				 * " app, view_appl_amounts vw,ssi_detail s where app.CGPAN = vw.CGPAN and app.ssi_reference_number=s.ssi_reference_number and app_status <> 'RE' and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and app.scm_id='3' and "
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? "
				 * + " order by member.MEM_ZONE_NAME";
				 */

				String query =
				// " group by member.MEM_ZONE_NAME"+
				"select member.MEM_BANK_NAME,member.MEM_ZONE_NAME, DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME),app.CGPAN,"
						+ " decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT),s.SSI_UNIT_NAME,S.SSI_TYPE_OF_ACTIVITY,app.APP_REF_NO,app.mem_bnk_Id||app.mem_zne_id||app.mem_brn_id  "
						+ " from member_info member, application_detail"
						+ " app, promoter_detail p, ssi_detail s where  app.ssi_reference_number=p.ssi_reference_number and app.ssi_reference_number=s.ssi_reference_number and app_status <> 'RE' and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and app.scm_id='3' and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? "
						+ " order by member.MEM_ZONE_NAME";
				System.out.println("query===2" + query);
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setBankName(bankDetailsResult.getString(1));
					bankDetailsList.setZoneName(bankDetailsResult.getString(2));
					bankDetailsList.setName(bankDetailsResult.getString(3));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(5));
					bankDetailsList.setCgpan(bankDetailsResult.getString(4));
					bankDetailsList.setSsiName(bankDetailsResult.getString(6));
					bankDetailsList.setType(bankDetailsResult.getString(7));
					bankDetailsList.setAppRefNo(bankDetailsResult.getString(8));
					bankDetailsList.setMemberId(bankDetailsResult.getString(9));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}

		else if ((id.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query = // " group by member.MEM_ZONE_NAME"+
				 * "select member.MEM_BANK_NAME,member.MEM_ZONE_NAME, DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME),vw.CGPAN,"
				 * +
				 * " decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT),s.SSI_UNIT_NAME,S.SSI_TYPE_OF_ACTIVITY,app.APP_REF_NO,app.mem_bnk_Id||app.mem_zne_id||app.mem_brn_id  "
				 * + " from member_info member, application_detail" +
				 * " app, view_appl_amounts vw,ssi_detail s where app.CGPAN = vw.CGPAN and app.ssi_reference_number=s.ssi_reference_number and app_status <> 'RE' and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and app.scm_id='3' and "
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_GUAR_START_DATE_TIME) <=? " +
				 * " order by member.MEM_ZONE_NAME";
				 */

				String query =
				// " group by member.MEM_ZONE_NAME"+
				"select member.MEM_BANK_NAME,member.MEM_ZONE_NAME, DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME),app.CGPAN,"
						+ " decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT),s.SSI_UNIT_NAME,S.SSI_TYPE_OF_ACTIVITY,app.APP_REF_NO,app.mem_bnk_Id||app.mem_zne_id||app.mem_brn_id  "
						+ " from member_info member, application_detail"
						+ " app, promoter_detail p,ssi_detail s where  app.ssi_reference_number=p.ssi_reference_number and app.ssi_reference_number=s.ssi_reference_number and app_status <> 'RE' and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and app.scm_id='3' and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) <=? "
						+ " order by member.MEM_ZONE_NAME";
				System.out.println("query===3" + query);
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setBankName(bankDetailsResult.getString(1));
					bankDetailsList.setZoneName(bankDetailsResult.getString(2));
					bankDetailsList.setName(bankDetailsResult.getString(3));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(5));
					bankDetailsList.setCgpan(bankDetailsResult.getString(4));
					bankDetailsList.setSsiName(bankDetailsResult.getString(6));
					bankDetailsList.setType(bankDetailsResult.getString(7));
					bankDetailsList.setAppRefNo(bankDetailsResult.getString(8));
					bankDetailsList.setMemberId(bankDetailsResult.getString(9));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}
		Log.log(Log.INFO, "ReportDAO", "zoneDetails", "Exited");
		return bankDetailsArray;
	}

	/**
	 * 
	 * @param zone
	 * @param id
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getGFAllocatedReportDetails(String paymentId)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "getGFAllocatedReportDetails",
				"Entered");
		PreparedStatement bankDetailsStmt = null;
		ArrayList rpDetailsArray = new ArrayList();
		ResultSet bankDetailsResult = null;
		Connection connection = DBConnection.getConnection();
		try {
			String query = "select D.DAN_ID,D.CGPAN,D.DCI_AMOUNT_RAISED,"
					+ " P.PAY_ID,P.PAY_INSTRUMENT_NUMBER, "
					+ "M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,S.SSI_UNIT_NAME "
					+ " from dan_cgpan_info_temp d,payment_detail_temp p,member_info m,APPLICATION_DETAIL A,SSI_DETAIL S where d.pay_id=p.pay_id "
					+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER AND A.CGPAN=D.CGPAN "
					+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID AND D.DCI_ALLOCATION_FLAG='Y' and d.pay_id = ? ";
			bankDetailsStmt = connection.prepareStatement(query);
			bankDetailsStmt.setString(1, paymentId); // Set zone parameter
			bankDetailsResult = bankDetailsStmt.executeQuery();

			while (bankDetailsResult.next()) {
				// Instantiate a GeneralReport value object
				PaymentReport bankDetailsList = new PaymentReport();
				bankDetailsList.setDanId(bankDetailsResult.getString(1));
				bankDetailsList.setCgpan(bankDetailsResult.getString(2));
				bankDetailsList.setAmountPaid(bankDetailsResult.getDouble(3));
				bankDetailsList.setPayId(bankDetailsResult.getString(4));
				bankDetailsList.setInstrumentNumber(bankDetailsResult
						.getString(5));
				bankDetailsList.setMemberId(bankDetailsResult.getString(6));
				bankDetailsList.setName(bankDetailsResult.getString(7));
				rpDetailsArray.add(bankDetailsList);
			}
			bankDetailsResult.close();
			bankDetailsResult = null;
			bankDetailsStmt.close();
			bankDetailsStmt = null;

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}

		Log.log(Log.INFO, "ReportDAO", "zoneDetails", "Exited");
		return rpDetailsArray;
	}

	/**
	 * 
	 * @param payInstrumentNo
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getPayInstrumentDetails(String payInstrumentNo,
			String memberId) throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "getPayInstrumentDetails", "Entered");
		PreparedStatement bankDetailsStmt = null;
		ArrayList rpDetailsArray = new ArrayList();
		ResultSet bankDetailsResult = null;
		Connection connection = DBConnection.getConnection();
		try {
			String query = "select D.DAN_ID,D.CGPAN,D.DCI_AMOUNT_RAISED,"
					+ " P.PAY_ID,P.PAY_INSTRUMENT_NUMBER, "
					+ "M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,S.SSI_UNIT_NAME,d.DCI_BASE_AMT,d.IGST_AMT,d.CGST_AMT,d.SGST_AMT "
					+ " from dan_cgpan_info d,payment_detail p,member_info m,APPLICATION_DETAIL A,SSI_DETAIL S where d.pay_id=p.pay_id "
					+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER AND A.CGPAN=D.CGPAN "
					+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID AND D.DCI_ALLOCATION_FLAG='Y' and p.pay_instrument_number = ? and M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID = ? ";
			
			System.out.println("query=="+query);
			bankDetailsStmt = connection.prepareStatement(query);
			bankDetailsStmt.setString(1, payInstrumentNo); // Set PAY INSTRUMENT
															// parameter
			bankDetailsStmt.setString(2, memberId);
			bankDetailsResult = bankDetailsStmt.executeQuery();

			while (bankDetailsResult.next()) {
				// Instantiate a GeneralReport value object
				PaymentReport bankDetailsList = new PaymentReport();
				bankDetailsList.setDanId(bankDetailsResult.getString(1));
				bankDetailsList.setCgpan(bankDetailsResult.getString(2));
				bankDetailsList.setAmountPaid(bankDetailsResult.getDouble(3));
				bankDetailsList.setPayId(bankDetailsResult.getString(4));
				bankDetailsList.setInstrumentNumber(bankDetailsResult
						.getString(5));
				bankDetailsList.setMemberId(bankDetailsResult.getString(6));
				bankDetailsList.setName(bankDetailsResult.getString(7));
				bankDetailsList.setBaseAmount(bankDetailsResult.getDouble(8));
                bankDetailsList.setIgstamt(bankDetailsResult.getString(9));
                bankDetailsList.setCgstamt(bankDetailsResult.getString(10));
                bankDetailsList.setSgstamt(bankDetailsResult.getString(11));
				rpDetailsArray.add(bankDetailsList);
				
			}
			bankDetailsResult.close();
			bankDetailsResult = null;
			bankDetailsStmt.close();
			bankDetailsStmt = null;

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}

		Log.log(Log.INFO, "ReportDAO", "getPayInstrumentDetails", "Exited");
		return rpDetailsArray;
	}

	
	/*public ArrayList getPayInstrumentDetailsNew(String payInstrumentNo,
			String memberId) throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "getPayInstrumentDetails", "Entered");
		PreparedStatement bankDetailsStmt = null;
		ArrayList rpDetailsArray = new ArrayList();
		ResultSet bankDetailsResult = null;
		Connection connection = DBConnection.getConnection();
		try {
			String query = "select D.DAN_ID,D.CGPAN,D.DCI_AMOUNT_RAISED,"
					+ " P.PAY_ID,P.PAY_INSTRUMENT_NUMBER, "
					+ "M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,S.SSI_UNIT_NAME "
					+ " from dan_cgpan_info d,payment_detail p,member_info m,APPLICATION_DETAIL A,SSI_DETAIL S where d.pay_id=p.pay_id "
					+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER AND A.CGPAN=D.CGPAN "
					+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID AND D.DCI_ALLOCATION_FLAG='Y' and p.pay_instrument_number = ? and M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID = ? ";
			
			System.out.println("query=="+query);
			bankDetailsStmt = connection.prepareStatement(query);
			bankDetailsStmt.setString(1, payInstrumentNo); // Set PAY INSTRUMENT
															// parameter
			bankDetailsStmt.setString(2, memberId);
			bankDetailsResult = bankDetailsStmt.executeQuery();

			while (bankDetailsResult.next()) {
				// Instantiate a GeneralReport value object
				PaymentReport bankDetailsList = new PaymentReport();
				bankDetailsList.setDanId(bankDetailsResult.getString(1));
				bankDetailsList.setCgpan(bankDetailsResult.getString(2));
				bankDetailsList.setAmountPaid(bankDetailsResult.getDouble(3));
				bankDetailsList.setPayId(bankDetailsResult.getString(4));
				bankDetailsList.setInstrumentNumber(bankDetailsResult
						.getString(5));
				bankDetailsList.setMemberId(bankDetailsResult.getString(6));
				bankDetailsList.setName(bankDetailsResult.getString(7));
				rpDetailsArray.add(bankDetailsList);
			}
			bankDetailsResult.close();
			bankDetailsResult = null;
			bankDetailsStmt.close();
			bankDetailsStmt = null;

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}

		Log.log(Log.INFO, "ReportDAO", "getPayInstrumentDetails", "Exited");
		return rpDetailsArray;
	}*/
	/**
	 * 
	 * @param paymentId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getASFAllocatedReportDetails(String paymentId)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "getASFAllocatedReportDetails",
				"Entered");
		PreparedStatement bankDetailsStmt = null;
		ArrayList rpDetailsArray = new ArrayList();
		ResultSet bankDetailsResult = null;
		Connection connection = DBConnection.getConnection();
		try { /* query modification@sudeep.dhiman to get resultset in sorted order */
			String query = "select D.DAN_ID,D.CGPAN,D.DCI_AMOUNT_RAISED,"
					+ " P.PAY_ID,P.PAY_INSTRUMENT_NUMBER, "
					+ "M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID,S.SSI_UNIT_NAME "
					+ " from dan_cgpan_info_temp d,payment_detail_temp p,member_info m,APPLICATION_DETAIL A,SSI_DETAIL S where d.pay_id=p.pay_id "
					+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER AND A.CGPAN=D.CGPAN "
					+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID AND D.DCI_ALLOCATION_FLAG='Y' and d.pay_id = ? ";
			bankDetailsStmt = connection.prepareStatement(query);
			bankDetailsStmt.setString(1, paymentId); // Set zone parameter
			bankDetailsResult = bankDetailsStmt.executeQuery();

			while (bankDetailsResult.next()) {
				// Instantiate a GeneralReport value object
				PaymentReport bankDetailsList = new PaymentReport();
				bankDetailsList.setDanId(bankDetailsResult.getString(1));
				bankDetailsList.setCgpan(bankDetailsResult.getString(2));
				bankDetailsList.setAmountPaid(bankDetailsResult.getDouble(3));
				bankDetailsList.setPayId(bankDetailsResult.getString(4));
				bankDetailsList.setInstrumentNumber(bankDetailsResult
						.getString(5));
				bankDetailsList.setMemberId(bankDetailsResult.getString(6));
				bankDetailsList.setName(bankDetailsResult.getString(7));
				rpDetailsArray.add(bankDetailsList);
			}
			bankDetailsResult.close();
			bankDetailsResult = null;
			bankDetailsStmt.close();
			bankDetailsStmt = null;

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}

		Log.log(Log.INFO, "ReportDAO", "zoneDetails", "Exited");
		return rpDetailsArray;
	}

	public ArrayList ZoneDetailsForBank(java.sql.Date startDate,
			java.sql.Date endDate, String id, String zone)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "ZoneDetailsForBank", "Entered");
		PreparedStatement bankDetailsStmt = null;
		ArrayList bankDetailsArray = new ArrayList();
		ResultSet bankDetailsResult;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try {
				String query = "select member.MEM_ZONE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from member_info member, application_detail app,"
						+ " view_appl_amounts vw where app.CGPAN = vw.CGPAN and"
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ "LTRIM(RTRIM(UPPER(member.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?))) "
						+ "and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? group by member.MEM_ZONE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("yes")) && startDate == null) {
			try {
				String query = "select member.MEM_ZONE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from member_info member, application_detail app,"
						+ " view_appl_amounts vw where app.CGPAN = vw.CGPAN and"
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ "LTRIM(RTRIM(UPPER(member.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?))) "
						+ "and trunc(app.APP_APPROVED_DATE_TIME) <= ? group by member.MEM_ZONE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try {
				String query = "select member.MEM_ZONE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from member_info member, application_detail app, "
						+ " view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? "
						+ " group by member.MEM_ZONE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}

		else if ((id.equals("no")) && startDate == null) {
			try {
				String query = "select member.MEM_ZONE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from member_info member, application_detail app, "
						+ " view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) <= ? "
						+ " group by member.MEM_ZONE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}
		Log.log(Log.INFO, "ReportDAO", "ZoneDetailsForBank", "Exited");
		return bankDetailsArray;
	}

	public ArrayList ZoneDetailsForZone(java.sql.Date startDate,
			java.sql.Date endDate, String id, String zone)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "ZoneDetailsForZone", "Entered");
		PreparedStatement bankDetailsStmt = null;
		ArrayList bankDetailsArray = new ArrayList();
		ResultSet bankDetailsResult;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try {
				String query = "select member.MEM_ZONE_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from member_info member, application_detail app,"
						+ " view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID "
						+ " and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID))) = "
						+ " LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? "
						+ " group by member.MEM_ZONE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("yes")) && startDate == null) {
			try {
				String query = "select member.MEM_ZONE_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from member_info member, application_detail app,"
						+ " view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID "
						+ " and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID))) = "
						+ " LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_APPROVED_DATE_TIME) <= ? "
						+ " group by member.MEM_ZONE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try {
				String query = "select member.MEM_ZONE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from member_info member, application_detail app, "
						+ " view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID "
						+ " and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID))) = "
						+ " LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? "
						+ " group by member.MEM_ZONE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}

		else if ((id.equals("no")) && startDate == null) {
			try {
				String query = "select member.MEM_ZONE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from member_info member, application_detail app, "
						+ " view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID "
						+ " and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID))) = "
						+ " LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME) <= ? "
						+ " group by member.MEM_ZONE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}
		Log.log(Log.INFO, "ReportDAO", "ZoneDetailsForZone", "Exited");
		return bankDetailsArray;
	}

	public ArrayList ZoneDetailsForBranch(java.sql.Date startDate,
			java.sql.Date endDate, String id, String zone)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "ZoneDetailsForBranch", "Entered");
		PreparedStatement bankDetailsStmt = null;
		ArrayList bankDetailsArray = new ArrayList();
		ResultSet bankDetailsResult;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try {
				String query = " select member.MEM_ZONE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ "  from member_info member, "
						+ " application_detail app, view_appl_amounts vw  where app.CGPAN = "
						+ " vw.CGPAN and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID  = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID))) "
						+ " =  LTRIM(RTRIM(UPPER(?))) and  trunc(app.APP_APPROVED_DATE_TIME) between ? and ? "
						+ " group by member.MEM_ZONE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("yes")) && startDate == null) {
			try {
				String query = " select member.MEM_ZONE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ "  from member_info member, "
						+ " application_detail app, view_appl_amounts vw  where app.CGPAN = "
						+ "  vw.CGPAN and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID  = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID))) "
						+ " =  LTRIM(RTRIM(UPPER(?))) and  trunc(app.APP_APPROVED_DATE_TIME) <= ? "
						+ " group by member.MEM_ZONE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try {
				String query = "select member.MEM_ZONE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from member_info member, application_detail app, "
						+ " view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID "
						+ " and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID))) "
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? "
						+ " group by member.MEM_ZONE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}

		else if ((id.equals("no")) && startDate == null) {
			try {
				String query = "select member.MEM_ZONE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from member_info member, application_detail app, "
						+ " view_appl_amounts vw where app.CGPAN = vw.CGPAN and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID "
						+ "and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID))) "
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME) <= ? "
						+ " group by member.MEM_ZONE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, zone); // Set zone parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}
		Log.log(Log.INFO, "ReportDAO", "ZoneDetailsForBranch", "Exited");
		return bankDetailsArray;
	}

	/*
	 * ##########################################################################
	 * ##################
	 */

	public ArrayList BranchApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate, String guarantee, String memberId)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "BranchApplicationDetails", "Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		// System.out.println("@@@@@@@@@@@@@@@2 Hello Calling from hell @@@@@@@@@@2");
		if ((guarantee.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select member.MEM_BANK_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, application_detail "
						+ " app, member_info member where app.CGPAN=vw.CGPAN and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) <= ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " group by member.mem_bank_name"
						+ " order by member.MEM_BANK_NAME";
				// System.out.println("the query is =========="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((guarantee.equals("yes")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select member.MEM_BANK_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN=vw.CGPAN "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID))) "
						+ " =LTRIM(RTRIM(UPPER(?)))"
						+ " group by member.mem_bank_name"
						+ " order by member.MEM_BANK_NAME";

				// System.out.println("the query is :::::"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select member.MEM_BANK_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN = vw.CGPAN "
						+ " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID ||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) <= ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ " group by member.mem_bank_name"
						+ " order by member.MEM_BANK_NAME";
				// System.out.println("the query is #################"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select member.MEM_BANK_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN = vw.CGPAN "
						+ " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID ||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) between ? and  ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ " group by member.mem_bank_name"
						+ " order by member.MEM_BANK_NAME";
				// System.out.println("the query is >>>>>>>>>>>>"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			}

			catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "BranchApplicationDetails", "Exited");
		return mliApplicationArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param memberId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList BranchClaimApplicationDetailsNew(java.sql.Date startDate,
			java.sql.Date endDate, String memberId) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "BranchClaimApplicationDetails",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();
		if (startDate == null) {
			try {
				String query = " SELECT BANK,SUM(APPLIEDCASES) APPLIEDCASES,SUM(APPLIEDAMT) APPLIEDAMT, "
						+ " SUM(SETTLEDCASES) SETTLEDCASES,SUM(SETTLEDAMT) SETTLEDAMT FROM "
						+ " ( "
						+ " SELECT M.MEM_BANK_NAME BANK,COUNT(D.CGPAN) APPLIEDCASES,SUM(CAA_APPLIED_AMOUNT) APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D "
						+ " WHERE C.BID=S.BID  "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_DATE) <=? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,COUNT(D.CGPAN) APPLIEDCASES,SUM(CAA_APPLIED_AMOUNT) APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL C,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D "
						+ "  WHERE C.BID=S.BID  "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_DATE)  <=? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,0 APPLIEDCASES,0 APPLIEDAMT,  "
						+ " COUNT(A.CGPAN) SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M  "
						+ " WHERE CGCLAN IS NOT NULL  "
						+ " AND C.BID=S.BID  "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_APPROVED_DT)  <=? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL  "
						+ " SELECT M.MEM_BANK_NAME BANK,0 APPLIEDCASES,0 APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,SUM(CLM_APPROVED_AMT)  SETTLEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M  "
						+ " WHERE CGCLAN IS NOT NULL  "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_APPROVED_DT)  <=? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " ) GROUP BY BANK "
						+ " ORDER BY 1 ";
				 System.out.println("the query is =========="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(3, endDate); // Set endDate parameter
				mliApplicationStmt.setString(4, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationStmt.setString(6, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(7, endDate); // Set endDate parameter
				mliApplicationStmt.setString(8, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if (startDate != null) {
			try {
				String query = " SELECT BANK,SUM(APPLIEDCASES) APPLIEDCASES,SUM(APPLIEDAMT) APPLIEDAMT, "
						+ " SUM(SETTLEDCASES) SETTLEDCASES,SUM(SETTLEDAMT) SETTLEDAMT FROM "
						+ " ( "
						+ " SELECT M.MEM_BANK_NAME BANK,COUNT(D.CGPAN) APPLIEDCASES,SUM(CAA_APPLIED_AMOUNT) APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D "
						+ " WHERE C.BID=S.BID  "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_DATE) BETWEEN ? AND ? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,COUNT(D.CGPAN) APPLIEDCASES,SUM(CAA_APPLIED_AMOUNT) APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D "
						+ "  WHERE C.BID=S.BID  "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_DATE)  BETWEEN ? AND ? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,0 APPLIEDCASES,0 APPLIEDAMT,  "
						+ " COUNT(A.CGPAN) SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M  "
						+ " WHERE CGCLAN IS NOT NULL  "
						+ " AND C.BID=S.BID  "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_APPROVED_DT)  BETWEEN ? AND ? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL  "
						+ " SELECT M.MEM_BANK_NAME BANK,0 APPLIEDCASES,0 APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,SUM(CLM_APPROVED_AMT)  SETTLEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M  "
						+ " WHERE CGCLAN IS NOT NULL  "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_APPROVED_DT)  BETWEEN ? AND ? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " ) GROUP BY BANK "
						+ " ORDER BY 1 ";

				 System.out.println("the query is :::::1"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(4, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationStmt.setString(6, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(7, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(8, endDate); // Set endDate parameter
				mliApplicationStmt.setString(9, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(10, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(11, endDate); // Set endDate
															// parameter
				mliApplicationStmt.setString(12, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "BranchClaimApplicationDetails",
				"Exited");
		return mliApplicationArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param memberId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList StateBranchClaimApplicationDetails(
			java.sql.Date startDate, java.sql.Date endDate, String memberId)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "StateBranchClaimApplicationDetails",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();
		if (startDate == null) {
			try {
				String query = " SELECT STATE,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM "
						+ " ( "
						+ " SELECT S.SSI_STATE_NAME STATE,COUNT(A.CGPAN) CASES,0 APPROVEDAMT, "
						+ " 0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S , "
						+ " MEMBER_INFO M "
						+ " WHERE CGCLAN IS NOT NULL "
						+ " AND C.BID=S.BID "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " AND TRUNC(CLM_APPROVED_DT) <= ? "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY S.SSI_STATE_NAME "
						+ "  UNION ALL "
						+ " SELECT S.SSI_STATE_NAME STATE,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT, "
						+ "  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M,SSI_DETAIL S "
						+ "  WHERE CGCLAN IS NOT NULL AND C.BID=S.BID "
						+ "   AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ "  AND TRUNC(CLM_APPROVED_DT) <= ? "
						+ "  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID))) "
						+ "  = LTRIM(RTRIM(UPPER(?)))  "
						+ "   GROUP BY S.SSI_STATE_NAME "
						+ " UNION ALL "
						+ " SELECT S.SSI_STATE_NAME STATE,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES, "
						+ " SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT "
						+ " FROM APPLICATION_DETAIL A,MEMBER_INFO M,SSI_DETAIL S "
						+ " WHERE APP_STATUS <> 'RE' AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) <=? "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " GROUP BY S.SSI_STATE_NAME "
						+ " ) GROUP BY STATE "
						+ "  ORDER BY 1 ";
				 System.out.println("the query is =========="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(3, endDate); // Set endDate parameter
				mliApplicationStmt.setString(4, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationStmt.setString(6, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if (startDate != null) {
			try {
				String query = " SELECT STATE,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM "
						+ " ( "
						+ " SELECT S.SSI_STATE_NAME STATE,COUNT(A.CGPAN) CASES,0 APPROVEDAMT, "
						+ " 0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S , "
						+ " MEMBER_INFO M "
						+ " WHERE CGCLAN IS NOT NULL "
						+ " AND C.BID=S.BID "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY S.SSI_STATE_NAME "
						+ "  UNION ALL "
						+ " SELECT S.SSI_STATE_NAME STATE,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT, "
						+ "  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M,SSI_DETAIL S "
						+ "  WHERE CGCLAN IS NOT NULL AND C.BID=S.BID "
						+ "   AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ "  AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? "
						+ "  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID))) "
						+ "  = LTRIM(RTRIM(UPPER(?)))  "
						+ "   GROUP BY S.SSI_STATE_NAME "
						+ " UNION ALL "
						+ " SELECT S.SSI_STATE_NAME STATE,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES, "
						+ " SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT "
						+ " FROM APPLICATION_DETAIL A,MEMBER_INFO M,SSI_DETAIL S "
						+ " WHERE APP_STATUS <> 'RE' AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) BETWEEN ? AND ? "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " GROUP BY S.SSI_STATE_NAME "
						+ " ) GROUP BY STATE "
						+ "  ORDER BY 1 ";

				 System.out.println("the query is 1:::::"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(4, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationStmt.setString(6, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(7, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(8, endDate); // Set endDate parameter
				mliApplicationStmt.setString(9, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "StateBranchClaimApplicationDetails",
				"Exited");
		return mliApplicationArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param memberId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList SectorBranchClaimApplicationDetails(
			java.sql.Date startDate, java.sql.Date endDate, String memberId)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "SectorBranchClaimApplicationDetails",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();
		if (startDate == null) {
			try {
				String query = " SELECT SECTOR,SUM(CASES) CASES,SUM(APPROVEDAMT) APPROVEDAMT FROM  "
						+ "  (   "
						+ " SELECT  DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) SECTOR,  "
						+ " COUNT(A.CGPAN) CASES,0 APPROVEDAMT  "
						+ " FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S "
						+ " WHERE CGCLAN IS NOT NULL "
						+ " AND C.BID=S.BID "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND TRUNC(CLM_APPROVED_DT) <= ? "
						+ " AND LTRIM(RTRIM(UPPER(C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY  DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) "
						+ " UNION ALL "
						+ " SELECT DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) SECTOR, "
						+ " 0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT "
						+ " FROM CLAIM_DETAIL C,SSI_DETAIL S "
						+ " WHERE CGCLAN IS NOT NULL AND C.BID=S.BID "
						+ " AND TRUNC(CLM_APPROVED_DT) <= ? "
						+ " AND LTRIM(RTRIM(UPPER(C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) "
						+ " ) " + " GROUP BY SECTOR " + "ORDER BY 1";
				System.out.println("the query is 1@=========="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(3, endDate); // Set endDate parameter
				mliApplicationStmt.setString(4, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if (startDate != null) {
			try {
				String query = " SELECT SECTOR,SUM(CASES) CASES,SUM(APPROVEDAMT) APPROVEDAMT FROM  "
						+ "  (   "
						+ " SELECT  DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) SECTOR,  "
						+ " COUNT(A.CGPAN) CASES,0 APPROVEDAMT  "
						+ " FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S "
						+ " WHERE CGCLAN IS NOT NULL "
						+ " AND C.BID=S.BID "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? "
						+ " AND LTRIM(RTRIM(UPPER(C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY  DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) "
						+ " UNION ALL "
						+ " SELECT DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) SECTOR, "
						+ " 0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT "
						+ " FROM CLAIM_DETAIL C,SSI_DETAIL S "
						+ " WHERE CGCLAN IS NOT NULL AND C.BID=S.BID "
						+ " AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? "
						+ " AND LTRIM(RTRIM(UPPER(C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) "
						+ " ) " + " GROUP BY SECTOR " + "ORDER BY 1";

				 System.out.println("the query is@ :::::"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(4, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationStmt.setString(6, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "SectorBranchClaimApplicationDetails",
				"Exited");
		return mliApplicationArray;
	}

	/*
	 * ##########################################################################
	 * ##########################
	 */

	public ArrayList StateBranchApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate, String guarantee, String memberId)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "StateBranchApplicationDetails",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		// System.out.println("@@@@@@@@@@@@@@@2 Hello Calling from hell @@@@@@@@@@2");
		if ((guarantee.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select s.SSI_STATE_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, application_detail "
						+ " app, member_info member,SSI_DETAIL S where app.CGPAN=vw.CGPAN AND APP.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) <= ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " group by s.SSI_STATE_NAME"
						+ " order by s.SSI_STATE_NAME";
				// System.out.println("the query is =========="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((guarantee.equals("yes")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select s.SSI_STATE_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, application_detail "
						+ " app, member_info member,SSI_DETAIL S where app.CGPAN=vw.CGPAN AND APP.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " group by s.SSI_STATE_NAME"
						+ " order by s.SSI_STATE_NAME";

				// System.out.println("the query is :::::"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select s.SSI_STATE_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, application_detail "
						+ " app, member_info member,SSI_DETAIL S where app.CGPAN=vw.CGPAN AND APP.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) <= ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " group by s.SSI_STATE_NAME"
						+ " order by s.SSI_STATE_NAME";
				// System.out.println("the query is #################"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select s.SSI_STATE_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, application_detail "
						+ " app, member_info member,SSI_DETAIL S where app.CGPAN=vw.CGPAN AND APP.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " group by s.SSI_STATE_NAME"
						+ " order by s.SSI_STATE_NAME";
				// System.out.println("the query is >>>>>>>>>>>>"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			}

			catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "BranchApplicationDetails", "Exited");
		return mliApplicationArray;
	}

	public ArrayList ZoneApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate, String guarantee, String memberId)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "ZoneApplicationDetails", "Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult = null;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if ((guarantee.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select member.MEM_BANK_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN = vw.CGPAN "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) <= ? and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " group by member.mem_bank_name"
						+ " order by member.MEM_BANK_NAME";

				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((guarantee.equals("yes")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select member.MEM_BANK_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN = vw.CGPAN "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " group by member.mem_bank_name"
						+ " order by member.MEM_BANK_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set endDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select member.MEM_BANK_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN = "
						+ " vw.CGPAN and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) <= ? and  "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ " group by member.mem_bank_name"
						+ " order by member.MEM_BANK_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationStmt.setString(2, memberId);
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select member.MEM_BANK_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN = "
						+ " vw.CGPAN and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? and  "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?)))"
						+ " group by member.mem_bank_name"
						+ " order by member.MEM_BANK_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setString(3, memberId);
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "ZoneApplicationDetails", "Exited");
		return mliApplicationArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param guarantee
	 * @param memberId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList ZoneClaimApplicationDetailsNew(java.sql.Date startDate,
			java.sql.Date endDate, String memberId) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "ZoneClaimApplicationDetails", "Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult = null;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if (startDate == null) {
			try {
				String query = " SELECT BANK,SUM(APPLIEDCASES) APPLIEDCASES,SUM(APPLIEDAMT) APPLIEDAMT, "
						+ " SUM(SETTLEDCASES) SETTLEDCASES,SUM(SETTLEDAMT) SETTLEDAMT FROM "
						+ " ( "
						+ " SELECT M.MEM_BANK_NAME BANK,COUNT(D.CGPAN) APPLIEDCASES,SUM(CAA_APPLIED_AMOUNT) APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D "
						+ " WHERE C.BID=S.BID  "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_DATE) <=? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,COUNT(D.CGPAN) APPLIEDCASES,SUM(CAA_APPLIED_AMOUNT) APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL C,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D "
						+ "  WHERE C.BID=S.BID  "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_DATE)  <=? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,0 APPLIEDCASES,0 APPLIEDAMT,  "
						+ " COUNT(A.CGPAN) SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M  "
						+ " WHERE CGCLAN IS NOT NULL  "
						+ " AND C.BID=S.BID  "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_APPROVED_DT)  <=? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL  "
						+ " SELECT M.MEM_BANK_NAME BANK,0 APPLIEDCASES,0 APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,SUM(CLM_APPROVED_AMT)  SETTLEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M  "
						+ " WHERE CGCLAN IS NOT NULL  "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_APPROVED_DT)  <=? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " ) GROUP BY BANK "
						+ " ORDER BY 1 ";
				System.out.println("1query=="+query);

				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(3, endDate); // Set endDate parameter
				mliApplicationStmt.setString(4, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationStmt.setString(6, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(7, endDate); // Set endDate parameter
				mliApplicationStmt.setString(8, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if (startDate != null) {
			try {
				String query = " SELECT BANK,SUM(APPLIEDCASES) APPLIEDCASES,SUM(APPLIEDAMT) APPLIEDAMT, "
						+ " SUM(SETTLEDCASES) SETTLEDCASES,SUM(SETTLEDAMT) SETTLEDAMT FROM "
						+ " ( "
						+ " SELECT M.MEM_BANK_NAME BANK,COUNT(D.CGPAN) APPLIEDCASES,SUM(CAA_APPLIED_AMOUNT) APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D "
						+ " WHERE C.BID=S.BID  "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_DATE) BETWEEN ? AND ? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,COUNT(D.CGPAN) APPLIEDCASES,SUM(CAA_APPLIED_AMOUNT) APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL C,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D "
						+ "  WHERE C.BID=S.BID  "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_DATE)  BETWEEN ? AND ? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,0 APPLIEDCASES,0 APPLIEDAMT,  "
						+ " COUNT(A.CGPAN) SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M  "
						+ " WHERE CGCLAN IS NOT NULL  "
						+ " AND C.BID=S.BID  "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_APPROVED_DT)  BETWEEN ? AND ? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL  "
						+ " SELECT M.MEM_BANK_NAME BANK,0 APPLIEDCASES,0 APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,SUM(CLM_APPROVED_AMT)  SETTLEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M  "
						+ " WHERE CGCLAN IS NOT NULL  "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_APPROVED_DT)  BETWEEN ? AND ? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " ) GROUP BY BANK "
						+ " ORDER BY 1 ";
				System.out.println("2query=="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set endDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(4, startDate); // Set endDate
															// parameter
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationStmt.setString(6, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(7, startDate); // Set endDate
															// parameter
				mliApplicationStmt.setDate(8, endDate); // Set endDate parameter
				mliApplicationStmt.setString(9, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(10, startDate); // Set endDate
															// parameter
				mliApplicationStmt.setDate(11, endDate); // Set endDate
															// parameter
				mliApplicationStmt.setString(12, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "ZoneClaimApplicationDetails", "Exited");
		return mliApplicationArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param memberId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList StateZoneClaimApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate, String memberId) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "StateZoneClaimApplicationDetails",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult = null;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if (startDate == null) {
			try {
				String query = " SELECT STATE,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM "
						+ " ( "
						+ " SELECT S.SSI_STATE_NAME STATE,COUNT(A.CGPAN) CASES,0 APPROVEDAMT, "
						+ " 0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S , "
						+ " MEMBER_INFO M "
						+ " WHERE CGCLAN IS NOT NULL "
						+ " AND C.BID=S.BID "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " AND TRUNC(CLM_APPROVED_DT) <= ? "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY S.SSI_STATE_NAME "
						+ "  UNION ALL "
						+ " SELECT S.SSI_STATE_NAME STATE,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT, "
						+ "  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M,SSI_DETAIL S "
						+ "  WHERE CGCLAN IS NOT NULL AND C.BID=S.BID "
						+ "   AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ "  AND TRUNC(CLM_APPROVED_DT) <= ? "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ "   GROUP BY S.SSI_STATE_NAME "
						+ " UNION ALL "
						+ " SELECT S.SSI_STATE_NAME STATE,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES, "
						+ " SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT "
						+ " FROM APPLICATION_DETAIL A,MEMBER_INFO M,SSI_DETAIL S "
						+ " WHERE APP_STATUS <> 'RE' AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) <=? "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " GROUP BY S.SSI_STATE_NAME "
						+ " ) GROUP BY STATE "
						+ "  ORDER BY 1 ";

				 System.out.println("query==="+query);

				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(3, endDate); // Set endDate parameter
				mliApplicationStmt.setString(4, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationStmt.setString(6, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if (startDate != null) {
			try {
				String query = " SELECT STATE,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM "
						+ " ( "
						+ " SELECT S.SSI_STATE_NAME STATE,COUNT(A.CGPAN) CASES,0 APPROVEDAMT, "
						+ " 0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S , "
						+ " MEMBER_INFO M "
						+ " WHERE CGCLAN IS NOT NULL "
						+ " AND C.BID=S.BID "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY S.SSI_STATE_NAME "
						+ "  UNION ALL "
						+ " SELECT S.SSI_STATE_NAME STATE,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT, "
						+ "  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M,SSI_DETAIL S "
						+ "  WHERE CGCLAN IS NOT NULL AND C.BID=S.BID "
						+ "   AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ "  AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ "   GROUP BY S.SSI_STATE_NAME "
						+ " UNION ALL "
						+ " SELECT S.SSI_STATE_NAME STATE,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES, "
						+ " SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT "
						+ " FROM APPLICATION_DETAIL A,MEMBER_INFO M,SSI_DETAIL S "
						+ " WHERE APP_STATUS <> 'RE' AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) BETWEEN ? AND ? "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " GROUP BY S.SSI_STATE_NAME "
						+ " ) GROUP BY STATE "
						+ "  ORDER BY 1 ";

				 System.out.println("query 2==="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set endDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(4, startDate); // Set endDate
															// parameter
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationStmt.setString(6, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(7, startDate); // Set endDate
															// parameter
				mliApplicationStmt.setDate(8, endDate); // Set endDate parameter
				mliApplicationStmt.setString(9, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "StateZoneClaimApplicationDetails",
				"Exited");
		return mliApplicationArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param memberId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList SectorZoneClaimApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate, String memberId) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "SectorZoneClaimApplicationDetails",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult = null;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if (startDate == null) {
			try {
				String query = " SELECT SECTOR,SUM(CASES) CASES,SUM(APPROVEDAMT) APPROVEDAMT FROM  "
						+ "  (   "
						+ " SELECT  DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) SECTOR,  "
						+ " COUNT(A.CGPAN) CASES,0 APPROVEDAMT  "
						+ " FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S "
						+ " WHERE CGCLAN IS NOT NULL "
						+ " AND C.BID=S.BID "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND TRUNC(CLM_APPROVED_DT) <= ? "
						+ " AND LTRIM(RTRIM(UPPER(C.MEM_BNK_ID||C.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY  DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) "
						+ " UNION ALL "
						+ " SELECT DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) SECTOR, "
						+ " 0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT "
						+ " FROM CLAIM_DETAIL C,SSI_DETAIL S "
						+ " WHERE CGCLAN IS NOT NULL AND C.BID=S.BID "
						+ " AND TRUNC(CLM_APPROVED_DT) <= ? "
						+ " AND LTRIM(RTRIM(UPPER(C.MEM_BNK_ID||C.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) "
						+ " ) " + " GROUP BY SECTOR " + "ORDER BY 1";
				System.out.println("the query is 1$$=========="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(3, endDate); // Set endDate parameter
				mliApplicationStmt.setString(4, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if (startDate != null) {
			try {
				String query = " SELECT SECTOR,SUM(CASES) CASES,SUM(APPROVEDAMT) APPROVEDAMT FROM  "
						+ "  (   "
						+ " SELECT  DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) SECTOR,  "
						+ " COUNT(A.CGPAN) CASES,0 APPROVEDAMT  "
						+ " FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S "
						+ " WHERE CGCLAN IS NOT NULL "
						+ " AND C.BID=S.BID "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? "
						+ " AND LTRIM(RTRIM(UPPER(C.MEM_BNK_ID||C.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY  DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) "
						+ " UNION ALL "
						+ " SELECT DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) SECTOR, "
						+ " 0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT "
						+ " FROM CLAIM_DETAIL C,SSI_DETAIL S "
						+ " WHERE CGCLAN IS NOT NULL AND C.BID=S.BID "
						+ " AND TRUNC(CLM_APPROVED_DT)BETWEEN ? AND ? "
						+ " AND LTRIM(RTRIM(UPPER(C.MEM_BNK_ID||C.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) "
						+ " ) " + " GROUP BY SECTOR " + "ORDER BY 1";
				System.out.println("the query is 2$$=========="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set endDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(4, startDate); // Set endDate
															// parameter
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationStmt.setString(6, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "SectorZoneClaimApplicationDetails",
				"Exited");
		return mliApplicationArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param guarantee
	 * @param memberId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList StateZoneApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate, String guarantee, String memberId)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "StateZoneApplicationDetails", "Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult = null;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if ((guarantee.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select s.SSI_STATE_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member,SSI_DETAIL S where app.CGPAN = vw.CGPAN AND APP.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) <= ? and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " group by s.SSI_STATE_NAME"
						+ " order by s.SSI_STATE_NAME";

				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((guarantee.equals("yes")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select s.SSI_STATE_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member,SSI_DETAIL S where app.CGPAN = vw.CGPAN AND APP.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " group by s.SSI_STATE_NAME"
						+ " order by s.SSI_STATE_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set endDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select s.SSI_STATE_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member,SSI_DETAIL S where app.CGPAN = vw.CGPAN AND APP.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) <= ? and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " group by s.SSI_STATE_NAME"
						+ " order by s.SSI_STATE_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationStmt.setString(2, memberId);
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select s.SSI_STATE_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member,SSI_DETAIL S where app.CGPAN = vw.CGPAN AND APP.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " group by s.SSI_STATE_NAME"
						+ " order by s.SSI_STATE_NAME";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setString(3, memberId);
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "ZoneApplicationDetails", "Exited");
		return mliApplicationArray;
	}

	public ArrayList BankApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate, String guarantee, String memberId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "BankApplicationDetails", "Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if ((guarantee.equals("yes")) && startDate == null) {
			try {
				String query = "select member.MEM_BANK_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN=vw.CGPAN "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) <= ? "
						+ " and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by member.mem_bank_name ";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((guarantee.equals("yes")) && startDate != null) {
			try {
				String query = "select member.MEM_BANK_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN=vw.CGPAN "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) "
						+ " between ? and ? "
						+ " and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by member.mem_bank_name ";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate == null) {
			try {
				String query = "select member.MEM_BANK_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ "  from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN = "
						+ " vw.CGPAN and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) <= ? and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID))) "
						+ "= LTRIM(RTRIM(UPPER(?))) "
						+ " group by member.mem_bank_name";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate != null) {
			try {
				String query = "select member.MEM_BANK_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ "  from view_appl_amounts vw, "
						+ " application_detail app, member_info member where app.CGPAN = "
						+ " vw.CGPAN and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID  and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) between ? and  ? and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " group by member.mem_bank_name";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "BankApplicationDetails", "Exited");
		return mliApplicationArray;
	}

	/* added by sukumar@path on 08-01-2010 */

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList mliClaimApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {
		Log.log(4, "ReportsDAO", "mliClaimApplicationDetails", "Entered");
		PreparedStatement mliApplicationStmt = null;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();
		if (startDate == null)
			try {
				//String query = " SELECT BANK,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM  (  SELECT M.MEM_BANK_NAME BANK,COUNT(A.CGPAN) CASES,0 APPROVEDAMT,  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  MEMBER_INFO M  WHERE CGCLAN IS NOT NULL  AND C.BID=S.BID  AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  AND TRUNC(CLM_APPROVED_DT) <= ?  GROUP BY M.MEM_BANK_NAME   UNION ALL  SELECT M.MEM_BANK_NAME BANK,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT,   0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M   WHERE CGCLAN IS NOT NULL    AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID   AND TRUNC(CLM_APPROVED_DT) <= ?    GROUP BY M.MEM_BANK_NAME  UNION ALL  SELECT M.MEM_BANK_NAME BANK,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES,  SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT  FROM APPLICATION_DETAIL A,MEMBER_INFO M  WHERE APP_STATUS <> 'RE'  AND TRUNC(APP_GUAR_START_DATE_TIME) <=?  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  GROUP BY M.MEM_BANK_NAME  ) GROUP BY BANK   ORDER BY 1 ";
				String query="SELECT BANK," +
				"   SUM (CASES)," +
				" SUM (APPROVEDAMT)," +
				"SUM (GUARISSUEDCASES), " +
				"SUM (GUARISSUEDAMT) " +
				"FROM (  SELECT M.MEM_BANK_NAME BANK, " +
				"COUNT (A.CGPAN) CASES, " +
				"0 APPROVEDAMT, " +
				"0 GUARISSUEDCASES, " +
				"0 GUARISSUEDAMT " +
				"FROM CLAIM_DETAIL C," +
				"APPLICATION_DETAIL A," +
				"SSI_DETAIL S," +
                 " MEMBER_INFO M," +
                 "  CLAIM_APPLICATION_AMOUNT CAA" +
                 " WHERE     CGCLAN IS NOT NULL" +
                 " AND C.CLM_REF_NO = CAA.CLM_REF_NO" +
                 " AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER" +
                 " AND A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID =" +
                 "  M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID" +
                 " AND A.CGPAN = CAA.CGPAN" +
                 " AND TRUNC (CLM_APPROVED_DT) <=? "+
                 " GROUP BY M.MEM_BANK_NAME" +
                 " UNION ALL" +
                 " SELECT M.MEM_BANK_NAME BANK," +
                 " 0 CASES," +
                 //" --SUM ( CLM_APPROVED_AMT) APPROVEDAMT," +
                 " SUM (  NVL ( (SELECT MAX (CTD_TC_FIRST_INST_PAY_AMT) FROM CLAIM_TC_DETAIL TC WHERE TC.CGPAN = A.CGPAN), 0) " +
                 "     + NVL ( (SELECT MAX (WC.CWD_WC_FIRST_INST_PAY_AMT) FROM CLAIM_WC_DETAIL WC WHERE WC.CGPAN = A.CGPAN), 0)) AS APPROVEDAMT, " +
                 " 0 GUARISSUEDCASES," +
                 " 0 GUARISSUEDAMT " +
                 " FROM CLAIM_DETAIL C," +
                 " MEMBER_INFO M," +
                 " SSI_DETAIL S," +
                 " APPLICATION_DETAIL A," +
                 " CLAIM_APPLICATION_AMOUNT CAA" +
                 " WHERE     CGCLAN IS NOT NULL " +
                 " AND C.MEM_BNK_ID || C.MEM_ZNE_ID || C.MEM_BRN_ID = " +
                 "  M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID " +
                 " AND A.CGPAN = CAA.CGPAN " +
                 "  AND C.CLM_REF_NO = CAA.CLM_REF_NO " +
                 "  AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER " +
                 "  AND TRUNC (CLM_APPROVED_DT) <=? " +
                 " GROUP BY M.MEM_BANK_NAME " +
                 " UNION ALL " +
                 " SELECT M.MEM_BANK_NAME BANK, " +
                 " 0 CASES, " +
                 " 0 APPROVEDAMT, " +
                 " COUNT (CGPAN) GUARISSUEDCASES, " +
                 " SUM (DECODE (APP_REAPPROVE_AMOUNT, NULL, APP_APPROVED_AMOUNT, APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT  " +
                 " FROM APPLICATION_DETAIL A, MEMBER_INFO M " +
                 " WHERE     APP_STATUS <> 'RE' " +
                 " AND TRUNC (APP_GUAR_START_DATE_TIME) <=?   " +
                 " AND A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID = M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID  " +
                 " GROUP BY M.MEM_BANK_NAME) " +
                 " GROUP BY BANK " +
                 " ORDER BY 1"; 
				System.out.println("query1--"+query);
				
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setDate(3, endDate);
				ResultSet mliApplicationResult;
				GeneralReport mliApplicationReport;
				for (mliApplicationResult = mliApplicationStmt.executeQuery(); mliApplicationResult
						.next(); mliApplicationArray.add(mliApplicationReport)) {
					mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
				}

				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		if (startDate != null)
			try {
				//String query = " SELECT BANK,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM  (  SELECT M.MEM_BANK_NAME BANK,COUNT(A.CGPAN) CASES,0 APPROVEDAMT,  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  MEMBER_INFO M  WHERE CGCLAN IS NOT NULL  AND C.BID=S.BID  AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ?  GROUP BY M.MEM_BANK_NAME   UNION ALL  SELECT M.MEM_BANK_NAME BANK,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT,   0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M   WHERE CGCLAN IS NOT NULL    AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID   AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ?    GROUP BY M.MEM_BANK_NAME  UNION ALL  SELECT M.MEM_BANK_NAME BANK,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES,  SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT  FROM APPLICATION_DETAIL A,MEMBER_INFO M  WHERE APP_STATUS <> 'RE'  AND TRUNC(APP_GUAR_START_DATE_TIME) BETWEEN ? AND ?  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  GROUP BY M.MEM_BANK_NAME  ) GROUP BY BANK   ORDER BY 1 ";

				
				
				String query = "SELECT BANK," +
						"   SUM (CASES)," +
						" SUM (APPROVEDAMT)," +
						"SUM (GUARISSUEDCASES), " +
						"SUM (GUARISSUEDAMT) " +
						"FROM (  SELECT M.MEM_BANK_NAME BANK, " +
						"COUNT (A.CGPAN) CASES, " +
						"0 APPROVEDAMT, " +
						"0 GUARISSUEDCASES, " +
						"0 GUARISSUEDAMT " +
						"FROM CLAIM_DETAIL C," +
						"APPLICATION_DETAIL A," +
						"SSI_DETAIL S," +
		                 " MEMBER_INFO M," +
		                 "  CLAIM_APPLICATION_AMOUNT CAA" +
		                 " WHERE     CGCLAN IS NOT NULL" +
		                 " AND C.CLM_REF_NO = CAA.CLM_REF_NO" +
		                 " AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER" +
		                 " AND A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID =" +
		                 "  M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID" +
		                 " AND A.CGPAN = CAA.CGPAN" +
		                 " AND TRUNC (CLM_APPROVED_DT) BETWEEN ? " +
		                 "                                AND ? " +
		                 " GROUP BY M.MEM_BANK_NAME" +
		                 " UNION ALL" +
		                 " SELECT M.MEM_BANK_NAME BANK," +
		                 " 0 CASES," +
		                 //" --SUM ( CLM_APPROVED_AMT) APPROVEDAMT," +
		                 " SUM (  NVL ( (SELECT MAX (CTD_TC_FIRST_INST_PAY_AMT) FROM CLAIM_TC_DETAIL TC WHERE TC.CGPAN = A.CGPAN), 0) " +
		                 "     + NVL ( (SELECT MAX (WC.CWD_WC_FIRST_INST_PAY_AMT) FROM CLAIM_WC_DETAIL WC WHERE WC.CGPAN = A.CGPAN), 0)) AS APPROVEDAMT, " +
		                 " 0 GUARISSUEDCASES," +
		                 " 0 GUARISSUEDAMT " +
		                 " FROM CLAIM_DETAIL C," +
		                 " MEMBER_INFO M," +
		                 " SSI_DETAIL S," +
		                 " APPLICATION_DETAIL A," +
		                 " CLAIM_APPLICATION_AMOUNT CAA" +
		                 " WHERE     CGCLAN IS NOT NULL " +
		                 " AND C.MEM_BNK_ID || C.MEM_ZNE_ID || C.MEM_BRN_ID = " +
		                 "  M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID " +
		                 " AND A.CGPAN = CAA.CGPAN " +
		                 "  AND C.CLM_REF_NO = CAA.CLM_REF_NO " +
		                 "  AND A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER " +
		                 "  AND TRUNC (CLM_APPROVED_DT) BETWEEN ? " +
		                 "                                  AND ? " +
		                 " GROUP BY M.MEM_BANK_NAME " +
		                 " UNION ALL " +
		                 " SELECT M.MEM_BANK_NAME BANK, " +
		                 " 0 CASES, " +
		                 " 0 APPROVEDAMT, " +
		                 " COUNT (CGPAN) GUARISSUEDCASES, " +
		                 " SUM (DECODE (APP_REAPPROVE_AMOUNT, NULL, APP_APPROVED_AMOUNT, APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT  " +
		                 " FROM APPLICATION_DETAIL A, MEMBER_INFO M " +
		                 " WHERE     APP_STATUS <> 'RE' " +
		                 " AND TRUNC (APP_GUAR_START_DATE_TIME) BETWEEN ? AND ?  " +
		                 " AND A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID = M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID  " +
		                 " GROUP BY M.MEM_BANK_NAME) " +
		                 " GROUP BY BANK " +
		                 " ORDER BY 1"; 
				System.out.println("query2--"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setDate(3, startDate);
				mliApplicationStmt.setDate(4, endDate);
				mliApplicationStmt.setDate(5, startDate);
				mliApplicationStmt.setDate(6, endDate);
				ResultSet mliApplicationResult;
				GeneralReport mliApplicationReport;
				for (mliApplicationResult = mliApplicationStmt.executeQuery(); mliApplicationResult
						.next(); mliApplicationArray.add(mliApplicationReport)) {
					mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
				}

				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		Log.log(4, "ReportsDAO", "mliClaimApplicationDetails", "Exited");
		return mliApplicationArray;
	}

	/**
	 * 
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList mliWiseClaimSummaryReportDetails(java.sql.Date endDate,
			String memberID) throws DatabaseException {
		Log.log(4, "ReportsDAO", "mliWiseClaimSummaryReportDetails", "Entered");
		PreparedStatement mliApplicationStmt = null;
		Connection connection = DBConnection.getConnection();
		ArrayList mliwiseClaimSummaryDetails = new ArrayList();

		String id = "";
		if (!(memberID == null || memberID.equals(""))) {
			String bankId = memberID.substring(0, 4);
			String zoneId = memberID.substring(4, 8);
			String branchId = memberID.substring(8, 12);

			if (!(branchId.equals("0000"))) {
				id = bankId + zoneId + branchId;
			} else if (!(zoneId.equals("0000"))) {
				id = bankId + zoneId + "0000";
			} else {
				id = bankId;
			}
		}
		// System.out.println("id:88888888888888888" + id);

		try {
			String query = " SELECT BANK,SUM(RECEIVEDCASES) RECEIVEDCASES,ROUND(SUM(RECEIVEDAMT)/100000,3) RECEIVEDAMT, "
					+ " SUM(SETTLEDCASES) SETTLEDCASES, "
					+ " ROUND(SUM(SETTLEDAMT)/100000,3)  SETTLEDAMT,SUM(FWCASES) FWCASES, "
					+ " ROUND(SUM(FWAMT)/100000,3) FWAMT,SUM(TCCASES) TCCASES,ROUND(SUM(TCAMT)/100000,3) TCAMT, "
					+ " SUM(TRCASES) TRCASES,ROUND(SUM(TRAMT)/100000,3) TRAMT, "
					+ " SUM(REJECTEDCASES) REJECTEDCASES,ROUND(SUM(REJECTEDAMT)/100000,3) REJECTEDAMT, "
					+ " SUM(NEWCASES) NEWCASES,ROUND(SUM(NEWAMT)/100000,3) NEWAMT,SUM(WDCASES) WDCASES,ROUND(SUM(WDAMT)/100000,3) WDAMT "
					+ "  FROM "
					+ " (		"
					+ " SELECT S.SSI_INDUSTRY_SECTOR SECTOR,S.SSI_STATE_NAME STATE,M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,COUNT(UNIQUE C.CLM_REF_NO) RECEIVEDCASES, "
					+ " SUM(CAA_APPLIED_AMOUNT) RECEIVEDAMT, "
					+ " 0 SETTLEDCASES,0 SETTLEDAMT, "
					+ " 0 FWCASES,0 FWAMT,0 TCCASES, "
					+ " 0 TCAMT,0 TRCASES,0 TRAMT,0 REJECTEDCASES,0 REJECTEDAMT,0 NEWCASES,0 NEWAMT,0 WDCASES,0 WDAMT "
					+ "  FROM CLAIM_DETAIL_TEMP C,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D,SSI_DETAIL S "
					+ " WHERE C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
					+ " AND TRUNC(CLM_DATE) <= ?	  "
					+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
					+ " AND C.BID=S.BID AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID LIKE NVL('"
					+ id
					+ "%"
					+ "',M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID) "
					+ " GROUP BY S.SSI_INDUSTRY_SECTOR,S.SSI_STATE_NAME,M.MEM_BANK_NAME,M.MEM_ZONE_NAME "
					+ " UNION ALL "
					+ " SELECT S.SSI_INDUSTRY_SECTOR SECTOR,S.SSI_STATE_NAME STATE,M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,COUNT(UNIQUE C.CLM_REF_NO) RECEIVEDCASES, "
					+ " SUM(CAA_APPLIED_AMOUNT) RECEIVEDAMT,0 SETTLEDCASES,0 SETTLEDAMT, "
					+ " 0 FWCASES,0 FWAMT,0 TCCASES, "
					+ " 0 TCAMT,0 TRCASES,0 TRAMT,0 REJECTEDCASES,0 REJECTEDAMT,0 NEWCASES,0 NEWAMT,0 WDCASES,0 WDAMT "
					+ "  FROM CLAIM_DETAIL C,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D,SSI_DETAIL S "
					+ " WHERE C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
					+ " AND TRUNC(CLM_DATE) <= ? "
					+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
					+ " AND C.BID=S.BID AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID LIKE NVL('"
					+ id
					+ "%"
					+ "',M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID) "
					+ " GROUP BY S.SSI_INDUSTRY_SECTOR,S.SSI_STATE_NAME,M.MEM_BANK_NAME,M.MEM_ZONE_NAME "
					+ " UNION ALL "
					+ " SELECT S.SSI_INDUSTRY_SECTOR SECTOR,S.SSI_STATE_NAME STATE,M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,0 RECEIVEDCASES,0 RECEIVEDAMT,0 SETTLEDCASES,0 SETTLEDAMT, "
					+ " COUNT(UNIQUE C.CLM_REF_NO) FWCASES,SUM(CAA_APPLIED_AMOUNT) FWAMT ,  "
					+ " 0 TCCASES,  "
					+ " 0 TCAMT,0 TRCASES,0 TRAMT,0 REJECTEDCASES,0 REJECTEDAMT,0 NEWCASES,0 NEWAMT,0 WDCASES,0 WDAMT  "
					+ " FROM CLAIM_DETAIL_TEMP C,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D,SSI_DETAIL S  "
					+ " WHERE C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
					+ " AND TRUNC(CLM_CREATED_MODIFIED_DT) <= ?		  "
					+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
					+ " AND C.CLM_STATUS='FW' "
					+ " AND C.BID=S.BID AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID LIKE NVL('"
					+ id
					+ "%"
					+ "',M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID) "
					+ " GROUP BY S.SSI_INDUSTRY_SECTOR,S.SSI_STATE_NAME,M.MEM_BANK_NAME,M.MEM_ZONE_NAME "
					+ " UNION ALL "
					+ " SELECT S.SSI_INDUSTRY_SECTOR SECTOR,S.SSI_STATE_NAME STATE,M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,0 RECEIVEDCASES,0 RECEIVEDAMT,0 SETTLEDCASES,0 SETTLEDAMT, "
					+ " 0 FWCASES,0 FWAMT, "
					+ " COUNT(UNIQUE C.CLM_REF_NO) TCCASES, "
					+ " SUM(CAA_APPLIED_AMOUNT) TCAMT,0 TRCASES,0 TRAMT,0 REJECTEDCASES,0 REJECTEDAMT,0 NEWCASES,0 NEWAMT,0 WDCASES,0 WDAMT "
					+ "  FROM CLAIM_DETAIL_TEMP C,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D,SSI_DETAIL S "
					+ " WHERE C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
					+ " AND TRUNC(CLM_CREATED_MODIFIED_DT) <= ?		  "
					+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
					+ " AND C.CLM_STATUS='TC' "
					+ " AND C.BID=S.BID AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID LIKE NVL('"
					+ id
					+ "%"
					+ "',M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID) "
					+ " GROUP BY S.SSI_INDUSTRY_SECTOR,S.SSI_STATE_NAME,M.MEM_BANK_NAME,M.MEM_ZONE_NAME "
					+ " UNION ALL "
					+ " SELECT S.SSI_INDUSTRY_SECTOR SECTOR,S.SSI_STATE_NAME STATE,M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,0 RECEIVEDCASES,0 RECEIVEDAMT,0 SETTLEDCASES,0 SETTLEDAMT, "
					+ " 0 FWCASES,0 FWAMT , "
					+ " 0 TCCASES, "
					+ " 0 TCAMT,COUNT(UNIQUE C.CLM_REF_NO) TRCASES,SUM(CAA_APPLIED_AMOUNT) TRAMT,0 REJECTEDCASES,0 REJECTEDAMT,0 NEWCASES,0 NEWAMT,0 WDCASES,0 WDAMT "
					+ "  FROM CLAIM_DETAIL_TEMP C,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D,SSI_DETAIL S "
					+ " WHERE C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
					+ " AND TRUNC(CLM_CREATED_MODIFIED_DT) <= ?		  "
					+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
					+ " AND C.CLM_STATUS='TR' "
					+ " AND C.BID=S.BID AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID LIKE NVL('"
					+ id
					+ "%"
					+ "',M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID) "
					+ " GROUP BY S.SSI_INDUSTRY_SECTOR,S.SSI_STATE_NAME,M.MEM_BANK_NAME,M.MEM_ZONE_NAME "
					+ " UNION ALL "
					+ " SELECT S.SSI_INDUSTRY_SECTOR SECTOR,S.SSI_STATE_NAME STATE,M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,0 RECEIVEDCASES,0 RECEIVEDAMT,0 SETTLEDCASES,0 SETTLEDAMT, "
					+ " 0 FWCASES,0 FWAMT, "
					+ " 0 TCCASES, "
					+ " 0 TCAMT,0 TRCASES,0 TRAMT,0 REJECTEDCASES,0 REJECTEDAMT, "
					+ " COUNT(UNIQUE C.CLM_REF_NO)  NEWCASES,SUM(CAA_APPLIED_AMOUNT) NEWAMT,0 WDCASES,0 WDAMT "
					+ "  FROM CLAIM_DETAIL_TEMP C,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D,SSI_DETAIL S "
					+ " WHERE C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
					+ " AND TRUNC(CLM_DATE) <= ?	  "
					+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
					+ " AND C.CLM_STATUS='NE' "
					+ " AND C.BID=S.BID AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID LIKE NVL('"
					+ id
					+ "%"
					+ "',M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID) "
					+ " GROUP BY S.SSI_INDUSTRY_SECTOR,S.SSI_STATE_NAME,M.MEM_BANK_NAME,M.MEM_ZONE_NAME "
					+ " UNION ALL "
					+ " SELECT S.SSI_INDUSTRY_SECTOR,S.SSI_STATE_NAME,M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,0 RECEIVEDCASES,0 RECEIVEDAMT,0 SETTLEDCASES,0 SETTLEDAMT, "
					+ " 0 FWCASES,0 FWAMT, "
					+ " 0 TCCASES, "
					+ " 0 TCAMT,0 TRCASES,0 TRAMT,COUNT(UNIQUE C.CLM_REF_NO) REJECTEDCASES,SUM(CAA_APPLIED_AMOUNT) REJECTEDAMT, "
					+ " 0  NEWCASES,0 NEWAMT,0 WDCASES,0 WDAMT "
					+ "  FROM CLAIM_DETAIL C,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D,SSI_DETAIL S "
					+ " WHERE C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
					+ " AND TRUNC(CLM_CREATED_MODIFIED_DT) <= ?		 "
					+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
					+ " AND C.CLM_STATUS IN ('RE','TC') "
					+ " AND C.BID=S.BID AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID LIKE NVL('"
					+ id
					+ "%"
					+ "',M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID) "
					+ " GROUP BY S.SSI_INDUSTRY_SECTOR,S.SSI_STATE_NAME,M.MEM_BANK_NAME,M.MEM_ZONE_NAME "
					+ " UNION ALL "
					+ " SELECT S.SSI_INDUSTRY_SECTOR SECTOR,S.SSI_STATE_NAME STATE,M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,0 RECEIVEDCASES, "
					+ " 0 RECEIVEDAMT,COUNT(UNIQUE C.CLM_REF_NO) SETTLEDCASES,0 SETTLEDAMT,  "
					+ " 0 FWCASES,0 FWAMT,0 TCCASES, "
					+ " 0 TCAMT,0 TRCASES,0 TRAMT,0 REJECTEDCASES,0 REJECTEDAMT,0 NEWCASES,0 NEWAMT,0 WDCASES,0 WDAMT "
					+ "  FROM CLAIM_DETAIL C,MEMBER_INFO M,SSI_DETAIL S "
					+ " WHERE C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
					+ " AND TRUNC(CLM_APPROVED_DT) <= ? "
					+ " AND CGCLAN IS NOT NULL AND C.CLM_STATUS='AP' "
					+ " AND C.BID=S.BID AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID LIKE NVL('"
					+ id
					+ "%"
					+ "',M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID)  "
					+ " GROUP BY S.SSI_INDUSTRY_SECTOR,S.SSI_STATE_NAME,M.MEM_BANK_NAME,M.MEM_ZONE_NAME "
					+ " UNION ALL "
					+ " SELECT S.SSI_INDUSTRY_SECTOR SECTOR,S.SSI_STATE_NAME STATE,M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,0 RECEIVEDCASES, "
					+ " 0 RECEIVEDAMT,0 SETTLEDCASES,SUM(CLM_APPROVED_AMT) SETTLEDAMT, "
					+ " 0 FWCASES,0 FWAMT,0 TCCASES, "
					+ " 0 TCAMT,0 TRCASES,0 TRAMT,0 REJECTEDCASES,0 REJECTEDAMT,0 NEWCASES,0 NEWAMT,0 WDCASES,0 WDAMT "
					+ "  FROM CLAIM_DETAIL C,MEMBER_INFO M,SSI_DETAIL S "
					+ " WHERE C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
					+ " AND TRUNC(CLM_APPROVED_DT) <= ? "
					+ " AND C.BID=S.BID AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID LIKE NVL('"
					+ id
					+ "%"
					+ "',M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID)  "
					+ " AND CGCLAN IS NOT NULL AND C.CLM_STATUS='AP' "
					+ " GROUP BY S.SSI_INDUSTRY_SECTOR,S.SSI_STATE_NAME,M.MEM_BANK_NAME,M.MEM_ZONE_NAME "
					+ "  UNION ALL "
					+ " SELECT S.SSI_INDUSTRY_SECTOR SECTOR,S.SSI_STATE_NAME STATE,M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE,0 RECEIVEDCASES,0 RECEIVEDAMT,0 SETTLEDCASES,0 SETTLEDAMT, "
					+ " 0 FWCASES,0 FWAMT, "
					+ " 0 TCCASES, "
					+ " 0 TCAMT,0 TRCASES,0 TRAMT,0 REJECTEDCASES,0 REJECTEDAMT, "
					+ " 0  NEWCASES,0 NEWAMT, "
					+ " COUNT(UNIQUE C.CLM_REF_NO) WDCASES,SUM(CAA_APPLIED_AMOUNT) WDAMT "
					+ " FROM CLAIM_DETAIL_TEMP C,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D,SSI_DETAIL S "
					+ " WHERE C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
					+ " AND TRUNC(CLM_DATE) <= ?		 "
					+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
					+ " AND C.CLM_STATUS='WD' "
					+ " AND C.BID=S.BID AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID LIKE NVL('"
					+ id
					+ "%"
					+ "',M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID) "
					+ " GROUP BY S.SSI_INDUSTRY_SECTOR,S.SSI_STATE_NAME,M.MEM_BANK_NAME,M.MEM_ZONE_NAME "
					+ " ) GROUP BY BANK " + " ORDER BY 1 ";
			 System.out.println("id:"+id+" query:"+query);
			mliApplicationStmt = connection.prepareStatement(query);
			mliApplicationStmt.setDate(1, endDate);
			mliApplicationStmt.setDate(2, endDate);
			mliApplicationStmt.setDate(3, endDate);
			mliApplicationStmt.setDate(4, endDate);
			mliApplicationStmt.setDate(5, endDate);
			mliApplicationStmt.setDate(6, endDate);
			mliApplicationStmt.setDate(7, endDate);
			mliApplicationStmt.setDate(8, endDate);
			mliApplicationStmt.setDate(9, endDate);
			mliApplicationStmt.setDate(10, endDate);
			// System.out.println("End Date:"+endDate);
			ResultSet mliApplicationResult;
			GeneralReport mliApplicationReport;
			for (mliApplicationResult = mliApplicationStmt.executeQuery(); mliApplicationResult
					.next(); mliwiseClaimSummaryDetails
					.add(mliApplicationReport)) {
				mliApplicationReport = new GeneralReport();
				mliApplicationReport.setBankName(mliApplicationResult
						.getString(1));
				mliApplicationReport.setClaimReceivedCases(mliApplicationResult
						.getInt(2));
				mliApplicationReport.setClaimReceivedAmt(mliApplicationResult
						.getDouble(3));

				mliApplicationReport.setClaimSettledCases(mliApplicationResult
						.getInt(4));
				mliApplicationReport.setClaimSettledAmt(mliApplicationResult
						.getDouble(5));

				mliApplicationReport.setClaimForwardCases(mliApplicationResult
						.getInt(6));
				mliApplicationReport.setClaimForwardAmt(mliApplicationResult
						.getDouble(7));

				mliApplicationReport.setTcCases(mliApplicationResult.getInt(8));
				mliApplicationReport
						.setTcAmt(mliApplicationResult.getDouble(9));

				mliApplicationReport
						.setTrCases(mliApplicationResult.getInt(10));
				mliApplicationReport.setTrAmt(mliApplicationResult
						.getDouble(11));

				mliApplicationReport.setRejectedCases(mliApplicationResult
						.getInt(12));
				mliApplicationReport.setRejectedAmt(mliApplicationResult
						.getDouble(13));

				mliApplicationReport.setPendingCases(mliApplicationResult
						.getInt(14));
				mliApplicationReport.setPendingAmt(mliApplicationResult
						.getDouble(15));

				mliApplicationReport
						.setClaimWithDrawnCases(mliApplicationResult.getInt(16));
				mliApplicationReport.setClaimWithdrawnAmt(mliApplicationResult
						.getDouble(17));

				// mliApplicationReport.setZoneName(mliApplicationResult.getString(18));

			}

			mliApplicationResult.close();
			mliApplicationResult = null;
			mliApplicationStmt.close();
			mliApplicationStmt = null;
		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}

		Log.log(4, "ReportsDAO", "mliWiseClaimSummaryReportDetails", "Exited");
		return mliwiseClaimSummaryDetails;
	}

	/**
	 * 
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList mliWiseClaimPendingReportDetails(java.sql.Date endDate)
			throws DatabaseException {
		Log.log(4, "ReportsDAO", "mliWiseClaimPendingReportDetails", "Entered");
		PreparedStatement mliApplicationStmt = null;
		Connection connection = DBConnection.getConnection();
		ArrayList mliwiseClaimSummaryDetails = new ArrayList();
		try {
			String query = " SELECT BANK,SUM(RECEIVEDCASES) PENDINGCASES,ROUND(SUM(RECEIVEDAMT)/100000,3) PENDINGAMT, "
					+ " SUM(NEWDRCASES) NEWDRCASES,ROUND(SUM(NEWDRAMT)/100000,3) NEWDRAMT, "
					+ " SUM(NEWDNRCASES) NEWDNRCASES,ROUND(SUM(NEWDNRAMT)/100000,3) NEWDNRAMT "
					+ " FROM "
					+ " ( "
					+ " SELECT S.SSI_INDUSTRY_SECTOR SECTOR,S.SSI_STATE_NAME STATE,M.MEM_BANK_NAME BANK,COUNT(UNIQUE C.CLM_REF_NO) RECEIVEDCASES, "
					+ " SUM(CAA_APPLIED_AMOUNT) RECEIVEDAMT, "
					+ " 0 NEWDRCASES,0 NEWDRAMT,0 NEWDNRCASES,0 NEWDNRAMT "
					+ "  FROM CLAIM_DETAIL_TEMP C,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D,SSI_DETAIL S "
					+ " WHERE C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
					+ " AND TRUNC(CLM_DATE) <= ?	  "
					+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
					+ " AND C.CLM_STATUS='NE' "
					+ " AND C.BID=S.BID "
					+ " GROUP BY S.SSI_INDUSTRY_SECTOR,S.SSI_STATE_NAME,M.MEM_BANK_NAME "
					+ " UNION ALL "
					+ " SELECT S.SSI_INDUSTRY_SECTOR SECTOR,S.SSI_STATE_NAME STATE,M.MEM_BANK_NAME BANK,0 RECEIVEDCASES, "
					+ " 0 RECEIVEDAMT,COUNT(UNIQUE C.CLM_REF_NO)  NEWDRCASES,SUM(CAA_APPLIED_AMOUNT) NEWDRAMT "
					+ " ,0 NEWDNRCASES,0 NEWDNRAMT "
					+ " FROM CLAIM_DETAIL_TEMP C,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D,SSI_DETAIL S "
					+ " WHERE C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
					+ " AND TRUNC(CLM_DATE) <= ? "
					+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
					+ " AND C.CLM_STATUS='NE' "
					+ " AND C.BID=S.BID "
					+ " AND CLM_DECL_RECVD_DT IS NOT NULL "
					+ " GROUP BY S.SSI_INDUSTRY_SECTOR,S.SSI_STATE_NAME,M.MEM_BANK_NAME "
					+ " UNION ALL "
					+ " SELECT S.SSI_INDUSTRY_SECTOR SECTOR,S.SSI_STATE_NAME STATE,M.MEM_BANK_NAME BANK,0 "
					+ " RECEIVEDCASES,0 RECEIVEDAMT,0 NEWDRCASES,0 NEWDNRAMT, "
					+ " COUNT(UNIQUE C.CLM_REF_NO)  NEWDNRCASES,SUM(CAA_APPLIED_AMOUNT) NEWAMT "
					+ " FROM CLAIM_DETAIL_TEMP C,MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D,SSI_DETAIL S "
					+ " WHERE C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
					+ " AND TRUNC(CLM_DATE) <= ? "
					+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
					+ " AND C.CLM_STATUS='NE' "
					+ " AND C.BID=S.BID "
					+ " AND CLM_DECL_RECVD_DT IS  NULL "
					+ " GROUP BY S.SSI_INDUSTRY_SECTOR,S.SSI_STATE_NAME,M.MEM_BANK_NAME "
					+ " ) GROUP BY BANK " + " ORDER BY 4 DESC ";
			mliApplicationStmt = connection.prepareStatement(query);
			mliApplicationStmt.setDate(1, endDate);
			mliApplicationStmt.setDate(2, endDate);
			mliApplicationStmt.setDate(3, endDate);
			ResultSet mliApplicationResult;
			GeneralReport mliApplicationReport;
			for (mliApplicationResult = mliApplicationStmt.executeQuery(); mliApplicationResult
					.next(); mliwiseClaimSummaryDetails
					.add(mliApplicationReport)) {
				mliApplicationReport = new GeneralReport();
				mliApplicationReport.setBankName(mliApplicationResult
						.getString(1));

				mliApplicationReport.setPendingCases(mliApplicationResult
						.getInt(2));
				mliApplicationReport.setPendingAmt(mliApplicationResult
						.getDouble(3));

				mliApplicationReport
						.setNewDeclReceivedCases(mliApplicationResult.getInt(4));
				mliApplicationReport.setNewDeclReceivedAmt(mliApplicationResult
						.getDouble(5));

				mliApplicationReport
						.setNewDeclNotReceivedCases(mliApplicationResult
								.getInt(6));
				mliApplicationReport
						.setNewDeclNotReceivedAmt(mliApplicationResult
								.getDouble(7));

			}

			mliApplicationResult.close();
			mliApplicationResult = null;
			mliApplicationStmt.close();
			mliApplicationStmt = null;
		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}

		Log.log(4, "ReportsDAO", "mliWiseClaimPendingReportDetails", "Exited");
		return mliwiseClaimSummaryDetails;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param memberId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList BankClaimApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate, String memberId) throws DatabaseException {
		Log.log(4, "ReportDAO", "BankClaimApplicationDetails", "Entered");
		PreparedStatement mliApplicationStmt = null;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();
		if (startDate == null)
			try {
				String query = " SELECT BANK,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM  (  SELECT M.MEM_BANK_NAME BANK,COUNT(A.CGPAN) CASES,0 APPROVEDAMT,  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  MEMBER_INFO M  WHERE CGCLAN IS NOT NULL  AND C.BID=S.BID  AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  AND TRUNC(CLM_APPROVED_DT) <= ?  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))  GROUP BY M.MEM_BANK_NAME   UNION ALL  SELECT M.MEM_BANK_NAME BANK,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT,   0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M   WHERE CGCLAN IS NOT NULL    AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID   AND TRUNC(CLM_APPROVED_DT) <= ?  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))    GROUP BY M.MEM_BANK_NAME  UNION ALL  SELECT M.MEM_BANK_NAME BANK,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES,  SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT  FROM APPLICATION_DETAIL A,MEMBER_INFO M  WHERE APP_STATUS <> 'RE'  AND TRUNC(APP_GUAR_START_DATE_TIME) <=?  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  GROUP BY M.MEM_BANK_NAME  ) GROUP BY BANK   ORDER BY 1 ";
				System.out.println("querys1=="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationStmt.setString(2, memberId);
				mliApplicationStmt.setDate(3, endDate);
				mliApplicationStmt.setString(4, memberId);
				mliApplicationStmt.setDate(5, endDate);
				mliApplicationStmt.setString(6, memberId);
				ResultSet mliApplicationResult;
				GeneralReport mliApplicationReport;
				for (mliApplicationResult = mliApplicationStmt.executeQuery(); mliApplicationResult
						.next(); mliApplicationArray.add(mliApplicationReport)) {
					mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
				}

				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		if (startDate != null)
			try {
				String query = " SELECT BANK,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM  (  SELECT M.MEM_BANK_NAME BANK,COUNT(A.CGPAN) CASES,0 APPROVEDAMT,  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  MEMBER_INFO M  WHERE CGCLAN IS NOT NULL  AND C.BID=S.BID  AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ?  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))  GROUP BY M.MEM_BANK_NAME   UNION ALL  SELECT M.MEM_BANK_NAME BANK,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT,   0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M   WHERE CGCLAN IS NOT NULL    AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID   AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ?  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))    GROUP BY M.MEM_BANK_NAME  UNION ALL  SELECT M.MEM_BANK_NAME BANK,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES,  SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT  FROM APPLICATION_DETAIL A,MEMBER_INFO M  WHERE APP_STATUS <> 'RE'  AND TRUNC(APP_GUAR_START_DATE_TIME) BETWEEN ? AND ?  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  GROUP BY M.MEM_BANK_NAME  ) GROUP BY BANK   ORDER BY 1 ";
				System.out.println("querys2=="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setString(3, memberId);
				mliApplicationStmt.setDate(4, startDate);
				mliApplicationStmt.setDate(5, endDate);
				mliApplicationStmt.setString(6, memberId);
				mliApplicationStmt.setDate(7, startDate);
				mliApplicationStmt.setDate(8, endDate);
				mliApplicationStmt.setString(9, memberId);
				ResultSet mliApplicationResult;
				GeneralReport mliApplicationReport;
				for (mliApplicationResult = mliApplicationStmt.executeQuery(); mliApplicationResult
						.next(); mliApplicationArray.add(mliApplicationReport)) {
					mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
				}

				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		Log.log(4, "ReportDAO", "BankClaimApplicationDetails", "Exited");
		return mliApplicationArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param memberId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList ZoneClaimApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate, String memberId) throws DatabaseException {
		Log.log(4, "ReportDAO", "ZoneClaimApplicationDetails", "Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult = null;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();
		if (startDate == null)
			try {
				String query = " SELECT BANK,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM  (  SELECT M.MEM_BANK_NAME BANK,COUNT(A.CGPAN) CASES,0 APPROVEDAMT,  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  MEMBER_INFO M  WHERE CGCLAN IS NOT NULL  AND C.BID=S.BID  AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  AND TRUNC(CLM_APPROVED_DT) <= ?  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID))) = LTRIM(RTRIM(UPPER(?)))  GROUP BY M.MEM_BANK_NAME   UNION ALL  SELECT M.MEM_BANK_NAME BANK,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT,   0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M   WHERE CGCLAN IS NOT NULL    AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID   AND TRUNC(CLM_APPROVED_DT) <= ?  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID))) = LTRIM(RTRIM(UPPER(?)))    GROUP BY M.MEM_BANK_NAME  UNION ALL  SELECT M.MEM_BANK_NAME BANK,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES,  SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT  FROM APPLICATION_DETAIL A,MEMBER_INFO M  WHERE APP_STATUS <> 'RE'  AND TRUNC(APP_GUAR_START_DATE_TIME) <=?  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID))) = LTRIM(RTRIM(UPPER(?)))  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  GROUP BY M.MEM_BANK_NAME  ) GROUP BY BANK   ORDER BY 1 ";
				System.out.println("querysss1=="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationStmt.setString(2, memberId);
				mliApplicationStmt.setDate(3, endDate);
				mliApplicationStmt.setString(4, memberId);
				mliApplicationStmt.setDate(5, endDate);
				mliApplicationStmt.setString(6, memberId);
				GeneralReport mliApplicationReport;
				for (mliApplicationResult = mliApplicationStmt.executeQuery(); mliApplicationResult
						.next(); mliApplicationArray.add(mliApplicationReport)) {
					mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
				}

				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		if (startDate != null)
			try {
				String query = " SELECT BANK,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM  (  SELECT M.MEM_BANK_NAME BANK,COUNT(A.CGPAN) CASES,0 APPROVEDAMT,  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  MEMBER_INFO M  WHERE CGCLAN IS NOT NULL  AND C.BID=S.BID  AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ?  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID))) = LTRIM(RTRIM(UPPER(?)))  GROUP BY M.MEM_BANK_NAME   UNION ALL  SELECT M.MEM_BANK_NAME BANK,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT,   0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M   WHERE CGCLAN IS NOT NULL    AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID   AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ?  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID))) = LTRIM(RTRIM(UPPER(?)))    GROUP BY M.MEM_BANK_NAME  UNION ALL  SELECT M.MEM_BANK_NAME BANK,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES,  SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT  FROM APPLICATION_DETAIL A,MEMBER_INFO M  WHERE APP_STATUS <> 'RE'  AND TRUNC(APP_GUAR_START_DATE_TIME) BETWEEN ? AND ?  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID))) = LTRIM(RTRIM(UPPER(?)))  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  GROUP BY M.MEM_BANK_NAME  ) GROUP BY BANK   ORDER BY 1 ";
				System.out.println("querysss2=="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setString(3, memberId);
				mliApplicationStmt.setDate(4, startDate);
				mliApplicationStmt.setDate(5, endDate);
				mliApplicationStmt.setString(6, memberId);
				mliApplicationStmt.setDate(7, startDate);
				mliApplicationStmt.setDate(8, endDate);
				mliApplicationStmt.setString(9, memberId);
				GeneralReport mliApplicationReport;
				for (mliApplicationResult = mliApplicationStmt.executeQuery(); mliApplicationResult
						.next(); mliApplicationArray.add(mliApplicationReport)) {
					mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
				}

				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		Log.log(4, "ReportDAO", "ZoneClaimApplicationDetails", "Exited");
		return mliApplicationArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param memberId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList BranchClaimApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate, String memberId) throws DatabaseException {
		Log.log(4, "ReportDAO", "BranchClaimApplicationDetails", "Entered");
		PreparedStatement mliApplicationStmt = null;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();
		if (startDate == null)
			try {
				String query = " SELECT BANK,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM  (  SELECT M.MEM_BANK_NAME BANK,COUNT(A.CGPAN) CASES,0 APPROVEDAMT,  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  MEMBER_INFO M  WHERE CGCLAN IS NOT NULL  AND C.BID=S.BID  AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  AND TRUNC(CLM_APPROVED_DT) <= ?  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID))) = LTRIM(RTRIM(UPPER(?)))  GROUP BY M.MEM_BANK_NAME   UNION ALL  SELECT M.MEM_BANK_NAME BANK,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT,   0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M   WHERE CGCLAN IS NOT NULL    AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID   AND TRUNC(CLM_APPROVED_DT) <= ?   LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID)))   = LTRIM(RTRIM(UPPER(?)))     GROUP BY M.MEM_BANK_NAME  UNION ALL  SELECT M.MEM_BANK_NAME BANK,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES,  SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT  FROM APPLICATION_DETAIL A,MEMBER_INFO M  WHERE APP_STATUS <> 'RE'  AND TRUNC(APP_GUAR_START_DATE_TIME) <=?  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID))) = LTRIM(RTRIM(UPPER(?)))  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  GROUP BY M.MEM_BANK_NAME  ) GROUP BY BANK   ORDER BY 1 ";
				System.out.println("querysss11=="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationStmt.setString(2, memberId);
				mliApplicationStmt.setDate(3, endDate);
				mliApplicationStmt.setString(4, memberId);
				mliApplicationStmt.setDate(5, endDate);
				mliApplicationStmt.setString(6, memberId);
				ResultSet mliApplicationResult;
				GeneralReport mliApplicationReport;
				for (mliApplicationResult = mliApplicationStmt.executeQuery(); mliApplicationResult
						.next(); mliApplicationArray.add(mliApplicationReport)) {
					mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
				}

				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		if (startDate != null)
			try {
				String query = " SELECT BANK,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM  (  SELECT M.MEM_BANK_NAME BANK,COUNT(A.CGPAN) CASES,0 APPROVEDAMT,  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  MEMBER_INFO M  WHERE CGCLAN IS NOT NULL  AND C.BID=S.BID  AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ?  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID))) = LTRIM(RTRIM(UPPER(?)))  GROUP BY M.MEM_BANK_NAME   UNION ALL  SELECT M.MEM_BANK_NAME BANK,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT,   0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M   WHERE CGCLAN IS NOT NULL    AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID   AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ?   LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID)))   = LTRIM(RTRIM(UPPER(?)))     GROUP BY M.MEM_BANK_NAME  UNION ALL  SELECT M.MEM_BANK_NAME BANK,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES,  SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT  FROM APPLICATION_DETAIL A,MEMBER_INFO M  WHERE APP_STATUS <> 'RE'  AND TRUNC(APP_GUAR_START_DATE_TIME) BETWEEN ? AND ?  LTRIM(RTRIM(UPPER(M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID))) = LTRIM(RTRIM(UPPER(?)))  AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  GROUP BY M.MEM_BANK_NAME  ) GROUP BY BANK   ORDER BY 1 ";
				System.out.println("querysss22=="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setString(3, memberId);
				mliApplicationStmt.setDate(4, startDate);
				mliApplicationStmt.setDate(5, endDate);
				mliApplicationStmt.setString(6, memberId);
				mliApplicationStmt.setDate(7, startDate);
				mliApplicationStmt.setDate(8, endDate);
				mliApplicationStmt.setString(9, memberId);
				ResultSet mliApplicationResult;
				GeneralReport mliApplicationReport;
				for (mliApplicationResult = mliApplicationStmt.executeQuery(); mliApplicationResult
						.next(); mliApplicationArray.add(mliApplicationReport)) {
					mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
				}

				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		Log.log(4, "ReportDAO", "BranchClaimApplicationDetails", "Exited");
		return mliApplicationArray;
	}

	/* end here */

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param memberId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList BankClaimApplicationDetailsNew(java.sql.Date startDate,
			java.sql.Date endDate, String memberId) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "BankClaimApplicationDetails", "Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if (startDate == null) {
			try {
				String query = " SELECT BANK,SUM(APPLIEDCASES) APPLIEDCASES,SUM(APPLIEDAMT) APPLIEDAMT, "
						+ " SUM(SETTLEDCASES) SETTLEDCASES,SUM(SETTLEDAMT) SETTLEDAMT FROM "
						+ " ( "
						+ " SELECT M.MEM_BANK_NAME BANK,COUNT(D.CGPAN) APPLIEDCASES,SUM(CAA_APPLIED_AMOUNT) APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D "
						+ " WHERE C.BID=S.BID  "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_DATE) <=? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,COUNT(D.CGPAN) APPLIEDCASES,SUM(CAA_APPLIED_AMOUNT) APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL C,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D "
						+ "  WHERE C.BID=S.BID  "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_DATE)  <=? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,0 APPLIEDCASES,0 APPLIEDAMT,  "
						+ " COUNT(A.CGPAN) SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M  "
						+ " WHERE CGCLAN IS NOT NULL  "
						+ " AND C.BID=S.BID  "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_APPROVED_DT)  <=? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL  "
						+ " SELECT M.MEM_BANK_NAME BANK,0 APPLIEDCASES,0 APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,SUM(CLM_APPROVED_AMT)  SETTLEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M  "
						+ " WHERE CGCLAN IS NOT NULL  "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_APPROVED_DT)  <=? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " ) GROUP BY BANK "
						+ " ORDER BY 1 ";
				System.out.println("1==query=="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(3, endDate); // Set endDate parameter
				mliApplicationStmt.setString(4, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationStmt.setString(6, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(7, endDate); // Set endDate parameter
				mliApplicationStmt.setString(8, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if (startDate != null) {
			try {
				String query = " SELECT BANK,SUM(APPLIEDCASES) APPLIEDCASES,SUM(APPLIEDAMT) APPLIEDAMT, "
						+ " SUM(SETTLEDCASES) SETTLEDCASES,SUM(SETTLEDAMT) SETTLEDAMT FROM "
						+ " ( "
						+ " SELECT M.MEM_BANK_NAME BANK,COUNT(D.CGPAN) APPLIEDCASES,SUM(CAA_APPLIED_AMOUNT) APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT_TEMP D "
						+ " WHERE C.BID=S.BID  "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_DATE) BETWEEN ? AND ? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,COUNT(D.CGPAN) APPLIEDCASES,SUM(CAA_APPLIED_AMOUNT) APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL C,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M,CLAIM_APPLICATION_AMOUNT D "
						+ "  WHERE C.BID=S.BID  "
						+ " AND C.CLM_REF_NO=D.CLM_REF_NO "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_DATE)  BETWEEN ? AND ? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL "
						+ " SELECT M.MEM_BANK_NAME BANK,0 APPLIEDCASES,0 APPLIEDAMT,  "
						+ " COUNT(A.CGPAN) SETTLEDCASES,0  SETTLEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S ,  "
						+ " MEMBER_INFO M  "
						+ " WHERE CGCLAN IS NOT NULL  "
						+ " AND C.BID=S.BID  "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER  "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_APPROVED_DT)  BETWEEN ? AND ? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " UNION ALL  "
						+ " SELECT M.MEM_BANK_NAME BANK,0 APPLIEDCASES,0 APPLIEDAMT,  "
						+ " 0 SETTLEDCASES,SUM(CLM_APPROVED_AMT)  SETTLEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M  "
						+ " WHERE CGCLAN IS NOT NULL  "
						+ " AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID  "
						+ " AND TRUNC(CLM_APPROVED_DT)  BETWEEN ? AND ? AND "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY M.MEM_BANK_NAME  "
						+ " ) GROUP BY BANK "
						+ " ORDER BY 1 ";
				
				System.out.println("2==query=="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(4, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationStmt.setString(6, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(7, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(8, endDate); // Set endDate parameter
				mliApplicationStmt.setString(9, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(10, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(11, endDate); // Set endDate
															// parameter
				mliApplicationStmt.setString(12, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "BankClaimApplicationDetails", "Exited");
		return mliApplicationArray;
	}

	public ArrayList StateBankClaimApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate, String memberId) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "StateBankClaimApplicationDetails",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if (startDate == null) {
			try {
				String query = " SELECT STATE,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM "
						+ " ( "
						+ " SELECT S.SSI_STATE_NAME STATE,COUNT(A.CGPAN) CASES,0 APPROVEDAMT, "
						+ " 0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S , "
						+ " MEMBER_INFO M "
						+ " WHERE CGCLAN IS NOT NULL "
						+ " AND C.BID=S.BID "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " AND TRUNC(CLM_APPROVED_DT) <= ? "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY S.SSI_STATE_NAME "
						+ "  UNION ALL "
						+ " SELECT S.SSI_STATE_NAME STATE,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT, "
						+ "  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M,SSI_DETAIL S "
						+ "  WHERE CGCLAN IS NOT NULL AND C.BID=S.BID "
						+ "   AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ "  AND TRUNC(CLM_APPROVED_DT) <= ? "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ "   GROUP BY S.SSI_STATE_NAME "
						+ " UNION ALL "
						+ " SELECT S.SSI_STATE_NAME STATE,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES, "
						+ " SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT "
						+ " FROM APPLICATION_DETAIL A,MEMBER_INFO M,SSI_DETAIL S "
						+ " WHERE APP_STATUS <> 'RE' AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) <=? "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " GROUP BY S.SSI_STATE_NAME "
						+ " ) GROUP BY STATE "
						+ "  ORDER BY 1 ";
				 System.out.println("query===1"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(3, endDate); // Set endDate parameter
				mliApplicationStmt.setString(4, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationStmt.setString(6, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if (startDate != null) {
			try {
				String query = " SELECT STATE,SUM(CASES),SUM(APPROVEDAMT),SUM(GUARISSUEDCASES),SUM(GUARISSUEDAMT) FROM "
						+ " ( "
						+ " SELECT S.SSI_STATE_NAME STATE,COUNT(A.CGPAN) CASES,0 APPROVEDAMT, "
						+ " 0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S , "
						+ " MEMBER_INFO M "
						+ " WHERE CGCLAN IS NOT NULL "
						+ " AND C.BID=S.BID "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY S.SSI_STATE_NAME "
						+ "  UNION ALL "
						+ " SELECT S.SSI_STATE_NAME STATE,0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT, "
						+ "  0 GUARISSUEDCASES,0  GUARISSUEDAMT FROM CLAIM_DETAIL C,MEMBER_INFO M,SSI_DETAIL S "
						+ "  WHERE CGCLAN IS NOT NULL AND C.BID=S.BID "
						+ "   AND C.MEM_BNK_ID||C.MEM_ZNE_ID||C.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ "  AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ "   GROUP BY S.SSI_STATE_NAME "
						+ " UNION ALL "
						+ " SELECT S.SSI_STATE_NAME STATE,0 CASES,0 APPROVEDAMT,COUNT(CGPAN) GUARISSUEDCASES, "
						+ " SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) GUARISSUEDAMT "
						+ " FROM APPLICATION_DETAIL A,MEMBER_INFO M,SSI_DETAIL S "
						+ " WHERE APP_STATUS <> 'RE' AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) BETWEEN ? AND ? "
						+ " LTRIM(RTRIM(UPPER(M.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
						+ " GROUP BY S.SSI_STATE_NAME "
						+ " ) GROUP BY STATE "
						+ "  ORDER BY 1 ";
				 System.out.println("query===2"+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(4, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationStmt.setString(6, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(7, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(8, endDate); // Set endDate parameter
				mliApplicationStmt.setString(9, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationReport.setPrevProposals(mliApplicationResult
							.getInt(4));
					mliApplicationReport.setPrevAmount(mliApplicationResult
							.getDouble(5));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "StateBankClaimApplicationDetails",
				"Exited");
		return mliApplicationArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param memberId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList SectorBankClaimApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate, String memberId) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "StateBankClaimApplicationDetails",
				"Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if (startDate == null) {
			try {
				String query = " SELECT SECTOR,SUM(CASES) CASES,SUM(APPROVEDAMT) APPROVEDAMT FROM  "
						+ "  (   "
						+ " SELECT  DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) SECTOR,  "
						+ " COUNT(A.CGPAN) CASES,0 APPROVEDAMT  "
						+ " FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S "
						+ " WHERE CGCLAN IS NOT NULL "
						+ " AND C.BID=S.BID "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND TRUNC(CLM_APPROVED_DT) <= ? "
						+ " AND LTRIM(RTRIM(UPPER(C.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY  DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) "
						+ " UNION ALL "
						+ " SELECT DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) SECTOR, "
						+ " 0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT "
						+ " FROM CLAIM_DETAIL C,SSI_DETAIL S "
						+ " WHERE CGCLAN IS NOT NULL AND C.BID=S.BID "
						+ " AND TRUNC(CLM_APPROVED_DT) <= ? "
						+ " AND LTRIM(RTRIM(UPPER(C.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) "
						+ " ) " + " GROUP BY SECTOR " + "ORDER BY 1";
				System.out.println("the query is 1#$=========="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(3, endDate); // Set endDate parameter
				mliApplicationStmt.setString(4, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if (startDate != null) {
			try {
				String query = " SELECT SECTOR,SUM(CASES) CASES,SUM(APPROVEDAMT) APPROVEDAMT FROM  "
						+ "  (   "
						+ " SELECT  DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) SECTOR,  "
						+ " COUNT(A.CGPAN) CASES,0 APPROVEDAMT  "
						+ " FROM CLAIM_DETAIL C,APPLICATION_DETAIL A,SSI_DETAIL S "
						+ " WHERE CGCLAN IS NOT NULL "
						+ " AND C.BID=S.BID "
						+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
						+ " AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? "
						+ " AND LTRIM(RTRIM(UPPER(C.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY  DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) "
						+ " UNION ALL "
						+ " SELECT DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) SECTOR, "
						+ " 0 CASES,SUM(CLM_APPROVED_AMT) APPROVEDAMT "
						+ " FROM CLAIM_DETAIL C,SSI_DETAIL S "
						+ " WHERE CGCLAN IS NOT NULL AND C.BID=S.BID "
						+ " AND TRUNC(CLM_APPROVED_DT) BETWEEN ? AND ? "
						+ " AND LTRIM(RTRIM(UPPER(C.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) "
						+ " GROUP BY DECODE(UPPER(NVL(S.SSI_INDUSTRY_SECTOR,'OTHERS')),'OTHERS','OTHERS',S.SSI_INDUSTRY_SECTOR) "
						+ " ) " + " GROUP BY SECTOR " + "ORDER BY 1";
				System.out.println("the query is 2#$=========="+query);
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationStmt.setDate(4, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(5, endDate); // Set endDate parameter
				mliApplicationStmt.setString(6, memberId); // Set memberId
															// parameter

				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));
					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "SectorBankClaimApplicationDetails",
				"Exited");
		return mliApplicationArray;
	}

	/*
	 * ##########################################################################
	 * ###################################33
	 */

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param guarantee
	 * @param memberId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList StateBankApplicationDetails(java.sql.Date startDate,
			java.sql.Date endDate, String guarantee, String memberId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "BankApplicationDetails", "Entered");
		PreparedStatement mliApplicationStmt = null;
		ResultSet mliApplicationResult;
		Connection connection = DBConnection.getConnection();
		ArrayList mliApplicationArray = new ArrayList();

		if ((guarantee.equals("yes")) && startDate == null) {
			try {
				String query = "select s.SSI_STATE_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member,ssi_detail s where app.CGPAN=vw.CGPAN and app.ssi_reference_number=s.ssi_reference_number "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) <= ? "
						+ " and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by s.SSI_STATE_NAME ";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate); // Set endDate parameter
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((guarantee.equals("yes")) && startDate != null) {
			try {
				String query = "select s.SSI_STATE_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member,ssi_detail s where app.CGPAN=vw.CGPAN and app.ssi_reference_number=s.ssi_reference_number "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? "
						+ " and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by s.SSI_STATE_NAME ";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate); // Set startDate
															// parameter
				mliApplicationStmt.setDate(2, endDate); // Set endDate parameter
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate == null) {
			try {
				String query = "select s.SSI_STATE_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member,ssi_detail s where app.CGPAN=vw.CGPAN and app.ssi_reference_number=s.ssi_reference_number "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) <= ? "
						+ " and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by s.SSI_STATE_NAME ";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, endDate);
				mliApplicationStmt.setString(2, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((guarantee.equals("no")) && startDate != null) {
			try {
				String query = "select s.SSI_STATE_NAME, count(vw.cgpan), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from view_appl_amounts vw, "
						+ " application_detail app, member_info member,ssi_detail s where app.CGPAN=vw.CGPAN and app.ssi_reference_number=s.ssi_reference_number "
						+ " and app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? "
						+ " and LTRIM(RTRIM(UPPER(member.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by s.SSI_STATE_NAME ";
				mliApplicationStmt = connection.prepareStatement(query);
				mliApplicationStmt.setDate(1, startDate);
				mliApplicationStmt.setDate(2, endDate);
				mliApplicationStmt.setString(3, memberId); // Set memberId
															// parameter
				mliApplicationResult = mliApplicationStmt.executeQuery();

				while (mliApplicationResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport mliApplicationReport = new GeneralReport();
					mliApplicationReport.setType(mliApplicationResult
							.getString(1));
					mliApplicationReport.setProposals(mliApplicationResult
							.getInt(2));
					mliApplicationReport.setAmount(mliApplicationResult
							.getDouble(3));

					mliApplicationArray.add(mliApplicationReport);
				}
				mliApplicationResult.close();
				mliApplicationResult = null;
				mliApplicationStmt.close();
				mliApplicationStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "BankApplicationDetails", "Exited");
		return mliApplicationArray;
	}

	public ArrayList sectorDetails(String sector, String id,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "sectorDetails", "Entered");
		PreparedStatement sectorDetailsStmt = null;
		ArrayList sectorDetailsArray = new ArrayList();
		ResultSet sectorDetailsResult = null;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from ssi_detail ssi, application_detail app," +
				 * " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
				 * +
				 * " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =" +
				 * " member.MEM_BNK_ID||  member.MEM_ZNE_ID||member.MEM_BRN_ID and "
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? " +
				 * " group by ssi.SSI_INDUSTRY_SECTOR" +
				 * " order by ssi.SSI_INDUSTRY_SECTOR";
				 */

				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(APP.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from ssi_detail ssi, application_detail app, "
						+ " member_info member, PROMOTER_DETAIL P   "
						+ " where  "
						+ " APP.SSI_REFERENCE_NUMBER=P.SSI_REFERENCE_NUMBER "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||  member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and app.app_status not in ('RE') "
						+ " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? "
						+ " group by ssi.SSI_INDUSTRY_SECTOR "
						+ " order by ssi.SSI_INDUSTRY_SECTOR ";

				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, sector); // Set sector parameter
				sectorDetailsStmt.setDate(2, startDate); // Set startDate
															// parameter
				sectorDetailsStmt.setDate(3, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((id.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from ssi_detail ssi, application_detail app," +
				 * "  view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
				 * +
				 * " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =" +
				 * " member.MEM_BNK_ID||  member.MEM_ZNE_ID||member.MEM_BRN_ID and "
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_APPROVED_DATE_TIME) <= ? " +
				 * " group by ssi.SSI_INDUSTRY_SECTOR" +
				 * " order by ssi.SSI_INDUSTRY_SECTOR";
				 */

				String query = " select ssi.SSI_INDUSTRY_SECTOR, count(APP.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from ssi_detail ssi, application_detail app, "
						+ " PROMOTER_DETAIL P , member_info member where APP.SSI_REFERENCE_NUMBER = P.SSI_REFERENCE_NUMBER "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and  "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||  member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and app.app_status not in ('RE') "
						+ " and trunc(app.APP_APPROVED_DATE_TIME) <= ?  "
						+ " group by ssi.SSI_INDUSTRY_SECTOR "
						+ " order by ssi.SSI_INDUSTRY_SECTOR ";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, sector); // Set sector parameter
				sectorDetailsStmt.setDate(2, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN), " +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from ssi_detail ssi, application_detail app," +
				 * " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
				 * +
				 * " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =" +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_GUAR_START_DATE_TIME) between ? and ?"
				 * + " group by ssi.SSI_INDUSTRY_SECTOR" +
				 * " order by ssi.SSI_INDUSTRY_SECTOR";
				 */

				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(APP.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from ssi_detail ssi, application_detail app, "
						+ " PROMOTER_DETAIL P , member_info member where  "
						+ " APP.SSI_REFERENCE_NUMBER = P.SSI_REFERENCE_NUMBER "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and app.app_status not in ('RE') "
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? "
						+ " group by ssi.SSI_INDUSTRY_SECTOR "
						+ " order by ssi.SSI_INDUSTRY_SECTOR ";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, sector); // Set sector parameter
				sectorDetailsStmt.setDate(2, startDate); // Set startDate
															// parameter
				sectorDetailsStmt.setDate(3, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN), " +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from ssi_detail ssi, application_detail app," +
				 * " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
				 * +
				 * " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =" +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_GUAR_START_DATE_TIME) <= ?" +
				 * " group by ssi.SSI_INDUSTRY_SECTOR" +
				 * " order by ssi.SSI_INDUSTRY_SECTOR";
				 */

				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(APP.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from ssi_detail ssi, application_detail app, "
						+ " PROMOTER_DETAIL P , member_info member where P.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and app.app_status not in ('RE') "
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) <= ? "
						+ " group by ssi.SSI_INDUSTRY_SECTOR "
						+ " order by ssi.SSI_INDUSTRY_SECTOR ";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, sector); // Set sector parameter
				sectorDetailsStmt.setDate(2, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "sectorDetails", "Exited");
		return sectorDetailsArray;
	}

	/**
	 * 
	 * @param sector
	 * @param id
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList sectorDetailsNew(String sector, String id,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "sectorDetailsNew", "Entered");
		PreparedStatement sectorDetailsStmt = null;
		ArrayList sectorDetailsArray = new ArrayList();
		ResultSet sectorDetailsResult = null;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try {
				String query =
				// " SELECT UPPER(NVL(SSI_INDUSTRY_SECTOR,'OTHERS')) SECTOR,COUNT(*) CYCNT, "+
				" SELECT SECTOR,SUM(CYCNT),SUM(CYAMT),SUM(PYCNT),SUM(PYAMT),SUM(CUMCNT),SUM(CUMAMT) FROM "
						+ " ( "
						+ " SELECT SSI_INDUSTRY_SECTOR SECTOR,COUNT(*) CYCNT, "
						+ " SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) CYAMT, "
						+ " 0 PYCNT,0 PYAMT,0 CUMCNT,0 CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_APPROVED_DATE_TIME) BETWEEN ?  AND  ? "
						+ " AND MEM_BANK_NAME = ? "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY SSI_INDUSTRY_SECTOR "
						+ " UNION ALL "
						+ " SELECT SSI_INDUSTRY_SECTOR SECTOR,0 CYCNT,0 CYAMT, "
						+ " COUNT(*) PYCNT,SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) PYAMT, "
						+ " 0 CUMCNT,0 CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_APPROVED_DATE_TIME) >= ADD_MONTHS(?,-12) "
						+ " AND TRUNC(APP_APPROVED_DATE_TIME) <= ADD_MONTHS(?,-12) "
						+ " AND MEM_BANK_NAME = ? "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY SSI_INDUSTRY_SECTOR  "
						+ " UNION ALL "
						+ " SELECT SSI_INDUSTRY_SECTOR SECTOR,0 CYCNT,0 CYAMT,0 PYCNT,0 PYAMT, "
						+ " COUNT(*) CUMCNT,SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_APPROVED_DATE_TIME) <= ? "
						+ " AND MEM_BANK_NAME = ? "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY SSI_INDUSTRY_SECTOR  "
						+ " ) "
						+ " GROUP BY SECTOR " + " ORDER BY 1 ";

				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setDate(1, startDate); // Set startDate
															// parameter
				sectorDetailsStmt.setDate(2, endDate); // Set startDate
														// parameter
				sectorDetailsStmt.setString(3, sector); // Set sector parameter
				sectorDetailsStmt.setDate(4, startDate); // Set startDate
															// parameter
				sectorDetailsStmt.setDate(5, endDate); // Set startDate
														// parameter
				sectorDetailsStmt.setString(6, sector); // Set sector parameter
				sectorDetailsStmt.setDate(7, endDate); // Set startDate
														// parameter
				sectorDetailsStmt.setString(8, sector); // Set sector parameter

				// sectorDetailsStmt.setString(1,sector);//Set sector parameter
				// sectorDetailsStmt.setDate(2,startDate);//Set startDate
				// parameter
				// sectorDetailsStmt.setDate(3,endDate);//Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					// sectorDetailsList.setType(sectorDetailsResult.getString(1));
					// sectorDetailsList.setProposals(sectorDetailsResult.getInt(2));
					// sectorDetailsList.setAmount(sectorDetailsResult.getDouble(3));
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));
					sectorDetailsList.setPrevProposals(sectorDetailsResult
							.getInt(4));
					sectorDetailsList.setPrevAmount(sectorDetailsResult
							.getDouble(5));
					sectorDetailsList.setCumProposals(sectorDetailsResult
							.getInt(6));
					sectorDetailsList.setCumAmount(sectorDetailsResult
							.getDouble(7));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((id.equals("yes")) && startDate == null) {
			try {
				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ "  view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||  member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and trunc(app.APP_APPROVED_DATE_TIME) <= ? "
						+ " group by ssi.SSI_INDUSTRY_SECTOR"
						+ " order by ssi.SSI_INDUSTRY_SECTOR";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, sector); // Set sector parameter
				sectorDetailsStmt.setDate(2, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try {
				String query = " SELECT SECTOR,SUM(CYCNT),SUM(CYAMT),SUM(PYCNT),SUM(PYAMT),SUM(CUMCNT),SUM(CUMAMT) FROM "
						+ " ( "
						+ " SELECT UPPER(NVL(SSI_INDUSTRY_SECTOR,'OTHERS')) SECTOR,COUNT(*) CYCNT, "
						+ " SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) CYAMT, "
						+ " 0 PYCNT,0 PYAMT,0 CUMCNT,0 CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) BETWEEN ?  AND  ? "
						+ " AND MEM_BANK_NAME = ? "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY UPPER(NVL(SSI_INDUSTRY_SECTOR,'OTHERS')) "
						+ " UNION ALL "
						+ " SELECT UPPER(NVL(SSI_INDUSTRY_SECTOR,'OTHERS')) SECTOR,0 CYCNT,0 CYAMT, "
						+ " COUNT(*) PYCNT,SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) PYAMT, "
						+ " 0 CUMCNT,0 CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) >= ADD_MONTHS(?,-12) "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) <= ADD_MONTHS(?,-12) "
						+ " AND MEM_BANK_NAME = ? "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY UPPER(NVL(SSI_INDUSTRY_SECTOR,'OTHERS'))  "
						+ " UNION ALL "
						+ " SELECT UPPER(NVL(SSI_INDUSTRY_SECTOR,'OTHERS')) SECTOR,0 CYCNT,0 CYAMT,0 PYCNT,0 PYAMT, "
						+ " COUNT(*) CUMCNT,SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) <= ? "
						+ " AND MEM_BANK_NAME = ? "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY UPPER(NVL(SSI_INDUSTRY_SECTOR,'OTHERS'))  "
						+ " ) " + " GROUP BY SECTOR " + " ORDER BY 1 ";

				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setDate(1, startDate); // Set startDate
															// parameter
				sectorDetailsStmt.setDate(2, endDate); // Set startDate
														// parameter
				sectorDetailsStmt.setString(3, sector); // Set sector parameter
				sectorDetailsStmt.setDate(4, startDate); // Set startDate
															// parameter
				sectorDetailsStmt.setDate(5, endDate); // Set startDate
														// parameter
				sectorDetailsStmt.setString(6, sector); // Set sector parameter
				sectorDetailsStmt.setDate(7, endDate); // Set startDate
														// parameter
				sectorDetailsStmt.setString(8, sector); // Set sector parameter
				// sectorDetailsResult = sectorDetailsStmt.executeQuery();
				GeneralReport sectorDetailsList;
				for (sectorDetailsResult = sectorDetailsStmt.executeQuery(); sectorDetailsResult
						.next(); sectorDetailsArray.add(sectorDetailsList))
				// while(sectorDetailsResult.next())

				{
					// Instantiate a GeneralReport value object
					sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));
					sectorDetailsList.setPrevProposals(sectorDetailsResult
							.getInt(4));
					sectorDetailsList.setPrevAmount(sectorDetailsResult
							.getDouble(5));
					sectorDetailsList.setCumProposals(sectorDetailsResult
							.getInt(6));
					sectorDetailsList.setCumAmount(sectorDetailsResult
							.getDouble(7));

					// sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) <= ?"
						+ " group by ssi.SSI_INDUSTRY_SECTOR"
						+ " order by ssi.SSI_INDUSTRY_SECTOR";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, sector); // Set sector parameter
				sectorDetailsStmt.setDate(2, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "sectorDetailsNew", "Exited");
		return sectorDetailsArray;
	}

	public ArrayList sectorDetailsForBank(java.sql.Date startDate,
			java.sql.Date endDate, String id, String memberId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "sectorDetailsForBank", "Entered");
		PreparedStatement sectorDetailsStmt = null;
		ArrayList sectorDetailsArray = new ArrayList();
		ResultSet sectorDetailsResult;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try {
				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
						+ "and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? "
						+ "group by ssi.SSI_INDUSTRY_SECTOR";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, memberId); // Set sector
															// parameter
				sectorDetailsStmt.setDate(2, startDate); // Set startDate
															// parameter
				sectorDetailsStmt.setDate(3, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((id.equals("yes")) && startDate == null) {
			try {
				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
						+ "and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_APPROVED_DATE_TIME) <= ? "
						+ "group by ssi.SSI_INDUSTRY_SECTOR";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, memberId); // Set sector
															// parameter
				sectorDetailsStmt.setDate(2, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try {
				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN"
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME) between "
						+ " ? and ? group by ssi.SSI_INDUSTRY_SECTOR";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, memberId); // Set sector
															// parameter
				sectorDetailsStmt.setDate(2, startDate); // Set startDate
															// parameter
				sectorDetailsStmt.setDate(3, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate == null) {
			try {
				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN"
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME) "
						+ " <= ? group by ssi.SSI_INDUSTRY_SECTOR";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, memberId); // Set sector
															// parameter
				sectorDetailsStmt.setDate(2, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;
				sectorDetailsResult.close();
				sectorDetailsResult = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "sectorDetailsForBank", "Exited");
		return sectorDetailsArray;
	}

	public ArrayList sectorDetailsForZone(java.sql.Date startDate,
			java.sql.Date endDate, String id, String memberId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "sectorDetailsForZone", "Entered");
		PreparedStatement sectorDetailsStmt = null;
		ArrayList sectorDetailsArray = new ArrayList();
		ResultSet sectorDetailsResult;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try {
				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
						+ "and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ "LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? "
						+ "group by ssi.SSI_INDUSTRY_SECTOR";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, memberId); // Set sector
															// parameter
				sectorDetailsStmt.setDate(2, startDate); // Set startDate
															// parameter
				sectorDetailsStmt.setDate(3, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((id.equals("yes")) && startDate == null) {
			try {
				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
						+ "and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ "LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_APPROVED_DATE_TIME) <= ? "
						+ "group by ssi.SSI_INDUSTRY_SECTOR";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, memberId); // Set sector
															// parameter
				sectorDetailsStmt.setDate(2, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try {
				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN"
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME) "
						+ " between ? and ? group by ssi.SSI_INDUSTRY_SECTOR";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, memberId); // Set sector
															// parameter
				sectorDetailsStmt.setDate(2, startDate); // Set startDate
															// parameter
				sectorDetailsStmt.setDate(3, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate == null) {
			try {
				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN"
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME) "
						+ " <= ? group by ssi.SSI_INDUSTRY_SECTOR";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, memberId); // Set sector
															// parameter
				sectorDetailsStmt.setDate(2, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "sectorDetailsForZone", "Exited");
		return sectorDetailsArray;
	}

	public ArrayList sectorDetailsForBranch(java.sql.Date startDate,
			java.sql.Date endDate, String id, String memberId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "sectorDetailsForBranch", "Entered");
		PreparedStatement sectorDetailsStmt = null;
		ArrayList sectorDetailsArray = new ArrayList();
		ResultSet sectorDetailsResult;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try {
				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
						+ "and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ "app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ "member.MEM_BNK_ID|| member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ "LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? "
						+ "group by ssi.SSI_INDUSTRY_SECTOR";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, memberId); // Set sector
															// parameter
				sectorDetailsStmt.setDate(2, startDate); // Set startDate
															// parameter
				sectorDetailsStmt.setDate(3, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((id.equals("yes")) && startDate == null) {
			try {
				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
						+ "and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ "app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ "member.MEM_BNK_ID|| member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ "LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_APPROVED_DATE_TIME) <= ? "
						+ "group by ssi.SSI_INDUSTRY_SECTOR";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, memberId); // Set sector
															// parameter
				sectorDetailsStmt.setDate(2, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try {
				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN"
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME) between "
						+ "? and ? group by ssi.SSI_INDUSTRY_SECTOR";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, memberId); // Set sector
															// parameter
				sectorDetailsStmt.setDate(2, startDate); // Set startDate
															// parameter
				sectorDetailsStmt.setDate(3, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate == null) {
			try {
				String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN"
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME)  "
						+ " <= ? group by ssi.SSI_INDUSTRY_SECTOR";
				sectorDetailsStmt = connection.prepareStatement(query);
				sectorDetailsStmt.setString(1, memberId); // Set sector
															// parameter
				sectorDetailsStmt.setDate(2, endDate); // Set endDate parameter
				sectorDetailsResult = sectorDetailsStmt.executeQuery();

				while (sectorDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport sectorDetailsList = new GeneralReport();
					sectorDetailsList.setType(sectorDetailsResult.getString(1));
					sectorDetailsList.setProposals(sectorDetailsResult
							.getInt(2));
					sectorDetailsList.setAmount(sectorDetailsResult
							.getDouble(3));

					sectorDetailsArray.add(sectorDetailsList);
				}
				sectorDetailsResult.close();
				sectorDetailsResult = null;
				sectorDetailsStmt.close();
				sectorDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "sectorDetailsForBranch", "Exited");
		return sectorDetailsArray;
	}

	/*
	 * ##########################################################################
	 * ###################333
	 */

	public ArrayList stateReport(String state, String id,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "stateReport", "Entered");
		PreparedStatement bankDetailsStmt = null;
		ArrayList bankDetailsArray = new ArrayList();
		ResultSet bankDetailsResult = null;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN),"
				 * +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from ssi_detail ssi, application_detail app," +
				 * " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
				 * +
				 * " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =" +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ?" +
				 * " group by ssi.SSI_state_name" +
				 * " order by ssi.SSI_STATE_NAME";
				 */

				String query = "select ssi.SSI_STATE_NAME, count(app.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from ssi_detail ssi, application_detail app, "
						+ " PROMOTER_DETAIL P , member_info member where  p.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and app.app_status not in ('RE')   "
						+ " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? "
						+ " group by ssi.SSI_state_name "
						+ " order by ssi.SSI_STATE_NAME ";

				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, state); // Set state parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((id.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN),"
				 * +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from ssi_detail ssi, application_detail app," +
				 * " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
				 * +
				 * "and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =" +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " and trunc(app.APP_APPROVED_DATE_TIME) <= ?" +
				 * " group by ssi.SSI_state_name" +
				 * " order by ssi.SSI_STATE_NAME";
				 */
				String query = "select ssi.SSI_STATE_NAME, count(app.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from ssi_detail ssi, application_detail app, "
						+ " PROMOTER_DETAIL P , member_info member where   p.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and app.app_status not in ('RE')   "
						+ " and trunc(app.APP_APPROVED_DATE_TIME) <= ? "
						+ " group by ssi.SSI_state_name "
						+ " order by ssi.SSI_STATE_NAME ";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, state); // Set state parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN),"
				 * +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from ssi_detail ssi, application_detail app," +
				 * " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN and "
				 * + " ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) "
				 * + " and trunc(app.APP_GUAR_START_DATE_TIME) between ? and ?"
				 * + " group by ssi.SSI_state_name" +
				 * " order by ssi.SSI_STATE_NAME";
				 */

				String query = "  select ssi.SSI_STATE_NAME, count(app.CGPAN), "
						+ "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from ssi_detail ssi, application_detail app, "
						+ " PROMOTER_DETAIL P , member_info member where p.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and  "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =  "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and app.app_status not in ('RE')   "
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? "
						+ " group by ssi.SSI_state_name "
						+ " order by ssi.SSI_STATE_NAME ";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, state); // Set state parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN),"
				 * +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from ssi_detail ssi, application_detail app," +
				 * " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN and "
				 * + " ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) "
				 * + " and trunc(app.APP_GUAR_START_DATE_TIME) <= ?" +
				 * " group by ssi.SSI_state_name" +
				 * " order by ssi.SSI_STATE_NAME";
				 */

				String query = "select ssi.SSI_STATE_NAME, count(app.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from ssi_detail ssi, application_detail app, "
						+ " PROMOTER_DETAIL P, member_info member where p.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and  "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =  "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and app.app_status not in ('RE')   "
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) <= ? "
						+ " group by ssi.SSI_state_name "
						+ " order by ssi.SSI_STATE_NAME ";

				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, state); // Set state parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "stateReport", "Exited");
		return bankDetailsArray;
	}

	/**
	 * 
	 * @param state
	 * @param id
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList stateReportNew(String state, String id,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "stateReportNew", "Entered");
		PreparedStatement bankDetailsStmt = null;
		ArrayList bankDetailsArray = new ArrayList();
		ResultSet bankDetailsResult = null;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try {
				String query = "SELECT SSI_STATE_NAME,SUM(CYCNT),SUM(CYAMT),SUM(PYCNT),SUM(PYAMT),SUM(CUMCNT),SUM(CUMAMT) FROM "
						+ " ( "
						+ " SELECT SSI_STATE_NAME,COUNT(VW.CGPAN) CYCNT,SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) CYAMT, "
						+ " 0 PYCNT,0 PYAMT,0 CUMCNT,0 CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_APPROVED_DATE_TIME) BETWEEN ? AND ?  "
						+ " AND MEM_BANK_NAME = ? "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY SSI_STATE_NAME "
						+ " UNION ALL "
						+ " SELECT SSI_STATE_NAME,0 CYCNT,0 CYAMT, "
						+ " COUNT(VW.CGPAN) PYCNT,SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) PYAMT, "
						+ " 0 CUMCNT,0 CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_APPROVED_DATE_TIME) BETWEEN ADD_MONTHS(?,-12) AND ADD_MONTHS(?,-12) "
						+ " AND MEM_BANK_NAME = ? "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY SSI_STATE_NAME "
						+ " UNION ALL "
						+ " SELECT SSI_STATE_NAME,0 CYCNT,0 CYAMT,0 PYCNT,0 PYAMT, "
						+ " COUNT(VW.CGPAN) CUMCNT,SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_APPROVED_DATE_TIME) <= ? "
						+ " AND MEM_BANK_NAME = ? "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY SSI_STATE_NAME "
						+ "  ) "
						+ " GROUP BY SSI_STATE_NAME ORDER BY SSI_STATE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setDate(1, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(2, endDate); // Set startDate parameter
				bankDetailsStmt.setString(3, state); // Set state parameter
				bankDetailsStmt.setDate(4, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(5, endDate); // Set startDate parameter
				bankDetailsStmt.setString(6, state); // Set state parameter
				bankDetailsStmt.setDate(7, endDate); // Set startDate parameter
				bankDetailsStmt.setString(8, state); // Set state parameter

				// bankDetailsStmt.setString(1,state);//Set state parameter
				// bankDetailsStmt.setDate(2,startDate);//Set startDate
				// parameter
				// bankDetailsStmt.setDate(3,endDate);//Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));
					bankDetailsList.setPrevProposals(bankDetailsResult
							.getInt(4));
					bankDetailsList.setPrevAmount(bankDetailsResult
							.getDouble(5));
					bankDetailsList
							.setCumProposals(bankDetailsResult.getInt(6));
					bankDetailsList
							.setCumAmount(bankDetailsResult.getDouble(7));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((id.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN),"
						+ " SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) "
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
						+ "and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and"
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and trunc(app.APP_APPROVED_DATE_TIME) <= ?"
						+ " group by ssi.SSI_state_name"
						+ " order by ssi.SSI_STATE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, state); // Set state parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try {
				String query = "SELECT SSI_STATE_NAME,SUM(CYCNT),SUM(CYAMT),SUM(PYCNT),SUM(PYAMT),SUM(CUMCNT),SUM(CUMAMT) FROM "
						+ " ( "
						+ " SELECT SSI_STATE_NAME,COUNT(VW.CGPAN) CYCNT,SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) CYAMT, "
						+ " 0 PYCNT,0 PYAMT,0 CUMCNT,0 CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) BETWEEN ? AND ?  "
						+ " AND MEM_BANK_NAME = ? "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY SSI_STATE_NAME "
						+ " UNION ALL "
						+ " SELECT SSI_STATE_NAME,0 CYCNT,0 CYAMT, "
						+ " COUNT(VW.CGPAN) PYCNT,SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) PYAMT, "
						+ " 0 CUMCNT,0 CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) BETWEEN ADD_MONTHS(?,-12) AND ADD_MONTHS(?,-12) "
						+ " AND MEM_BANK_NAME = ? "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY SSI_STATE_NAME "
						+ " UNION ALL "
						+ " SELECT SSI_STATE_NAME,0 CYCNT,0 CYAMT,0 PYCNT,0 PYAMT, "
						+ " COUNT(VW.CGPAN) CUMCNT,SUM(DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)) CUMAMT "
						+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M,view_appl_amounts vw "
						+ " WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND A.CGPAN=VW.CGPAN "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID "
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID "
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID "
						+ " AND TRUNC(APP_GUAR_START_DATE_TIME) <= ? "
						+ " AND MEM_BANK_NAME = ? "
						+ " AND APP_STATUS NOT IN ('RE') "
						+ " GROUP BY SSI_STATE_NAME "
						+ "  ) "
						+ " GROUP BY SSI_STATE_NAME  ORDER BY SSI_STATE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setDate(1, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(2, endDate); // Set startDate parameter
				bankDetailsStmt.setString(3, state); // Set state parameter
				bankDetailsStmt.setDate(4, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(5, endDate); // Set startDate parameter
				bankDetailsStmt.setString(6, state); // Set state parameter
				bankDetailsStmt.setDate(7, endDate); // Set startDate parameter
				bankDetailsStmt.setString(8, state); // Set state parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));
					bankDetailsList.setPrevProposals(bankDetailsResult
							.getInt(4));
					bankDetailsList.setPrevAmount(bankDetailsResult
							.getDouble(5));
					bankDetailsList
							.setCumProposals(bankDetailsResult.getInt(6));
					bankDetailsList
							.setCumAmount(bankDetailsResult.getDouble(7));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN and "
						+ " ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) <= ?"
						+ " group by ssi.SSI_state_name"
						+ " order by ssi.SSI_STATE_NAME";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, state); // Set state parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "stateReportNew", "Exited");
		return bankDetailsArray;
	}

	public ArrayList stateDetailsForBank(java.sql.Date startDate,
			java.sql.Date endDate, String id, String memberId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "stateDetailsForBank", "Entered");
		PreparedStatement bankDetailsStmt = null;
		ArrayList bankDetailsArray = new ArrayList();
		ResultSet bankDetailsResult;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try {
				String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN"
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID))) "
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_APPROVED_DATE_TIME) between ? and ?"
						+ " group by ssi.SSI_state_name ";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, memberId); // Set state parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((id.equals("yes")) && startDate == null) {
			try {
				String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN"
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID))) "
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_APPROVED_DATE_TIME) <= ?"
						+ " group by ssi.SSI_state_name ";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, memberId); // Set state parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try {
				String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app, "
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID)))"
						+ " =  LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME)  between  "
						+ " ? and ? group by ssi.SSI_state_name ";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, memberId); // Set state parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate == null) {
			try {
				String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN),"
						+ "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app, "
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID)))"
						+ " =  LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME)  <= "
						+ " ? group by ssi.SSI_state_name ";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, memberId); // Set state parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "stateDetailsForBank", "Exited");
		return bankDetailsArray;
	}

	public ArrayList stateDetailsForZone(java.sql.Date startDate,
			java.sql.Date endDate, String id, String memberId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "stateDetailsForZone", "Entered");
		PreparedStatement bankDetailsStmt = null;
		ArrayList bankDetailsArray = new ArrayList();
		ResultSet bankDetailsResult;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try {
				String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN"
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID))) "
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_APPROVED_DATE_TIME) between ? and ?"
						+ " group by ssi.SSI_state_name ";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, memberId); // Set state parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((id.equals("yes")) && startDate == null) {
			try {
				String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN"
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID))) "
						+ " = LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_APPROVED_DATE_TIME) <= ?"
						+ " group by ssi.SSI_state_name ";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, memberId); // Set memberId
														// parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try {
				String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN),"
						+ "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app, "
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " =  LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME)  between "
						+ " ? and ? group by ssi.SSI_state_name ";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, memberId); // Set state parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate == null) {
			try {
				String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN),"
						+ "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app, "
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID)))"
						+ " =  LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME)  <= "
						+ " ? group by ssi.SSI_state_name ";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, memberId); // Set state parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "stateDetailsForZone", "Exited");
		return bankDetailsArray;
	}

	public ArrayList stateDetailsForBranch(java.sql.Date startDate,
			java.sql.Date endDate, String id, String memberId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "stateDetailsForBranch", "Entered");
		PreparedStatement bankDetailsStmt = null;
		ArrayList bankDetailsArray = new ArrayList();
		ResultSet bankDetailsResult;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try {
				String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN"
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ "app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ "LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID))) "
						+ "= LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_APPROVED_DATE_TIME) between ? and ?"
						+ " group by ssi.SSI_state_name ";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, memberId); // Set state parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((id.equals("yes")) && startDate == null) {
			try {
				String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ "app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ "LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID))) "
						+ "= LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_APPROVED_DATE_TIME) <= ? "
						+ " group by ssi.SSI_state_name ";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, memberId); // Set state parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try {
				String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN),"
						+ "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app, "
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID ="
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID))) "
						+ " =  LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME)  between "
						+ " ? and ? group by ssi.SSI_state_name ";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, memberId); // Set state parameter
				bankDetailsStmt.setDate(2, startDate); // Set startDate
														// parameter
				bankDetailsStmt.setDate(3, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate == null) {
			try {
				String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app, "
						+ " view_appl_amounts vw, member_info member where app.CGPAN = vw.CGPAN "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
						+ " LTRIM(RTRIM(UPPER(member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID)))"
						+ " =  LTRIM(RTRIM(UPPER(?))) and trunc(app.APP_GUAR_START_DATE_TIME) <= "
						+ " ? group by ssi.SSI_state_name ";
				bankDetailsStmt = connection.prepareStatement(query);
				bankDetailsStmt.setString(1, memberId); // Set state parameter
				bankDetailsStmt.setDate(2, endDate); // Set endDate parameter
				bankDetailsResult = bankDetailsStmt.executeQuery();

				while (bankDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport bankDetailsList = new GeneralReport();
					bankDetailsList.setType(bankDetailsResult.getString(1));
					bankDetailsList.setProposals(bankDetailsResult.getInt(2));
					bankDetailsList.setAmount(bankDetailsResult.getDouble(3));

					bankDetailsArray.add(bankDetailsList);
				}
				bankDetailsResult.close();
				bankDetailsResult = null;
				bankDetailsStmt.close();
				bankDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "stateDetailsForBranch", "Exited");
		return bankDetailsArray;
	}

	public ArrayList mliDistrictDetails(String district, String flag,
			String bank, java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {
		//System.out.println("entered====");
		
		Log.log(Log.INFO, "ReportDAO", "mliDistrictDetails", "Entered");
		PreparedStatement districtDetailsStmt = null;
		ArrayList districtDetailsArray = new ArrayList();
		ResultSet districtDetailsResult;
		Connection connection = DBConnection.getConnection();

		if ((flag.equals("yes")) && startDate != null) {
			try {
				String query = "select ssi.SSI_DISTRICT_NAME, count(app.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app, "
						+ " promoter_detail p, member_info m where  app.ssi_reference_number=p.ssi_reference_number "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER"
						+ " AND app.app_status NOT IN ('RE')"
						+ " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? and "
						+ "m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
						+ " app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID and"
						+ " LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and LTRIM(RTRIM(UPPER(m.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by ssi.SSI_DISTRICT_name ";
				
				//System.out.println("query1=="+query);
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, startDate); // Set startDate
															// parameter
				districtDetailsStmt.setDate(2, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(3, district); // Set district
															// parameter
				districtDetailsStmt.setString(4, bank); // Set bank parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((flag.equals("yes")) && startDate == null) {
			try {
				String query = "select ssi.SSI_DISTRICT_NAME, count(app.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app, "
						+ "promoter_detail p, member_info m where  app.ssi_reference_number=p.ssi_reference_number "
						+ "and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER"
						+ " AND app.app_status NOT IN ('RE')"
						+ " and trunc(app.APP_APPROVED_DATE_TIME) <= ? and "
						+ "m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
						+ " app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID and"
						+ " LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and LTRIM(RTRIM(UPPER(m.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by ssi.SSI_DISTRICT_name ";
				//System.out.println("query2=="+query);
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(2, district); // Set district
															// parameter
				districtDetailsStmt.setString(3, bank); // Set bank parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((flag.equals("no")) && startDate != null) {
			try {
				String query = "select ssi.SSI_DISTRICT_NAME, count(app.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app, "
						+ " promoter_detail p, member_info m where  app.ssi_reference_number=p.ssi_reference_number "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER"
						+ " AND app.app_status NOT IN ('RE')"
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) between ? and  ? and "
						+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
						+ " app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID and"
						+ " LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and LTRIM(RTRIM(UPPER(m.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by ssi.SSI_DISTRICT_name ";
				//System.out.println("query3=="+query);
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, startDate); // Set startDate
															// parameter
				districtDetailsStmt.setDate(2, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(3, district); // Set district
															// parameter
				districtDetailsStmt.setString(4, bank); // Set bank parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((flag.equals("no")) && startDate == null) {
			try {
				String query = "select ssi.SSI_DISTRICT_NAME, count(app.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app, "
						+ " promoter_detail p, member_info m where  app.ssi_reference_number=p.ssi_reference_number "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER"
						+ " AND app.app_status NOT IN ('RE')"
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) <= ? and "
						+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
						+ " app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID and"
						+ " LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and LTRIM(RTRIM(UPPER(m.MEM_BANK_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by ssi.SSI_DISTRICT_name ";
				//System.out.println("query4=="+query);
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(2, district); // Set district
															// parameter
				districtDetailsStmt.setString(3, bank); // Set district
														// parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

				
				
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "mliDistrictDetails", "Exited");
		return districtDetailsArray;
	}

	public ArrayList districtDetailsForBank(java.sql.Date startDate,
			java.sql.Date endDate, String id, String memberId, String state)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "districtDetailsForBank", "Entered");
		PreparedStatement districtDetailsStmt = null;
		ArrayList districtDetailsArray = new ArrayList();
		ResultSet districtDetailsResult;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try {
				String query = "select ssi.SSI_DISTRICT_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info m where app.CGPAN = vw.CGPAN"
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? and "
						+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by ssi.SSI_DISTRICT_NAME";
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, startDate); // Set startDate
															// parameter
				districtDetailsStmt.setDate(2, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(3, memberId); // Set district
															// parameter
				districtDetailsStmt.setString(4, state); // Set district
															// parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((id.equals("yes")) && startDate == null) {
			try {
				String query = " select ssi.SSI_DISTRICT_NAME, count(vw.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app, "
						+ " view_appl_amounts vw, member_info m where app.CGPAN = vw.CGPAN "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID and "
						+ "   trunc(app.APP_APPROVED_DATE_TIME) <= ? "
						+ " and  LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME)))  = LTRIM(RTRIM(UPPER(?)))"
						+ " group by ssi.SSI_DISTRICT_name";
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(2, memberId); // Set memberId
															// parameter
				districtDetailsStmt.setString(3, state); // Set state parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try {
				String query = "select ssi.SSI_DISTRICT_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info m where app.CGPAN = vw.CGPAN and "
						+ " ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? and"
						+ " LTRIM(RTRIM(UPPER( m.MEM_BNK_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by ssi.SSI_DISTRICT_name";
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, startDate); // Set startDate
															// parameter
				districtDetailsStmt.setDate(2, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(3, memberId); // Set memberId
															// parameter
				districtDetailsStmt.setString(4, state); // Set state parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate == null) {
			try {
				String query = "select ssi.SSI_DISTRICT_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info m where app.CGPAN = vw.CGPAN and "
						+ " ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) <= ? and"
						+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) "
						+ " = LTRIM(RTRIM(UPPER(?))) and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by ssi.SSI_DISTRICT_name";
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(2, memberId); // Set memberId
															// parameter
				districtDetailsStmt.setString(3, state); // Set state parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "districtDetailsForBank", "Exited");
		return districtDetailsArray;
	}

	public ArrayList districtDetailsForZone(java.sql.Date startDate,
			java.sql.Date endDate, String id, String memberId, String state)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "districtDetailsForZone", "Entered");
		PreparedStatement districtDetailsStmt = null;
		ArrayList districtDetailsArray = new ArrayList();
		ResultSet districtDetailsResult;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try {
				String query = "select ssi.SSI_DISTRICT_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info m where app.CGPAN = vw.CGPAN"
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? and "
						+ "LTRIM(RTRIM(UPPER(m.MEM_BNK_ID || m.MEM_ZNE_ID))) "
						+ "= LTRIM(RTRIM(UPPER(?))) and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by ssi.SSI_DISTRICT_name";
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, startDate); // Set startDate
															// parameter
				districtDetailsStmt.setDate(2, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(3, memberId); // Set memberId
															// parameter
				districtDetailsStmt.setString(4, state); // Set state parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((id.equals("yes")) && startDate == null) {
			try {
				String query = "select ssi.SSI_DISTRICT_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info m where app.CGPAN = vw.CGPAN"
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID and "
						+ " trunc(app.APP_APPROVED_DATE_TIME) <= ? and "
						+ "LTRIM(RTRIM(UPPER(m.MEM_BNK_ID || m.MEM_ZNE_ID))) "
						+ "= LTRIM(RTRIM(UPPER(?))) and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by ssi.SSI_DISTRICT_name";
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(2, memberId); // Set memberId
															// parameter
				districtDetailsStmt.setString(3, state); // Set state parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try {
				String query = "select ssi.SSI_DISTRICT_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info m where app.CGPAN = vw.CGPAN and "
						+ "ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) between ? and  ? and"
						+ " LTRIM(RTRIM(UPPER( m.MEM_BNK_ID || m.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by ssi.SSI_DISTRICT_name";
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, startDate); // Set startDate
															// parameter
				districtDetailsStmt.setDate(2, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(3, memberId); // Set memberId
															// parameter
				districtDetailsStmt.setString(4, state); // Set state parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate == null) {
			try {
				String query = "select ssi.SSI_DISTRICT_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info m where app.CGPAN = vw.CGPAN and "
						+ "ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ " app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID = "
						+ " m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID and "
						+ " trunc(app.APP_GUAR_START_DATE_TIME) <= ? and"
						+ " LTRIM(RTRIM(UPPER( m.MEM_BNK_ID || m.MEM_ZNE_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by ssi.SSI_DISTRICT_name";
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(2, memberId); // Set memberId
															// parameter
				districtDetailsStmt.setString(3, state); // Set state parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "districtDetailsForZone", "Exited");
		return districtDetailsArray;
	}

	public ArrayList districtDetailsForBranch(java.sql.Date startDate,
			java.sql.Date endDate, String id, String memberId, String state)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "districtDetailsForBranch", "Entered");
		PreparedStatement districtDetailsStmt = null;
		ArrayList districtDetailsArray = new ArrayList();
		ResultSet districtDetailsResult;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try {
				String query = "select ssi.SSI_DISTRICT_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info m where app.CGPAN = vw.CGPAN"
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
						+ " app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID ="
						+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID and"
						+ " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? and "
						+ "LTRIM(RTRIM(UPPER(m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID))) "
						+ "= LTRIM(RTRIM(UPPER(?))) and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by ssi.SSI_DISTRICT_name";
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, startDate); // Set startDate
															// parameter
				districtDetailsStmt.setDate(2, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(3, memberId); // Set memberId
															// parameter
				districtDetailsStmt.setString(4, state); // Set state parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((id.equals("yes")) && startDate == null) {
			try {
				String query = "select ssi.SSI_DISTRICT_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info m where app.CGPAN = vw.CGPAN"
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
						+ " app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID ="
						+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID and"
						+ " trunc(app.APP_APPROVED_DATE_TIME) <= ? and "
						+ "LTRIM(RTRIM(UPPER(m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID))) "
						+ "= LTRIM(RTRIM(UPPER(?))) and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by ssi.SSI_DISTRICT_name";
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(2, memberId); // Set memberId
															// parameter
				districtDetailsStmt.setString(3, state); // Set state parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try {
				String query = "select ssi.SSI_DISTRICT_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info m where app.CGPAN = vw.CGPAN and "
						+ "ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ "m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
						+ " app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID and"
						+ " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? and"
						+ " LTRIM(RTRIM(UPPER( m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by ssi.SSI_DISTRICT_name";
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, startDate); // Set startDate
															// parameter
				districtDetailsStmt.setDate(2, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(3, memberId); // Set memberId
															// parameter
				districtDetailsStmt.setString(4, state); // Set state parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate == null) {
			try {
				String query = "select ssi.SSI_DISTRICT_NAME, count(vw.CGPAN),"
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app,"
						+ " view_appl_amounts vw, member_info m where app.CGPAN = vw.CGPAN and "
						+ "ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and "
						+ "m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
						+ " app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID and"
						+ " trunc(app.APP_GUAR_START_DATE_TIME) <= ? and"
						+ " LTRIM(RTRIM(UPPER( m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID)))"
						+ " = LTRIM(RTRIM(UPPER(?))) and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by ssi.SSI_DISTRICT_name";
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(2, memberId); // Set memberId
															// parameter
				districtDetailsStmt.setString(3, state); // Set state parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "districtDetailsForBranch", "Exited");
		return districtDetailsArray;
	}

	/* added by sukumar 08-04-2008 */

	public ArrayList categorywiseguaranteeissuedprogressReport(
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO",
				" categorywiseguaranteeissuedprogressReport", "Entered");
		PreparedStatement allStatesStmt1 = null;
		ArrayList allStatesArray1 = new ArrayList();
		ResultSet allStatesResult1 = null;
		Connection connection = DBConnection.getConnection();

		if (startDate == null) {
			try {

				String query = "select p.pmr_chief_social_cat, count(a.cgpan),"
						+ " sum(DECODE(APP_REAPPROVE_AMOUNT,NULL,a.app_approved_amount,A.APP_REAPPROVE_AMOUNT)) "
						+ " from application_detail a,promoter_detail p ,  ssI_detail s, member_info m "
						+ " where a.ssi_reference_number = p.ssi_reference_number "
						+ " and a.ssi_reference_number =s.ssi_reference_number"
						+ " and a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID = M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID"
						+ " and a.app_status not in ('RE')"
						+ " and trunc(a.app_approved_date_time) <= ? "
						+ " group by p.pmr_chief_social_cat";
				allStatesStmt1 = connection.prepareStatement(query);
				allStatesStmt1.setDate(1, endDate); // Set endDate parameter
				allStatesResult1 = allStatesStmt1.executeQuery();
				System.out.println("query0:" + query);
				while (allStatesResult1.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport allStatesList1 = new GeneralReport();
					allStatesList1.setType(allStatesResult1.getString(1));
					allStatesList1.setProposal(allStatesResult1.getInt(2));
					allStatesList1.setAmount(allStatesResult1.getDouble(3));

					allStatesArray1.add(allStatesList1);
				}
				allStatesResult1.close();
				allStatesResult1 = null;
				allStatesStmt1.close();
				allStatesStmt1 = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate != null) {
			try {
				String query = "select p.pmr_chief_social_cat,count(a.cgpan), "
						+ " sum(DECODE(APP_REAPPROVE_AMOUNT,NULL,a.app_approved_amount,A.APP_REAPPROVE_AMOUNT)) "
						+ " from application_detail a,promoter_detail p, ssI_detail s, member_info m  "
						+ " where a.ssi_reference_number = p.ssi_reference_number "
						+ " and a.ssi_reference_number =s.ssi_reference_number"
						+ " and a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID = M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID"
						+ " and a.app_status not in ('RE') "
						+ " and trunc(a.APP_APPROVED_DATE_TIME) between "
						+ " ? and ? " + " group by p.pmr_chief_social_cat";
				allStatesStmt1 = connection.prepareStatement(query);
				allStatesStmt1.setDate(1, startDate); // Set startDate parameter
				allStatesStmt1.setDate(2, endDate); // Set endDate parameter
				allStatesResult1 = allStatesStmt1.executeQuery();
				System.out.println("query:1" + query);
				while (allStatesResult1.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport allStatesList2 = new GeneralReport();
					allStatesList2.setType(allStatesResult1.getString(1));
					allStatesList2.setProposal(allStatesResult1.getInt(2));
					allStatesList2.setAmount(allStatesResult1.getDouble(3));

					allStatesArray1.add(allStatesList2);
				}
				allStatesResult1.close();
				allStatesResult1 = null;
				allStatesStmt1.close();
				allStatesStmt1 = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		Log.log(Log.INFO, "ReportDAO",
				" categorywiseguaranteeissuedprogressReport", "Exited");
		return allStatesArray1;
	}

	/* ---------------------- */

	/* added by sukumar 03-04-2008 */

	public ArrayList minorityStateProgressReport(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", " minorityStateProgressReport",
				"Entered");
		PreparedStatement allStatesStmt1 = null;
		ArrayList allStatesArray1 = new ArrayList();
		ResultSet allStatesResult1 = null;
		Connection connection = DBConnection.getConnection();

		if (startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN), "
				 * +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
				 * +
				 * " from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m "
				 * +
				 * " where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
				 * +
				 * " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID "
				 * +
				 * " and trunc(app.APP_APPROVED_DATE_TIME) <= ? group by ssi.SSI_state_name "
				 * + " order by ssi.SSI_STATE_NAME";
				 */
				String query = "select ssi.SSI_STATE_NAME, count(app_ref_no),"
						+ " sum(app.APP_APPROVED_AMOUNT) "
						+ " from ssi_detail ssi, application_detail app, promoter_detail promoter "
						+ " where app.SSI_REFERENCE_NUMBER = ssi.SSI_REFERENCE_NUMBER "
						+ " and ssi.SSI_REFERENCE_NUMBER = promoter.SSI_REFERENCE_NUMBER "
						+ " and promoter.pmr_religion = 'Y' "
						+ " AND app.app_status NOT IN ('RE')"
						+ " and trunc(app.APP_APPROVED_DATE_TIME) <= ? "
						+ " group by ssi.ssi_state_name"
						+ " order by ssi.SSI_STATE_NAME";
				allStatesStmt1 = connection.prepareStatement(query);
				allStatesStmt1.setDate(1, endDate); // Set endDate parameter
				allStatesResult1 = allStatesStmt1.executeQuery();
				System.out.println("query0:" + query);
				while (allStatesResult1.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport allStatesList1 = new GeneralReport();
					allStatesList1.setType(allStatesResult1.getString(1));
					allStatesList1.setProposals(allStatesResult1.getInt(2));
					allStatesList1.setAmount(allStatesResult1.getDouble(3));

					allStatesArray1.add(allStatesList1);
				}
				allStatesResult1.close();
				allStatesResult1 = null;
				allStatesStmt1.close();
				allStatesStmt1 = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select ssi.SSI_STATE_NAME,count(app_ref_no), "
						+ " sum(app.APP_APPROVED_AMOUNT) "
						+ " from ssi_detail ssi, application_detail app,member_info m, promoter_detail promoter "
						+ " where app.SSI_REFERENCE_NUMBER = ssi.SSI_REFERENCE_NUMBER and ssi.SSI_REFERENCE_NUMBER = "
						+ " promoter.SSI_REFERENCE_NUMBER "
						+ " AND app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID=m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID"
						+ " and pmr_religion = 'Y'"
						+ " AND app.app_status NOT IN ('RE')"
						+ " and trunc(app.APP_APPROVED_DATE_TIME) between "
						+ " ? and ? " + " group by  ssi.SSI_STATE_NAME"
						+ " order by  ssi.SSI_STATE_NAME";
				allStatesStmt1 = connection.prepareStatement(query);
				allStatesStmt1.setDate(1, startDate); // Set startDate parameter
				allStatesStmt1.setDate(2, endDate); // Set endDate parameter
				allStatesResult1 = allStatesStmt1.executeQuery();
				System.out.println("query:2" + query);
				while (allStatesResult1.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport allStatesList2 = new GeneralReport();
					allStatesList2.setType(allStatesResult1.getString(1));
					allStatesList2.setProposals(allStatesResult1.getInt(2));
					allStatesList2.setAmount(allStatesResult1.getDouble(3));

					allStatesArray1.add(allStatesList2);
				}
				allStatesResult1.close();
				allStatesResult1 = null;
				allStatesStmt1.close();
				allStatesStmt1 = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		Log.log(Log.INFO, "ReportDAO", " minorityStateProgressReport", "Exited");
		return allStatesArray1;
	}

	/* ---------------------- */

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getapplicationApprovedReport(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", " getapplicationApprovedReport",
				"Entered");
		PreparedStatement allStatesStmt1 = null;
		ArrayList allStatesArray1 = new ArrayList();
		ResultSet allStatesResult1 = null;
		Connection connection = DBConnection.getConnection();

		if (startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */

				String query = "SELECT MEM_BANK_NAME,MEM_ZONE_NAME,"
						+ "a.mem_bnk_id||a.mem_zne_id||a.mem_brn_id,"
						+ "APP_REF_NO,CGPAN,SSI_UNIT_NAME,APP_APPROVED_AMOUNT,SSI_TYPE_OF_ACTIVITY,"
						+ " APP_CREATED_MODIFIED_BY,TRUNC(APP_APPROVED_DATE_TIME),APP_STATUS"
						+ "  FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M"
						+ "  WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER"
						+ "  and trunc(A.APP_APPROVED_DATE_TIME) <= ? "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID"
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID"
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID"
						+ " ORDER BY TRUNC(APP_APPROVED_DATE_TIME),a.mem_bnk_id||a.mem_zne_id||a.mem_brn_id";
				// System.out.println("query:"+query);
				allStatesStmt1 = connection.prepareStatement(query);
				allStatesStmt1.setDate(1, endDate); // Set endDate parameter
				allStatesResult1 = allStatesStmt1.executeQuery();
				// System.out.println("query0:"+query);
				while (allStatesResult1.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport applicationApprovedList = new GeneralReport();
					applicationApprovedList.setBankName(allStatesResult1
							.getString(1));
					applicationApprovedList.setZoneName(allStatesResult1
							.getString(2));
					applicationApprovedList.setMemberId(allStatesResult1
							.getString(3));
					applicationApprovedList.setAppRefNo(allStatesResult1
							.getString(4));
					applicationApprovedList.setCgpan(allStatesResult1
							.getString(5));
					applicationApprovedList.setSsiName(allStatesResult1
							.getString(6));
					applicationApprovedList.setAmount(allStatesResult1
							.getDouble(7));
					applicationApprovedList.setType(allStatesResult1
							.getString(8));
					applicationApprovedList.setName(allStatesResult1
							.getString(9));
					applicationApprovedList
							.setDateOfTheDocument44(allStatesResult1
									.getDate(10));
					applicationApprovedList.setStatus(allStatesResult1
							.getString(11));

					allStatesArray1.add(applicationApprovedList);
				}
				allStatesResult1.close();
				allStatesResult1 = null;
				allStatesStmt1.close();
				allStatesStmt1 = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "SELECT MEM_BANK_NAME,MEM_ZONE_NAME,"
						+ "a.mem_bnk_id||a.mem_zne_id||a.mem_brn_id,"
						+ "APP_REF_NO,CGPAN,SSI_UNIT_NAME,APP_APPROVED_AMOUNT,SSI_TYPE_OF_ACTIVITY,"
						+ "APP_CREATED_MODIFIED_BY,TRUNC(APP_APPROVED_DATE_TIME),APP_STATUS"
						+ "  FROM APPLICATION_DETAIL A,SSI_DETAIL S,MEMBER_INFO M"
						+ "  WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER"
						+ " and trunc(A.APP_APPROVED_DATE_TIME) between "
						+ " ? and ? "
						+ " AND A.MEM_BNK_ID = M.MEM_BNK_ID"
						+ " AND A.MEM_ZNE_ID = M.MEM_ZNE_ID"
						+ " AND A.MEM_BRN_ID = M.MEM_BRN_ID"
						+ " ORDER BY TRUNC(APP_APPROVED_DATE_TIME),a.mem_bnk_id||a.mem_zne_id||a.mem_brn_id";
				// System.out.println("query:"+query);
				allStatesStmt1 = connection.prepareStatement(query);
				allStatesStmt1.setDate(1, startDate); // Set startDate parameter
				allStatesStmt1.setDate(2, endDate); // Set endDate parameter
				allStatesResult1 = allStatesStmt1.executeQuery();
				// System.out.println("query:"+query);
				while (allStatesResult1.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport applicationApprovedList = new GeneralReport();
					applicationApprovedList.setBankName(allStatesResult1
							.getString(1));
					applicationApprovedList.setZoneName(allStatesResult1
							.getString(2));
					applicationApprovedList.setMemberId(allStatesResult1
							.getString(3));
					applicationApprovedList.setAppRefNo(allStatesResult1
							.getString(4));
					applicationApprovedList.setCgpan(allStatesResult1
							.getString(5));
					applicationApprovedList.setSsiName(allStatesResult1
							.getString(6));
					applicationApprovedList.setAmount(allStatesResult1
							.getDouble(7));
					applicationApprovedList.setType(allStatesResult1
							.getString(8));
					applicationApprovedList.setName(allStatesResult1
							.getString(9));
					applicationApprovedList
							.setDateOfTheDocument44(allStatesResult1
									.getDate(10));
					applicationApprovedList.setStatus(allStatesResult1
							.getString(11));

					allStatesArray1.add(applicationApprovedList);
				}
				allStatesResult1.close();
				allStatesResult1 = null;
				allStatesStmt1.close();
				allStatesStmt1 = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		Log.log(Log.INFO, "ReportDAO", " getapplicationApprovedReport",
				"Exited");
		return allStatesArray1;
	}

	/* added by shyam */

	public ArrayList minorityProgressReport(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "minorityProgressReport", "Entered");
		PreparedStatement allStatesStmt = null;
		ArrayList allStatesArray = new ArrayList();
		ResultSet allStatesResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query = "select ssi.SSI_STATE_NAME, count(vw.CGPAN), "
				 * +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
				 * +
				 * " from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m "
				 * +
				 * " where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
				 * +
				 * " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID "
				 * +
				 * " and trunc(app.APP_APPROVED_DATE_TIME) <= ? group by ssi.SSI_state_name "
				 * + " order by ssi.SSI_STATE_NAME";
				 */
				String query = "select ssi.SSI_STATE_NAME, upper(pmr_chief_first_name||' '||pmr_chief_middle_name||' '||pmr_chief_last_name), "
						+ " app.APP_APPROVED_AMOUNT "
						+ " from ssi_detail ssi, application_detail app, promoter_detail promoter "
						+ " where app.SSI_REFERENCE_NUMBER = ssi.SSI_REFERENCE_NUMBER "
						+ " and ssi.SSI_REFERENCE_NUMBER = promoter.SSI_REFERENCE_NUMBER "
						+ " and promoter.pmr_religion = 'Y' "
						+ " AND app.app_status NOT IN ('RE')"
						+ " and trunc(app.APP_APPROVED_DATE_TIME) <= ? "
						+ " order by ssi.SSI_STATE_NAME";
				 System.out.println("query0:"+query);
				
				allStatesStmt = connection.prepareStatement(query);
				allStatesStmt.setDate(1, endDate); // Set endDate parameter
				allStatesResult = allStatesStmt.executeQuery();
				
				while (allStatesResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport allStatesList = new GeneralReport();
					allStatesList.setType(allStatesResult.getString(1));
					allStatesList.setName(allStatesResult.getString(2));
					allStatesList.setAmount(allStatesResult.getDouble(3));

					allStatesArray.add(allStatesList);
				}
				allStatesResult.close();
				allStatesResult = null;
				allStatesStmt.close();
				allStatesStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select ssi.SSI_STATE_NAME, upper(pmr_chief_first_name||' '||pmr_chief_middle_name||' '||pmr_chief_last_name), "
						+ " app.APP_APPROVED_AMOUNT "
						+ " from ssi_detail ssi, application_detail app,member_info m, promoter_detail promoter "
						+ " where app.SSI_REFERENCE_NUMBER = ssi.SSI_REFERENCE_NUMBER and ssi.SSI_REFERENCE_NUMBER = "
						+ " promoter.SSI_REFERENCE_NUMBER "
						+ " AND app.app_status NOT IN ('RE')"
						+ " AND app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID = m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID"
						+ " and pmr_religion = 'Y' and trunc(app.APP_APPROVED_DATE_TIME) between "
						+ " ? and ? " + " order by ssi.SSI_STATE_NAME";
				System.out.println("query:1"+query);
				allStatesStmt = connection.prepareStatement(query);
				allStatesStmt.setDate(1, startDate); // Set startDate parameter
				allStatesStmt.setDate(2, endDate); // Set endDate parameter
				allStatesResult = allStatesStmt.executeQuery();
			
				while (allStatesResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport allStatesList = new GeneralReport();
					allStatesList.setType(allStatesResult.getString(1));
					allStatesList.setName(allStatesResult.getString(2));
					allStatesList.setAmount(allStatesResult.getDouble(3));

					allStatesArray.add(allStatesList);
				}
				allStatesResult.close();
				allStatesResult = null;
				allStatesStmt.close();
				allStatesStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		Log.log(Log.INFO, "ReportDAO", "minorityProgressReport", "Exited");
		return allStatesArray;
	}

	/* ---------------------- */

	public ArrayList turnoverProgressReport(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "turnoverProgressReport", "Entered");
		PreparedStatement allStatesStmt = null;
		ArrayList allStatesArray = new ArrayList();
		ResultSet allStatesResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate == null) {
			try {

				/*
				 * String query = "select ssi.SSI_STATE_NAME, count(CGPAN), " +
				 * " sum(ssi_no_of_employees),nvl(sum(ssi_projected_sales_turnover),0), "
				 * +
				 * "nvl(sum(ssi_projected_exports),0) from ssi_detail ssi, application_detail app "
				 * +
				 * " where app.SSI_REFERENCE_NUMBER = ssi.SSI_REFERENCE_NUMBER and app.app_status not in ( 'RE' ) "
				 * + " and trunc(app.app_approved_date_time) <= ? " +
				 * " group by ssi_state_name " + " order by ssi.SSI_STATE_NAME";
				 */

				String query = " select ssi.SSI_STATE_NAME, count(CGPAN),"
						+ " sum(ssi_no_of_employees),nvl(sum(ssi_projected_sales_turnover),0), "
						+ " nvl(sum(ssi_projected_exports),0) from ssi_detail ssi, application_detail app ,member_info m,promoter_detail p "
						+ " where app.SSI_REFERENCE_NUMBER = ssi.SSI_REFERENCE_NUMBER "
						+ " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID= m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID "
						+ " and app.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER "
						+ " and app.app_status not in ( 'RE' ) "
						+ " and trunc(app.app_approved_date_time) <= '' "
						+ " group by ssi.SSI_STATE_NAME "
						+ " order by ssi.SSI_STATE_NAME ";
				allStatesStmt = connection.prepareStatement(query);
				allStatesStmt.setDate(1, endDate); // Set endDate parameter
				allStatesResult = allStatesStmt.executeQuery();
				System.out.println("query0:" + query);
				while (allStatesResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport allStatesList = new GeneralReport();
					allStatesList.setType(allStatesResult.getString(1));
					allStatesList.setProposals(allStatesResult.getInt(2));
					// allStatesList.setName(allStatesResult.getString(2));
					allStatesList.setEmployees(allStatesResult.getInt(3));
					allStatesList.setTurnover(allStatesResult.getDouble(4));
					allStatesList.setExport(allStatesResult.getDouble(5));

					allStatesArray.add(allStatesList);
				}
				allStatesResult.close();
				allStatesResult = null;
				allStatesStmt.close();
				allStatesStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate != null) {
			try {

				/*
				 * String query = "select ssi.SSI_STATE_NAME, count(CGPAN), " +
				 * " sum(ssi_no_of_employees),nvl(sum(ssi_projected_sales_turnover),0), "
				 * +
				 * "nvl(sum(ssi_projected_exports),0) from ssi_detail ssi, application_detail app "
				 * +
				 * " where app.SSI_REFERENCE_NUMBER = ssi.SSI_REFERENCE_NUMBER and app.app_status <> 'RE' "
				 * + " and app.app_approved_date_time >= ? " +
				 * " and app.app_approved_date_time <= ? " +
				 * " group by ssi_state_name " + " order by ssi.SSI_STATE_NAME";
				 */

				String query = " SELECT ssi.SSI_STATE_NAME, "
						+ " COUNT (app.CGPAN), "
						+ " SUM (ssi_no_of_employees), "
						+ " NVL (SUM (ssi_projected_sales_turnover), 0), "
						+ " NVL (SUM (ssi_projected_exports), 0) "
						+ " FROM ssi_detail ssi, application_detail app,member_info m,promoter_detail p "
						+ " WHERE     app.SSI_REFERENCE_NUMBER = ssi.SSI_REFERENCE_NUMBER "
						+ " AND  app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID=m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID  "
						+ " AND app.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER "
						+ " AND app.app_status <> 'RE' "
						+ " AND app.app_approved_date_time >= ? "
						+ " AND app.app_approved_date_time <= ? "
						+ " GROUP BY  SSI_STATE_NAME "
						+ " ORDER BY ssi.SSI_STATE_NAME ";
				System.out.println("query:" + query);
				allStatesStmt = connection.prepareStatement(query);
				allStatesStmt.setDate(1, startDate); // Set startDate parameter
				allStatesStmt.setDate(2, endDate); // Set endDate parameter
				allStatesResult = allStatesStmt.executeQuery();

				while (allStatesResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport allStatesList = new GeneralReport();
					allStatesList.setType(allStatesResult.getString(1));
					allStatesList.setProposals(allStatesResult.getInt(2));
					// allStatesList.setName(allStatesResult.getString(2));
					allStatesList.setEmployees(allStatesResult.getInt(3));
					allStatesList.setTurnover(allStatesResult.getDouble(4));
					allStatesList.setExport(allStatesResult.getDouble(5));

					allStatesArray.add(allStatesList);
				}
				allStatesResult.close();
				allStatesResult = null;
				allStatesStmt.close();
				allStatesStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		Log.log(Log.INFO, "ReportDAO", "turnoverProgressReport", "Exited");
		return allStatesArray;
	}

	/*
	 * ##########################################################################
	 * ##########################
	 */

	public ArrayList stateWiseReportDetails(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "stateWiseReportDetails", "Entered");
		PreparedStatement allStatesStmt = null;
		ArrayList allStatesArray = new ArrayList();
		ResultSet allStatesResult = null;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query = "select m.MEM_STATE_NAME, count(vw.CGPAN), " +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
				 * +
				 * " from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m "
				 * +
				 * " where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
				 * +
				 * " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID "
				 * +
				 * " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? group by m.MEM_STATE_NAME "
				 * + " order by m.MEM_STATE_NAME";
				 */
				// added on 07.05.2018
				/*
				 * String query = "select m.MEM_STATE_NAME, count(APP.CGPAN), "
				 * +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
				 * +
				 * " from ssi_detail ssi, application_detail app, promoter_detail p, member_info m "
				 * +
				 * " where ssi.SSI_REFERENCE_NUMBER = P.SSI_REFERENCE_NUMBER and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
				 * +
				 * " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID "
				 * + " and app.app_status not in ('RE') " +
				 * " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? group by m.MEM_STATE_NAME "
				 * + " order by m.MEM_STATE_NAME";
				 */

				String query = "select ssi.SSI_STATE_NAME, count(APP.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from ssi_detail ssi, application_detail app, promoter_detail p, member_info m  "
						+ " where ssi.SSI_REFERENCE_NUMBER = P.SSI_REFERENCE_NUMBER and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER  "
						+ " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =    m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID  "
						+ " and app.app_status not in ('RE') "
						+ " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? group by ssi.SSI_STATE_NAME "
						+ " order by ssi.SSI_STATE_NAME ";

				//System.out.println("query 1 ===" + query);
				allStatesStmt = connection.prepareStatement(query);
				allStatesStmt.setDate(1, startDate); // Set startDate parameter
				allStatesStmt.setDate(2, endDate); // Set endDate parameter
				allStatesResult = allStatesStmt.executeQuery();

				while (allStatesResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport allStatesList = new GeneralReport();
					allStatesList.setType(allStatesResult.getString(1));
					allStatesList.setProposals(allStatesResult.getInt(2));
					allStatesList.setAmount(allStatesResult.getDouble(3));
					allStatesArray.add(allStatesList);
				}
				allStatesResult.close();
				allStatesResult = null;
				allStatesStmt.close();
				allStatesStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((id.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select ssi.SSI_STATE_NAME, count(app.CGPAN), " +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
				 * +
				 * " from ssi_detail ssi, application_detail app, promoter_detail p, member_info m "
				 * +
				 * " where ssi.SSI_REFERENCE_NUMBER =p.SSI_REFERENCE_NUMBER and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
				 * +
				 * " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID "
				 * + " and app.app_status not in ('RE') " +
				 * " and trunc(app.APP_APPROVED_DATE_TIME) <= ? group by ssi.SSI_state_name "
				 * + " order by ssi.SSI_STATE_NAME";
				 */

				/*
				 * String query = "SELECT M.MEM_STATE_NAME, " +
				 * " COUNT (app.CGPAN), " +
				 * "  SUM (DECODE (app.APP_REAPPROVE_AMOUNT, NULL, app.APP_APPROVED_AMOUNT, app.APP_REAPPROVE_AMOUNT)) "
				 * + " FROM ssi_detail ssi, " + " application_detail app, " +
				 * " promoter_detail p, " + " member_info m " +
				 * " WHERE     ssi.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER "
				 * + " AND ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
				 * +
				 * " AND app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID = m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID "
				 * + " AND app.app_status NOT IN ('RE') " +
				 * " AND TRUNC (app.APP_APPROVED_DATE_TIME) <= ? " +
				 * " GROUP BY M.MEM_STATE_NAME " +
				 * " ORDER BY M.MEM_STATE_NAME ";
				 */

				String query = "SELECT ssi.SSI_STATE_NAME, "
						+ " COUNT (app.CGPAN), "
						+ "  SUM (DECODE (app.APP_REAPPROVE_AMOUNT, NULL, app.APP_APPROVED_AMOUNT, app.APP_REAPPROVE_AMOUNT)) "
						+ " FROM ssi_detail ssi, "
						+ " application_detail app, "
						+ " promoter_detail p, "
						+ " member_info m "
						+ " WHERE     ssi.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER "
						+ " AND ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ " AND app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID = m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID "
						+ " AND app.app_status NOT IN ('RE') "
						+ " AND TRUNC (app.APP_APPROVED_DATE_TIME) <= ? "
						+ " GROUP BY ssi.SSI_STATE_NAME "
						+ " ORDER BY ssi.SSI_STATE_NAME ";

				// System.out.println("query 2 ==="+query);
				allStatesStmt = connection.prepareStatement(query);
				allStatesStmt.setDate(1, endDate); // Set endDate parameter
				allStatesResult = allStatesStmt.executeQuery();

				while (allStatesResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport allStatesList = new GeneralReport();
					allStatesList.setType(allStatesResult.getString(1));
					allStatesList.setProposals(allStatesResult.getInt(2));
					allStatesList.setAmount(allStatesResult.getDouble(3));

					allStatesArray.add(allStatesList);
				}
				allStatesResult.close();
				allStatesResult = null;
				allStatesStmt.close();
				allStatesStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query = "select m.MEM_STATE_NAME, count(app.CGPAN), "
				 * +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * +
				 * " from ssi_detail ssi,member_info m, application_detail app, promoter_detail p "
				 * + " where ssi.SSI_REFERENCE_NUMBER =p.SSI_REFERENCE_NUMBER" +
				 * " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID "
				 * + " and app.app_status not in ('RE') " +
				 * " and ssi.SSI_REFERENCE_NUMBER = " +
				 * " app.SSI_REFERENCE_NUMBER and trunc(app.APP_GUAR_START_DATE_TIME) between "
				 * + " ? and ? group by m.MEM_STATE_NAME" +
				 * " order by m.MEM_STATE_NAME";
				 */

				String query = "select ssi.SSI_STATE_NAME, count(app.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi,member_info m, application_detail app, promoter_detail p "
						+ " where ssi.SSI_REFERENCE_NUMBER =p.SSI_REFERENCE_NUMBER"
						+ " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID "
						+ " and app.app_status not in ('RE') "
						+ " and ssi.SSI_REFERENCE_NUMBER = "
						+ " app.SSI_REFERENCE_NUMBER and trunc(app.APP_GUAR_START_DATE_TIME) between "
						+ " ? and ? group by ssi.SSI_STATE_NAME"
						+ " order by ssi.SSI_STATE_NAME";

				 //System.out.println("query 3 ==="+query);
				allStatesStmt = connection.prepareStatement(query);
				allStatesStmt.setDate(1, startDate); // Set startDate parameter
				allStatesStmt.setDate(2, endDate); // Set endDate parameter
				allStatesResult = allStatesStmt.executeQuery();

				while (allStatesResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport allStatesList = new GeneralReport();
					allStatesList.setType(allStatesResult.getString(1));
					allStatesList.setProposals(allStatesResult.getInt(2));
					allStatesList.setAmount(allStatesResult.getDouble(3));

					allStatesArray.add(allStatesList);
				}
				allStatesResult.close();
				allStatesResult = null;
				allStatesStmt.close();
				allStatesStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select ssi.SSI_STATE_NAME, count(app.CGPAN), " +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * +
				 * " from ssi_detail ssi, application_detail app, promoter_detail p "
				 * +
				 * " where ssi.SSI_REFERENCE_NUMBER =p.SSI_REFERENCE_NUMBER  and ssi.SSI_REFERENCE_NUMBER = "
				 * + " and app.app_status not in ('RE') " +
				 * " and app.SSI_REFERENCE_NUMBER and trunc(app.APP_GUAR_START_DATE_TIME) "
				 * + " <= ? group by ssi.SSI_state_name" +
				 * " order by ssi.SSI_STATE_NAME";
				 */
				/*
				 * String query = "select M.MEM_STATE_NAME, count(app.CGPAN)," +
				 * "SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * +
				 * " from ssi_detail ssi, application_detail app, promoter_detail p , member_info m"
				 * + " where ssi.SSI_REFERENCE_NUMBER =p.SSI_REFERENCE_NUMBER  "
				 * + " and app.app_status not in ('RE') " +
				 * " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER" +
				 * " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID"
				 * + " and trunc(app.APP_GUAR_START_DATE_TIME)" +
				 * " <= ? group by M.MEM_STATE_NAME" +
				 * " order by M.MEM_STATE_NAME";
				 */

				/*
				 * String query = "select M.MEM_STATE_NAME, count(app.CGPAN)," +
				 * "SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * +
				 * " from ssi_detail ssi, application_detail app, promoter_detail p , member_info m"
				 * + " where ssi.SSI_REFERENCE_NUMBER =p.SSI_REFERENCE_NUMBER  "
				 * + " and app.app_status not in ('RE') " +
				 * " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER" +
				 * " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID"
				 * + " and trunc(app.APP_GUAR_START_DATE_TIME)" +
				 * " <= ? group by M.MEM_STATE_NAME" +
				 * " order by M.MEM_STATE_NAME";
				 */

				String query = "select ssi.SSI_STATE_NAME, count(app.CGPAN),"
						+ "SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, application_detail app, promoter_detail p , member_info m"
						+ " where ssi.SSI_REFERENCE_NUMBER =p.SSI_REFERENCE_NUMBER  "
						+ " and app.app_status not in ('RE') "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER"
						+ " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID"
						+ " and trunc(app.APP_APPROVED_DATE_TIME)"
						+ " <= ? group by ssi.SSI_STATE_NAME"
						+ " order by ssi.SSI_STATE_NAME";

				// System.out.println("query 4 ==="+query);
				allStatesStmt = connection.prepareStatement(query);
				allStatesStmt.setDate(1, endDate); // Set endDate parameter
				allStatesResult = allStatesStmt.executeQuery();

				while (allStatesResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport allStatesList = new GeneralReport();
					allStatesList.setType(allStatesResult.getString(1));
					allStatesList.setProposals(allStatesResult.getInt(2));
					allStatesList.setAmount(allStatesResult.getDouble(3));

					allStatesArray.add(allStatesList);
				}
				allStatesResult.close();
				allStatesResult = null;
				allStatesStmt.close();
				allStatesStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "stateWiseReportDetails", "Exited");
		return allStatesArray;
	}

	/*
	 * ##########################################################################
	 * ############3
	 */

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList stateWiseReportDetailsNew(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "stateWiseReportDetailsNew", "Entered");
		PreparedStatement allStatesStmt = null;
		ArrayList allStatesArray = new ArrayList();
		ResultSet allStatesResult = null;
		Connection connection = DBConnection.getConnection();

		if ((id.equals("yes")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "  SELECT ST,SUM(CCASES),SUM(CAMT),SUM(PCASES),SUM(PAMT),SUM(CUMCASES),SUM(CUMAMT) FROM ( "
						+ "  select ssi.SSI_STATE_NAME ST, count(vw.CGPAN) CCASES,  "
						+ "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) CAMT, "
						+ "	0 PCASES,0 PAMT, "
						+ "  0 CUMCASES,0 CUMAMT from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m  "
						+ " where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID  "
						+ "  and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? group by ssi.SSI_state_name "
						+ "  UNION ALL	"
						+ "  select ssi.SSI_STATE_NAME ST, 0 CCASES,  "
						+ "  0 CAMT, "
						+ "	count(vw.CGPAN) PCASES,SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) PAMT,"
						+ "	0 CUMCASES,0 CUMAMT from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m  "
						+ "  where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ "  and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID  "
						+ "  and trunc(app.APP_APPROVED_DATE_TIME) between add_months(?,-12) and add_months(?,-12) group by ssi.SSI_state_name "
						+ "  UNION ALL						   "
						+ "  select ssi.SSI_STATE_NAME ST, 0 CCASES,0 CAMT, 0 PCASES,0 PAMT,count(vw.CGPAN) CUMCASES,  "
						+ "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) CUMAMT  "
						+ "  from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m  "
						+ "  where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER  "
						+ "  and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID  "
						+ "  and trunc(app.APP_APPROVED_DATE_TIME) <= ? group by ssi.SSI_state_name "
						+ "  ) GROUP BY ST " + "   ORDER BY ST	";
				/*
				 * "SELECT ST,SUM(CPER),SUM(APER),SUM(CCUM),SUM(ACUM) FROM ( "+
				 * " select ssi.SSI_STATE_NAME ST, count(vw.CGPAN) CPER, "+
				 * "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) APER, "
				 * +
				 * "   0 CCUM,0 ACUM from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m "
				 * +
				 * " where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
				 * +
				 * " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID "
				 * +
				 * " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? group by ssi.SSI_state_name "
				 * + " UNION ALL	"+
				 * " select ssi.SSI_STATE_NAME ST, 0 CPER,0 APER, count(vw.CGPAN) CCUM, "
				 * +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) ACUM "
				 * +
				 * " from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m  "
				 * +
				 * "  where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
				 * +
				 * " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID "
				 * +
				 * " and trunc(app.APP_APPROVED_DATE_TIME) <= ? group by ssi.SSI_state_name "
				 * + " ) GROUP BY ST "+ " ORDER BY ST	";
				 */
				// System.out.println("Query:"+query);
				allStatesStmt = connection.prepareStatement(query);
				allStatesStmt.setDate(1, startDate); // Set startDate parameter
				allStatesStmt.setDate(2, endDate); // Set endDate parameter
				allStatesStmt.setDate(3, startDate); // Set startDate parameter
				allStatesStmt.setDate(4, endDate); // Set endDate parameter
				allStatesStmt.setDate(5, endDate);

				allStatesResult = allStatesStmt.executeQuery();

				while (allStatesResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport allStatesList = new GeneralReport();
					allStatesList.setType(allStatesResult.getString(1));
					allStatesList.setProposals(allStatesResult.getInt(2));
					allStatesList.setAmount(allStatesResult.getDouble(3));

					allStatesList.setPrevProposals(allStatesResult.getInt(4));
					allStatesList.setPrevAmount(allStatesResult.getDouble(5));

					allStatesList.setCumProposals(allStatesResult.getInt(6));
					allStatesList.setCumAmount(allStatesResult.getDouble(7));
					allStatesArray.add(allStatesList);
				}
				allStatesResult.close();
				allStatesResult = null;
				allStatesStmt.close();
				allStatesStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((id.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "  SELECT ST,SUM(CCASES),SUM(CAMT),SUM(PCASES),SUM(PAMT),SUM(CUMCASES),SUM(CUMAMT) FROM ( "
						+ "  select ssi.SSI_STATE_NAME ST, count(vw.CGPAN) CCASES,  "
						+ "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) CAMT, "
						+ "	0 PCASES,0 PAMT, "
						+ "  0 CUMCASES,0 CUMAMT from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m  "
						+ " where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID  "
						+ "  and trunc(app.APP_APPROVED_DATE_TIME) <= ? group by ssi.SSI_state_name "
						+ "  UNION ALL	"
						+ "  select ssi.SSI_STATE_NAME ST, 0 CCASES,  "
						+ "  0 CAMT, "
						+ "	count(vw.CGPAN) PCASES,SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) PAMT,"
						+ "	0 CUMCASES,0 CUMAMT from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m  "
						+ "  where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ "  and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID  "
						+ "  and trunc(app.APP_APPROVED_DATE_TIME) <= add_months(?,-12)  group by ssi.SSI_state_name "
						+ "  UNION ALL						   "
						+ "  select ssi.SSI_STATE_NAME ST, 0 CCASES,0 CAMT, 0 PCASES,0 PAMT,count(vw.CGPAN) CUMCASES,  "
						+ "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) CUMAMT  "
						+ "  from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m  "
						+ "  where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER  "
						+ "  and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID  "
						+ "  and trunc(app.APP_APPROVED_DATE_TIME) <= ? group by ssi.SSI_state_name "
						+ "  ) GROUP BY ST " + "   ORDER BY ST	";
				allStatesStmt = connection.prepareStatement(query);
				allStatesStmt.setDate(1, endDate); // Set endDate parameter
				allStatesStmt.setDate(2, endDate);
				allStatesStmt.setDate(3, endDate);
				allStatesResult = allStatesStmt.executeQuery();

				while (allStatesResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport allStatesList = new GeneralReport();
					allStatesList.setType(allStatesResult.getString(1));
					allStatesList.setProposals(allStatesResult.getInt(2));
					allStatesList.setAmount(allStatesResult.getDouble(3));

					allStatesList.setPrevProposals(allStatesResult.getInt(4));
					allStatesList.setPrevAmount(allStatesResult.getDouble(5));

					allStatesList.setCumProposals(allStatesResult.getInt(6));
					allStatesList.setCumAmount(allStatesResult.getDouble(7));

					allStatesArray.add(allStatesList);
				}
				allStatesResult.close();
				allStatesResult = null;
				allStatesStmt.close();
				allStatesStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "  SELECT ST,SUM(CCASES),SUM(CAMT),SUM(PCASES),SUM(PAMT),SUM(CUMCASES),SUM(CUMAMT) FROM ( "
						+ "  select ssi.SSI_STATE_NAME ST, count(vw.CGPAN) CCASES,  "
						+ "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) CAMT, "
						+ "	0 PCASES,0 PAMT, "
						+ "  0 CUMCASES,0 CUMAMT from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m  "
						+ " where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID  "
						+ "  and trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? group by ssi.SSI_state_name "
						+ "  UNION ALL	"
						+ "  select ssi.SSI_STATE_NAME ST, 0 CCASES,  "
						+ "  0 CAMT, "
						+ "	count(vw.CGPAN) PCASES,SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) PAMT,"
						+ "	0 CUMCASES,0 CUMAMT from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m  "
						+ "  where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ "  and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID  "
						+ "  and trunc(app.APP_GUAR_START_DATE_TIME) between add_months(?,-12) and add_months(?,-12) group by ssi.SSI_state_name "
						+ "  UNION ALL						   "
						+ "  select ssi.SSI_STATE_NAME ST, 0 CCASES,0 CAMT, 0 PCASES,0 PAMT,count(vw.CGPAN) CUMCASES,  "
						+ "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) CUMAMT  "
						+ "  from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m  "
						+ "  where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER  "
						+ "  and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID  "
						+ "  and trunc(app.APP_GUAR_START_DATE_TIME) <= ? group by ssi.SSI_state_name "
						+ "  ) GROUP BY ST " + "   ORDER BY ST	";

				allStatesStmt = connection.prepareStatement(query);
				allStatesStmt.setDate(1, startDate); // Set startDate parameter
				allStatesStmt.setDate(2, endDate); // Set endDate parameter
				allStatesStmt.setDate(3, startDate); // Set startDate parameter
				allStatesStmt.setDate(4, endDate); // Set endDate parameter
				allStatesStmt.setDate(5, endDate);
				allStatesResult = allStatesStmt.executeQuery();

				while (allStatesResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport allStatesList = new GeneralReport();
					allStatesList.setType(allStatesResult.getString(1));
					allStatesList.setProposals(allStatesResult.getInt(2));
					allStatesList.setAmount(allStatesResult.getDouble(3));

					allStatesList.setPrevProposals(allStatesResult.getInt(4));
					allStatesList.setPrevAmount(allStatesResult.getDouble(5));

					allStatesList.setCumProposals(allStatesResult.getInt(6));
					allStatesList.setCumAmount(allStatesResult.getDouble(7));

					allStatesArray.add(allStatesList);
				}
				allStatesResult.close();
				allStatesResult = null;
				allStatesStmt.close();
				allStatesStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((id.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "  SELECT ST,SUM(CCASES),SUM(CAMT),SUM(PCASES),SUM(PAMT),SUM(CUMCASES),SUM(CUMAMT) FROM ( "
						+ "  select ssi.SSI_STATE_NAME ST, count(vw.CGPAN) CCASES,  "
						+ "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) CAMT, "
						+ "	0 PCASES,0 PAMT, "
						+ "  0 CUMCASES,0 CUMAMT from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m  "
						+ " where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID  "
						+ "  and trunc(app.APP_GUAR_START_DATE_TIME) <= ? group by ssi.SSI_state_name "
						+ "  UNION ALL	"
						+ "  select ssi.SSI_STATE_NAME ST, 0 CCASES,  "
						+ "  0 CAMT, "
						+ "	count(vw.CGPAN) PCASES,SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) PAMT,"
						+ "	0 CUMCASES,0 CUMAMT from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m  "
						+ "  where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ "  and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID  "
						+ "  and trunc(app.APP_GUAR_START_DATE_TIME) <= add_months(?,-12)  group by ssi.SSI_state_name "
						+ "  UNION ALL						   "
						+ "  select ssi.SSI_STATE_NAME ST, 0 CCASES,0 CAMT, 0 PCASES,0 PAMT,count(vw.CGPAN) CUMCASES,  "
						+ "  SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) CUMAMT  "
						+ "  from ssi_detail ssi, application_detail app, view_appl_amounts vw, member_info m  "
						+ "  where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER  "
						+ "  and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID =	m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID  "
						+ "  and trunc(app.APP_GUAR_START_DATE_TIME) <= ? group by ssi.SSI_state_name "
						+ "  ) GROUP BY ST " + "   ORDER BY ST	";
				allStatesStmt = connection.prepareStatement(query);
				allStatesStmt.setDate(1, endDate); // Set endDate parameter
				allStatesStmt.setDate(2, endDate); // Set endDate parameter
				allStatesStmt.setDate(3, endDate); // Set endDate parameter
				allStatesResult = allStatesStmt.executeQuery();

				while (allStatesResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport allStatesList = new GeneralReport();
					allStatesList.setType(allStatesResult.getString(1));
					allStatesList.setProposals(allStatesResult.getInt(2));
					allStatesList.setAmount(allStatesResult.getDouble(3));

					allStatesList.setPrevProposals(allStatesResult.getInt(4));
					allStatesList.setPrevAmount(allStatesResult.getDouble(5));

					allStatesList.setCumProposals(allStatesResult.getInt(6));
					allStatesList.setCumAmount(allStatesResult.getDouble(7));

					allStatesArray.add(allStatesList);
				}
				allStatesResult.close();
				allStatesResult = null;
				allStatesStmt.close();
				allStatesStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "stateWiseReportDetailsNew", "Exited");
		return allStatesArray;
	}

	public ArrayList stateDetails(String state, String flag,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "stateDetails", "Entered");
		PreparedStatement stateDetailsStmt = null;
		ArrayList stateDetailsArray = new ArrayList();
		ResultSet stateDetailsResult = null;
		Connection connection = DBConnection.getConnection();

		if ((flag.equals("yes")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_BANK_NAME, count(vw.CGPAN)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
				 * +
				 * " from member_info member, application_detail app, view_appl_amounts vw, "
				 * +
				 * " ssi_detail ssi where app.CGPAN = vw.CGPAN and app.MEM_BNK_ID||app.MEM_ZNE_ID|| "
				 * +
				 * " app.MEM_BRN_ID=member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
				 * +
				 * " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? and LTRIM(RTRIM(UPPER(MEMBER.MEM_STATE_NAME))) "
				 * + " = LTRIM(RTRIM(UPPER(?))) and ssi.SSI_REFERENCE_NUMBER  "
				 * + " =app.SSI_REFERENCE_NUMBER group by member.MEM_BANK_NAME"
				 * + " order by member.MEM_BANK_NAME";
				 */
				// ADDED ON 07.05.2018

				/*
				 * String query = "SELECT MEMBER.MEM_BANK_NAME, " +
				 * " COUNT (APP.CGPAN), " +
				 * " SUM (DECODE (app.APP_REAPPROVE_AMOUNT, NULL, app.APP_APPROVED_AMOUNT, app.APP_REAPPROVE_AMOUNT)) "
				 * + " FROM member_info MEMBER, " + " application_detail app, "
				 * + " promoter_detail p, " + " ssi_detail ssi " +
				 * " WHERE     ssi.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER "
				 * +
				 * " AND app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID = "
				 * +
				 * " MEMBER.MEM_BNK_ID || MEMBER.MEM_ZNE_ID || MEMBER.MEM_BRN_ID "
				 * + " AND app.app_status NOT IN ('RE') " +
				 * " AND TRUNC (app.APP_APPROVED_DATE_TIME) BETWEEN ? AND ? " +
				 * " AND LTRIM (RTRIM (UPPER (MEMBER.MEM_STATE_NAME))) = LTRIM (RTRIM (UPPER (?))) "
				 * + " AND ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
				 * + " GROUP BY MEMBER.MEM_BANK_NAME " +
				 * " ORDER BY MEMBER.MEM_BANK_NAME ";
				 */

				String query = "SELECT MEMBER.MEM_BANK_NAME, "
						+ " COUNT (APP.CGPAN), "
						+ " SUM (DECODE (app.APP_REAPPROVE_AMOUNT, NULL, app.APP_APPROVED_AMOUNT, app.APP_REAPPROVE_AMOUNT)) "
						+ " FROM member_info MEMBER, "
						+ " application_detail app, "
						+ " promoter_detail p, "
						+ " ssi_detail ssi "
						+ " WHERE     ssi.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER "
						+ " AND app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID = "
						+ " MEMBER.MEM_BNK_ID || MEMBER.MEM_ZNE_ID || MEMBER.MEM_BRN_ID "
						+ " AND app.app_status NOT IN ('RE') "
						+ " AND TRUNC (app.APP_APPROVED_DATE_TIME) BETWEEN ? AND ? "
						+ " AND LTRIM (RTRIM (UPPER (ssi.SSI_STATE_NAME))) = LTRIM (RTRIM (UPPER (?))) "
						+ " AND ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ " GROUP BY MEMBER.MEM_BANK_NAME "
						+ " ORDER BY MEMBER.MEM_BANK_NAME ";

				//System.out.println("query====" + query);
				stateDetailsStmt = connection.prepareStatement(query);
				stateDetailsStmt.setDate(1, startDate); // Set startDate
														// parameter
				stateDetailsStmt.setDate(2, endDate); // Set endDate parameter
				stateDetailsStmt.setString(3, state); // Set state parameter
				stateDetailsResult = stateDetailsStmt.executeQuery();

				while (stateDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport stateDetailsList = new GeneralReport();
					stateDetailsList.setType(stateDetailsResult.getString(1));
					stateDetailsList.setProposals(stateDetailsResult.getInt(2));
					stateDetailsList.setAmount(stateDetailsResult.getDouble(3));

					stateDetailsArray.add(stateDetailsList);
				}
				stateDetailsResult.close();
				stateDetailsResult = null;
				stateDetailsStmt.close();
				stateDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((flag.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_BANK_NAME, count(vw.CGPAN)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
				 * +
				 * " from member_info member, application_detail app, view_appl_amounts vw, "
				 * +
				 * " ssi_detail ssi where app.CGPAN = vw.CGPAN and app.MEM_BNK_ID||app.MEM_ZNE_ID|| "
				 * +
				 * " app.MEM_BRN_ID=member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and  "
				 * +
				 * " trunc(app.APP_APPROVED_DATE_TIME) <= ? and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME))) "
				 * + " = LTRIM(RTRIM(UPPER(?))) and ssi.SSI_REFERENCE_NUMBER  "
				 * + " = app.SSI_REFERENCE_NUMBER group by member.MEM_BANK_NAME"
				 * + " order by member.MEM_BANK_NAME";
				 */
				String query = "SELECT MEMBER.MEM_BANK_NAME, "
						+ " COUNT (app.CGPAN), "
						+ " SUM (DECODE (app.APP_REAPPROVE_AMOUNT, NULL, app.APP_APPROVED_AMOUNT, app.APP_REAPPROVE_AMOUNT)) "
						+ " FROM member_info MEMBER, "
						+ " application_detail app, "
						+ " promoter_detail p, "
						+ " ssi_detail ssi "
						+ " WHERE     ssi.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER  "
						+ " AND app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID = MEMBER.MEM_BNK_ID || MEMBER.MEM_ZNE_ID || MEMBER.MEM_BRN_ID "
						+ " AND app.app_status NOT IN ('RE')  "
						+ " AND TRUNC (app.APP_APPROVED_DATE_TIME) <= ? "
						+ " AND LTRIM (RTRIM (UPPER (ssi.SSI_STATE_NAME))) = LTRIM (RTRIM (UPPER (?))) "
						+ " AND ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ " GROUP BY MEMBER.MEM_BANK_NAME "
						+ " ORDER BY MEMBER.MEM_BANK_NAME ";

				//System.out.println("query 2====" + query);
				stateDetailsStmt = connection.prepareStatement(query);
				stateDetailsStmt.setDate(1, endDate); // Set endDate parameter
				stateDetailsStmt.setString(2, state); // Set state parameter
				stateDetailsResult = stateDetailsStmt.executeQuery();

				while (stateDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport stateDetailsList = new GeneralReport();
					stateDetailsList.setType(stateDetailsResult.getString(1));
					stateDetailsList.setProposals(stateDetailsResult.getInt(2));
					stateDetailsList.setAmount(stateDetailsResult.getDouble(3));

					stateDetailsArray.add(stateDetailsList);
				}
				stateDetailsResult.close();
				stateDetailsResult = null;
				stateDetailsStmt.close();
				stateDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		} else if ((flag.equals("no")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_BANK_NAME, count(vw.CGPAN), " +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from member_info member, application_detail app," +
				 * " view_appl_amounts vw, ssi_detail ssi where app.CGPAN = vw.CGPAN and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
				 * + " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? and "
				 * +
				 * " LTRIM(RTRIM(UPPER(member.MEM_STATE_NAME))) = LTRIM(RTRIM(UPPER(?))) "
				 * + " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER"
				 * + " group by member.MEM_BANK_NAME" +
				 * " order by member.MEM_BANK_NAME";
				 */
				String query = "SELECT MEMBER.MEM_BANK_NAME, "
						+ " COUNT (APP.CGPAN), "
						+ " SUM (DECODE (app.APP_REAPPROVE_AMOUNT, NULL, app.APP_APPROVED_AMOUNT, app.APP_REAPPROVE_AMOUNT))  "
						+ " FROM member_info MEMBER, "
						+ " application_detail app, "
						+ " promoter_detail p, "
						+ " ssi_detail ssi "
						+ " WHERE     ssi.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER "
						+ " AND app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID = MEMBER.MEM_BNK_ID || MEMBER.MEM_ZNE_ID || MEMBER.MEM_BRN_ID  "
						+ " AND app.app_status NOT IN ('RE') "
						+ " AND TRUNC (app.APP_GUAR_START_DATE_TIME) BETWEEN ? AND ? "
						+ " AND LTRIM (RTRIM (UPPER (ssi.SSI_STATE_NAME))) =LTRIM (RTRIM (UPPER (?)))  "
						+ " AND ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ " GROUP BY MEMBER.MEM_BANK_NAME "
						+ " ORDER BY MEMBER.MEM_BANK_NAME ";

				// System.out.println("query 3 ===="+query);

				stateDetailsStmt = connection.prepareStatement(query);
				stateDetailsStmt.setDate(1, startDate); // Set startDate
														// parameter
				stateDetailsStmt.setDate(2, endDate); // Set endDate parameter
				stateDetailsStmt.setString(3, state); // Set state parameter
				stateDetailsResult = stateDetailsStmt.executeQuery();

				while (stateDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport stateDetailsList = new GeneralReport();
					stateDetailsList.setType(stateDetailsResult.getString(1));
					stateDetailsList.setProposals(stateDetailsResult.getInt(2));
					stateDetailsList.setAmount(stateDetailsResult.getDouble(3));

					stateDetailsArray.add(stateDetailsList);
				}
				stateDetailsResult.close();
				stateDetailsResult = null;
				stateDetailsStmt.close();
				stateDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((flag.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select member.MEM_BANK_NAME, count(vw.CGPAN), " +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * + " from member_info member, application_detail app," +
				 * " view_appl_amounts vw, ssi_detail ssi where app.CGPAN = vw.CGPAN and "
				 * + " app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID = " +
				 * " member.MEM_BNK_ID||member.MEM_ZNE_ID||member.MEM_BRN_ID and "
				 * + " trunc(app.APP_GUAR_START_DATE_TIME) <= ? and " +
				 * " LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME))) = LTRIM(RTRIM(UPPER(?))) "
				 * + " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER"
				 * + " group by member.MEM_BANK_NAME" +
				 * " order by member.MEM_BANK_NAME";
				 */

				String query = "SELECT MEMBER.MEM_BANK_NAME, "
						+ " COUNT (app.CGPAN), "
						+ " SUM (DECODE(app.APP_REAPPROVE_AMOUNT, NULL, app.APP_APPROVED_AMOUNT, app.APP_REAPPROVE_AMOUNT)) "
						+ " FROM member_info MEMBER, "
						+ " application_detail app, "
						+ " promoter_detail p, "
						+ " ssi_detail ssi "
						+ " WHERE     ssi.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER "
						+ " AND app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID = MEMBER.MEM_BNK_ID || MEMBER.MEM_ZNE_ID || MEMBER.MEM_BRN_ID "
						+ " AND app.app_status NOT IN ('RE') "
						+ " AND TRUNC (app.APP_GUAR_START_DATE_TIME) <= ? "
						+ " AND LTRIM (RTRIM (UPPER (ssi.SSI_STATE_NAME))) = LTRIM (RTRIM (UPPER (?))) "
						+ " AND ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ " GROUP BY MEMBER.MEM_BANK_NAME "
						+ " ORDER BY MEMBER.MEM_BANK_NAME ";

				// System.out.println("query 4 ===="+query);
				stateDetailsStmt = connection.prepareStatement(query);
				stateDetailsStmt.setDate(1, endDate); // Set endDate parameter
				stateDetailsStmt.setString(2, state); // Set state parameter
				stateDetailsResult = stateDetailsStmt.executeQuery();

				while (stateDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport stateDetailsList = new GeneralReport();
					stateDetailsList.setType(stateDetailsResult.getString(1));
					stateDetailsList.setProposals(stateDetailsResult.getInt(2));
					stateDetailsList.setAmount(stateDetailsResult.getDouble(3));

					stateDetailsArray.add(stateDetailsList);
				}
				stateDetailsResult.close();
				stateDetailsResult = null;
				stateDetailsStmt.close();
				stateDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "stateDetails", "Exited");
		return stateDetailsArray;
	}

	/*
	 * ##########################################################################
	 * ############################33
	 */

	public ArrayList stateDistrictDetails(String district, String flag,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "stateDistrictDetails", "Entered");
		PreparedStatement districtDetailsStmt = null;
		ArrayList districtDetailsArray = new ArrayList();
		ResultSet districtDetailsResult = null;
		Connection connection = DBConnection.getConnection();

		if ((flag.equals("yes")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select m.MEM_DISTRICT_NAME, count(app.CGPAN), " +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * +
				 * " from ssi_detail ssi, member_info m,application_detail app, promoter_detail p "
				 * +
				 * " where ssi.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER  "
				 * +
				 * " AND  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID =app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID"
				 * + " AND app.app_status NOT IN ('RE') " +
				 * " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER" +
				 * " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? " +
				 * " and LTRIM(RTRIM(UPPER(m.MEM_STATE_NAME)))" +
				 * " = LTRIM(RTRIM(UPPER(?))) group by m.MEM_DISTRICT_NAME" +
				 * " order by m.MEM_DISTRICT_NAME";
				 */

				String query = "select ssi.SSI_DISTRICT_NAME, count(app.CGPAN), "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
						+ " from ssi_detail ssi, member_info m,application_detail app, promoter_detail p "
						+ " where ssi.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER  "
						+ " AND  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID =app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID"
						+ " AND app.app_status NOT IN ('RE') "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER"
						+ " and trunc(app.APP_APPROVED_DATE_TIME) between ? and ? "
						+ " and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME)))"
						+ " = LTRIM(RTRIM(UPPER(?))) group by ssi.SSI_DISTRICT_NAME"
						+ " order by ssi.SSI_DISTRICT_NAME";
				System.out.println("query===" + query);

				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, startDate); // Set startDate
															// parameter
				districtDetailsStmt.setDate(2, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(3, district); // Set ditrict
															// parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		if ((flag.equals("yes")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select ssi.SSI_DISTRICT_NAME, count(vw.CGPAN), " +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
				 * +
				 * " from ssi_detail ssi, application_detail app, view_appl_amounts vw "
				 * +
				 * " where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER"
				 * +
				 * " and trunc(app.APP_APPROVED_DATE_TIME) <= ? and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME)))"
				 * + " = LTRIM(RTRIM(UPPER(?))) group by ssi.SSI_DISTRICT_name"
				 * + " order by ssi.SSI_DISTRICT_NAME";
				 */
				String query = "SELECT ssi.SSI_DISTRICT_NAME, "
						+ " COUNT (app.CGPAN), "
						+ " SUM (DECODE (app.APP_REAPPROVE_AMOUNT, NULL, app.APP_APPROVED_AMOUNT, app.APP_REAPPROVE_AMOUNT)) "
						+ " FROM ssi_detail ssi, application_detail app, promoter_detail p, member_info MEMBER "
						+ " WHERE ssi.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER  "
						+ " AND app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID = MEMBER.MEM_BNK_ID || MEMBER.MEM_ZNE_ID || MEMBER.MEM_BRN_ID "
						+ " AND ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ " AND app.app_status NOT IN ('RE')  "
						+ " AND TRUNC (app.APP_APPROVED_DATE_TIME) <= ? "
						+ " AND LTRIM (RTRIM (UPPER (ssi.SSI_STATE_NAME))) = LTRIM (RTRIM (UPPER (?))) "
						+ " GROUP BY ssi.SSI_DISTRICT_NAME "
						+ " ORDER BY ssi.SSI_DISTRICT_NAME ";
				System.out.println("query1" + query);
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, endDate); // Set endDate
															// parameter
				districtDetailsStmt.setString(2, district); // Set ditrict
															// parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((flag.equals("no")) && startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select m.MEM_DISTRICT_NAME, count(vw.CGPAN), " +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
				 * +
				 * " from ssi_detail ssi,member_info m, application_detail app, view_appl_amounts vw "
				 * + " where app.CGPAN = vw.CGPAN " +
				 * " AND  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID =app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID"
				 * + " and ssi.SSI_REFERENCE_NUMBER = " +
				 * " app.SSI_REFERENCE_NUMBER and trunc(app.APP_GUAR_START_DATE_TIME) "
				 * +
				 * " between ? and ? and LTRIM(RTRIM(UPPER(m.MEM_STATE_NAME))) = "
				 * + " LTRIM(RTRIM(UPPER(?))) group by m.MEM_DISTRICT_NAME" +
				 * " order by m.MEM_DISTRICT_NAME";
				 */

				String query = "select ssi.SSI_DISTRICT_NAME, count(app.CGPAN),  "
						+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
						+ " from ssi_detail ssi,member_info m, application_detail app, promoter_detail p "
						+ " where ssi.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER "
						+ " and  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID =app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID "
						+ " and ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ " and app.app_status NOT IN ('RE') "
						+ " and trunc(app.APP_GUAR_START_DATE_TIME) "
						+ " between ? and ? and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by ssi.SSI_DISTRICT_NAME "
						+ " order by ssi.SSI_DISTRICT_NAME ";

				// System.out.println("query2"+query);
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, startDate); // Set startDate
															// parameter
				districtDetailsStmt.setDate(2, endDate); // Set endtDate
															// parameter
				districtDetailsStmt.setString(3, district); // Set district
															// parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if ((flag.equals("no")) && startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * String query =
				 * "select ssi.SSI_DISTRICT_NAME, count(vw.CGPAN)," +
				 * " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT)) "
				 * +
				 * " from ssi_detail ssi, application_detail app, view_appl_amounts vw "
				 * +
				 * " where app.CGPAN = vw.CGPAN and ssi.SSI_REFERENCE_NUMBER = "
				 * +
				 * " app.SSI_REFERENCE_NUMBER and trunc(app.APP_GUAR_START_DATE_TIME) "
				 * + " <= ? and LTRIM(RTRIM(UPPER(ssi.SSI_STATE_NAME))) = " +
				 * " LTRIM(RTRIM(UPPER(?))) group by ssi.SSI_DISTRICT_name" +
				 * " order by ssi.SSI_DISTRICT_NAME";
				 */

				String query = "SELECT ssi.SSI_DISTRICT_NAME, "
						+ " COUNT (app.CGPAN), "
						+ " SUM (DECODE (app.APP_REAPPROVE_AMOUNT, NULL, app.APP_APPROVED_AMOUNT, app.APP_REAPPROVE_AMOUNT)) "
						+ " FROM ssi_detail ssi, application_detail app, promoter_detail p, "
						+ " member_info m "
						+ " WHERE     ssi.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER "
						+ " AND app.MEM_BNK_ID || app.MEM_ZNE_ID || app.MEM_BRN_ID =m.MEM_BNK_ID ||m.MEM_ZNE_ID ||m.MEM_BRN_ID "
						+ " AND ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ " AND app.app_status NOT IN ('RE') "
						+ " AND TRUNC (app.APP_GUAR_START_DATE_TIME) <= ? "
						+ " AND LTRIM (RTRIM (UPPER (ssi.SSI_STATE_NAME))) = LTRIM (RTRIM (UPPER (?))) "
						+ " GROUP BY ssi.SSI_DISTRICT_NAME "
						+ " ORDER BY ssi.SSI_DISTRICT_NAME ";

				// System.out.println("query4"+query);
				districtDetailsStmt = connection.prepareStatement(query);
				districtDetailsStmt.setDate(1, endDate); // Set endtDate
															// parameter
				districtDetailsStmt.setString(2, district); // Set district
															// parameter
				districtDetailsResult = districtDetailsStmt.executeQuery();

				while (districtDetailsResult.next()) {
					// Instantiate a GeneralReport value object
					GeneralReport districtDetailsList = new GeneralReport();
					districtDetailsList.setType(districtDetailsResult
							.getString(1));
					districtDetailsList.setProposals(districtDetailsResult
							.getInt(2));
					districtDetailsList.setAmount(districtDetailsResult
							.getDouble(3));

					districtDetailsArray.add(districtDetailsList);
				}
				districtDetailsResult.close();
				districtDetailsResult = null;
				districtDetailsStmt.close();
				districtDetailsStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "stateDistrictDetails", "Exited");
		return districtDetailsArray;
	}

	/**
	 * added by sukumar@path
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList allocatedpaymentReport(java.sql.Date startDate,
			java.sql.Date endDate, String id,String dantype) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "allocatedpaymentReport", "Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
					 * + " p.PAY_INSTRUMENT_NUMBER, "+ " p.PAY_INSTRUMENT_DT, "+
					 * " p.PAY_PAYMENT_DT, p.PAY_AMOUNT,p.PAY_ID,c.DAN_ID,c.CGPAN "
					 * +
					 * " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.dan_id like 'SF%' and c.DCI_ALLOCATION_FLAG = 'Y'"
					 * +
					 * " and trunc(c.DCI_ALLOCATION_DT) between ? and ? order by mem_id"
					 * ; //
					 * " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , " +
					 * // " p.PAY_INSTRUMENT_NUMBER,p.PAY_INSTRUMENT_DT," + //
					 * "  p.PAY_PAYMENT_DT," + //
					 * " p.PAY_AMOUNT,p.PAY_ID order by mem_id" ;
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_PAYMENT_DT,p.PAY_ID,sum(c.dci_base_amt),sum(c.dci_stax_amt),sum(c.dci_ecess_amt),sum(c.dci_hecess_amt), sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type =?  and c.DCI_ALLOCATION_FLAG = 'Y'"
							+ " and trunc(c.DCI_ALLOCATION_DT) between ? and ? "
							+ " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , "
							+ " p.PAY_INSTRUMENT_NUMBER,p.PAY_INSTRUMENT_DT,"
							+ "  p.PAY_PAYMENT_DT,"
							+ " p.PAY_ID order by mem_id";
					System.out.println("Query:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setString(1, dantype);
					paymentStmt.setDate(2, startDate); // Set endDate parameter
					paymentStmt.setDate(3, endDate); // Set startDate parameter
				 
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(2));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(3));
						paymentReport.setRecievedDate(paymentResult.getDate(4));
						paymentReport.setPayId(paymentResult.getString(5));

						paymentReport.setBaseAmount(paymentResult.getDouble(6));
						paymentReport.setSerTaxAmount(paymentResult
								.getDouble(7));
						paymentReport.setEduCessbaseAmount(paymentResult
								.getDouble(8));
						paymentReport.setHighereduCessbaseAmount(paymentResult
								.getDouble(9));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(11));// rajuk

						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(12));// kuldeep@20-5

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					/*
					 * String query
					 * ="select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
					 * + " p.PAY_INSTRUMENT_NUMBER, "+ " p.PAY_INSTRUMENT_DT, "+
					 * " p.PAY_PAYMENT_DT, p.PAY_AMOUNT,p.PAY_ID,c.DAN_ID,c.CGPAN "
					 * +
					 * " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.dan_id like 'SF%' and c.DCI_ALLOCATION_FLAG = 'Y'"
					 * + " and trunc(c.DCI_ALLOCATION_DT) between ? and ?  and"
					 * +
					 * " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
					 * + " = LTRIM(RTRIM(UPPER(?)))" + //
					 * " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID ,"
					 * + // " p.PAY_INSTRUMENT_NUMBER," + //
					 * " p.PAY_INSTRUMENT_DT," + //
					 * " p.PAY_PAYMENT_DT, p.PAY_AMOUNT,p.PAY_ID"+
					 * " order by mem_id";
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_PAYMENT_DT,p.PAY_ID,sum(c.dci_base_amt),sum(c.dci_stax_amt),sum(c.dci_ecess_amt),sum(c.dci_hecess_amt),sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') and c.DCI_ALLOCATION_FLAG = 'Y'"
							+ " and trunc(c.DCI_ALLOCATION_DT) between ? and ?  and"
							+ " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID ,"
							+ " p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT,"
							+ " p.PAY_PAYMENT_DT,p.PAY_ID" + " order by mem_id";
					// Systemem.out.println("Query1:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(2));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(3));
						paymentReport.setRecievedDate(paymentResult.getDate(4));
						paymentReport.setPayId(paymentResult.getString(5));

						paymentReport.setBaseAmount(paymentResult.getDouble(6));
						paymentReport.setSerTaxAmount(paymentResult
								.getDouble(7));
						paymentReport.setEduCessbaseAmount(paymentResult
								.getDouble(8));
						paymentReport.setHighereduCessbaseAmount(paymentResult
								.getDouble(9));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(11));// rajuk
						// added by kuldeep@path 23-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(12));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		/*
		 * else if(startDate == null) { if((id == null) || (id.equals(""))) {
		 * 
		 * try {
		 * 
		 * String query =
		 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id," +
		 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
		 * +
		 * " p.PAY_INSTRUMENT_DT, p.PAY_PAYEE_BANK_OR_BRANCH, p.PAY_PAYABLE_AT, "
		 * + " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT " +
		 * " from payment_detail p, demand_advice_info d, dan_cgpan_info c "+
		 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID " +
		 * " and trunc(p.PAY_REALISATION_DT) <= ? " +
		 * " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,"
		 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
		 * " p.PAY_INSTRUMENT_DT, p.PAY_PAYEE_BANK_OR_BRANCH, p.PAY_PAYABLE_AT, "
		 * +
		 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT order by mem_id"
		 * ; // //System.out.println("Query2:"+query); paymentStmt =
		 * connection.prepareStatement(query);
		 * paymentStmt.setDate(1,endDate);//Set startDate parameter
		 * paymentResult = paymentStmt.executeQuery();
		 * 
		 * 
		 * while(paymentResult.next()) { // Instantiate a PaymentReport value
		 * object PaymentReport paymentReport = new PaymentReport();
		 * paymentReport.setMemberId(paymentResult.getString(1));
		 * paymentReport.setPaymentMode(paymentResult.getString(2));
		 * paymentReport.setInstrumentType(paymentResult.getString(3));
		 * paymentReport.setInstrumentNumber(paymentResult.getString(4));
		 * paymentReport.setRecievedDate(paymentResult.getDate(8));
		 * paymentReport.setInstrumentDate(paymentResult.getDate(5));
		 * paymentReport.setAmountPaid(paymentResult.getDouble(10));
		 * paymentReport.setPayeeBank(paymentResult.getString(6));
		 * paymentReport.setPayableAt(paymentResult.getString(7));
		 * paymentReport.setRealisationDate(paymentResult.getDate(9));
		 * 
		 * paymentArray.add(paymentReport); } paymentResult.close();
		 * paymentResult = null; paymentStmt.close(); paymentStmt = null;
		 * 
		 * } catch(Exception exception) { Log.logException(exception); throw new
		 * DatabaseException(exception.getMessage()); } finally {
		 * DBConnection.freeConnection(connection); } }
		 * 
		 * else if(id != null) {
		 * 
		 * try {
		 * 
		 * String query =
		 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id," +
		 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
		 * +
		 * " p.PAY_INSTRUMENT_DT, p.PAY_PAYEE_BANK_OR_BRANCH, p.PAY_PAYABLE_AT,"
		 * + " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT" +
		 * " from payment_detail p, demand_advice_info d, dan_cgpan_info c"+
		 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID" +
		 * " and trunc(p.PAY_REALISATION_DT) <= ?  and" +
		 * " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
		 * + " = LTRIM(RTRIM(UPPER(?)))"+
		 * " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
		 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER," +
		 * " p.PAY_INSTRUMENT_DT, p.PAY_PAYEE_BANK_OR_BRANCH, p.PAY_PAYABLE_AT,"
		 * + " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT"+
		 * " order by mem_id"; // //System.out.println("Query2:"+query);
		 * paymentStmt = connection.prepareStatement(query);
		 * paymentStmt.setDate(1,endDate);//Set endDate parameter
		 * paymentStmt.setString(2,id);//Set id parameter paymentResult =
		 * paymentStmt.executeQuery();
		 * 
		 * while(paymentResult.next()) { // Instantiate a PaymentReport value
		 * object PaymentReport paymentReport = new PaymentReport();
		 * paymentReport.setMemberId(paymentResult.getString(1));
		 * paymentReport.setPaymentMode(paymentResult.getString(2));
		 * paymentReport.setInstrumentType(paymentResult.getString(3));
		 * paymentReport.setInstrumentNumber(paymentResult.getString(4));
		 * paymentReport.setRecievedDate(paymentResult.getDate(8));
		 * paymentReport.setInstrumentDate(paymentResult.getDate(5));
		 * paymentReport.setAmountPaid(paymentResult.getDouble(10));
		 * paymentReport.setPayeeBank(paymentResult.getString(6));
		 * paymentReport.setPayableAt(paymentResult.getString(7));
		 * paymentReport.setRealisationDate(paymentResult.getDate(9));
		 * 
		 * paymentArray.add(paymentReport); } paymentResult.close();
		 * paymentResult = null; paymentStmt.close(); paymentStmt = null;
		 * 
		 * } catch(Exception exception) { Log.logException(exception); throw new
		 * DatabaseException(exception.getMessage()); }
		 * 
		 * finally { DBConnection.freeConnection(connection); } } }
		 */

		Log.log(Log.INFO, "ReportDAO", "allocatedpaymentReport", "Exited");
		return paymentArray;
	}

	/* --------------------- */

	public ArrayList gfallocatedpaymentReport(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "gfallocatedpaymentReport", "Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */

					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_PAYMENT_DT,p.PAY_ID,sum(c.dci_base_amt),sum(c.dci_stax_amt),sum(c.dci_ecess_amt),sum(c.dci_hecess_amt), sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('CG','GF') and c.DCI_ALLOCATION_FLAG = 'Y'"
							+ " and trunc(c.DCI_ALLOCATION_DT) between ? and ? "
							+ " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , "
							+ " p.PAY_INSTRUMENT_NUMBER,p.PAY_INSTRUMENT_DT,"
							+ "  p.PAY_PAYMENT_DT,"
							+ " p.PAY_ID order by mem_id";
					// //System.out.println("Query:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(2));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(3));
						paymentReport.setRecievedDate(paymentResult.getDate(4));
						paymentReport.setPayId(paymentResult.getString(5));

						paymentReport.setBaseAmount(paymentResult.getDouble(6));
						paymentReport.setSerTaxAmount(paymentResult
								.getDouble(7));
						paymentReport.setEduCessbaseAmount(paymentResult
								.getDouble(8));
						paymentReport.setHighereduCessbaseAmount(paymentResult
								.getDouble(9));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(11));// rajuk
						// added by kuldeep 20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(12));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {

					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_PAYMENT_DT,p.PAY_ID,sum(c.dci_base_amt),sum(c.dci_stax_amt),sum(c.dci_ecess_amt),sum(c.dci_hecess_amt),sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('CG','GF') and c.DCI_ALLOCATION_FLAG = 'Y'"
							+ " and trunc(c.DCI_ALLOCATION_DT) between ? and ?  and"
							+ " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID ,"
							+ " p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT,"
							+ " p.PAY_PAYMENT_DT,p.PAY_ID" + " order by mem_id";
					// //System.out.println("Query1:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(2));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(3));
						paymentReport.setRecievedDate(paymentResult.getDate(4));
						paymentReport.setPayId(paymentResult.getString(5));

						paymentReport.setBaseAmount(paymentResult.getDouble(6));
						paymentReport.setSerTaxAmount(paymentResult
								.getDouble(7));
						paymentReport.setEduCessbaseAmount(paymentResult
								.getDouble(8));
						paymentReport.setHighereduCessbaseAmount(paymentResult
								.getDouble(9));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(11));// rajuk
						// added by kuldeep 20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(12));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "gfallocatedpaymentReport", "Exited");
		return paymentArray;
	}

	/*
	 * ##########################################################################
	 * ####################333333333
	 */

	public ArrayList paymentReport(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "paymentReport", "Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT)"
							+ " from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ " and DCI_APPROPRIATION_FLAG = 'Y' AND trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,"
							+ " p.PAY_INSTRUMENT_NUMBER,p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH,"
							+ "  p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
							+ " order by mem_id";

			//System.out.println("Query:rrr"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));

						// paymentReport.setCgpan(paymentResult.getString(11));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id,"
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail p,demand_advice_info d, dan_cgpan_info c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('CG','GF') "
							+ " and trunc(p.PAY_REALISATION_DT) between ? and ?  and"
							+ " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID ,"
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
							+ " order by mem_id";
					// //System.out.println("Query 22:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id,"
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('CG','GF') "
							+ " and trunc(p.PAY_REALISATION_DT) <= ?  "
							+ " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by mem_id";
					// //System.out.println("Query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
				{
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id,"
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT)"
							+ " from payment_detail p, demand_advice_info d, dan_cgpan_info c"
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('CG','GF') "
							+ " and trunc(p.PAY_REALISATION_DT) <= ?  and"
							+ " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
							+ " order by mem_id";
					// //System.out.println("Query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "paymentReport", "Exited");
		return paymentArray;
	}

	public ArrayList paymentReportforRSF(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Connection connection;
		ArrayList paymentArray;
		Log.log(4, "ReportDAO", "paymentReport", "Entered");
		connection = DBConnection.getConnection();
		paymentArray = new ArrayList();
		if (startDate == null)
			// break MISSING_BLOCK_LABEL_624;
			if (id != null && !id.equals(""))
				// break MISSING_BLOCK_LABEL_328;
				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id,  p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED)  from payment_detail p, demand_advice_info d, dan_cgpan_info c  where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF')  and DCI_APPROPRIATION_FLAG = 'Y' AND trunc(p.PAY_REALISATION_DT) between ? and ?  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE, p.PAY_INSTRUMENT_NUMBER,p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH,  p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by mem_id";
					PreparedStatement paymentStmt = connection
							.prepareStatement(query);
					paymentStmt.setDate(1, startDate);
					paymentStmt.setDate(2, endDate);
					ResultSet paymentResult;
					PaymentReport paymentReport;
					for (paymentResult = paymentStmt.executeQuery(); paymentResult
							.next(); paymentArray.add(paymentReport)) {
						paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
					}

					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;
				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
		// break MISSING_BLOCK_LABEL_1200;
		if (id == null)
			// break MISSING_BLOCK_LABEL_1200;
			try {
				String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id, p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED)  from payment_detail p,demand_advice_info d, dan_cgpan_info c  where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') and trunc(p.PAY_REALISATION_DT) between ? and ?  and LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID))) = LTRIM(RTRIM(UPPER(?))) group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by mem_id";
				PreparedStatement paymentStmt = connection
						.prepareStatement(query);
				paymentStmt.setDate(1, startDate);
				paymentStmt.setDate(2, endDate);
				paymentStmt.setString(3, id);
				ResultSet paymentResult;
				PaymentReport paymentReport;
				for (paymentResult = paymentStmt.executeQuery(); paymentResult
						.next(); paymentArray.add(paymentReport)) {
					paymentReport = new PaymentReport();
					paymentReport.setMemberId(paymentResult.getString(1));
					paymentReport.setPaymentMode(paymentResult.getString(2));
					paymentReport.setInstrumentType(paymentResult.getString(3));
					paymentReport.setInstrumentNumber(paymentResult
							.getString(4));
					paymentReport.setRecievedDate(paymentResult.getDate(9));
					paymentReport.setInstrumentDate(paymentResult.getDate(5));
					paymentReport.setAmountPaid(paymentResult.getDouble(11));
					paymentReport.setPayeeBank(paymentResult.getString(6));
					paymentReport.setPayeeBranch(paymentResult.getString(7));
					paymentReport.setPayableAt(paymentResult.getString(8));
					paymentReport.setRealisationDate(paymentResult.getDate(10));
				}

				paymentResult.close();
				paymentResult = null;
				paymentStmt.close();
				paymentStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			}

			finally {
				DBConnection.freeConnection(connection);
			}
		// break MISSING_BLOCK_LABEL_1200;
		if (startDate != null)
			// break MISSING_BLOCK_LABEL_1200;
			if (id != null && !id.equals(""))
				// break MISSING_BLOCK_LABEL_916;
				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED)  from payment_detail p, demand_advice_info d, dan_cgpan_info c  where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') and trunc(p.PAY_REALISATION_DT) <= ?   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,   p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by mem_id";
					PreparedStatement paymentStmt = connection
							.prepareStatement(query);
					paymentStmt.setDate(1, endDate);
					ResultSet paymentResult;
					PaymentReport paymentReport;
					for (paymentResult = paymentStmt.executeQuery(); paymentResult
							.next(); paymentArray.add(paymentReport)) {
						paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
					}

					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;
				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
		if (id == null)
			// break MISSING_BLOCK_LABEL_1200;
			try {
				String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id, p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from payment_detail p, demand_advice_info d, dan_cgpan_info c where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') and trunc(p.PAY_REALISATION_DT) <= ?  and LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID))) = LTRIM(RTRIM(UPPER(?))) group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by mem_id";
				PreparedStatement paymentStmt = connection
						.prepareStatement(query);
				paymentStmt.setDate(1, endDate);
				paymentStmt.setString(2, id);
				ResultSet paymentResult;
				PaymentReport paymentReport;
				for (paymentResult = paymentStmt.executeQuery(); paymentResult
						.next(); paymentArray.add(paymentReport)) {
					paymentReport = new PaymentReport();
					paymentReport.setMemberId(paymentResult.getString(1));
					paymentReport.setPaymentMode(paymentResult.getString(2));
					paymentReport.setInstrumentType(paymentResult.getString(3));
					paymentReport.setInstrumentNumber(paymentResult
							.getString(4));
					paymentReport.setRecievedDate(paymentResult.getDate(9));
					paymentReport.setInstrumentDate(paymentResult.getDate(5));
					paymentReport.setAmountPaid(paymentResult.getDouble(11));
					paymentReport.setPayeeBank(paymentResult.getString(6));
					paymentReport.setPayeeBranch(paymentResult.getString(7));
					paymentReport.setPayableAt(paymentResult.getString(8));
					paymentReport.setRealisationDate(paymentResult.getDate(10));
				}

				paymentResult.close();
				paymentResult = null;
				paymentStmt.close();
				paymentStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			}

			finally {
				DBConnection.freeConnection(connection);
			}
		Log.log(4, "ReportDAO", "paymentReport", "Exited");
		return paymentArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList dchpaymentReport(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "dchpaymentReport", "Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ " from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ " and DCI_APPROPRIATION_FLAG = 'Y' AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' AND trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,"
							+ " p.PAY_INSTRUMENT_NUMBER,p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH,"
							+ "  p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
							+ " order by mem_id";
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						// paymentReport.setCgpan(paymentResult.getString(11));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id,"
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ " from payment_detail p,demand_advice_info d, dan_cgpan_info c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' and d.dan_type in ('CG','GF') "
							+ " and trunc(p.PAY_REALISATION_DT) between ? and ?  and"
							+ " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID ,"
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
							+ " order by mem_id";
					// //System.out.println("Query1:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id,"
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ " from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' and d.dan_type in ('CG','GF') "
							+ " and trunc(p.PAY_REALISATION_DT) <= ?  "
							+ " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by mem_id";
					// //System.out.println("Query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
				{
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id,"
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED)"
							+ " from payment_detail p, demand_advice_info d, dan_cgpan_info c"
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' and d.dan_type in ('CG','GF') "
							+ " and trunc(p.PAY_REALISATION_DT) <= ?  and"
							+ " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
							+ " order by mem_id";
					// //System.out.println("Query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "dchpaymentReport", "Exited");
		return paymentArray;
	}

	public ArrayList asfpaymentReportNew(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "asfpaymentReportNew", "Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ " from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') "
							+ " and DCI_APPROPRIATION_FLAG = 'Y' AND trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,"
							+ " p.PAY_INSTRUMENT_NUMBER,p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH,"
							+ "  p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
							+ " order by mem_id";

					// //System.out.println("Query:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						// paymentReport.setCgpan(paymentResult.getString(11));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id,"
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ " from payment_detail p,demand_advice_info d, dan_cgpan_info c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') "
							+ " and trunc(p.PAY_REALISATION_DT) between ? and ?  and"
							+ " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID ,"
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
							+ " order by mem_id";
					// //System.out.println("Query1:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id,"
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ " from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') "
							+ " and trunc(p.PAY_REALISATION_DT) <= ?  "
							+ " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by mem_id";
					// //System.out.println("Query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
				{
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id,"
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED)"
							+ " from payment_detail p, demand_advice_info d, dan_cgpan_info c"
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') "
							+ " and trunc(p.PAY_REALISATION_DT) <= ?  and"
							+ " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
							+ " order by mem_id";
					// //System.out.println("Query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "asfpaymentReportNew", "Exited");
		return paymentArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getasfdailyPaymentReport(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "getasfdailyPaymentReport", "Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// //System.out.println("St Date:"+startDate);
		// //System.out.println("End Date:"+endDate);
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
					 * +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * " from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%' "
					 * + " and trunc(p.PAY_REALISATION_DT) between ? and ? "+
					 * " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,"
					 * +
					 * " p.PAY_INSTRUMENT_NUMBER,p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH,"
					 * +
					 * "  p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
					 * + " order by mem_id" ;
					 */

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('SF','AF') and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					// //System.out.println("Query:"+query);
					paymentStmt = connection.prepareStatement(query);

					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						/*
						 * paymentReport.setMemberId(paymentResult.getString(1));
						 * paymentReport
						 * .setPaymentMode(paymentResult.getString(2));
						 * paymentReport
						 * .setInstrumentType(paymentResult.getString(3));
						 * paymentReport
						 * .setInstrumentNumber(paymentResult.getString(4));
						 * paymentReport
						 * .setRecievedDate(paymentResult.getDate(9));
						 * paymentReport
						 * .setInstrumentDate(paymentResult.getDate(5));
						 * paymentReport
						 * .setAmountPaid(paymentResult.getDouble(11));
						 * paymentReport
						 * .setPayeeBank(paymentResult.getString(6));
						 * paymentReport
						 * .setPayeeBranch(paymentResult.getString(7));
						 * paymentReport
						 * .setPayableAt(paymentResult.getString(8));
						 * paymentReport
						 * .setRealisationDate(paymentResult.getDate(10));
						 * //paymentReport
						 * .setCgpan(paymentResult.getString(11));
						 */

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * " from payment_detail p,demand_advice_info d, dan_cgpan_info c "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%'"
					 * + " and trunc(p.PAY_REALISATION_DT) between ? and ?  and"
					 * +
					 * " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
					 * + " = LTRIM(RTRIM(UPPER(?)))" +
					 * " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID ,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
					 * + " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"+
					 * " order by mem_id";
					 */

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('SF','AF') and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? and  "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID || dai.MEM_ZNE_ID || dai.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					// //System.out.println("Query1:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(id);
						/*
						 * paymentReport.setMemberId(paymentResult.getString(1));
						 * paymentReport
						 * .setPaymentMode(paymentResult.getString(2));
						 * paymentReport
						 * .setInstrumentType(paymentResult.getString(3));
						 * paymentReport
						 * .setInstrumentNumber(paymentResult.getString(4));
						 * paymentReport
						 * .setRecievedDate(paymentResult.getDate(9));
						 * paymentReport
						 * .setInstrumentDate(paymentResult.getDate(5));
						 * paymentReport
						 * .setAmountPaid(paymentResult.getDouble(11));
						 * paymentReport
						 * .setPayeeBank(paymentResult.getString(6));
						 * paymentReport
						 * .setPayeeBranch(paymentResult.getString(7));
						 * paymentReport
						 * .setPayableAt(paymentResult.getString(8));
						 * paymentReport
						 * .setRealisationDate(paymentResult.getDate(10));
						 */

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * " p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * " from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%'"
					 * + " and trunc(p.PAY_REALISATION_DT) <= ?  " +
					 * " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by mem_id"
					 * ;
					 */
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					// //System.out.println("Query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						/*
						 * paymentReport.setMemberId(paymentResult.getString(1));
						 * paymentReport
						 * .setPaymentMode(paymentResult.getString(2));
						 * paymentReport
						 * .setInstrumentType(paymentResult.getString(3));
						 * paymentReport
						 * .setInstrumentNumber(paymentResult.getString(4));
						 * paymentReport
						 * .setRecievedDate(paymentResult.getDate(9));
						 * paymentReport
						 * .setInstrumentDate(paymentResult.getDate(5));
						 * paymentReport
						 * .setAmountPaid(paymentResult.getDouble(11));
						 * paymentReport
						 * .setPayeeBank(paymentResult.getString(6));
						 * paymentReport
						 * .setPayeeBranch(paymentResult.getString(7));
						 * paymentReport
						 * .setPayableAt(paymentResult.getString(8));
						 * paymentReport
						 * .setRealisationDate(paymentResult.getDate(10));
						 */

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
				{
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED)"
					 * +
					 * " from payment_detail p, demand_advice_info d, dan_cgpan_info c"
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%'"
					 * + " and trunc(p.PAY_REALISATION_DT) <= ?  and" +
					 * " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
					 * + " = LTRIM(RTRIM(UPPER(?)))"+
					 * " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER," +
					 * " p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
					 * + " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"+
					 * " order by mem_id";
					 */
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('SF','AF') and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? and  "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID || dai.MEM_ZNE_ID || dai.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					// //System.out.println("Query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						/*
						 * paymentReport.setMemberId(paymentResult.getString(1));
						 * paymentReport
						 * .setPaymentMode(paymentResult.getString(2));
						 * paymentReport
						 * .setInstrumentType(paymentResult.getString(3));
						 * paymentReport
						 * .setInstrumentNumber(paymentResult.getString(4));
						 * paymentReport
						 * .setRecievedDate(paymentResult.getDate(9));
						 * paymentReport
						 * .setInstrumentDate(paymentResult.getDate(5));
						 * paymentReport
						 * .setAmountPaid(paymentResult.getDouble(11));
						 * paymentReport
						 * .setPayeeBank(paymentResult.getString(6));
						 * paymentReport
						 * .setPayeeBranch(paymentResult.getString(7));
						 * paymentReport
						 * .setPayableAt(paymentResult.getString(8));
						 * paymentReport
						 * .setRealisationDate(paymentResult.getDate(10));
						 */

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getasfdailyPaymentReport", "Exited");
		return paymentArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getdailydchPaymentReport(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "getdailydchPaymentReport", "Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// //System.out.println("St Date:"+startDate);
		// //System.out.println("End Date:"+endDate);
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select trunc(P.PAY_REALISATION_DT),SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID AND D.PAY_ID = P.PAY_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' "
							+ "AND DAI.dan_type in ('CG','GF') and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "GROUP BY trunc(P.PAY_REALISATION_DT) ORDER BY 1";

					// //System.out.println("Query:"+query);
					paymentStmt = connection.prepareStatement(query);

					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					String query = "select trunc(P.PAY_REALISATION_DT),SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID AND D.PAY_ID = P.PAY_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' "
							+ "AND DAI.dan_type in ('CG','GF') and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? and  "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID || dai.MEM_ZNE_ID || dai.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY trunc(P.PAY_REALISATION_DT) ORDER BY 1";
					// //System.out.println("Query1:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(id);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select trunc(P.PAY_REALISATION_DT),SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%'  "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  "
							+ "GROUP BY trunc(P.PAY_REALISATION_DT) ORDER BY 1";
					// //System.out.println("Query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					String query = "select trunc(P.PAY_REALISATION_DT),SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF')  and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? and  DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' and "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID || dai.MEM_ZNE_ID || dai.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY trunc(P.PAY_REALISATION_DT) ORDER BY 1";
					// //System.out.println("Query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getdailydchPaymentReport", "Exited");
		return paymentArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getdailyPaymentReport(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "getdailyPaymentReport", "Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// //System.out.println("St Date:"+startDate);
		// //System.out.println("End Date:"+endDate);
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
					 * +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * " from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%' "
					 * + " and trunc(p.PAY_REALISATION_DT) between ? and ? "+
					 * " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,"
					 * +
					 * " p.PAY_INSTRUMENT_NUMBER,p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH,"
					 * +
					 * "  p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
					 * + " order by mem_id" ;
					 */
				
					String query = "select trunc(P.PAY_REALISATION_DT),SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "GROUP BY trunc(P.PAY_REALISATION_DT) ORDER BY 1";
					// //System.out.println("Qurey ............"+query);
					// //System.out.println("Query:"+query);
					paymentStmt = connection.prepareStatement(query);
					// System.out.println("DAO......startDate...."+startDate);
					// System.out.println("DAO......endDate......."+endDate);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						/*
						 * paymentReport.setMemberId(paymentResult.getString(1));
						 * paymentReport
						 * .setPaymentMode(paymentResult.getString(2));
						 * paymentReport
						 * .setInstrumentType(paymentResult.getString(3));
						 * paymentReport
						 * .setInstrumentNumber(paymentResult.getString(4));
						 * paymentReport
						 * .setRecievedDate(paymentResult.getDate(9));
						 * paymentReport
						 * .setInstrumentDate(paymentResult.getDate(5));
						 * paymentReport
						 * .setAmountPaid(paymentResult.getDouble(11));
						 * paymentReport
						 * .setPayeeBank(paymentResult.getString(6));
						 * paymentReport
						 * .setPayeeBranch(paymentResult.getString(7));
						 * paymentReport
						 * .setPayableAt(paymentResult.getString(8));
						 * paymentReport
						 * .setRealisationDate(paymentResult.getDate(10));
						 * //paymentReport
						 * .setCgpan(paymentResult.getString(11));
						 */

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * " from payment_detail p,demand_advice_info d, dan_cgpan_info c "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%'"
					 * + " and trunc(p.PAY_REALISATION_DT) between ? and ?  and"
					 * +
					 * " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
					 * + " = LTRIM(RTRIM(UPPER(?)))" +
					 * " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID ,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
					 * + " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"+
					 * " order by mem_id";
					 */

					String query = "select trunc(P.PAY_REALISATION_DT),SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF')  and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? and  "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID || dai.MEM_ZNE_ID || dai.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY trunc(P.PAY_REALISATION_DT) ORDER BY 1";
					// System.out.println("Query1:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(id);
						/*
						 * paymentReport.setMemberId(paymentResult.getString(1));
						 * paymentReport
						 * .setPaymentMode(paymentResult.getString(2));
						 * paymentReport
						 * .setInstrumentType(paymentResult.getString(3));
						 * paymentReport
						 * .setInstrumentNumber(paymentResult.getString(4));
						 * paymentReport
						 * .setRecievedDate(paymentResult.getDate(9));
						 * paymentReport
						 * .setInstrumentDate(paymentResult.getDate(5));
						 * paymentReport
						 * .setAmountPaid(paymentResult.getDouble(11));
						 * paymentReport
						 * .setPayeeBank(paymentResult.getString(6));
						 * paymentReport
						 * .setPayeeBranch(paymentResult.getString(7));
						 * paymentReport
						 * .setPayableAt(paymentResult.getString(8));
						 * paymentReport
						 * .setRealisationDate(paymentResult.getDate(10));
						 */

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * " p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * " from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%'"
					 * + " and trunc(p.PAY_REALISATION_DT) <= ?  " +
					 * " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by mem_id"
					 * ;
					 */
					String query = "select trunc(P.PAY_REALISATION_DT),SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  "
							+ "GROUP BY trunc(P.PAY_REALISATION_DT) ORDER BY 1";
					// System.out.println("Query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						/*
						 * paymentReport.setMemberId(paymentResult.getString(1));
						 * paymentReport
						 * .setPaymentMode(paymentResult.getString(2));
						 * paymentReport
						 * .setInstrumentType(paymentResult.getString(3));
						 * paymentReport
						 * .setInstrumentNumber(paymentResult.getString(4));
						 * paymentReport
						 * .setRecievedDate(paymentResult.getDate(9));
						 * paymentReport
						 * .setInstrumentDate(paymentResult.getDate(5));
						 * paymentReport
						 * .setAmountPaid(paymentResult.getDouble(11));
						 * paymentReport
						 * .setPayeeBank(paymentResult.getString(6));
						 * paymentReport
						 * .setPayeeBranch(paymentResult.getString(7));
						 * paymentReport
						 * .setPayableAt(paymentResult.getString(8));
						 * paymentReport
						 * .setRealisationDate(paymentResult.getDate(10));
						 */

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
				{
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED)"
					 * +
					 * " from payment_detail p, demand_advice_info d, dan_cgpan_info c"
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%'"
					 * + " and trunc(p.PAY_REALISATION_DT) <= ?  and" +
					 * " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
					 * + " = LTRIM(RTRIM(UPPER(?)))"+
					 * " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER," +
					 * " p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
					 * + " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"+
					 * " order by mem_id";
					 */
					String query = "select trunc(P.PAY_REALISATION_DT),SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? and  "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID || dai.MEM_ZNE_ID || dai.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY trunc(P.PAY_REALISATION_DT) ORDER BY 1";
					// System.out.println("Query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						/*
						 * paymentReport.setMemberId(paymentResult.getString(1));
						 * paymentReport
						 * .setPaymentMode(paymentResult.getString(2));
						 * paymentReport
						 * .setInstrumentType(paymentResult.getString(3));
						 * paymentReport
						 * .setInstrumentNumber(paymentResult.getString(4));
						 * paymentReport
						 * .setRecievedDate(paymentResult.getDate(9));
						 * paymentReport
						 * .setInstrumentDate(paymentResult.getDate(5));
						 * paymentReport
						 * .setAmountPaid(paymentResult.getDouble(11));
						 * paymentReport
						 * .setPayeeBank(paymentResult.getString(6));
						 * paymentReport
						 * .setPayeeBranch(paymentResult.getString(7));
						 * paymentReport
						 * .setPayableAt(paymentResult.getString(8));
						 * paymentReport
						 * .setRealisationDate(paymentResult.getDate(10));
						 */

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getdailyPaymentReport", "Exited");
		return paymentArray;
	}

	/* added by sukumar@path on 28-04-2008 */

	public ArrayList asfpaymentReport(java.sql.Date startDate,
			java.sql.Date endDate, String id,String status) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "asfpaymentReport", "Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
					 * +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT "
					 * +
					 * " from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'SF%'"
					 * + " and trunc(p.PAY_REALISATION_DT) between ? and ? "+
					 * " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,"
					 * +
					 * " p.PAY_INSTRUMENT_NUMBER,p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH,"
					 * +
					 * "  p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT,"
					 * + " p.PAY_AMOUNT order by mem_id" ;
					 */

					String query = "select MEM_BNK_ID||MEM_ZNE_ID||MEM_BRN_ID MEMID,"
							+ "PAY_MODE_OF_PAYMENT,PAY_INSTRUMENT_TYPE,PAY_INSTRUMENT_NUMBER,"
							+ "PAY_INSTRUMENT_DT,PAY_DRAWN_AT_BANK,PAY_DRAWN_AT_BRANCH,PAY_PAYABLE_AT,"
							+ "PAY_PAYMENT_DT,PAY_REALISATION_DT,SUM(D.DCI_AMOUNT_RAISED),sum(d.DCI_SWBHCESS_AMT),sum(d.DCI_KKALYANCESS_AMT)"
							+ "FROM PAYMENT_DETAIL P,DAN_CGPAN_INFO D,DEMAND_ADVICE_INFO DA WHERE D.DAN_ID = DA.DAN_ID "
							+ "AND P.PAY_ID = D.PAY_ID AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 AND trunc(p.PAY_REALISATION_DT)between ? and ? "
							+ "AND DA.dan_type =? "
							+ "GROUP BY MEM_BNK_ID||MEM_ZNE_ID||MEM_BRN_ID,PAY_MODE_OF_PAYMENT,PAY_INSTRUMENT_TYPE,PAY_INSTRUMENT_NUMBER,"
							+ "PAY_INSTRUMENT_DT,PAY_DRAWN_AT_BANK,PAY_DRAWN_AT_BRANCH,PAY_PAYABLE_AT,PAY_PAYMENT_DT,PAY_REALISATION_DT"
							+ " order by 1,4";

					// System.out.println("Query:1"+query);
					paymentStmt = connection.prepareStatement(query);
					
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentStmt.setString(3, status); 
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 23-may-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						// paymentReport.setCgpan(paymentResult.getString(11));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT "
					 * +
					 * " from payment_detail p,demand_advice_info d, dan_cgpan_info c "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'SF%'"
					 * + " and trunc(p.PAY_REALISATION_DT) between ? and ?  and"
					 * +
					 * " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
					 * + " = LTRIM(RTRIM(UPPER(?)))" +
					 * " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID ,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
					 * +
					 * " p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT"+
					 * " order by mem_id";
					 */
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id,"
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail p,demand_advice_info d, dan_cgpan_info c "
							+ " where d.DAN_ID = c.DAN_ID AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') "
							+ " and trunc(p.PAY_REALISATION_DT) between ? and ?  and"
							+ " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID ,"
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
							+ " order by 1,4";
					// System.out.println("Query1:2"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 23-may-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * " p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT "
					 * +
					 * " from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'SF%'"
					 * + " and trunc(p.PAY_REALISATION_DT) <= ?  " +
					 * " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT order by mem_id"
					 * ;
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id,"
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ " where d.DAN_ID = c.DAN_ID AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') "
							+ " and trunc(p.PAY_REALISATION_DT) <= ?  "
							+ " group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by 1,4";

					// System.out.println("Query2:3"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 23-may-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
				{
					/*
					 * change the PAY_PAYMENT_DT with PAY_REALISATION_DT in
					 * where condition on 040308 by sukumar
					 */
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
					 * + " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT"
					 * +
					 * " from payment_detail p, demand_advice_info d, dan_cgpan_info c"
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'SF%'"
					 * + " and trunc(p.PAY_REALISATION_DT) <= ?  and" +
					 * " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
					 * + " = LTRIM(RTRIM(UPPER(?)))"+
					 * " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER," +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT"+
					 * " order by mem_id";
					 */
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID mem_id,"
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT)"
							+ " from payment_detail p, demand_advice_info d, dan_cgpan_info c"
							+ " where d.DAN_ID = c.DAN_ID AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') "
							+ " and trunc(p.PAY_REALISATION_DT) <= ?  and"
							+ " LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ " group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,"
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
							+ " order by 1,4";
					 //System.out.println("Query2:4"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 23-may-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "asfpaymentReport", "Exited");
		return paymentArray;
	}

	/* ------------------------------------- */

	/**
	 * 
	 * added by sukumar @path 14-04-2008 for getting allocated payment report
	 * for bank
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getAllocatePaymentReportForBank(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getAllocatePaymentReportForBank",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
					 * + " p.PAY_INSTRUMENT_NUMBER, "+ " p.PAY_INSTRUMENT_DT, "+
					 * " p.PAY_PAYMENT_DT, p.PAY_AMOUNT,p.PAY_ID,c.DAN_ID,c.CGPAN "
					 * +
					 * " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.dan_id like 'SF%' and c.DCI_ALLOCATION_FLAG = 'Y'"
					 * + " and trunc(c.DCI_ALLOCATION_DT) between ? and ? " ; //
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID," +
					 * // " p.PAY_INSTRUMENT_NUMBER,  " + //
					 * "  p.PAY_INSTRUMENT_DT,  " + //
					 * "  p.PAY_PAYMENT_DT, p.PAY_AMOUNT,p.PAY_ID";
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_PAYMENT_DT,p.PAY_ID,sum(c.dci_base_amt),sum(c.dci_stax_amt),sum(c.dci_ecess_amt),sum(c.dci_hecess_amt),sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') and c.DCI_ALLOCATION_FLAG = 'Y'"
							+ " and trunc(c.DCI_ALLOCATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT,  "
							+ "  p.PAY_PAYMENT_DT,p.PAY_ID";
				   System.out.println("test rajjj:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(2));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(3));
						paymentReport.setRecievedDate(paymentResult.getDate(4));

						paymentReport.setPayId(paymentResult.getString(5));

						paymentReport.setBaseAmount(paymentResult.getDouble(6));
						paymentReport.setSerTaxAmount(paymentResult
								.getDouble(7));
						paymentReport.setEduCessbaseAmount(paymentResult
								.getDouble(8));
						paymentReport.setHighereduCessbaseAmount(paymentResult
								.getDouble(9));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(11));// rajuk
						// added by kuldeep@path 23-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(12));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
					 * + " p.PAY_INSTRUMENT_NUMBER, "+ " p.PAY_INSTRUMENT_DT, "+
					 * " p.PAY_PAYMENT_DT, p.PAY_AMOUNT,p.PAY_ID,c.DAN_ID,c.CGPAN "
					 * +
					 * " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.dan_id like 'SF%' and c.DCI_ALLOCATION_FLAG = 'Y'"
					 * +
					 * " and trunc(c.DCI_ALLOCATION_DT) between ? and ?  and  "
					 * + "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))" +
					 * " = LTRIM(RTRIM(UPPER(?)))" ; //
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID," +
					 * // " p.PAY_INSTRUMENT_NUMBER,  " + //
					 * "  p.PAY_INSTRUMENT_DT, " + //
					 * "  p.PAY_PAYMENT_DT, p.PAY_AMOUNT,p.PAY_ID";
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_PAYMENT_DT,p.PAY_ID,sum(c.dci_base_amt),sum(c.dci_stax_amt),sum(c.dci_ecess_amt),sum(c.dci_hecess_amt),sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') and c.DCI_ALLOCATION_FLAG = 'Y'"
							+ " and trunc(c.DCI_ALLOCATION_DT) between ? and ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
							+ " p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_AMOUNT,p.PAY_ID";

					// System.out.println("test  razz:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(2));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(3));
						paymentReport.setRecievedDate(paymentResult.getDate(4));

						paymentReport.setPayId(paymentResult.getString(5));
						paymentReport.setBaseAmount(paymentResult.getDouble(6));
						paymentReport.setSerTaxAmount(paymentResult
								.getDouble(7));
						paymentReport.setEduCessbaseAmount(paymentResult
								.getDouble(8));
						paymentReport.setHighereduCessbaseAmount(paymentResult
								.getDouble(9));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(11));// rajuk
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(12));// KULDEEP@ 20-5-16
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getAllocatePaymentReportForBank",
				"Exited");
		return paymentArray;
	}

	/* ---------------------------------- */

	public ArrayList getGFAllocatePaymentReportForBank(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getGFAllocatePaymentReportForBank",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {

					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_PAYMENT_DT,p.PAY_ID,sum(c.dci_base_amt),sum(c.dci_stax_amt),sum(c.dci_ecess_amt),sum(c.dci_hecess_amt),sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('CG','GF') and c.DCI_ALLOCATION_FLAG = 'Y'"
							+ " and trunc(c.DCI_ALLOCATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT,  "
							+ "  p.PAY_PAYMENT_DT,p.PAY_ID";
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();
					// System.out.println("query:"+query);

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(2));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(3));
						paymentReport.setRecievedDate(paymentResult.getDate(4));

						paymentReport.setPayId(paymentResult.getString(5));
						paymentReport.setBaseAmount(paymentResult.getDouble(6));
						paymentReport.setSerTaxAmount(paymentResult
								.getDouble(7));
						paymentReport.setEduCessbaseAmount(paymentResult
								.getDouble(8));
						paymentReport.setHighereduCessbaseAmount(paymentResult
								.getDouble(9));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(11));// rajuk
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(12));// KULDEEP@ 20-5-16
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {

					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_PAYMENT_DT,p.PAY_ID,sum(c.dci_base_amt),sum(c.dci_stax_amt),sum(c.dci_ecess_amt),sum(c.dci_hecess_amt),sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('CG','GF') and c.DCI_ALLOCATION_FLAG = 'Y'"
							+ " and trunc(c.DCI_ALLOCATION_DT) between ? and ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_AMOUNT,p.PAY_ID";
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(2));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(3));
						paymentReport.setRecievedDate(paymentResult.getDate(4));

						paymentReport.setPayId(paymentResult.getString(5));
						paymentReport.setBaseAmount(paymentResult.getDouble(6));
						paymentReport.setSerTaxAmount(paymentResult
								.getDouble(7));
						paymentReport.setEduCessbaseAmount(paymentResult
								.getDouble(8));
						paymentReport.setHighereduCessbaseAmount(paymentResult
								.getDouble(9));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(11));// rajuk
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(12));// KULDEEP@ 20-5-16
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getGFAllocatePaymentReportForBank",
				"Exited");
		return paymentArray;
	}

	public ArrayList getPaymentReportForBank(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getPaymentReportForBank", "Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// System.out.println("id:"+id);
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					// System.out.println("query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					// System.out.println("query for bank:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getPaymentReportForBank", "Exited");
		return paymentArray;
	}

	public ArrayList getPaymentReportForBankforRSF(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Connection connection;
		ArrayList paymentArray;
		Log.log(4, "ReportDAO", "getPaymentReportForBank", "Entered");
		connection = DBConnection.getConnection();
		paymentArray = new ArrayList();
		if (startDate == null)
			// break MISSING_BLOCK_LABEL_624;
			if (id != null && !id.equals(""))
				// break MISSING_BLOCK_LABEL_328;
				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from payment_detail p, demand_advice_info d, dan_cgpan_info c where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') and trunc(p.PAY_REALISATION_DT) between ? and ?    group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,    p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,   p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					PreparedStatement paymentStmt = connection
							.prepareStatement(query);
					paymentStmt.setDate(1, startDate);
					paymentStmt.setDate(2, endDate);
					ResultSet paymentResult;
					PaymentReport paymentReport;
					for (paymentResult = paymentStmt.executeQuery(); paymentResult
							.next(); paymentArray.add(paymentReport)) {
						paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
					}

					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;
				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}
		// break MISSING_BLOCK_LABEL_320;
		Exception exception1;
		// exception1;
		DBConnection.freeConnection(connection);
		// throw exception1;
		DBConnection.freeConnection(connection);
		// break MISSING_BLOCK_LABEL_1200;
		if (id == null)
			// break MISSING_BLOCK_LABEL_1200;
			try {
				String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from payment_detail p, demand_advice_info d, dan_cgpan_info c where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') and trunc(p.PAY_REALISATION_DT) between ? and ?  and  LTRIM(RTRIM(UPPER(d.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,    p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,   p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
				PreparedStatement paymentStmt = connection
						.prepareStatement(query);
				paymentStmt.setDate(1, startDate);
				paymentStmt.setDate(2, endDate);
				paymentStmt.setString(3, id);
				ResultSet paymentResult;
				PaymentReport paymentReport;
				for (paymentResult = paymentStmt.executeQuery(); paymentResult
						.next(); paymentArray.add(paymentReport)) {
					paymentReport = new PaymentReport();
					paymentReport.setMemberId(paymentResult.getString(1));
					paymentReport.setPaymentMode(paymentResult.getString(2));
					paymentReport.setInstrumentType(paymentResult.getString(3));
					paymentReport.setInstrumentNumber(paymentResult
							.getString(4));
					paymentReport.setRecievedDate(paymentResult.getDate(9));
					paymentReport.setInstrumentDate(paymentResult.getDate(5));
					paymentReport.setAmountPaid(paymentResult.getDouble(11));
					paymentReport.setPayeeBank(paymentResult.getString(6));
					paymentReport.setPayeeBranch(paymentResult.getString(7));
					paymentReport.setPayableAt(paymentResult.getString(8));
					paymentReport.setRealisationDate(paymentResult.getDate(10));
				}

				paymentResult.close();
				paymentResult = null;
				paymentStmt.close();
				paymentStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			}
		// break MISSING_BLOCK_LABEL_616;
		Exception exception2;
		// exception2;
		// DBConnection.freeConnection(connection);
		// throw exception2;
		DBConnection.freeConnection(connection);
		// break MISSING_BLOCK_LABEL_1200;
		if (startDate != null)
			// break MISSING_BLOCK_LABEL_1200;
			if (id != null && !id.equals(""))
				// break MISSING_BLOCK_LABEL_916;
				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from payment_detail p, demand_advice_info d, dan_cgpan_info c where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') and trunc(p.PAY_REALISATION_DT) <= ?    group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,    p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,   p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					PreparedStatement paymentStmt = connection
							.prepareStatement(query);
					paymentStmt.setDate(1, endDate);
					ResultSet paymentResult;
					PaymentReport paymentReport;
					for (paymentResult = paymentStmt.executeQuery(); paymentResult
							.next(); paymentArray.add(paymentReport)) {
						paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
					}

					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;
				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}
		// break MISSING_BLOCK_LABEL_908;
		Exception exception3;
		// exception3;
		// DBConnection.freeConnection(connection);
		// throw exception3;
		DBConnection.freeConnection(connection);
		// break MISSING_BLOCK_LABEL_1200;
		if (id == null)
			// break MISSING_BLOCK_LABEL_1200;
			try {
				String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from payment_detail p, demand_advice_info d, dan_cgpan_info c where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') and trunc(p.PAY_REALISATION_DT) <= ?  and  LTRIM(RTRIM(UPPER(d.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))    group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,    p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,   p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
				PreparedStatement paymentStmt = connection
						.prepareStatement(query);
				paymentStmt.setDate(1, endDate);
				paymentStmt.setString(2, id);
				ResultSet paymentResult;
				PaymentReport paymentReport;
				for (paymentResult = paymentStmt.executeQuery(); paymentResult
						.next(); paymentArray.add(paymentReport)) {
					paymentReport = new PaymentReport();
					paymentReport.setMemberId(paymentResult.getString(1));
					paymentReport.setPaymentMode(paymentResult.getString(2));
					paymentReport.setInstrumentType(paymentResult.getString(3));
					paymentReport.setInstrumentNumber(paymentResult
							.getString(4));
					paymentReport.setRecievedDate(paymentResult.getDate(9));
					paymentReport.setInstrumentDate(paymentResult.getDate(5));
					paymentReport.setAmountPaid(paymentResult.getDouble(11));
					paymentReport.setPayeeBank(paymentResult.getString(6));
					paymentReport.setPayeeBranch(paymentResult.getString(7));
					paymentReport.setPayableAt(paymentResult.getString(8));
					paymentReport.setRealisationDate(paymentResult.getDate(10));
				}

				paymentResult.close();
				paymentResult = null;
				paymentStmt.close();
				paymentStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			}
		// break MISSING_BLOCK_LABEL_1195;
		Exception exception4;
		// exception4;
		// DBConnection.freeConnection(connection);
		// throw exception4;
		DBConnection.freeConnection(connection);
		Log.log(4, "ReportDAO", "getPaymentReportForBank", "Exited");
		return paymentArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getDCHPaymentReportForBank(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getDCHPaymentReportForBank", "Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// System.out.println("id:"+id);
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%'  and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					// System.out.println("query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%'  and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					// System.out.println("query for bank:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getPaymentReportForBank", "Exited");
		return paymentArray;
	}

	public ArrayList getASFPaymentReportForBankNew(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getASFPaymentReportForBankNew",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// System.out.println("id:"+id);
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					// System.out.println("query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					// System.out.println("query for bank:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getASFPaymentReportForBankNew",
				"Exited");
		return paymentArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getdailyPaymentReportForBank(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getdailyPaymentReportForBank",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// System.out.println("id:"+id);
		String tempId1 = id + "0000" + "0000";
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%' "
					 * + "and trunc(p.PAY_REALISATION_DT) between ? and ? " +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter

					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId1);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%' "
					 * +
					 * "and trunc(p.PAY_REALISATION_DT) between ? and ?  and  "
					 * + "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))" +
					 * " = LTRIM(RTRIM(UPPER(?)))" +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? AND "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					// System.out.println("query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						// System.out.println("In Bank Id:"+tempId1);

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId1);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%' "
					 * + "and trunc(p.PAY_REALISATION_DT) <= ? " +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					// System.out.println("query for bank:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId1);
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%' "
					 * + "and trunc(p.PAY_REALISATION_DT) <= ?  and  " +
					 * "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))" +
					 * " = LTRIM(RTRIM(UPPER(?))) " +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? AND "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						// System.out.println("In Bank Id:"+tempId1);

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId1);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getdailyPaymentReportForBank", "Exited");
		return paymentArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getdailyDCHPaymentReportForBank(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getdailyDCHPaymentReportForBank",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// System.out.println("id:"+id);
		String tempId1 = id + "0000" + "0000";
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter

					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId1);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%'  "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? AND "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					// System.out.println("query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						// System.out.println("In Bank Id:"+tempId1);

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId1);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%'  "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					// System.out.println("query for bank:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId1);
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%'  "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? AND "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						// System.out.println("In Bank Id:"+tempId1);

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId1);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getdailyDCHPaymentReportForBank",
				"Exited");
		return paymentArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getASFdailyPaymentReportForBank(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getASFdailyPaymentReportForBank",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// System.out.println("id:"+id);
		String tempId1 = id + "0000" + "0000";
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%' "
					 * + "and trunc(p.PAY_REALISATION_DT) between ? and ? " +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter

					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId1);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%' "
					 * +
					 * "and trunc(p.PAY_REALISATION_DT) between ? and ?  and  "
					 * + "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))" +
					 * " = LTRIM(RTRIM(UPPER(?)))" +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? AND "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					// System.out.println("query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						// System.out.println("In Bank Id:"+tempId1);

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId1);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%' "
					 * + "and trunc(p.PAY_REALISATION_DT) <= ? " +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					// System.out.println("query for bank:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId1);
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%' "
					 * + "and trunc(p.PAY_REALISATION_DT) <= ?  and  " +
					 * "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))" +
					 * " = LTRIM(RTRIM(UPPER(?))) " +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? AND "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						// System.out.println("In Bank Id:"+tempId1);

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId1);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getdailyPaymentReportForBank", "Exited");
		return paymentArray;
	}

	/* added by sukumar@path on 28-04-2008 for asf payment report */

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getASFPaymentReportForBank(java.sql.Date startDate,
			java.sql.Date endDate, String id,String status) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getASFPaymentReportForBank", "Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// System.out.println("id:"+id);
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'SF%' "
					 * + "and trunc(p.PAY_REALISATION_DT) between ? and ? " +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT";
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 and c.PAY_ID = p.PAY_ID and d.dan_type=? "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by 1,4";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setString(1, status); 
					paymentStmt.setDate(2, startDate); // Set endDate parameter
					paymentStmt.setDate(3, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 23- may
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'SF%' "
					 * +
					 * "and trunc(p.PAY_REALISATION_DT) between ? and ?  and  "
					 * + "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))" +
					 * " = LTRIM(RTRIM(UPPER(?)))" +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT";
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 and c.PAY_ID = p.PAY_ID and d.dan_type=? "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ "   p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by 1,4";
					// System.out.println("query2:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setString(1, status);
					paymentStmt.setDate(2, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(3, endDate); // Set endDate parameter
					paymentStmt.setString(4, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 23- may
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'SF%' "
					 * + "and trunc(p.PAY_REALISATION_DT) <= ? " +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT";
					 */

					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 and c.PAY_ID = p.PAY_ID and d.dan_type =? "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by 1,4";
					// System.out.println("query for bank:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setString(1, status);
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 23- may
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'SF%'"
					 * + "and trunc(p.PAY_REALISATION_DT) <= ?  and  " +
					 * "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))" +
					 * " = LTRIM(RTRIM(UPPER(?))) " +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT";
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 and c.PAY_ID = p.PAY_ID and d.dan_type =? "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by 1,4";
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setString(1, status);
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 23- may
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getASFPaymentReportForBank", "Exited");
		return paymentArray;
	}

	/* --------------------------------------------------------- */

	/**
	 * 
	 * added by sukumar@path for getting ASF allocated payment report for zone
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @param zoneId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getAllocatedPaymentReportForZone(java.sql.Date startDate,
			java.sql.Date endDate, String id, String zoneId,String dantype)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getAllocatedPaymentReportForZone",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// System.out.println("id:"+id);
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {
				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
					 * + " p.PAY_INSTRUMENT_NUMBER, "+ " p.PAY_INSTRUMENT_DT, "+
					 * " p.PAY_PAYMENT_DT, p.PAY_AMOUNT,p.PAY_ID,c.DAN_ID,c.CGPAN "
					 * +
					 * " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.dan_id like 'SF%' and c.DCI_ALLOCATION_FLAG = 'Y'"
					 * + " and trunc(c.DCI_ALLOCATION_DT) between ? and ? " ; //
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
					 * + // "p.PAY_INSTRUMENT_NUMBER,  " + //
					 * "  p.PAY_INSTRUMENT_DT,  " + //
					 * "  p.PAY_PAYMENT_DT,  p.PAY_AMOUNT,p.PAY_ID";
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_PAYMENT_DT,p.PAY_ID,sum(c.dci_base_amt),sum(c.dci_stax_amt),sum(c.dci_ecess_amt),sum(c.dci_hecess_amt),sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') and c.DCI_ALLOCATION_FLAG = 'Y'"
							+ " and trunc(c.DCI_ALLOCATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ "p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT,  "
							+ "  p.PAY_PAYMENT_DT,p.PAY_ID";

					// System.out.println("test raz:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(2));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(3));
						paymentReport.setRecievedDate(paymentResult.getDate(4));

						paymentReport.setPayId(paymentResult.getString(5));
						paymentReport.setBaseAmount(paymentResult.getDouble(6));
						paymentReport.setSerTaxAmount(paymentResult
								.getDouble(7));
						paymentReport.setEduCessbaseAmount(paymentResult
								.getDouble(8));
						paymentReport.setHighereduCessbaseAmount(paymentResult
								.getDouble(9));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(11));// rajuk
						// added by kuldeep@path 23-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(12));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
					 * + " p.PAY_INSTRUMENT_NUMBER, "+ " p.PAY_INSTRUMENT_DT, "+
					 * " p.PAY_PAYMENT_DT, p.PAY_AMOUNT,p.PAY_ID,c.DAN_ID,c.CGPAN "
					 * +
					 * " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c,member_info m "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.dan_id like 'SF%' and c.DCI_ALLOCATION_FLAG = 'Y'"
					 * + " and trunc(c.DCI_ALLOCATION_DT) between ? and ? and "
					 * +
					 * " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
					 * +
					 * " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
					 * +
					 * "   and m.mem_bnk_id = d.mem_bnk_id and m.mem_zne_id = d.mem_zne_id and m.mem_brn_id = d.mem_brn_id "
					 * ; //
					 * "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID," +
					 * // " p.PAY_INSTRUMENT_NUMBER, " + //
					 * " p.PAY_INSTRUMENT_DT,  " + // "  p.PAY_PAYMENT_DT,  " +
					 * // " p.PAY_AMOUNT,p.PAY_ID";
					 */
					
					System.out.println(""+id+"zoneId"+zoneId);
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_PAYMENT_DT,p.PAY_ID,sum(c.dci_base_amt),sum(c.dci_stax_amt),sum(c.dci_ecess_amt),sum(c.dci_hecess_amt),sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c,member_info m "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type=? and c.DCI_ALLOCATION_FLAG = 'Y'"
							+ " and trunc(c.DCI_ALLOCATION_DT) between ? and ? and "
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID||m.MEM_ZNE_ID))) =  LTRIM(RTRIM(UPPER(?))) "
							//+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
							+ "   and m.mem_bnk_id = d.mem_bnk_id and m.mem_zne_id = d.mem_zne_id and m.mem_brn_id = d.mem_brn_id "
							+ "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
							+ " p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT,  "
							+ "  p.PAY_PAYMENT_DT,  " + " p.PAY_ID";
					 System.out.println("test:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setString(1, dantype); 
					paymentStmt.setDate(2, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(3, endDate); // Set endDate parameter
					paymentStmt.setString(4, id+zoneId); // Set id parameter
					//paymentStmt.setString(5, zoneId); // Set zone id parameter
					//paymentStmt.setString(6, zoneId); // Set zone id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(2));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(3));
						paymentReport.setRecievedDate(paymentResult.getDate(4));

						paymentReport.setPayId(paymentResult.getString(5));
						paymentReport.setBaseAmount(paymentResult.getDouble(6));
						paymentReport.setSerTaxAmount(paymentResult
								.getDouble(7));
						paymentReport.setEduCessbaseAmount(paymentResult
								.getDouble(8));
						paymentReport.setHighereduCessbaseAmount(paymentResult
								.getDouble(9));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(11));// rajuk
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(12));// kuldeep
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getAllocatedPaymentReportForZone",
				"Exited");
		return paymentArray;
	}

	/* ---------------------------- */

	/**
	 * 
	 * added by sukumar@path for getting GF allocated Payment report for zone
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @param zoneId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getGFAllocatedPaymentReportForZone(
			java.sql.Date startDate, java.sql.Date endDate, String id,
			String zoneId) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getGFAllocatedPaymentReportForZone",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// System.out.println("id:"+id);
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {
				try {

					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_PAYMENT_DT,p.PAY_ID,sum(c.dci_base_amt),sum(c.dci_stax_amt),sum(c.dci_ecess_amt),sum(c.dci_hecess_amt),sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('CG','GF') and c.DCI_ALLOCATION_FLAG = 'Y'"
							+ " and trunc(c.DCI_ALLOCATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ "p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  "
							+ "  p.PAY_PAYMENT_DT,p.PAY_ID";
					// System.out.println("querry:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(2));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(3));
						paymentReport.setRecievedDate(paymentResult.getDate(4));

						paymentReport.setPayId(paymentResult.getString(5));
						paymentReport.setBaseAmount(paymentResult.getDouble(6));
						paymentReport.setSerTaxAmount(paymentResult
								.getDouble(7));
						paymentReport.setEduCessbaseAmount(paymentResult
								.getDouble(8));
						paymentReport.setHighereduCessbaseAmount(paymentResult
								.getDouble(9));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(11));// rajuk
						// added by kuldeep@20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(11));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {

					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_PAYMENT_DT,p.PAY_ID,sum(c.dci_base_amt),sum(c.dci_stax_amt),sum(c.dci_ecess_amt),sum(c.dci_hecess_amt),sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c,member_info m "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('CG','GF') and c.DCI_ALLOCATION_FLAG = 'Y'"
							+ " and trunc(c.DCI_ALLOCATION_DT) between ? and ? and "
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
							+ "   and m.mem_bnk_id = d.mem_bnk_id and m.mem_zne_id = d.mem_zne_id and m.mem_brn_id = d.mem_brn_id "
							+ "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
							+ " p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT,  "
							+ "  p.PAY_PAYMENT_DT,  " + " p.PAY_ID";
					// System.out.println("test:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentStmt.setString(4, zoneId); // Set zone id parameter
					paymentStmt.setString(5, zoneId); // Set zone id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(2));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(3));
						paymentReport.setRecievedDate(paymentResult.getDate(4));

						paymentReport.setPayId(paymentResult.getString(5));
						paymentReport.setBaseAmount(paymentResult.getDouble(6));
						paymentReport.setSerTaxAmount(paymentResult
								.getDouble(7));
						paymentReport.setEduCessbaseAmount(paymentResult
								.getDouble(8));
						paymentReport.setHighereduCessbaseAmount(paymentResult
								.getDouble(9));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(11));// rajuk
						// added by kuldeep@20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(11));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getGFAllocatedPaymentReportForZone",
				"Exited");
		return paymentArray;
	}

	// Fix Bug 07092004 -02

	public ArrayList getPaymentReportForZone(java.sql.Date startDate,
			java.sql.Date endDate, String id, String zoneId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getPaymentReportForZone", "Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// System.out.println("id:"+id);
		// System.out.println("zoneId:"+zoneId);
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {
				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF')  "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE, "
							+ " p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) from "
							+ " payment_detail p, demand_advice_info d, dan_cgpan_info c,"
							+ " member_info m where d.DAN_ID = c.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and c.PAY_ID = "
							+ " p.PAY_ID and d.MEM_BNK_ID = m.MEM_BNK_ID and d.MEM_ZNE_ID = "
							+ " m.MEM_ZNE_ID and d.MEM_BRN_ID = m.MEM_BRN_ID and d.dan_type in ('CG','GF')  and "
							+ " trunc(p.PAY_REALISATION_DT) between ? and ? and "
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
							+ "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
							+ " p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, "
							+ " p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					// System.out.println("query for zone:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentStmt.setString(4, zoneId); // Set zone id parameter
					paymentStmt.setString(5, zoneId); // Set zone id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF')  "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE, "
							+ " p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) from "
							+ " payment_detail p, demand_advice_info d, dan_cgpan_info c,"
							+ " member_info m where d.DAN_ID = c.DAN_ID and c.PAY_ID = "
							+ " p.PAY_ID and d.MEM_BNK_ID = m.MEM_BNK_ID and d.MEM_ZNE_ID = "
							+ " m.MEM_ZNE_ID and d.MEM_BRN_ID = m.MEM_BRN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF')  and "
							+ " trunc(p.PAY_REALISATION_DT) <= ? and "
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
							+ "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
							+ " p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, "
							+ " p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentStmt.setString(3, zoneId); // Set zone id parameter
					paymentStmt.setString(4, zoneId); // Set zone id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getPaymentReportForZone", "Exited");
		return paymentArray;
	}

	public ArrayList getPaymentReportForZoneforRSF(java.sql.Date startDate,
			java.sql.Date endDate, String id, String zoneId)
			throws DatabaseException {
		Connection connection;
		ArrayList paymentArray;
		Log.log(4, "ReportDAO", "getPaymentReportForZone", "Entered");
		connection = DBConnection.getConnection();
		paymentArray = new ArrayList();
		if (startDate == null)
			// break MISSING_BLOCK_LABEL_644;
			if (id != null && !id.equals(""))
				// break MISSING_BLOCK_LABEL_328;
				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from payment_detail p, demand_advice_info d, dan_cgpan_info c where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') and trunc(p.PAY_REALISATION_DT) between ? and ?    group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,    p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,   p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					PreparedStatement paymentStmt = connection
							.prepareStatement(query);
					paymentStmt.setDate(1, startDate);
					paymentStmt.setDate(2, endDate);
					ResultSet paymentResult;
					PaymentReport paymentReport;
					for (paymentResult = paymentStmt.executeQuery(); paymentResult
							.next(); paymentArray.add(paymentReport)) {
						paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
					}

					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;
				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}
		// break MISSING_BLOCK_LABEL_320;
		Exception exception1;
		// exception1;
		DBConnection.freeConnection(connection);
		// throw exception1;
		// DBConnection.freeConnection(connection);
		// break MISSING_BLOCK_LABEL_1240;
		if (id == null)
			// break MISSING_BLOCK_LABEL_1240;
			try {
				String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,  p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,  p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from  payment_detail p, demand_advice_info d, dan_cgpan_info c, member_info m where d.DAN_ID = c.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and c.PAY_ID =  p.PAY_ID and d.MEM_BNK_ID = m.MEM_BNK_ID and d.MEM_ZNE_ID =  m.MEM_ZNE_ID and d.MEM_BRN_ID = m.MEM_BRN_ID and d.dan_type in ('SF','AF') and  trunc(p.PAY_REALISATION_DT) between ? and ? and  LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?)))  and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?)   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH,  p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
				PreparedStatement paymentStmt = connection
						.prepareStatement(query);
				paymentStmt.setDate(1, startDate);
				paymentStmt.setDate(2, endDate);
				paymentStmt.setString(3, id);
				paymentStmt.setString(4, zoneId);
				paymentStmt.setString(5, zoneId);
				ResultSet paymentResult;
				PaymentReport paymentReport;
				for (paymentResult = paymentStmt.executeQuery(); paymentResult
						.next(); paymentArray.add(paymentReport)) {
					paymentReport = new PaymentReport();
					paymentReport.setMemberId(paymentResult.getString(1));
					paymentReport.setPaymentMode(paymentResult.getString(2));
					paymentReport.setInstrumentType(paymentResult.getString(3));
					paymentReport.setInstrumentNumber(paymentResult
							.getString(4));
					paymentReport.setRecievedDate(paymentResult.getDate(9));
					paymentReport.setInstrumentDate(paymentResult.getDate(5));
					paymentReport.setAmountPaid(paymentResult.getDouble(11));
					paymentReport.setPayeeBank(paymentResult.getString(6));
					paymentReport.setPayeeBranch(paymentResult.getString(7));
					paymentReport.setPayableAt(paymentResult.getString(8));
					paymentReport.setRealisationDate(paymentResult.getDate(10));
				}

				paymentResult.close();
				paymentResult = null;
				paymentStmt.close();
				paymentStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			}
		// break MISSING_BLOCK_LABEL_636;
		Exception exception2;
		// exception2;
		DBConnection.freeConnection(connection);
		// throw exception2;
		// DBConnection.freeConnection(connection);
		// break MISSING_BLOCK_LABEL_1240;
		if (startDate != null)
			// break MISSING_BLOCK_LABEL_1240;
			if (id != null && !id.equals(""))
				// break MISSING_BLOCK_LABEL_936;
				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from payment_detail p, demand_advice_info d, dan_cgpan_info c where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') and trunc(p.PAY_REALISATION_DT) <= ?    group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,    p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,   p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					PreparedStatement paymentStmt = connection
							.prepareStatement(query);
					paymentStmt.setDate(1, endDate);
					ResultSet paymentResult;
					PaymentReport paymentReport;
					for (paymentResult = paymentStmt.executeQuery(); paymentResult
							.next(); paymentArray.add(paymentReport)) {
						paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
					}

					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;
				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}
		// break MISSING_BLOCK_LABEL_928;
		Exception exception3;
		// exception3;
		DBConnection.freeConnection(connection);
		// throw exception3;
		// DBConnection.freeConnection(connection);
		// break MISSING_BLOCK_LABEL_1240;
		if (id == null)
			// break MISSING_BLOCK_LABEL_1240;
			try {
				String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,  p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,  p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from  payment_detail p, demand_advice_info d, dan_cgpan_info c, member_info m where d.DAN_ID = c.DAN_ID and c.PAY_ID =  p.PAY_ID and d.MEM_BNK_ID = m.MEM_BNK_ID and d.MEM_ZNE_ID =  m.MEM_ZNE_ID and d.MEM_BRN_ID = m.MEM_BRN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') and  trunc(p.PAY_REALISATION_DT) <= ? and  LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?)))  and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?)   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH,  p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
				PreparedStatement paymentStmt = connection
						.prepareStatement(query);
				paymentStmt.setDate(1, endDate);
				paymentStmt.setString(2, id);
				paymentStmt.setString(3, zoneId);
				paymentStmt.setString(4, zoneId);
				ResultSet paymentResult;
				PaymentReport paymentReport;
				for (paymentResult = paymentStmt.executeQuery(); paymentResult
						.next(); paymentArray.add(paymentReport)) {
					paymentReport = new PaymentReport();
					paymentReport.setMemberId(paymentResult.getString(1));
					paymentReport.setPaymentMode(paymentResult.getString(2));
					paymentReport.setInstrumentType(paymentResult.getString(3));
					paymentReport.setInstrumentNumber(paymentResult
							.getString(4));
					paymentReport.setRecievedDate(paymentResult.getDate(9));
					paymentReport.setInstrumentDate(paymentResult.getDate(5));
					paymentReport.setAmountPaid(paymentResult.getDouble(11));
					paymentReport.setPayeeBank(paymentResult.getString(6));
					paymentReport.setPayeeBranch(paymentResult.getString(7));
					paymentReport.setPayableAt(paymentResult.getString(8));
					paymentReport.setRealisationDate(paymentResult.getDate(10));
				}

				paymentResult.close();
				paymentResult = null;
				paymentStmt.close();
				paymentStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			}
		// break MISSING_BLOCK_LABEL_1235;
		Exception exception4;
		// exception4;
		DBConnection.freeConnection(connection);
		// throw exception4;
		// DBConnection.freeConnection(connection);
		Log.log(4, "ReportDAO", "getPaymentReportForZone", "Exited");
		return paymentArray;
	}

	public ArrayList getDCHPaymentReportForZone(java.sql.Date startDate,
			java.sql.Date endDate, String id, String zoneId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getDCHPaymentReportForZone", "Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// System.out.println("id:"+id);
		// System.out.println("zoneId:"+zoneId);
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {
				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE, "
							+ " p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from "
							+ " payment_detail p, demand_advice_info d, dan_cgpan_info c,"
							+ " member_info m where d.DAN_ID = c.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and c.PAY_ID = "
							+ " p.PAY_ID and d.MEM_BNK_ID = m.MEM_BNK_ID and d.MEM_ZNE_ID = "
							+ " m.MEM_ZNE_ID and d.MEM_BRN_ID = m.MEM_BRN_ID and d.dan_type in ('CG','GF') AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%'  and "
							+ " trunc(p.PAY_REALISATION_DT) between ? and ? and "
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
							+ "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
							+ " p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, "
							+ " p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					// System.out.println("query for zone:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentStmt.setString(4, zoneId); // Set zone id parameter
					paymentStmt.setString(5, zoneId); // Set zone id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%'  and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE, "
							+ " p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from "
							+ " payment_detail p, demand_advice_info d, dan_cgpan_info c,"
							+ " member_info m where d.DAN_ID = c.DAN_ID and c.PAY_ID = "
							+ " p.PAY_ID and d.MEM_BNK_ID = m.MEM_BNK_ID and d.MEM_ZNE_ID = "
							+ " m.MEM_ZNE_ID and d.MEM_BRN_ID = m.MEM_BRN_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') and "
							+ " trunc(p.PAY_REALISATION_DT) <= ? and "
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
							+ "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
							+ " p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, "
							+ " p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentStmt.setString(3, zoneId); // Set zone id parameter
					paymentStmt.setString(4, zoneId); // Set zone id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getDCHPaymentReportForZone", "Exited");
		return paymentArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @param zoneId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getASFPaymentReportForZoneNew(java.sql.Date startDate,
			java.sql.Date endDate, String id, String zoneId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getASFPaymentReportForZoneNew",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// System.out.println("id:"+id);
		// System.out.println("zoneId:"+zoneId);
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {
				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE, "
							+ " p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from "
							+ " payment_detail p, demand_advice_info d, dan_cgpan_info c,"
							+ " member_info m where d.DAN_ID = c.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and c.PAY_ID = "
							+ " p.PAY_ID and d.MEM_BNK_ID = m.MEM_BNK_ID and d.MEM_ZNE_ID = "
							+ " m.MEM_ZNE_ID and d.MEM_BRN_ID = m.MEM_BRN_ID and d.dan_type in ('SF','AF') and "
							+ " trunc(p.PAY_REALISATION_DT) between ? and ? and "
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
							+ "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
							+ " p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, "
							+ " p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					// System.out.println("query for zone:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentStmt.setString(4, zoneId); // Set zone id parameter
					paymentStmt.setString(5, zoneId); // Set zone id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE, "
							+ " p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from "
							+ " payment_detail p, demand_advice_info d, dan_cgpan_info c,"
							+ " member_info m where d.DAN_ID = c.DAN_ID and c.PAY_ID = "
							+ " p.PAY_ID and d.MEM_BNK_ID = m.MEM_BNK_ID and d.MEM_ZNE_ID = "
							+ " m.MEM_ZNE_ID and d.MEM_BRN_ID = m.MEM_BRN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') and "
							+ " trunc(p.PAY_REALISATION_DT) <= ? and "
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
							+ "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
							+ " p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, "
							+ " p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentStmt.setString(3, zoneId); // Set zone id parameter
					paymentStmt.setString(4, zoneId); // Set zone id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getASFPaymentReportForZoneNew",
				"Exited");
		return paymentArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @param zoneId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getdailyDCHPaymentReportForZone(java.sql.Date startDate,
			java.sql.Date endDate, String id, String zoneId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getdailyDCHPaymentReportForZone",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// System.out.println("id:"+id);
		// System.out.println("zoneId:"+zoneId);
		String tempId = id + zoneId + "0000";
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {
				try {
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ?  "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI,MEMBER_INFO M "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%'  "
							+ "AND DAI.MEM_BNK_ID=M.MEM_BNK_ID AND DAI.MEM_ZNE_ID=M.MEM_ZNE_ID AND"
							+ " DAI.MEM_BRN_ID = M.MEM_BRN_ID "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? and  "
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					// System.out.println("query for zone:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentStmt.setString(4, zoneId); // Set zone id parameter
					paymentStmt.setString(5, zoneId); // Set zone id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						// System.out.println("In zone id:"+tempId);
						// System.out.println("In zone zoneid:"+zoneId);

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%'  "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(tempId);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI,MEMBER_INFO M "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%'  AND "
							+ "DAI.MEM_BNK_ID=M.MEM_BNK_ID AND DAI.MEM_ZNE_ID=M.MEM_ZNE_ID AND"
							+ "DAI.MEM_BRN_ID = M.MEM_BRN_ID "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? and  "
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentStmt.setString(3, zoneId); // Set zone id parameter
					paymentStmt.setString(4, zoneId); // Set zone id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						// System.out.println("In zone id1:"+tempId);
						// System.out.println("In zone zoneid1:"+zoneId);

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId);
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getdailyDCHPaymentReportForZone",
				"Exited");
		return paymentArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @param zoneId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getdailyPaymentReportForZone(java.sql.Date startDate,
			java.sql.Date endDate, String id, String zoneId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getdailyPaymentReportForZone",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// System.out.println("id:"+id);
		// System.out.println("zoneId:"+zoneId);
		String tempId = id + zoneId + "0000";
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {
				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%' "
					 * + "and trunc(p.PAY_REALISATION_DT) between ? and ? " +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ?  "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, " +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE, " +
					 * " p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, " +
					 * " p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from "
					 * +
					 * " payment_detail p, demand_advice_info d, dan_cgpan_info c,"
					 * +
					 * " member_info m where d.DAN_ID = c.DAN_ID and c.PAY_ID = "
					 * +
					 * " p.PAY_ID and d.MEM_BNK_ID = m.MEM_BNK_ID and d.MEM_ZNE_ID = "
					 * +
					 * " m.MEM_ZNE_ID and d.MEM_BRN_ID = m.MEM_BRN_ID and c.DAN_ID like 'CG%' and "
					 * + " trunc(p.PAY_REALISATION_DT) between ? and ? and " +
					 * " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
					 * +
					 * " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
					 * + "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, "
					 * +
					 * " p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
					 * ;
					 */

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI,MEMBER_INFO M "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "AND DAI.MEM_BNK_ID=M.MEM_BNK_ID AND DAI.MEM_ZNE_ID=M.MEM_ZNE_ID AND"
							+ " DAI.MEM_BRN_ID = M.MEM_BRN_ID "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? and  "
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					// System.out.println("query for zone:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentStmt.setString(4, zoneId); // Set zone id parameter
					paymentStmt.setString(5, zoneId); // Set zone id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						// System.out.println("In zone id:"+tempId);
						// System.out.println("In zone zoneid:"+zoneId);

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%' "
					 * + "and trunc(p.PAY_REALISATION_DT) <= ? " +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(tempId);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, " +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE, " +
					 * " p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, " +
					 * " p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from "
					 * +
					 * " payment_detail p, demand_advice_info d, dan_cgpan_info c,"
					 * +
					 * " member_info m where d.DAN_ID = c.DAN_ID and c.PAY_ID = "
					 * +
					 * " p.PAY_ID and d.MEM_BNK_ID = m.MEM_BNK_ID and d.MEM_ZNE_ID = "
					 * +
					 * " m.MEM_ZNE_ID and d.MEM_BRN_ID = m.MEM_BRN_ID and c.DAN_ID like 'CG%' and "
					 * + " trunc(p.PAY_REALISATION_DT) <= ? and " +
					 * " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
					 * +
					 * " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
					 * + "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, "
					 * +
					 * " p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
					 * ;
					 */

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI,MEMBER_INFO M "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' AND "
							+ "DAI.MEM_BNK_ID=M.MEM_BNK_ID AND DAI.MEM_ZNE_ID=M.MEM_ZNE_ID AND"
							+ "DAI.MEM_BRN_ID = M.MEM_BRN_ID "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? and  "
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentStmt.setString(3, zoneId); // Set zone id parameter
					paymentStmt.setString(4, zoneId); // Set zone id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						// System.out.println("In zone id1:"+tempId);
						// System.out.println("In zone zoneid1:"+zoneId);

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId);
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getdailyPaymentReportForZone", "Exited");
		return paymentArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @param zoneId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getasfdailyPaymentReportForZone(java.sql.Date startDate,
			java.sql.Date endDate, String id, String zoneId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getasfdailyPaymentReportForZone",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// System.out.println("id:"+id);
		// System.out.println("zoneId:"+zoneId);
		String tempId = id + zoneId + "0000";
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {
				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%' "
					 * + "and trunc(p.PAY_REALISATION_DT) between ? and ? " +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ?  "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, " +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE, " +
					 * " p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, " +
					 * " p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from "
					 * +
					 * " payment_detail p, demand_advice_info d, dan_cgpan_info c,"
					 * +
					 * " member_info m where d.DAN_ID = c.DAN_ID and c.PAY_ID = "
					 * +
					 * " p.PAY_ID and d.MEM_BNK_ID = m.MEM_BNK_ID and d.MEM_ZNE_ID = "
					 * +
					 * " m.MEM_ZNE_ID and d.MEM_BRN_ID = m.MEM_BRN_ID and c.DAN_ID like 'CG%' and "
					 * + " trunc(p.PAY_REALISATION_DT) between ? and ? and " +
					 * " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
					 * +
					 * " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
					 * + "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, "
					 * +
					 * " p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
					 * ;
					 */

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI,MEMBER_INFO M "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "AND DAI.MEM_BNK_ID=M.MEM_BNK_ID AND DAI.MEM_ZNE_ID=M.MEM_ZNE_ID AND"
							+ " DAI.MEM_BRN_ID = M.MEM_BRN_ID "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? and  "
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					// System.out.println("query for zone:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentStmt.setString(4, zoneId); // Set zone id parameter
					paymentStmt.setString(5, zoneId); // Set zone id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						// System.out.println("In zone id:"+tempId);
						// System.out.println("In zone zoneid:"+zoneId);

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%' "
					 * + "and trunc(p.PAY_REALISATION_DT) <= ? " +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(tempId);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, " +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE, " +
					 * " p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, " +
					 * " p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from "
					 * +
					 * " payment_detail p, demand_advice_info d, dan_cgpan_info c,"
					 * +
					 * " member_info m where d.DAN_ID = c.DAN_ID and c.PAY_ID = "
					 * +
					 * " p.PAY_ID and d.MEM_BNK_ID = m.MEM_BNK_ID and d.MEM_ZNE_ID = "
					 * +
					 * " m.MEM_ZNE_ID and d.MEM_BRN_ID = m.MEM_BRN_ID and c.DAN_ID like 'CG%' and "
					 * + " trunc(p.PAY_REALISATION_DT) <= ? and " +
					 * " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
					 * +
					 * " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
					 * + "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, "
					 * +
					 * " p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT"
					 * ;
					 */

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI,MEMBER_INFO M "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' AND "
							+ "DAI.MEM_BNK_ID=M.MEM_BNK_ID AND DAI.MEM_ZNE_ID=M.MEM_ZNE_ID AND"
							+ "DAI.MEM_BRN_ID = M.MEM_BRN_ID "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? and  "
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentStmt.setString(3, zoneId); // Set zone id parameter
					paymentStmt.setString(4, zoneId); // Set zone id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						// System.out.println("In zone id1:"+tempId);
						// System.out.println("In zone zoneid1:"+zoneId);

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId);
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getasfdailyPaymentReportForZone",
				"Exited");
		return paymentArray;
	}

	// Fix Completed
	/* added by sukumar@path on 28-04-2008 for asf payment report */

	public ArrayList getASFPaymentReportForZone(java.sql.Date startDate,
			java.sql.Date endDate, String id, String zoneId,String status)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getASFPaymentReportForZone", "Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();
		// System.out.println("id:"+id);
		// System.out.println("zoneId:"+zoneId);
		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {
				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'SF%'"
					 * + "and trunc(p.PAY_REALISATION_DT) between ? and ? " +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT";
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 and c.PAY_ID = p.PAY_ID and d.dan_type=? "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by 1,4";
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setString(1, status);
					paymentStmt.setDate(2, startDate); // Set endDate parameter
					paymentStmt.setDate(3, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 23-may
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, " +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE, " +
					 * " p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, " +
					 * " p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT from "
					 * +
					 * " payment_detail p, demand_advice_info d, dan_cgpan_info c,"
					 * +
					 * " member_info m where d.DAN_ID = c.DAN_ID and c.PAY_ID = "
					 * +
					 * " p.PAY_ID and d.MEM_BNK_ID = m.MEM_BNK_ID and d.MEM_ZNE_ID = "
					 * +
					 * " m.MEM_ZNE_ID and d.MEM_BRN_ID = m.MEM_BRN_ID and c.DAN_ID like 'SF%' and "
					 * + " trunc(p.PAY_REALISATION_DT) between ? and ? and " +
					 * " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
					 * +
					 * " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
					 * + "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, "
					 * +
					 * " p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, "
					 * + " p.PAY_AMOUNT";
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE, "
							+ " p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) from "
							+ " payment_detail p, demand_advice_info d, dan_cgpan_info c,"
							+ " member_info m where d.DAN_ID = c.DAN_ID and c.PAY_ID = "
							+ " p.PAY_ID and d.MEM_BNK_ID = m.MEM_BNK_ID and d.MEM_ZNE_ID = "
							+ " m.MEM_ZNE_ID and d.MEM_BRN_ID = m.MEM_BRN_ID AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 and d.dan_type= ? and "
							+ " trunc(p.PAY_REALISATION_DT) between ? and ? and "
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
							+ "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
							+ " p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, "
							+ " p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by 1,4";
					// System.out.println("query for zone:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setString(1, status);
					paymentStmt.setDate(2, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(3, endDate); // Set endDate parameter
					paymentStmt.setString(4, id); // Set id parameter
					paymentStmt.setString(5, zoneId); // Set zone id parameter
					paymentStmt.setString(6, zoneId); // Set zone id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 23-may
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'SF%' "
					 * + "and trunc(p.PAY_REALISATION_DT) <= ? " +
					 * "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT";
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 and c.PAY_ID = p.PAY_ID and d.dan_type=? "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? "
							+ "   group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by 1,4";
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setString(1, status); 
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 23-may
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, " +
					 * " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE, " +
					 * " p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, " +
					 * " p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT from "
					 * +
					 * " payment_detail p, demand_advice_info d, dan_cgpan_info c,"
					 * +
					 * " member_info m where d.DAN_ID = c.DAN_ID and c.PAY_ID = "
					 * +
					 * " p.PAY_ID and d.MEM_BNK_ID = m.MEM_BNK_ID and d.MEM_ZNE_ID = "
					 * +
					 * " m.MEM_ZNE_ID and d.MEM_BRN_ID = m.MEM_BRN_ID and c.DAN_ID like 'SF%' and "
					 * + " trunc(p.PAY_REALISATION_DT) <= ? and " +
					 * " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
					 * +
					 * " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
					 * + "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
					 * +
					 * " p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, "
					 * +
					 * " p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, "
					 * + " p.PAY_AMOUNT";
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID, "
							+ " p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE, "
							+ " p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) from "
							+ " payment_detail p, demand_advice_info d, dan_cgpan_info c,"
							+ " member_info m where d.DAN_ID = c.DAN_ID and c.PAY_ID = "
							+ " p.PAY_ID and d.MEM_BNK_ID = m.MEM_BNK_ID and d.MEM_ZNE_ID = "
							+ " m.MEM_ZNE_ID and d.MEM_BRN_ID = m.MEM_BRN_ID AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 and d.dan_type =? and "
							+ " trunc(p.PAY_REALISATION_DT) <= ? and "
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?))) "
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
							+ "  group by d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID,"
							+ " p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, "
							+ " p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by 1,4";
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setString(1, status);
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentStmt.setString(4, zoneId); // Set zone id parameter
					paymentStmt.setString(5, zoneId); // Set zone id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 23-may
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getASFPaymentReportForZone", "Exited");
		return paymentArray;
	}

	/* ----------------------------------------------------------- */

	/**
	 * 
	 * added by sukumar@path for getting Allocatied Payments for branch
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getAllocatedPaymentReportForBranch(
			java.sql.Date startDate, java.sql.Date endDate, String id)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getAllocatedPaymentReportForBranch",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query
					 * ="select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
					 * + " p.PAY_INSTRUMENT_NUMBER, "+ " p.PAY_INSTRUMENT_DT, "+
					 * " p.PAY_PAYMENT_DT, p.PAY_AMOUNT,p.PAY_ID,c.DAN_ID,c.CGPAN "
					 * +
					 * " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.dan_id like 'SF%' and c.DCI_ALLOCATION_FLAG = 'Y'"
					 * + " and trunc(c.DCI_ALLOCATION_DT) between ? and ? " ; //
					 * "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, "
					 * + // " p.PAY_INSTRUMENT_NUMBER,  " + //
					 * "  p.PAY_INSTRUMENT_DT, " + //
					 * "  p.PAY_PAYMENT_DT, p.PAY_AMOUNT,p.PAY_ID";
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_ID,sum(c.dci_base_amt),sum(c.dci_stax_amt),sum(c.dci_ecess_amt),sum(c.dci_hecess_amt),sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') and c.DCI_ALLOCATION_FLAG = 'Y'"
							+ " and trunc(c.DCI_ALLOCATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT, "
							+ "  p.PAY_PAYMENT_DT,p.PAY_ID";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					// System.out.println("raaaaaaaaaa"+query);
					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(2));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(3));
						paymentReport.setRecievedDate(paymentResult.getDate(4));
						paymentReport.setPayId(paymentResult.getString(5));

						paymentReport.setBaseAmount(paymentResult.getDouble(6));
						paymentReport.setSerTaxAmount(paymentResult
								.getDouble(7));
						paymentReport.setEduCessbaseAmount(paymentResult
								.getDouble(8));
						paymentReport.setHighereduCessbaseAmount(paymentResult
								.getDouble(9));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(11));// rajuk
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(12));// kuldeep20-5

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
					 * + " p.PAY_INSTRUMENT_NUMBER, "+ " p.PAY_INSTRUMENT_DT, "+
					 * " p.PAY_PAYMENT_DT, p.PAY_AMOUNT,p.PAY_ID,c.DAN_ID,c.CGPAN "
					 * +
					 * " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
					 * +
					 * " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.dan_id like 'SF%' and c.DCI_ALLOCATION_FLAG = 'Y'"
					 * +
					 * " and trunc(c.DCI_ALLOCATION_DT) between ? and ?  and  "
					 * +
					 * "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
					 * + " = LTRIM(RTRIM(UPPER(?))) "; //
					 * "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID,"
					 * + // " p.PAY_INSTRUMENT_NUMBER,  " + //
					 * "  p.PAY_INSTRUMENT_DT, " + //
					 * "  p.PAY_PAYMENT_DT, p.PAY_AMOUNT,p.PAY_ID";
					 */
					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_PAYMENT_DT,p.PAY_ID,sum(c.dci_base_amt),sum(c.dci_stax_amt),sum(c.dci_ecess_amt),sum(c.dci_hecess_amt),sum(c.dci_amount_raised),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') and c.DCI_ALLOCATION_FLAG = 'Y'"
							+ " and trunc(c.DCI_ALLOCATION_DT) between ? and ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) "
							+ "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID,"
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT, "
							+ "  p.PAY_PAYMENT_DT,p.PAY_ID";
					// System.out.println("query1rrr"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(2));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(3));
						paymentReport.setRecievedDate(paymentResult.getDate(4));
						paymentReport.setPayId(paymentResult.getString(5));

						paymentReport.setBaseAmount(paymentResult.getDouble(6));
						paymentReport.setSerTaxAmount(paymentResult
								.getDouble(7));
						paymentReport.setEduCessbaseAmount(paymentResult
								.getDouble(8));
						paymentReport.setHighereduCessbaseAmount(paymentResult
								.getDouble(9));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(11));// rajuk
						// added by kuldeep@path 23-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(12));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getAllocatedPaymentReportForBranch",
				"Exited");
		return paymentArray;
	}

	/* ----------------- */

	public ArrayList getGFAllocatedPaymentReportForBranch(
			java.sql.Date startDate, java.sql.Date endDate, String id)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getGFAllocatedPaymentReportForBranch",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {

					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_PAYMENT_DT, p.PAY_ID,sum(c.dci_base_amt),sum(c.dci_stax_amt),sum(c.dci_ecess_amt),sum(c.dci_hecess_amt),sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('CG','GF')  and c.DCI_ALLOCATION_FLAG = 'Y'"
							+ " and trunc(c.DCI_ALLOCATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, "
							+ " p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT, "
							+ "  p.PAY_PAYMENT_DT,p.PAY_ID";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					// System.out.println(query);
					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(2));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(3));
						paymentReport.setRecievedDate(paymentResult.getDate(4));

						paymentReport.setPayId(paymentResult.getString(5));
						paymentReport.setBaseAmount(paymentResult.getDouble(6));
						paymentReport.setSerTaxAmount(paymentResult
								.getDouble(7));
						paymentReport.setEduCessbaseAmount(paymentResult
								.getDouble(8));
						paymentReport.setHighereduCessbaseAmount(paymentResult
								.getDouble(9));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(11));// rajuk
						// added by kuldeep@20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(12));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {

					String query = "select d.MEM_BNK_ID||d.MEM_ZNE_ID||d.MEM_BRN_ID mem_id, "
							+ " p.PAY_INSTRUMENT_NUMBER, "
							+ " p.PAY_INSTRUMENT_DT, "
							+ " p.PAY_PAYMENT_DT,p.PAY_ID,sum(c.dci_base_amt),sum(c.dci_stax_amt),sum(c.dci_ecess_amt),sum(c.dci_hecess_amt),sum(c.dci_amount_raised),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ " from payment_detail_temp p, demand_advice_info d, dan_cgpan_info_temp c "
							+ " where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('CG','GF')  and c.DCI_ALLOCATION_FLAG = 'Y'"
							+ " and trunc(c.DCI_ALLOCATION_DT) between ? and ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) "
							+ "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID,"
							+ " p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT, "
							+ "  p.PAY_PAYMENT_DT,p.PAY_ID";
					// System.out.println("query1"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(2));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(3));
						paymentReport.setRecievedDate(paymentResult.getDate(4));

						paymentReport.setPayId(paymentResult.getString(5));
						paymentReport.setBaseAmount(paymentResult.getDouble(6));
						paymentReport.setSerTaxAmount(paymentResult
								.getDouble(7));
						paymentReport.setEduCessbaseAmount(paymentResult
								.getDouble(8));
						paymentReport.setHighereduCessbaseAmount(paymentResult
								.getDouble(9));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(11));// rajuk
						// added by kuldeep@20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(12));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getGFAllocatedPaymentReportForBranch",
				"Exited");
		return paymentArray;
	}

	public ArrayList getPaymentReportForBranch(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getPaymentReportForBranch", "Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) "
							+ "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? "
							+ "group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT,sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) "
							+ "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 20-5-16
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getPaymentReportForBranch", "Exited");
		return paymentArray;
	}

	public ArrayList getPaymentReportForBranchforRSF(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Connection connection;
		ArrayList paymentArray;
		Log.log(4, "ReportDAO", "getPaymentReportForBranch", "Entered");
		connection = DBConnection.getConnection();
		paymentArray = new ArrayList();
		if (startDate == null)
			// break MISSING_BLOCK_LABEL_624;
			if (id != null && !id.equals(""))
				// break MISSING_BLOCK_LABEL_328;
				try {
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from payment_detail p, demand_advice_info d, dan_cgpan_info c where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') and trunc(p.PAY_REALISATION_DT) between ? and ?    group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,    p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,   p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					PreparedStatement paymentStmt = connection
							.prepareStatement(query);
					paymentStmt.setDate(1, startDate);
					paymentStmt.setDate(2, endDate);
					ResultSet paymentResult;
					PaymentReport paymentReport;
					for (paymentResult = paymentStmt.executeQuery(); paymentResult
							.next(); paymentArray.add(paymentReport)) {
						paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
					}

					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;
				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}
		// break MISSING_BLOCK_LABEL_320;
		Exception exception1;
		// exception1;
		// DBConnection.freeConnection(connection);
		// throw exception1;
		DBConnection.freeConnection(connection);
		// break MISSING_BLOCK_LABEL_1200;
		if (id == null)
			// break MISSING_BLOCK_LABEL_1200;
			try {
				String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from payment_detail p, demand_advice_info d, dan_cgpan_info c where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') and trunc(p.PAY_REALISATION_DT) between ? and ?  and  LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID))) = LTRIM(RTRIM(UPPER(?)))    group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,    p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,   p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
				PreparedStatement paymentStmt = connection
						.prepareStatement(query);
				paymentStmt.setDate(1, startDate);
				paymentStmt.setDate(2, endDate);
				paymentStmt.setString(3, id);
				ResultSet paymentResult;
				PaymentReport paymentReport;
				for (paymentResult = paymentStmt.executeQuery(); paymentResult
						.next(); paymentArray.add(paymentReport)) {
					paymentReport = new PaymentReport();
					paymentReport.setMemberId(paymentResult.getString(1));
					paymentReport.setPaymentMode(paymentResult.getString(2));
					paymentReport.setInstrumentType(paymentResult.getString(3));
					paymentReport.setInstrumentNumber(paymentResult
							.getString(4));
					paymentReport.setRecievedDate(paymentResult.getDate(9));
					paymentReport.setInstrumentDate(paymentResult.getDate(5));
					paymentReport.setAmountPaid(paymentResult.getDouble(11));
					paymentReport.setPayeeBank(paymentResult.getString(6));
					paymentReport.setPayeeBranch(paymentResult.getString(7));
					paymentReport.setPayableAt(paymentResult.getString(8));
					paymentReport.setRealisationDate(paymentResult.getDate(10));
				}

				paymentResult.close();
				paymentResult = null;
				paymentStmt.close();
				paymentStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			}
		// break MISSING_BLOCK_LABEL_616;
		Exception exception2;
		// exception2;
		// DBConnection.freeConnection(connection);
		// throw exception2;
		DBConnection.freeConnection(connection);
		// break MISSING_BLOCK_LABEL_1200;
		if (startDate != null)
			// break MISSING_BLOCK_LABEL_1200;
			if (id != null && !id.equals(""))
				// break MISSING_BLOCK_LABEL_916;
				try {
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) from payment_detail p, demand_advice_info d, dan_cgpan_info c where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') and trunc(p.PAY_REALISATION_DT) <= ? group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,    p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,   p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					PreparedStatement paymentStmt = connection
							.prepareStatement(query);
					paymentStmt.setDate(1, endDate);
					ResultSet paymentResult;
					PaymentReport paymentReport;
					for (paymentResult = paymentStmt.executeQuery(); paymentResult
							.next(); paymentArray.add(paymentReport)) {
						paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
					}

					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;
				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}
		// break MISSING_BLOCK_LABEL_908;
		Exception exception3;
		// exception3;
		DBConnection.freeConnection(connection);
		// throw exception3;
		// DBConnection.freeConnection(connection);
		// break MISSING_BLOCK_LABEL_1200;
		if (id == null)
			// break MISSING_BLOCK_LABEL_1200;
			try {
				String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT,sum(c.DCI_AMOUNT_RAISED) from payment_detail p, demand_advice_info d, dan_cgpan_info c where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') and trunc(p.PAY_REALISATION_DT) <= ?  and  LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID))) = LTRIM(RTRIM(UPPER(?)))    group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT, p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,    p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT,   p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
				PreparedStatement paymentStmt = connection
						.prepareStatement(query);
				paymentStmt.setDate(1, endDate);
				paymentStmt.setString(2, id);
				ResultSet paymentResult;
				PaymentReport paymentReport;
				for (paymentResult = paymentStmt.executeQuery(); paymentResult
						.next(); paymentArray.add(paymentReport)) {
					paymentReport = new PaymentReport();
					paymentReport.setMemberId(paymentResult.getString(1));
					paymentReport.setPaymentMode(paymentResult.getString(2));
					paymentReport.setInstrumentType(paymentResult.getString(3));
					paymentReport.setInstrumentNumber(paymentResult
							.getString(4));
					paymentReport.setRecievedDate(paymentResult.getDate(9));
					paymentReport.setInstrumentDate(paymentResult.getDate(5));
					paymentReport.setAmountPaid(paymentResult.getDouble(11));
					paymentReport.setPayeeBank(paymentResult.getString(6));
					paymentReport.setPayeeBranch(paymentResult.getString(7));
					paymentReport.setPayableAt(paymentResult.getString(8));
					paymentReport.setRealisationDate(paymentResult.getDate(10));
				}

				paymentResult.close();
				paymentResult = null;
				paymentStmt.close();
				paymentStmt = null;
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			}
		// break MISSING_BLOCK_LABEL_1195;
		Exception exception4;
		// exception4;
		DBConnection.freeConnection(connection);
		// throw exception4;
		// DBConnection.freeConnection(connection);
		Log.log(4, "ReportDAO", "getPaymentReportForBranch", "Exited");
		return paymentArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getDCHPaymentReportForBranch(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getDCHPaymentReportForBranch",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%'  and d.dan_type in ('CG','GF')"
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%'  and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) "
							+ "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? "
							+ "group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT,sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('CG','GF') "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) "
							+ "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getDCHPaymentReportForBranch", "Exited");
		return paymentArray;
	}

	public ArrayList getASFPaymentReportForBranchNew(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getASFPaymentReportForBranchNew",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and d.dan_type in ('SF','AF') "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) "
							+ "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? "
							+ "group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT,sum(c.DCI_AMOUNT_RAISED) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 and d.dan_type in ('SF','AF') "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) "
							+ "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  "
							+ "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getPaymentReportForBranch", "Exited");
		return paymentArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getdailyDCHPaymentReportForBranch(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getdailyDCHPaymentReportForBranch",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID AND D.PAY_ID = P.PAY_ID AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%'  "
							+ "AND DAI.dan_type in ('CG','GF') and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ?  "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(id);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? and  "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID || dai.MEM_ZNE_ID || dai.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%' "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' AND DCI_REMARKS LIKE '%APPROPRIATION DONE FROM DC(HANDICRAFT) FUND%'  "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? and  "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID || dai.MEM_ZNE_ID || dai.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// System.out.println("test id:"+id);
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getdailyDCHPaymentReportForBranch",
				"Exited");
		return paymentArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getdailyPaymentReportForBranch(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getdailyPaymentReportForBranch",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , "
					 * +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%'"
					 * + "and trunc(p.PAY_REALISATION_DT) between ? and ? " +
					 * "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ?  "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(id);

						/*
						 * paymentReport.setMemberId(paymentResult.getString(1));
						 * paymentReport
						 * .setPaymentMode(paymentResult.getString(2));
						 * paymentReport
						 * .setInstrumentType(paymentResult.getString(3));
						 * paymentReport
						 * .setInstrumentNumber(paymentResult.getString(4));
						 * paymentReport
						 * .setRecievedDate(paymentResult.getDate(9));
						 * paymentReport
						 * .setInstrumentDate(paymentResult.getDate(5));
						 * paymentReport
						 * .setAmountPaid(paymentResult.getDouble(11));
						 * paymentReport
						 * .setPayeeBank(paymentResult.getString(6));
						 * paymentReport
						 * .setPayeeBranch(paymentResult.getString(7));
						 * paymentReport
						 * .setPayableAt(paymentResult.getString(8));
						 * paymentReport
						 * .setRealisationDate(paymentResult.getDate(10));
						 */

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%'"
					 * +
					 * "and trunc(p.PAY_REALISATION_DT) between ? and ?  and  "
					 * +
					 * "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
					 * + " = LTRIM(RTRIM(UPPER(?))) " +
					 * "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? and  "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID || dai.MEM_ZNE_ID || dai.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , "
					 * +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%'"
					 * + "and trunc(p.PAY_REALISATION_DT) <= ? " +
					 * "group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT,sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%' "
					 * + "and trunc(p.PAY_REALISATION_DT) <= ?  and  " +
					 * "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
					 * + " = LTRIM(RTRIM(UPPER(?))) " +
					 * "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('CG','GF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? and  "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID || dai.MEM_ZNE_ID || dai.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// System.out.println("test id:"+id);
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getdailyPaymentReportForBranch",
				"Exited");
		return paymentArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getasfdailyPaymentReportForBranch(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getasfdailyPaymentReportForBranch",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , "
					 * +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%'"
					 * + "and trunc(p.PAY_REALISATION_DT) between ? and ? " +
					 * "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID AND D.PAY_ID = P.PAY_ID "
							+ "AND DAI.dan_type in ('SF','AF') and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ?  "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(id);

						/*
						 * paymentReport.setMemberId(paymentResult.getString(1));
						 * paymentReport
						 * .setPaymentMode(paymentResult.getString(2));
						 * paymentReport
						 * .setInstrumentType(paymentResult.getString(3));
						 * paymentReport
						 * .setInstrumentNumber(paymentResult.getString(4));
						 * paymentReport
						 * .setRecievedDate(paymentResult.getDate(9));
						 * paymentReport
						 * .setInstrumentDate(paymentResult.getDate(5));
						 * paymentReport
						 * .setAmountPaid(paymentResult.getDouble(11));
						 * paymentReport
						 * .setPayeeBank(paymentResult.getString(6));
						 * paymentReport
						 * .setPayeeBranch(paymentResult.getString(7));
						 * paymentReport
						 * .setPayableAt(paymentResult.getString(8));
						 * paymentReport
						 * .setRealisationDate(paymentResult.getDate(10));
						 */

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%'"
					 * +
					 * "and trunc(p.PAY_REALISATION_DT) between ? and ?  and  "
					 * +
					 * "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
					 * + " = LTRIM(RTRIM(UPPER(?))) " +
					 * "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND  DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? and  "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID || dai.MEM_ZNE_ID || dai.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , "
					 * +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%'"
					 * + "and trunc(p.PAY_REALISATION_DT) <= ? " +
					 * "group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */

					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND  DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  "
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));

						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT,sum(c.DCI_AMOUNT_RAISED) "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'CG%' "
					 * + "and trunc(p.PAY_REALISATION_DT) <= ?  and  " +
					 * "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
					 * + " = LTRIM(RTRIM(UPPER(?))) " +
					 * "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT,  p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT";
					 */
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM "
							+ "DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
							+ "WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID "
							+ "AND  DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? and  "
							+ " LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID || dai.MEM_ZNE_ID || dai.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?)))"
							+ "GROUP BY P.PAY_REALISATION_DT ORDER BY 1";

					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setDate(1, endDate); // Set endDate parameter
					paymentStmt.setString(2, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// System.out.println("test id:"+id);
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();

						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));

						paymentReport.setMemberId(id);

						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getasfdailyPaymentReportForBranch",
				"Exited");
		return paymentArray;
	}

	/* added by sukumar@path on 28-04-2008 for asf payment report */

	public ArrayList getASFPaymentReportForBranch(java.sql.Date startDate,
			java.sql.Date endDate, String id,String status) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getASFPaymentReportForBranch",
				"Entered");
		PreparedStatement paymentStmt;
		ResultSet paymentResult;
		Connection connection = DBConnection.getConnection();
		ArrayList paymentArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , "
					 * +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'SF%'"
					 * + "and trunc(p.PAY_REALISATION_DT) between ? and ? " +
					 * "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT";
					 */
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 and c.PAY_ID = p.PAY_ID and d.dan_type =? "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ? "
							+ "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by 1,4";
					// System.out.println("query:"+query);
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setString(1, status); 
					paymentStmt.setDate(1, startDate); // Set endDate parameter
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 23 may
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'SF%'"
					 * +
					 * "and trunc(p.PAY_REALISATION_DT) between ? and ?  and  "
					 * +
					 * "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
					 * + " = LTRIM(RTRIM(UPPER(?))) " +
					 * "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT";
					 */
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 and c.PAY_ID = p.PAY_ID and d.dan_type=? "
							+ "and trunc(p.PAY_REALISATION_DT) between ? and ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) "
							+ "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by 1,4";
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setString(1, status);
					paymentStmt.setDate(2, startDate); // Set startDate
														// parameter
					paymentStmt.setDate(3, endDate); // Set endDate parameter
					paymentStmt.setString(4, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 23 may
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , "
					 * +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'SF%' "
					 * + "and trunc(p.PAY_REALISATION_DT) <= ? " +
					 * "group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT";
					 */
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID , "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 and c.PAY_ID = p.PAY_ID and d.dan_type=? "
							+ "and trunc(p.PAY_REALISATION_DT) <= ? "
							+ "group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by 1,4";
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setString(1, status); 
					paymentStmt.setDate(2, endDate); // Set startDate parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 23 may
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {

				try {
					/*
					 * String query =
					 * "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, " +
					 * "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
					 * +
					 * "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * + "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT "
					 * +
					 * "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
					 * +
					 * "where d.DAN_ID = c.DAN_ID and c.PAY_ID = p.PAY_ID and c.DAN_ID like 'SF%'"
					 * + "and trunc(p.PAY_REALISATION_DT) <= ?  and  " +
					 * "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
					 * + " = LTRIM(RTRIM(UPPER(?))) " +
					 * "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
					 * + " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,  " +
					 * "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
					 * +
					 * "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT, p.PAY_AMOUNT";
					 */
					String query = "select d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, "
							+ "p.PAY_MODE_OF_PAYMENT,p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER, "
							+ "p.PAY_INSTRUMENT_DT,p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT,sum(c.DCI_AMOUNT_RAISED),sum(c.DCI_SWBHCESS_AMT),sum(c.DCI_KKALYANCESS_AMT) "
							+ "from payment_detail p, demand_advice_info d, dan_cgpan_info c "
							+ "where d.DAN_ID = c.DAN_ID AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))>0 and c.PAY_ID = p.PAY_ID and d.dan_type =? "
							+ "and trunc(p.PAY_REALISATION_DT) <= ?  and  "
							+ "LTRIM(RTRIM(UPPER(d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) "
							+ "   group by d.MEM_BNK_ID || d.MEM_ZNE_ID || d.MEM_BRN_ID, p.PAY_MODE_OF_PAYMENT,"
							+ " p.PAY_INSTRUMENT_TYPE,p.PAY_INSTRUMENT_NUMBER,"
							+ "  p.PAY_INSTRUMENT_DT, p.PAY_DRAWN_AT_BANK,p.PAY_DRAWN_AT_BRANCH, p.PAY_PAYABLE_AT, "
							+ "  p.PAY_PAYMENT_DT, p.PAY_REALISATION_DT order by 1,4";
					paymentStmt = connection.prepareStatement(query);
					paymentStmt.setString(1, status);
					paymentStmt.setDate(2, endDate); // Set endDate parameter
					paymentStmt.setString(3, id); // Set id parameter
					paymentResult = paymentStmt.executeQuery();

					while (paymentResult.next()) {
						// Instantiate a PaymentReport value object
						PaymentReport paymentReport = new PaymentReport();
						paymentReport.setMemberId(paymentResult.getString(1));
						paymentReport
								.setPaymentMode(paymentResult.getString(2));
						paymentReport.setInstrumentType(paymentResult
								.getString(3));
						paymentReport.setInstrumentNumber(paymentResult
								.getString(4));
						paymentReport.setRecievedDate(paymentResult.getDate(9));
						paymentReport.setInstrumentDate(paymentResult
								.getDate(5));
						paymentReport
								.setAmountPaid(paymentResult.getDouble(11));
						paymentReport.setPayeeBank(paymentResult.getString(6));
						paymentReport
								.setPayeeBranch(paymentResult.getString(7));
						paymentReport.setPayableAt(paymentResult.getString(8));
						paymentReport.setRealisationDate(paymentResult
								.getDate(10));
						paymentReport.setSwatchBharatTax(paymentResult
								.getDouble(12));// rajuk
						// added by kuldeep@path 23 may
						paymentReport.setKrishiKalCess(paymentResult
								.getDouble(13));
						paymentArray.add(paymentReport);
					}
					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "getASFPaymentReportForBranch", "Exited");
		return paymentArray;
	}

	/* ---------------------------------------------------------- */
	/*
	 * ##########################################################################
	 * #################
	 */

	public ArrayList disbursementReport(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "disbursementReport", "Entered");
		PreparedStatement disbursementStmt = null;
		ResultSet disbursementResult = null;
		Connection connection = DBConnection.getConnection();
		ArrayList disbursementArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {
				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					String query = "select distinct(a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID ) mem_id,"
							+ " a.cgpan ,t.TRM_AMOUNT_SANCTIONED,d.DBR_AMOUNT, d.DBR_DT"
							+ " from application_detail a, disbursement_detail d,"
							+ " term_loan_detail t where a.APP_REF_NO = d.APP_REF_NO and"
							+ " a.APP_REF_NO = t.APP_REF_NO and trunc(d.DBR_DT) between ? and ? and d.DBR_AMOUNT <> 0"
							+ " order by mem_id";
					disbursementStmt = connection.prepareStatement(query);
					disbursementStmt.setDate(1, startDate); // Set startDate
															// parameter
					disbursementStmt.setDate(2, endDate); // Set endDate
															// parameter
					disbursementResult = disbursementStmt.executeQuery();

					while (disbursementResult.next()) {
						// Instantiate a DisbursementReport value object
						DisbursementReport disbursementReport = new DisbursementReport();
						disbursementReport.setMemberid(disbursementResult
								.getString(1));
						disbursementReport.setCgpan(disbursementResult
								.getString(2));
						disbursementReport.setTermCredit(disbursementResult
								.getDouble(3));
						disbursementReport
								.setDisbursementDate(disbursementResult
										.getDate(5));
						disbursementReport
								.setDisbursedAmount(disbursementResult
										.getDouble(4));

						disbursementArray.add(disbursementReport);
					}
					disbursementResult.close();
					disbursementResult = null;
					disbursementStmt.close();
					disbursementStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					String query = "select distinct(a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID) mem_id,"
							+ " a.cgpan ,t.TRM_AMOUNT_SANCTIONED,d.DBR_AMOUNT, d.DBR_DT"
							+ " from application_detail a, disbursement_detail d,"
							+ " term_loan_detail t where a.APP_REF_NO = d.APP_REF_NO and"
							+ " a.APP_REF_NO = t.APP_REF_NO and trunc(d.DBR_DT) between ? and ?"
							+ " and LTRIM(RTRIM(UPPER(a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) and d.DBR_AMOUNT <> 0"
							+ " order by mem_id";
					disbursementStmt = connection.prepareStatement(query);
					disbursementStmt.setDate(1, startDate); // Set startDate
															// parameter
					disbursementStmt.setDate(2, endDate); // Set endDate
															// parameter
					disbursementStmt.setString(3, id); // Set id parameter
					disbursementResult = disbursementStmt.executeQuery();

					while (disbursementResult.next()) {
						// Instantiate a DisbursementReport value object
						DisbursementReport disbursementReport = new DisbursementReport();
						disbursementReport.setMemberid(disbursementResult
								.getString(1));
						disbursementReport.setCgpan(disbursementResult
								.getString(2));
						disbursementReport.setTermCredit(disbursementResult
								.getDouble(3));
						disbursementReport
								.setDisbursementDate(disbursementResult
										.getDate(5));
						disbursementReport
								.setDisbursedAmount(disbursementResult
										.getDouble(4));

						disbursementArray.add(disbursementReport);
					}
					disbursementResult.close();
					disbursementResult = null;
					disbursementStmt.close();
					disbursementStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {
				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					String query = "select distinct(a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID) mem_id,"
							+ " a.cgpan ,t.TRM_AMOUNT_SANCTIONED,d.DBR_AMOUNT, d.DBR_DT"
							+ " from application_detail a, disbursement_detail d, "
							+ " term_loan_detail t where a.APP_REF_NO = d.APP_REF_NO and "
							+ " a.APP_REF_NO = t.APP_REF_NO and trunc(d.DBR_DT) <= ?  and d.DBR_AMOUNT <> 0"
							+ " order by mem_id";

					disbursementStmt = connection.prepareStatement(query);
					disbursementStmt.setDate(1, endDate); // Set endDate
															// parameter
					disbursementResult = disbursementStmt.executeQuery();

					while (disbursementResult.next()) {
						// Instantiate a DisbursementReport value object
						DisbursementReport disbursementReport = new DisbursementReport();
						disbursementReport.setMemberid(disbursementResult
								.getString(1));
						disbursementReport.setCgpan(disbursementResult
								.getString(2));
						disbursementReport.setTermCredit(disbursementResult
								.getDouble(3));
						disbursementReport
								.setDisbursementDate(disbursementResult
										.getDate(5));
						disbursementReport
								.setDisbursedAmount(disbursementResult
										.getDouble(4));

						disbursementArray.add(disbursementReport);
					}
					disbursementResult.close();
					disbursementResult = null;
					disbursementStmt.close();
					disbursementStmt = null;

				} catch (Exception exception) {
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					String query = "select distinct(a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID) mem_id,"
							+ " a.cgpan ,t.TRM_AMOUNT_SANCTIONED,d.DBR_AMOUNT, d.DBR_DT"
							+ " from application_detail a, disbursement_detail d, "
							+ " term_loan_detail t where a.APP_REF_NO = d.APP_REF_NO and "
							+ " a.APP_REF_NO = t.APP_REF_NO and trunc(d.DBR_DT) <= ? "
							+ " and LTRIM(RTRIM(UPPER(a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) and d.DBR_AMOUNT <> 0"
							+ " order by mem_id";
					disbursementStmt = connection.prepareStatement(query);
					disbursementStmt.setDate(1, endDate); // Set endDate
															// parameter
					disbursementStmt.setString(2, id); // Set id parameter
					disbursementResult = disbursementStmt.executeQuery();

					while (disbursementResult.next()) {
						// Instantiate a DisbursementReport value object
						DisbursementReport disbursementReport = new DisbursementReport();
						disbursementReport.setMemberid(disbursementResult
								.getString(1));
						disbursementReport.setCgpan(disbursementResult
								.getString(2));
						disbursementReport.setTermCredit(disbursementResult
								.getDouble(3));
						disbursementReport
								.setDisbursementDate(disbursementResult
										.getDate(5));
						disbursementReport
								.setDisbursedAmount(disbursementResult
										.getDouble(4));

						disbursementArray.add(disbursementReport);
					}
					disbursementResult.close();
					disbursementResult = null;
					disbursementStmt.close();
					disbursementStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "disbursementReport", "Exited");
		return disbursementArray;
	}

	// Fix Bug 07092004 - 15

	public ArrayList getDisbursementReportForBranch(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "getDisbursementReportForBranch",
				"Entered");
		PreparedStatement disbursementStmt = null;
		ResultSet disbursementResult = null;
		Connection connection = DBConnection.getConnection();
		ArrayList disbursementArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {
				try {
					String query = "select distinct(a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID) mem_id,"
							+ " a.cgpan ,t.TRM_AMOUNT_SANCTIONED,d.DBR_AMOUNT, d.DBR_DT"
							+ " from application_detail a, disbursement_detail d, "
							+ " term_loan_detail t where a.APP_REF_NO = d.APP_REF_NO and "
							+ " a.APP_REF_NO = t.APP_REF_NO and trunc(d.DBR_DT) between ? and ? and d.DBR_AMOUNT <> 0"
							+ " order by mem_id";
					disbursementStmt = connection.prepareStatement(query);
					disbursementStmt.setDate(1, startDate); // Set startDate
															// parameter
					disbursementStmt.setDate(2, endDate); // Set endDate
															// parameter
					disbursementResult = disbursementStmt.executeQuery();

					while (disbursementResult.next()) {
						// Instantiate a DisbursementReport value object
						DisbursementReport disbursementReport = new DisbursementReport();
						disbursementReport.setMemberid(disbursementResult
								.getString(1));
						disbursementReport.setCgpan(disbursementResult
								.getString(2));
						disbursementReport.setTermCredit(disbursementResult
								.getDouble(3));
						disbursementReport
								.setDisbursementDate(disbursementResult
										.getDate(5));
						disbursementReport
								.setDisbursedAmount(disbursementResult
										.getDouble(4));

						disbursementArray.add(disbursementReport);
					}
					disbursementResult.close();
					disbursementResult = null;
					disbursementStmt.close();
					disbursementStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try { // Fix Bug 07092004 - 15
					String query = "select distinct(a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID) mem_id,"
							+ " a.cgpan ,t.TRM_AMOUNT_SANCTIONED,d.DBR_AMOUNT, d.DBR_DT"
							+ " from application_detail a, disbursement_detail d,"
							+ " term_loan_detail t where a.APP_REF_NO = d.APP_REF_NO and"
							+ " a.APP_REF_NO = t.APP_REF_NO and trunc(d.DBR_DT) between ? and ?"
							+ " and LTRIM(RTRIM(UPPER(a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) and d.DBR_AMOUNT <> 0"
							+ " order by mem_id";
					// Fix Completed
					disbursementStmt = connection.prepareStatement(query);
					disbursementStmt.setDate(1, startDate); // Set startDate
															// parameter
					disbursementStmt.setDate(2, endDate); // Set endDate
															// parameter
					disbursementStmt.setString(3, id); // Set id parameter
					disbursementResult = disbursementStmt.executeQuery();

					while (disbursementResult.next()) {
						// Instantiate a DisbursementReport value object
						DisbursementReport disbursementReport = new DisbursementReport();
						disbursementReport.setMemberid(disbursementResult
								.getString(1));
						disbursementReport.setCgpan(disbursementResult
								.getString(2));
						disbursementReport.setTermCredit(disbursementResult
								.getDouble(3));
						disbursementReport
								.setDisbursementDate(disbursementResult
										.getDate(5));
						disbursementReport
								.setDisbursedAmount(disbursementResult
										.getDouble(4));

						disbursementArray.add(disbursementReport);
					}
					disbursementResult.close();
					disbursementResult = null;
					disbursementStmt.close();
					disbursementStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {
				try {
					String query = "select distinct(a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID) mem_id,"
							+ " a.cgpan ,t.TRM_AMOUNT_SANCTIONED,d.DBR_AMOUNT, d.DBR_DT"
							+ " from application_detail a, disbursement_detail d,"
							+ " term_loan_detail t where a.APP_REF_NO = d.APP_REF_NO and"
							+ " a.APP_REF_NO = t.APP_REF_NO and trunc(d.DBR_DT) <= ?  and d.DBR_AMOUNT <> 0"
							+ " order by mem_id";

					disbursementStmt = connection.prepareStatement(query);
					disbursementStmt.setDate(1, endDate); // Set endDate
															// parameter
					disbursementResult = disbursementStmt.executeQuery();

					while (disbursementResult.next()) {
						// Instantiate a DisbursementReport value object
						DisbursementReport disbursementReport = new DisbursementReport();
						disbursementReport.setMemberid(disbursementResult
								.getString(1));
						disbursementReport.setCgpan(disbursementResult
								.getString(2));
						disbursementReport.setTermCredit(disbursementResult
								.getDouble(3));
						disbursementReport
								.setDisbursementDate(disbursementResult
										.getDate(5));
						disbursementReport
								.setDisbursedAmount(disbursementResult
										.getDouble(4));

						disbursementArray.add(disbursementReport);
					}
					disbursementResult.close();
					disbursementResult = null;
					disbursementStmt.close();
					disbursementStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					String query = "select distinct(a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID) mem_id,"
							+ " a.cgpan ,t.TRM_AMOUNT_SANCTIONED,d.DBR_AMOUNT, d.DBR_DT"
							+ " from application_detail a, disbursement_detail d, "
							+ " term_loan_detail t where a.APP_REF_NO = d.APP_REF_NO and "
							+ " a.APP_REF_NO = t.APP_REF_NO and trunc(d.DBR_DT) <= ? "
							+ " and LTRIM(RTRIM(UPPER(a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) and d.DBR_AMOUNT <> 0"
							+ " order by mem_id";
					disbursementStmt = connection.prepareStatement(query);
					disbursementStmt.setDate(1, endDate); // Set endDate
															// parameter
					disbursementStmt.setString(2, id); // Set id parameter
					disbursementResult = disbursementStmt.executeQuery();

					while (disbursementResult.next()) {
						// Instantiate a DisbursementReport value object
						DisbursementReport disbursementReport = new DisbursementReport();
						disbursementReport.setMemberid(disbursementResult
								.getString(1));
						disbursementReport.setCgpan(disbursementResult
								.getString(2));
						disbursementReport.setTermCredit(disbursementResult
								.getDouble(3));
						disbursementReport
								.setDisbursementDate(disbursementResult
										.getDate(5));
						disbursementReport
								.setDisbursedAmount(disbursementResult
										.getDouble(4));

						disbursementArray.add(disbursementReport);
					}
					disbursementResult.close();
					disbursementResult = null;
					disbursementStmt.close();
					disbursementStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "getDisbursementReportForBranch",
				"Exited");
		return disbursementArray;
	}

	// Fix Completed

	// Fix Bug 07092004 - 02

	public ArrayList getDisbursementReportForZone(java.sql.Date startDate,
			java.sql.Date endDate, String id, String zoneId)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "getDisbursementReportForZone",
				"Entered");
		PreparedStatement disbursementStmt = null;
		ResultSet disbursementResult = null;
		Connection connection = DBConnection.getConnection();
		ArrayList disbursementArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {
				try {
					/*
					 * mofication@sudeep.dhiman to get the record in sorted
					 * order
					 */
					String query = "select distinct(a.MEM_BNK_ID || a.MEM_ZNE_ID MEM_BRN_ID) mem_id,"
							+ " a.cgpan ,t.TRM_AMOUNT_SANCTIONED,d.DBR_AMOUNT, d.DBR_DT"
							+ " from application_detail a, disbursement_detail d,"
							+ " term_loan_detail t where a.APP_REF_NO = d.APP_REF_NO and"
							+ " a.APP_REF_NO = t.APP_REF_NO and trunc(d.DBR_DT) between ? and ? and d.DBR_AMOUNT <> 0"
							+ " order by mem_id";
					disbursementStmt = connection.prepareStatement(query);
					disbursementStmt.setDate(1, startDate); // Set startDate
															// parameter
					disbursementStmt.setDate(2, endDate); // Set endDate
															// parameter
					disbursementResult = disbursementStmt.executeQuery();

					while (disbursementResult.next()) {
						// Instantiate a DisbursementReport value object
						DisbursementReport disbursementReport = new DisbursementReport();
						disbursementReport.setMemberid(disbursementResult
								.getString(1));
						disbursementReport.setCgpan(disbursementResult
								.getString(2));
						disbursementReport.setTermCredit(disbursementResult
								.getDouble(3));
						disbursementReport
								.setDisbursementDate(disbursementResult
										.getDate(5));
						disbursementReport
								.setDisbursedAmount(disbursementResult
										.getDouble(4));

						disbursementArray.add(disbursementReport);
					}
					disbursementResult.close();
					disbursementResult = null;
					disbursementStmt.close();
					disbursementStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					/*
					 * modification@sudeep.dhiman to retrieve the data in sorted
					 * order
					 */
					String query = "select distinct(a.MEM_BNK_ID || a.MEM_ZNE_ID||a.MEM_BRN_ID) mem_id,"
							+ " a.cgpan ,t.TRM_AMOUNT_SANCTIONED,d.DBR_AMOUNT, d.DBR_DT"
							+ " from application_detail a, disbursement_detail d,"
							+ " member_info m ,term_loan_detail t where"
							+ " a.APP_REF_NO = d.APP_REF_NO and a.APP_REF_NO = t.APP_REF_NO"
							+ " and a.MEM_BNK_ID||a.MEM_ZNE_ID||a.MEM_BRN_ID"
							+ " = m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID"
							+ " and trunc(d.DBR_DT) between ? and ? and"
							+ " LTRIM(RTRIM(UPPER(a.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))"
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) and"
							+ " d.DBR_AMOUNT <> 0 order by mem_id";
					disbursementStmt = connection.prepareStatement(query);
					disbursementStmt.setDate(1, startDate); // Set startDate
															// parameter
					disbursementStmt.setDate(2, endDate); // Set endDate
															// parameter
					disbursementStmt.setString(3, id); // Set id parameter
					disbursementStmt.setString(4, zoneId); // Set id parameter
					disbursementStmt.setString(5, zoneId); // Set id parameter
					disbursementResult = disbursementStmt.executeQuery();

					while (disbursementResult.next()) {
						// Instantiate a DisbursementReport value object
						DisbursementReport disbursementReport = new DisbursementReport();
						disbursementReport.setMemberid(disbursementResult
								.getString(1));
						disbursementReport.setCgpan(disbursementResult
								.getString(2));
						disbursementReport.setTermCredit(disbursementResult
								.getDouble(3));
						disbursementReport
								.setDisbursementDate(disbursementResult
										.getDate(5));
						disbursementReport
								.setDisbursedAmount(disbursementResult
										.getDouble(4));

						disbursementArray.add(disbursementReport);
					}
					disbursementResult.close();
					disbursementResult = null;
					disbursementStmt.close();
					disbursementStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {
				try {
					/*
					 * modification@sudeep.dhiman in sql statement to retrieve
					 * the data in sorted order
					 */
					String query = "select distinct(a.MEM_BNK_ID || a.MEM_ZNE_ID||a.MEM_BRN_ID) mem_id,"
							+ " a.cgpan ,t.TRM_AMOUNT_SANCTIONED,d.DBR_AMOUNT, d.DBR_DT"
							+ " from application_detail a, disbursement_detail d, "
							+ " term_loan_detail t where a.APP_REF_NO = d.APP_REF_NO and "
							+ " a.APP_REF_NO = t.APP_REF_NO and trunc(d.DBR_DT) <= ?  and d.DBR_AMOUNT <> 0"
							+ " order by mem_id";

					disbursementStmt = connection.prepareStatement(query);
					disbursementStmt.setDate(1, endDate); // Set endDate
															// parameter
					disbursementResult = disbursementStmt.executeQuery();

					while (disbursementResult.next()) {
						// Instantiate a DisbursementReport value object
						DisbursementReport disbursementReport = new DisbursementReport();
						disbursementReport.setMemberid(disbursementResult
								.getString(1));
						disbursementReport.setCgpan(disbursementResult
								.getString(2));
						disbursementReport.setTermCredit(disbursementResult
								.getDouble(3));
						disbursementReport
								.setDisbursementDate(disbursementResult
										.getDate(5));
						disbursementReport
								.setDisbursedAmount(disbursementResult
										.getDouble(4));

						disbursementArray.add(disbursementReport);
					}
					disbursementResult.close();
					disbursementResult = null;
					disbursementStmt.close();
					disbursementStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {

					/*
					 * modification@sudeep.dhiman to retrieve the data in sorted
					 * order
					 */
					String query = "select distinct(a.MEM_BNK_ID || a.MEM_ZNE_ID||a.MEM_BRN_ID) mem_id,"
							+ " a.cgpan ,t.TRM_AMOUNT_SANCTIONED,d.DBR_AMOUNT, d.DBR_DT "
							+ " from application_detail a, disbursement_detail d, "
							+ " member_info m ,term_loan_detail t where "
							+ " a.APP_REF_NO = d.APP_REF_NO and a.APP_REF_NO = t.APP_REF_NO "
							+ " and a.MEM_BNK_ID||a.MEM_ZNE_ID||a.MEM_BRN_ID"
							+ " = m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID "
							+ " and trunc(d.DBR_DT) <= ? and "
							+ " LTRIM(RTRIM(UPPER(a.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?))) "
							+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) and "
							+ " d.DBR_AMOUNT <> 0 order by mem_id";
					disbursementStmt = connection.prepareStatement(query);
					disbursementStmt.setDate(1, endDate); // Set endDate
															// parameter
					disbursementStmt.setString(2, id); // Set id parameter
					disbursementStmt.setString(3, zoneId); // Set id parameter
					disbursementStmt.setString(4, zoneId); // Set id parameter
					disbursementResult = disbursementStmt.executeQuery();

					while (disbursementResult.next()) {
						// Instantiate a DisbursementReport value object
						DisbursementReport disbursementReport = new DisbursementReport();
						disbursementReport.setMemberid(disbursementResult
								.getString(1));
						disbursementReport.setCgpan(disbursementResult
								.getString(2));
						disbursementReport.setTermCredit(disbursementResult
								.getDouble(3));
						disbursementReport
								.setDisbursementDate(disbursementResult
										.getDate(5));
						disbursementReport
								.setDisbursedAmount(disbursementResult
										.getDouble(4));

						disbursementArray.add(disbursementReport);
					}
					disbursementResult.close();
					disbursementResult = null;
					disbursementStmt.close();
					disbursementStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "getDisbursementReportForZone", "Exited");
		return disbursementArray;
	}

	// Fix Completed

	public ArrayList getDisbursementReportForBank(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "getDisbursementReportForBank",
				"Entered");
		PreparedStatement disbursementStmt = null;
		ResultSet disbursementResult = null;
		Connection connection = DBConnection.getConnection();
		ArrayList disbursementArray = new ArrayList();

		if (startDate != null) {
			if ((id == null) || (id.equals(""))) {
				try {
					String query = "select distinct(a.MEM_BNK_ID||a.MEM_ZNE_ID || a.MEM_BRN_ID ) mem_id,"
							+ " a.cgpan ,t.TRM_AMOUNT_SANCTIONED,d.DBR_AMOUNT, d.DBR_DT"
							+ " from application_detail a, disbursement_detail d, "
							+ " term_loan_detail t where a.APP_REF_NO = d.APP_REF_NO and "
							+ " a.APP_REF_NO = t.APP_REF_NO and trunc(d.DBR_DT) between ? and ? and d.DBR_AMOUNT <> 0"
							+ " order by mem_id";
					disbursementStmt = connection.prepareStatement(query);
					disbursementStmt.setDate(1, startDate); // Set startDate
															// parameter
					disbursementStmt.setDate(2, endDate); // Set endDate
															// parameter
					disbursementResult = disbursementStmt.executeQuery();

					while (disbursementResult.next()) {
						// Instantiate a DisbursementReport value object
						DisbursementReport disbursementReport = new DisbursementReport();
						disbursementReport.setMemberid(disbursementResult
								.getString(1));
						disbursementReport.setCgpan(disbursementResult
								.getString(2));
						disbursementReport.setTermCredit(disbursementResult
								.getDouble(3));
						disbursementReport
								.setDisbursementDate(disbursementResult
										.getDate(5));
						disbursementReport
								.setDisbursedAmount(disbursementResult
										.getDouble(4));

						disbursementArray.add(disbursementReport);
					}
					disbursementResult.close();
					disbursementResult = null;
					disbursementStmt.close();
					disbursementStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null) {
				try {
					String query = "select distinct(a.MEM_BNK_ID||a.MEM_ZNE_ID || a.MEM_BRN_ID) mem_id,"
							+ " a.cgpan ,t.TRM_AMOUNT_SANCTIONED,d.DBR_AMOUNT, d.DBR_DT"
							+ " from application_detail a, disbursement_detail d,"
							+ " term_loan_detail t where a.APP_REF_NO = d.APP_REF_NO and"
							+ " a.APP_REF_NO = t.APP_REF_NO and trunc(d.DBR_DT) between? and ?"
							+ " and LTRIM(RTRIM(UPPER(a.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) and d.DBR_AMOUNT <> 0"
							+ " order by mem_id";
					disbursementStmt = connection.prepareStatement(query);
					disbursementStmt.setDate(1, startDate); // Set startDate
															// parameter
					disbursementStmt.setDate(2, endDate); // Set endDate
															// parameter
					disbursementStmt.setString(3, id); // Set id parameter
					disbursementResult = disbursementStmt.executeQuery();

					while (disbursementResult.next()) {
						// Instantiate a DisbursementReport value object
						DisbursementReport disbursementReport = new DisbursementReport();
						disbursementReport.setMemberid(disbursementResult
								.getString(1));
						disbursementReport.setCgpan(disbursementResult
								.getString(2));
						disbursementReport.setTermCredit(disbursementResult
								.getDouble(3));
						disbursementReport
								.setDisbursementDate(disbursementResult
										.getDate(5));
						disbursementReport
								.setDisbursedAmount(disbursementResult
										.getDouble(4));

						disbursementArray.add(disbursementReport);
					}
					disbursementResult.close();
					disbursementResult = null;
					disbursementStmt.close();
					disbursementStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id == null) || (id.equals(""))) {
				try {
					String query = "select distinct(a.MEM_BNK_ID||a.MEM_ZNE_ID || a.MEM_BRN_ID) mem_id,"
							+ " a.cgpan ,t.TRM_AMOUNT_SANCTIONED,d.DBR_AMOUNT, d.DBR_DT"
							+ " from application_detail a, disbursement_detail d, "
							+ " term_loan_detail t where a.APP_REF_NO = d.APP_REF_NO and "
							+ " a.APP_REF_NO = t.APP_REF_NO and trunc(d.DBR_DT) <= ?  and d.DBR_AMOUNT <> 0"
							+ " order by mem_id";

					disbursementStmt = connection.prepareStatement(query);
					disbursementStmt.setDate(1, endDate); // Set endDate
															// parameter
					disbursementResult = disbursementStmt.executeQuery();

					while (disbursementResult.next()) {
						// Instantiate a DisbursementReport value object
						DisbursementReport disbursementReport = new DisbursementReport();
						disbursementReport.setMemberid(disbursementResult
								.getString(1));
						disbursementReport.setCgpan(disbursementResult
								.getString(2));
						disbursementReport.setTermCredit(disbursementResult
								.getDouble(3));
						disbursementReport
								.setDisbursementDate(disbursementResult
										.getDate(5));
						disbursementReport
								.setDisbursedAmount(disbursementResult
										.getDouble(4));

						disbursementArray.add(disbursementReport);
					}
					disbursementResult.close();
					disbursementResult = null;
					disbursementStmt.close();
					disbursementStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (id != null)
			// System.out.println("from date null & id not null");
			{
				try {
					String query = "select distinct(a.MEM_BNK_ID||a.MEM_ZNE_ID || a.MEM_BRN_ID) mem_id,"
							+ " a.cgpan ,t.TRM_AMOUNT_SANCTIONED,d.DBR_AMOUNT, d.DBR_DT"
							+ " from application_detail a, disbursement_detail d, "
							+ " term_loan_detail t where a.APP_REF_NO = d.APP_REF_NO and "
							+ " a.APP_REF_NO = t.APP_REF_NO and trunc(d.DBR_DT) <= ? "
							+ " and LTRIM(RTRIM(UPPER(a.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) and d.DBR_AMOUNT <> 0"
							+ " order by mem_id";
					disbursementStmt = connection.prepareStatement(query);
					disbursementStmt.setDate(1, endDate); // Set endDate
															// parameter
					disbursementStmt.setString(2, id); // Set id parameter
					disbursementResult = disbursementStmt.executeQuery();

					while (disbursementResult.next()) {
						// Instantiate a DisbursementReport value object
						DisbursementReport disbursementReport = new DisbursementReport();
						disbursementReport.setMemberid(disbursementResult
								.getString(1));
						disbursementReport.setCgpan(disbursementResult
								.getString(2));
						disbursementReport.setTermCredit(disbursementResult
								.getDouble(3));
						disbursementReport
								.setDisbursementDate(disbursementResult
										.getDate(5));
						disbursementReport
								.setDisbursedAmount(disbursementResult
										.getDouble(4));

						disbursementArray.add(disbursementReport);
					}
					disbursementResult.close();
					disbursementResult = null;
					disbursementStmt.close();
					disbursementStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "getDisbursementReportForBank", "Exited");
		return disbursementArray;
	}
	
	
	/*public ArrayList misReport1(java.sql.Date startDate, java.sql.Date endDate) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "danReport", "Entered");
		PreparedStatement danStmt;
		ResultSet danResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danArray = new ArrayList();
		// System.out.println("start date:"+startDate);
		 added by sukumar@path 01-04-2008 
		String dateString = "01/10/2007";
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		java.util.Date d;
		try {
			d = dateFormat.parse(dateString);
			dateFormat.applyPattern("yyyy-MM-dd");
			dateString = dateFormat.format(d);
			// System.out.println("dateString:"+dateString);
		} catch (Exception e) {
			e.printStackTrace();
		}
		java.sql.Date a3 = java.sql.Date.valueOf(dateString);
		// System.out.println("a3:"+a3);

		if (startDate != null && (a3.compareTo(startDate) <= 0)) {
						try {
					String query = "select m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,"
							+ " d.CGPAN,s.SSI_UNIT_NAME,d.DAN_ID, da.DAN_GENERATED_DT, count(d.CGPAN),"
							+ "   sum((d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0))), "
							+ "  m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ "  m.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",d.DCI_STAX_AMT,D.DCI_ECESS_AMT,D.DCI_HECESS_AMT,D.DCI_SWBHCESS_AMT,D.DCI_KKALYANCESS_AMT "
							+ " from DAN_CGPAN_INFO d,application_detail a,ssi_detail s, "
							+ " demand_Advice_info da, member_info m where "
							+ " da.MEM_BNK_ID = m.MEM_BNK_ID and da.MEM_ZNE_ID = m.MEM_ZNE_ID "
							+ " and da.MEM_BRN_ID = m.MEM_BRN_ID and d.DAN_ID = da.DAN_ID and "
							+ "d.CGPAN = a.CGPAN and da.DAN_STATUS='O' and a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER and "
							+ " TRUNC(da.DAN_GENERATED_DT) between ? and ?  "
							+ " and (d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ "   group  by m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,d.CGPAN,s.SSI_UNIT_NAME,d.DAN_ID,"
							+ "  da.DAN_GENERATED_DT, m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ " m.MEM_BRANCH_NAME,APP_MLI_BRANCH_NAME ,d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,D.DCI_SWBHCESS_AMT,D.DCI_KKALYANCESS_AMT "
							+ " order by m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					// System.out.println("query for test:"+query);
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added by @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						// System.out.println("setKrishiKalCess "+danResult.getDouble(16));
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}
		return danArray;
	}
*/
	public ArrayList danReport(java.sql.Date startDate, java.sql.Date endDate,
			String id, String ssi) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "danReport", "Entered");
		PreparedStatement danStmt;
		ResultSet danResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danArray = new ArrayList();
		// System.out.println("start date:"+startDate);
		/* added by sukumar@path 01-04-2008 */
		String dateString = "01/10/2007";
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		java.util.Date d;
		try {
			d = dateFormat.parse(dateString);
			dateFormat.applyPattern("yyyy-MM-dd");
			dateString = dateFormat.format(d);
			// System.out.println("dateString:"+dateString);
		} catch (Exception e) {
			e.printStackTrace();
		}
		java.sql.Date a3 = java.sql.Date.valueOf(dateString);
		// System.out.println("a3:"+a3);

		if (startDate != null && (a3.compareTo(startDate) <= 0)) {
			if (((id == null) || (id.equals("")))
					&& ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "select m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,"
							+ " d.CGPAN,s.SSI_UNIT_NAME,d.DAN_ID, da.DAN_GENERATED_DT, count(d.CGPAN),"
							+ "   sum((d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0))), "
							+ "  m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ "  m.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",d.DCI_STAX_AMT,D.DCI_ECESS_AMT,D.DCI_HECESS_AMT,D.DCI_SWBHCESS_AMT,D.DCI_KKALYANCESS_AMT "
							+ " from DAN_CGPAN_INFO d,application_detail a,ssi_detail s, "
							+ " demand_Advice_info da, member_info m where "
							+ " da.MEM_BNK_ID = m.MEM_BNK_ID and da.MEM_ZNE_ID = m.MEM_ZNE_ID "
							+ " and da.MEM_BRN_ID = m.MEM_BRN_ID and d.DAN_ID = da.DAN_ID and "
							+ "d.CGPAN = a.CGPAN and da.DAN_STATUS='O' and a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER and "
							+ " TRUNC(da.DAN_GENERATED_DT) between ? and ?  "
							+ " and (d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ "   group  by m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,d.CGPAN,s.SSI_UNIT_NAME,d.DAN_ID,"
							+ "  da.DAN_GENERATED_DT, m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ " m.MEM_BRANCH_NAME,APP_MLI_BRANCH_NAME ,d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,D.DCI_SWBHCESS_AMT,D.DCI_KKALYANCESS_AMT "
							+ " order by m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					// System.out.println("query for test:"+query);
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added by @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						// System.out.println("setKrishiKalCess "+danResult.getDouble(16));
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (((id == null) || (id.equals(""))) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();
				// System.out.println("ssiCase:"+ssiCase);
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,DCI.CGPAN,SSI.SSI_UNIT_NAME, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),  sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))) , "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM   APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, "
							+ " MEMBER_INFO MEM WHERE  SSI.SSI_UNIT_NAME LIKE ? AND "
							+ " trunc(DAN_GENERATED_DT) between ? and ? and "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN= APP.CGPAN AND DAN.DAN_STATUS='O' AND  DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " and (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ "GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,DCI.CGPAN,SSI.SSI_UNIT_NAME, DCI.DAN_ID,"
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME,"
							+ " MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT ,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					// System.out.println("Query:"+query);
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set endDate parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added by @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

		} else if (startDate != null) {
			if (((id == null) || (id.equals("")))
					&& ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "select m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID, "
							+ " d.DAN_ID, da.DAN_GENERATED_DT, count(d.CGPAN),"
							+ "   sum((d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0))), "
							+ "  m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ "  m.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME)"
							+ ",d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,D.DCI_SWBHCESS_AMT,D.DCI_KKALYANCESS_AMT "
							+ "from dan_cgpan_info d, "
							+ " demand_Advice_info da, member_info m where "
							+ " da.MEM_BNK_ID = m.MEM_BNK_ID and da.MEM_ZNE_ID = m.MEM_ZNE_ID "
							+ " and da.MEM_BRN_ID = m.MEM_BRN_ID AND DA.DAN_STATUS='O' and d.DAN_ID = da.DAN_ID and "
							+ " TRUNC(da.DAN_GENERATED_DT) between ? and ?  "
							+ " and (d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ "   group  by m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,d.DAN_ID,"
							+ "  da.DAN_GENERATED_DT, m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ " m.MEM_BRANCH_NAME,APP_MLI_BRANCH_NAME,d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,D.DCI_SWBHCESS_AMT,D.DCI_KKALYANCESS_AMT "
							+ "  order by m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					// System.out.println("query:"+query);
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added by @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (((id == null) || (id.equals(""))) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),  sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))) , "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT ,dci.DCI_KKALYANCESS_AMT"
							+ " FROM   APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, "
							+ " MEMBER_INFO MEM WHERE  SSI.SSI_UNIT_NAME LIKE ? AND "
							+ " TRUNC(DAN_GENERATED_DT) between ? and ? and "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN= APP.CGPAN AND DAN.DAN_STATUS='O' AND  DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " and (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID,"
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME,"
							+ " MEM.MEM_ZONE_NAME, APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set endDate parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added by @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by Kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

		} else if (startDate == null) {
			if (((id == null) || (id.equals("")))
					&& ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "select m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID, "
							+ " d.DAN_ID, da.DAN_GENERATED_DT, count(d.CGPAN),"
							+ " sum((d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0))) ,m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ " m.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME)"
							+ ",d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,D.DCI_SWBHCESS_AMT ,D.DCI_KKALYANCESS_AMT"
							+ "from dan_cgpan_info d, "
							+ " demand_Advice_info da, member_info m,APPLICATION_DETAIL APP where "
							+ " da.MEM_BNK_ID = m.MEM_BNK_ID and da.MEM_ZNE_ID = m.MEM_ZNE_ID "
							+ " and da.MEM_BRN_ID = m.MEM_BRN_ID AND DA.DAN_STATUS='O' and d.DAN_ID = da.DAN_ID and "
							+ " TRUNC(da.DAN_GENERATED_DT) <= ?  and app.cgpan=d.cgpan"
							+ " AND (d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ "   group  by m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,d.DAN_ID,"
							+ "  da.DAN_GENERATED_DT, m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ " m.MEM_BRANCH_NAME, APP_MLI_BRANCH_NAME,d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,D.DCI_SWBHCESS_AMT,D.DCI_KKALYANCESS_AMT"
							+ "  order by m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,APP_MLI_BRANCH_NAME,d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT ";
					// System.out.println("query1:"+query);
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, endDate); // Set endDate parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added by @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by Kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (((id == null) || (id.equals(""))) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ "  sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME, UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM   APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, "
							+ " MEMBER_INFO MEM WHERE  SSI.SSI_UNIT_NAME LIKE ? AND "
							+ " TRUNC(DAN_GENERATED_DT) <= ? and "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN= APP.CGPAN AND DAN.DAN_STATUS='O' AND  DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID,"
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME,"
							+ " MEM.MEM_ZONE_NAME, APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT ,dci.DCI_KKALYANCESS_AMT"
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added by @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "danReport", "Exited");
		return danArray;
	}

	/* ------------------ */

	public ArrayList gfdanReport(java.sql.Date startDate,
			java.sql.Date endDate, String id, String ssi)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "gfdanReport", "Entered");
		PreparedStatement danStmt;
		ResultSet danResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danArray = new ArrayList();
		// System.out.println("start date:"+startDate);
		/* added by sukumar@path 01-04-2008 */
		String dateString = "01/10/2007";
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		java.util.Date d;
		try {
			d = dateFormat.parse(dateString);
			dateFormat.applyPattern("yyyy-MM-dd");
			dateString = dateFormat.format(d);
			// System.out.println("dateString:"+dateString);
		} catch (Exception e) {
			e.printStackTrace();
		}
		java.sql.Date a3 = java.sql.Date.valueOf(dateString);
		// System.out.println("a3:"+a3);

		if (startDate != null && (a3.compareTo(startDate) <= 0)) {
			if (((id == null) || (id.equals("")))
					&& ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "select m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID, "
							+ " d.CGPAN,s.SSI_UNIT_NAME,d.DAN_ID, da.DAN_GENERATED_DT, count(d.CGPAN),"
							+ "   sum((d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0))), "
							+ "  m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ "  m.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME)"
							+ ",d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,d.DCI_SWBHCESS_AMT,d.DCI_KKALYANCESS_AMT "
							+ " from dan_cgpan_info d,application_detail a,ssi_detail s, "
							+ " demand_Advice_info da, member_info m where "
							+ " da.MEM_BNK_ID = m.MEM_BNK_ID and da.MEM_ZNE_ID = m.MEM_ZNE_ID "
							+ " and da.MEM_BRN_ID = m.MEM_BRN_ID and d.DAN_ID = da.DAN_ID and da.dan_type in ('CG','GF') and "
							+ "d.CGPAN = a.CGPAN AND DA.DAN_STATUS='O' and a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER and "
							+ " TRUNC(da.DAN_GENERATED_DT) between ? and ?  "
							+ " and d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0) > 0 "
							+ "   group  by m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,d.CGPAN,s.SSI_UNIT_NAME,d.DAN_ID,"
							+ "  da.DAN_GENERATED_DT, m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ " m.MEM_BRANCH_NAME,APP_MLI_BRANCH_NAME,d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,d.DCI_SWBHCESS_AMT,d.DCI_KKALYANCESS_AMT "
							+ " ORDER BY m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					// System.out.println("query for test:"+query);
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (((id == null) || (id.equals(""))) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,DCI.CGPAN,SSI.SSI_UNIT_NAME, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),  sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))) , "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM   APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, "
							+ " MEMBER_INFO MEM WHERE  SSI.SSI_UNIT_NAME LIKE ? AND "
							+ " TRUNC(DAN_GENERATED_DT) between ? and ? and "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN= APP.CGPAN AND DAN.DAN_STATUS='O' AND  DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,DCI.CGPAN,SSI.SSI_UNIT_NAME, DCI.DAN_ID,"
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME,"
							+ " MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set endDate parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));
						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

		} else if (startDate != null) {
			if (((id == null) || (id.equals("")))
					&& ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "select m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID, "
							+ " d.DAN_ID, da.DAN_GENERATED_DT, count(d.CGPAN),"
							+ "   sum((d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0))), "
							+ "  m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ "  m.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,d.DCI_SWBHCESS_AMT,d.DCI_KKALYANCESS_AMT "
							+ " from dan_cgpan_info d, "
							+ " demand_Advice_info da, member_info m where "
							+ " da.MEM_BNK_ID = m.MEM_BNK_ID and da.MEM_ZNE_ID = m.MEM_ZNE_ID "
							+ " and da.MEM_BRN_ID = m.MEM_BRN_ID and d.DAN_ID = da.DAN_ID AND DA.DAN_STATUS='O' AND da.dan_type in ('CG','GF') and "
							+ " TRUNC(da.DAN_GENERATED_DT) between ? and ?  "
							+ " AND (d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ "   group  by m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,d.DAN_ID,"
							+ "  da.DAN_GENERATED_DT, m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ " m.MEM_BRANCH_NAME,APP_MLI_BRANCH_NAME,d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,d.DCI_SWBHCESS_AMT,d.DCI_KKALYANCESS_AMT "
							+ " ORDER BY m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (((id == null) || (id.equals(""))) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),  sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))) , "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM   APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, "
							+ " MEMBER_INFO MEM WHERE  SSI.SSI_UNIT_NAME LIKE ? AND "
							+ " TRUNC(DAN_GENERATED_DT) between ? and ? and "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN= APP.CGPAN AND DAN.DAN_STATUS='O' AND  DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) >  0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID,"
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME,"
							+ " MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set endDate parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

		} else if (startDate == null) {
			if (((id == null) || (id.equals("")))
					&& ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "select m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID, "
							+ " d.DAN_ID, da.DAN_GENERATED_DT, count(d.CGPAN),"
							+ "    sum((d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0))) ,m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ "  m.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME)"
							+ ",d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,d.DCI_SWBHCESS_AMT,d.DCI_KKALYANCESS_AMT "
							+ " from dan_cgpan_info d, "
							+ " demand_Advice_info da, member_info m where "
							+ " da.MEM_BNK_ID = m.MEM_BNK_ID and da.MEM_ZNE_ID = m.MEM_ZNE_ID "
							+ " and da.MEM_BRN_ID = m.MEM_BRN_ID AND DA.DAN_STATUS='O' and d.DAN_ID = da.DAN_ID AND da.dan_type in ('CG','GF') and "
							+ " TRUNC(da.DAN_GENERATED_DT) <= ?  "
							+ " AND (d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ "   group  by m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,d.DAN_ID,"
							+ "  da.DAN_GENERATED_DT, m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ " m.MEM_BRANCH_NAME,APP_MLI_BRANCH_NAME,d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,d.DCI_SWBHCESS_AMT,d.DCI_KKALYANCESS_AMT "
							+ " ORDER BY m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, endDate); // Set endDate parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (((id == null) || (id.equals(""))) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ "  sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM   APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, "
							+ " MEMBER_INFO MEM WHERE  SSI.SSI_UNIT_NAME LIKE ? AND "
							+ " TRUNC(DAN_GENERATED_DT) <= ? and "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN= APP.CGPAN AND DAN.DAN_STATUS='O' AND  DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID,"
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME,"
							+ " MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "gfdanReport", "Exited");
		return danArray;
	}

	public ArrayList asfdanReport(java.sql.Date startDate,
			java.sql.Date endDate, String id, String ssi)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "asfdanReport", "Entered");
		PreparedStatement danStmt;
		ResultSet danResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danArray = new ArrayList();
		// System.out.println("start date:"+startDate);
		/* added by sukumar@path 01-04-2008 */
		String dateString = "01/10/2007";
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		java.util.Date d;
		try {
			d = dateFormat.parse(dateString);
			dateFormat.applyPattern("yyyy-MM-dd");
			dateString = dateFormat.format(d);
			// System.out.println("dateString:"+dateString);
		} catch (Exception e) {
			e.printStackTrace();
		}
		java.sql.Date a3 = java.sql.Date.valueOf(dateString);
		// System.out.println("a3:"+a3);

		if (startDate != null && (a3.compareTo(startDate) <= 0)) {
			if (((id == null) || (id.equals("")))
					&& ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "select m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID, "
							+ " d.CGPAN,s.SSI_UNIT_NAME,d.DAN_ID, da.DAN_GENERATED_DT, count(d.CGPAN),"
							+ "   sum((d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0))), "
							+ "  m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ "  m.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME)"
							+ ",d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,D.DCI_SWBHCESS_AMT,D.DCI_KKALYANCESS_AMT "
							+ " from dan_cgpan_info d,application_detail a,ssi_detail s, "
							+ " demand_Advice_info da, member_info m where "
							+ " da.MEM_BNK_ID = m.MEM_BNK_ID and da.MEM_ZNE_ID = m.MEM_ZNE_ID "
							+ " and da.MEM_BRN_ID = m.MEM_BRN_ID and d.DAN_ID = da.DAN_ID and  da.dan_type in ('SF','AF')  and  "
							+ "d.CGPAN = a.CGPAN AND DA.DAN_STATUS='O' and a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER and "
							+ " TRUNC(da.DAN_GENERATED_DT)  between ? and ?  "
							+ " AND (d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ "   group  by m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,d.CGPAN,s.SSI_UNIT_NAME,d.DAN_ID,"
							+ "  da.DAN_GENERATED_DT, m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ " m.MEM_BRANCH_NAME,APP_MLI_BRANCH_NAME,d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,D.DCI_SWBHCESS_AMT,D.DCI_KKALYANCESS_AMT "
							+ " ORDER BY  m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					// System.out.println("query for test:"+query);
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (((id == null) || (id.equals(""))) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,DCI.CGPAN,SSI.SSI_UNIT_NAME, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),  sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))) , "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM   APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, "
							+ " MEMBER_INFO MEM WHERE  SSI.SSI_UNIT_NAME LIKE ? AND "
							+ " TRUNC(DAN_GENERATED_DT) between ? and ? and "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN= APP.CGPAN AND DAN.DAN_STATUS='O' AND  DCI.DAN_ID= DAN.DAN_ID and DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,DCI.CGPAN,SSI.SSI_UNIT_NAME, DCI.DAN_ID,"
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME,"
							+ " MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set endDate parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

		} else if (startDate != null) {
			if (((id == null) || (id.equals("")))
					&& ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "select m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID, "
							+ " d.DAN_ID, da.DAN_GENERATED_DT, count(d.CGPAN),"
							+ "   sum((d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0))), "
							+ "  m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ "  m.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME)"
							+ ",d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,D.DCI_SWBHCESS_AMT,D.DCI_KKALYANCESS_AMT "
							+ " from dan_cgpan_info d, "
							+ " demand_Advice_info da, member_info m where "
							+ " da.MEM_BNK_ID = m.MEM_BNK_ID and da.MEM_ZNE_ID = m.MEM_ZNE_ID "
							+ " and da.MEM_BRN_ID = m.MEM_BRN_ID AND DA.DAN_STATUS='O' and d.DAN_ID = da.DAN_ID and da.dan_type in ('SF','AF') and "
							+ " TRUNC(da.DAN_GENERATED_DT) between ? and ?  "
							+ " AND (d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ "   group  by m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,d.DAN_ID,"
							+ "  da.DAN_GENERATED_DT, m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ " m.MEM_BRANCH_NAME,APP_MLI_BRANCH_NAME,d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,D.DCI_SWBHCESS_AMT,D.DCI_KKALYANCESS_AMT "
							+ " ORDER BY  m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (((id == null) || (id.equals(""))) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),  sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))) , "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM   APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, "
							+ " MEMBER_INFO MEM WHERE  SSI.SSI_UNIT_NAME LIKE ? AND "
							+ " TRUNC(DAN_GENERATED_DT) between ? and ? and "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN= APP.CGPAN AND DAN.DAN_STATUS='O' AND  DCI.DAN_ID= DAN.DAN_ID and DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID,"
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME,"
							+ " MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set endDate parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// adde by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

		} else if (startDate == null) {
			if (((id == null) || (id.equals("")))
					&& ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "select m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID, "
							+ " d.DAN_ID, da.DAN_GENERATED_DT, count(d.CGPAN),"
							+ "    sum((d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0))) ,m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ "  m.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,D.DCI_SWBHCESS_AMT,D.DCI_KKALYANCESS_AMT "
							+ " from dan_cgpan_info d, "
							+ " demand_Advice_info da, member_info m where "
							+ " da.MEM_BNK_ID = m.MEM_BNK_ID and da.MEM_ZNE_ID = m.MEM_ZNE_ID "
							+ " and da.MEM_BRN_ID = m.MEM_BRN_ID AND DA.DAN_STATUS='O' and d.DAN_ID = da.DAN_ID and da.dan_type in ('SF','AF') and "
							+ " TRUNC(da.DAN_GENERATED_DT) <= ?  "
							+ " AND (d.DCI_AMOUNT_RAISED-nvl(d.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ "   group  by m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,d.DAN_ID,"
							+ "  da.DAN_GENERATED_DT, m.MEM_BANK_NAME, m.MEM_ZONE_NAME,"
							+ " m.MEM_BRANCH_NAME,APP_MLI_BRANCH_NAME,d.DCI_STAX_AMT,d.DCI_ECESS_AMT,d.DCI_HECESS_AMT,D.DCI_SWBHCESS_AMT,D.DCI_KKALYANCESS_AMT "
							+ " ORDER BY  m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, endDate); // Set endDate parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep @path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if (((id == null) || (id.equals(""))) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ "  sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM   APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, "
							+ " MEMBER_INFO MEM WHERE  SSI.SSI_UNIT_NAME LIKE ? AND "
							+ " TRUNC(DAN_GENERATED_DT) <= ? and "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN= APP.CGPAN AND DAN.DAN_STATUS='O' AND  DCI.DAN_ID= DAN.DAN_ID and DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID,"
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME,"
							+ " MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		Log.log(Log.INFO, "ReportDAO", "asfdanReport", "Exited");
		return danArray;
	}

	public ArrayList getDanReportForBank(java.sql.Date startDate,
			java.sql.Date endDate, String id, String ssi)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getDanReportForBank", "Entered");
		PreparedStatement danStmt;
		ResultSet danResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danArray = new ArrayList();
		/* added by sukumar@path 04-04-2008 */
		String dateString = "01/10/2007";
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		java.util.Date d;
		try {
			d = dateFormat.parse(dateString);
			dateFormat.applyPattern("yyyy-MM-dd");
			dateString = dateFormat.format(d);
			// System.out.println("dateString:"+dateString);
		} catch (Exception e) {
			e.printStackTrace();
		}
		java.sql.Date a3 = java.sql.Date.valueOf(dateString);
		// System.out.println("test date:"+a3);
		/* added by sukumar@path 04-04-2008 */

		if (startDate != null && (a3.compareTo(startDate) <= 0)) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, dci.cgpan, SSI.SSI_UNIT_NAME, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME)"
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT ,dci.DCI_KKALYANCESS_AMT"
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, dci.cgpan, SSI.SSI_UNIT_NAME,DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danResult = danStmt.executeQuery();
					// System.out.println("test query123:"+query);
					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.CGPAN, SSI.SSI_UNIT_NAME, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT  "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.CGPAN, SSI.SSI_UNIT_NAME, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME, APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT  "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, APP_MLI_BRANCH_NAME";

					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		/* -- end -- */
		else if (startDate != null) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danResult = danStmt.executeQuery();
					// System.out.println("test query123:"+query);
					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// kuldeep@path 19-5-16

						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME)"
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " <= ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, endDate); // Set endDate parameter
					danStmt.setString(2, id); // Set id parameter

					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " <= ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, endDate); // Set startDate parameter
					danStmt.setString(3, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep @path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "getDanReportForBank", "Exited");
		return danArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @param ssi
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getGFDanReportForBank(java.sql.Date startDate,
			java.sql.Date endDate, String id, String ssi)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getGFDanReportForBank", "Entered");
		PreparedStatement danStmt;
		ResultSet danResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danArray = new ArrayList();
		/* added by sukumar@path 04-04-2008 */
		String dateString = "01/10/2007";
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		java.util.Date d;
		try {
			d = dateFormat.parse(dateString);
			dateFormat.applyPattern("yyyy-MM-dd");
			dateString = dateFormat.format(d);
			// System.out.println("dateString:"+dateString);
		} catch (Exception e) {
			e.printStackTrace();
		}
		java.sql.Date a3 = java.sql.Date.valueOf(dateString);
		// System.out.println("test date:"+a3);
		/* added by sukumar@path 04-04-2008 */

		if (startDate != null && (a3.compareTo(startDate) <= 0)) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, dci.cgpan, SSI.SSI_UNIT_NAME, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ "GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, dci.cgpan, SSI.SSI_UNIT_NAME,DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danResult = danStmt.executeQuery();
					// System.out.println("Id:"+id);
					// System.out.println("test query123:"+query);
					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep @path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.CGPAN, SSI.SSI_UNIT_NAME, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.CGPAN, SSI.SSI_UNIT_NAME, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep @path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		/* -- end -- */
		else if (startDate != null) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danResult = danStmt.executeQuery();
					// System.out.println("test query123:"+query);
					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep @path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep @path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " <= ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, endDate); // Set endDate parameter
					danStmt.setString(2, id); // Set id parameter

					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep @path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " <= ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, endDate); // Set startDate parameter
					danStmt.setString(3, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep @path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "getGFDanReportForBank", "Exited");
		return danArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @param ssi
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getASFDanReportForBank(java.sql.Date startDate,
			java.sql.Date endDate, String id, String ssi)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getASFDanReportForBank", "Entered");
		PreparedStatement danStmt;
		ResultSet danResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danArray = new ArrayList();

		String dateString = "01/10/2007";
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		java.util.Date d;
		try {
			d = dateFormat.parse(dateString);
			dateFormat.applyPattern("yyyy-MM-dd");
			dateString = dateFormat.format(d);
			// System.out.println("dateString:"+dateString);
		} catch (Exception e) {
			e.printStackTrace();
		}
		java.sql.Date a3 = java.sql.Date.valueOf(dateString);
		// System.out.println("test date:"+a3);
		/* added by sukumar@path 04-04-2008 */

		if (startDate != null && (a3.compareTo(startDate) <= 0)) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, dci.cgpan, SSI.SSI_UNIT_NAME, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ "GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, dci.cgpan, SSI.SSI_UNIT_NAME,DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danResult = danStmt.executeQuery();
					// System.out.println("test query123:"+query);
					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.CGPAN, SSI.SSI_UNIT_NAME, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.CGPAN, SSI.SSI_UNIT_NAME, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		/* -- end -- */
		else if (startDate != null) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID  AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danResult = danStmt.executeQuery();
					// System.out.println("test query123:"+query);
					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " <= ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, endDate); // Set endDate parameter
					danStmt.setString(2, id); // Set id parameter

					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " <= ? and dan.MEM_BNK_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, endDate); // Set startDate parameter
					danStmt.setString(3, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// ade by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "getASFDanReportForBank", "Exited");
		return danArray;
	}

	/* --------------- */
	// Fix Bug 07092004 - 02

	public ArrayList getDanReportForZone(java.sql.Date startDate,
			java.sql.Date endDate, String id, String ssi, String zoneId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getDanReportForZone", "Entered");
		PreparedStatement danStmt;
		ResultSet danResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danArray = new ArrayList();
		// System.out.println("startDate:"+startDate);
		// System.out.println("endDate:"+endDate);
		/* added by sukumar@path 04-04-2008 */
		String dateString = "01/10/2007";
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		java.util.Date d;
		try {
			d = dateFormat.parse(dateString);
			dateFormat.applyPattern("yyyy-MM-dd");
			dateString = dateFormat.format(d);
			// System.out.println("dateString:"+dateString);
		} catch (Exception e) {
			e.printStackTrace();
		}
		java.sql.Date a3 = java.sql.Date.valueOf(dateString);
		// System.out.println("test date:"+a3);
		/* added by sukumar@path */
		if (startDate != null && (a3.compareTo(startDate) <= 0)) {
			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query =
					// " (mem.MEM_REPORTING_ZONE_ID = ? or
					// ) " +
					"SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, dci.CGPAN,ssi.SSI_UNIT_NAME,DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT ,dci.DCI_KKALYANCESS_AMT"
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, DAN_CGPAN_INFO DCI,"
							+ "  DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM WHERE TRUNC(DAN_GENERATED_DT) "
							+ "   between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ "mem.MEM_ZNE_ID = ?"
							+ "  and APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, dci.CGPAN,ssi.SSI_UNIT_NAME,DCI.DAN_ID,"
							+ "  DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danStmt.setString(4, zoneId); // Set id parameter
					// danStmt.setString(5,zoneId);//Set id parameter
					danResult = danStmt.executeQuery();
					// System.out.println("test query:"+query);
					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// ADDED @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, dci.CGPAN,ssi.SSI_UNIT_NAME,DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? and "
							+ " (mem.MEM_REPORTING_ZONE_ID = ? or mem.MEM_ZNE_ID = ?) "
							+ " AND APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND"
							+ "  DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID"
							+ "  AND DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, dci.CGPAN,ssi.SSI_UNIT_NAME,DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					;
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(5, zoneId); // Set id parameter
					danStmt.setString(6, zoneId); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// ADDED @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		/* end here */
		else if (startDate != null) {
			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query =
					// " (mem.MEM_REPORTING_ZONE_ID = ? or
					// ) " +
					"SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, DAN_CGPAN_INFO DCI,"
							+ "  DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM WHERE TRUNC(DAN_GENERATED_DT) "
							+ "   between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ "mem.MEM_ZNE_ID = ?"
							+ "  and APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID,"
							+ "  DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					;
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danStmt.setString(4, zoneId); // Set id parameter
					// danStmt.setString(5,zoneId);//Set id parameter
					danResult = danStmt.executeQuery();
					// System.out.println("test query:"+query);
					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// ADDED @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT  "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? and "
							+ " (mem.MEM_REPORTING_ZONE_ID = ? or mem.MEM_ZNE_ID = ?) "
							+ " AND APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND"
							+ "  DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID"
							+ "  AND DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT  "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(5, zoneId); // Set id parameter
					danStmt.setString(6, zoneId); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// ADDED @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, DAN_CGPAN_INFO DCI,"
							+ "  DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM WHERE TRUNC(DAN_GENERATED_DT) "
							+ "  <= ? and dan.MEM_BNK_ID = ? AND "
							+ " (mem.MEM_REPORTING_ZONE_ID = ? or mem.MEM_ZNE_ID = ?) "
							+ "  and APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,DCI.DAN_ID,"
							+ "  DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, endDate); // Set endDate parameter
					danStmt.setString(2, id); // Set id parameter
					danStmt.setString(3, zoneId); // Set id parameter
					danStmt.setString(4, zoneId); // Set id parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {

						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// ADDED @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep @path 19-5-16

						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ "  sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT "
							+ "dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " <= ? and dan.MEM_BNK_ID = ? and "
							+ " (mem.MEM_REPORTING_ZONE_ID = ? or mem.MEM_ZNE_ID = ?) "
							+ " AND APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND"
							+ "  DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID"
							+ "  AND DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, endDate); // Set startDate parameter
					danStmt.setString(3, id); // Set id parameter
					danStmt.setString(4, zoneId); // Set id parameter
					danStmt.setString(5, zoneId); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// ADDED @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep @path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "getDanReportForZone", "Exited");
		return danArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @param ssi
	 * @param zoneId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getGFDanReportForZone(java.sql.Date startDate,
			java.sql.Date endDate, String id, String ssi, String zoneId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getGFDanReportForZone", "Entered");
		PreparedStatement danStmt;
		ResultSet danResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danArray = new ArrayList();
		// System.out.println("startDate:"+startDate);
		// System.out.println("endDate:"+endDate);
		/* added by sukumar@path 04-04-2008 */
		String dateString = "01/10/2007";
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		java.util.Date d;
		try {
			d = dateFormat.parse(dateString);
			dateFormat.applyPattern("yyyy-MM-dd");
			dateString = dateFormat.format(d);
			// System.out.println("dateString:"+dateString);
		} catch (Exception e) {
			e.printStackTrace();
		}
		java.sql.Date a3 = java.sql.Date.valueOf(dateString);
		// System.out.println("test date:"+a3);
		/* added by sukumar@path */
		if (startDate != null && (a3.compareTo(startDate) <= 0)) {
			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query =
					// " (mem.MEM_REPORTING_ZONE_ID = ? or
					// ) " +
					"SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, dci.CGPAN,ssi.SSI_UNIT_NAME,DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, DAN_CGPAN_INFO DCI,"
							+ "  DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM WHERE TRUNC(DAN_GENERATED_DT) "
							+ "   between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ "mem.MEM_ZNE_ID = ?"
							+ "  and APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, dci.CGPAN,ssi.SSI_UNIT_NAME,DCI.DAN_ID,"
							+ "  DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danStmt.setString(4, zoneId); // Set id parameter
					// danStmt.setString(5,zoneId);//Set id parameter
					danResult = danStmt.executeQuery();
					// System.out.println("test query:"+query);
					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep @path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, dci.CGPAN,ssi.SSI_UNIT_NAME,DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? and "
							+ " (mem.MEM_REPORTING_ZONE_ID = ? or mem.MEM_ZNE_ID = ?) "
							+ " AND APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND"
							+ "  DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID"
							+ "  AND DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, dci.CGPAN,ssi.SSI_UNIT_NAME,DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(5, zoneId); // Set id parameter
					danStmt.setString(6, zoneId); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep @path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		/* end here */
		else if (startDate != null) {
			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query =
					// " (mem.MEM_REPORTING_ZONE_ID = ? or
					// ) " +
					"SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, DAN_CGPAN_INFO DCI,"
							+ "  DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM WHERE TRUNC(DAN_GENERATED_DT) "
							+ "   between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ "mem.MEM_ZNE_ID = ?"
							+ "  and APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID,"
							+ "  DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danStmt.setString(4, zoneId); // Set id parameter
					// danStmt.setString(5,zoneId);//Set id parameter
					danResult = danStmt.executeQuery();
					// System.out.println("test query:"+query);
					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));
						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep @path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? and "
							+ " (mem.MEM_REPORTING_ZONE_ID = ? or mem.MEM_ZNE_ID = ?) "
							+ " AND APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND"
							+ "  DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID"
							+ "  AND DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(5, zoneId); // Set id parameter
					danStmt.setString(6, zoneId); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep @path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, DAN_CGPAN_INFO DCI,"
							+ "  DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM WHERE TRUNC(DAN_GENERATED_DT) "
							+ "  <= ? and dan.MEM_BNK_ID = ? AND "
							+ " (mem.MEM_REPORTING_ZONE_ID = ? or mem.MEM_ZNE_ID = ?) "
							+ "  and APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,DCI.DAN_ID,"
							+ "  DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, endDate); // Set endDate parameter
					danStmt.setString(2, id); // Set id parameter
					danStmt.setString(3, zoneId); // Set id parameter
					danStmt.setString(4, zoneId); // Set id parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {

						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep @path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ "  sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " <= ? and dan.MEM_BNK_ID = ? and "
							+ " (mem.MEM_REPORTING_ZONE_ID = ? or mem.MEM_ZNE_ID = ?) "
							+ " AND APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND"
							+ "  DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID"
							+ "  AND DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, endDate); // Set startDate parameter
					danStmt.setString(3, id); // Set id parameter
					danStmt.setString(4, zoneId); // Set id parameter
					danStmt.setString(5, zoneId); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep @path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "getDanReportForZone", "Exited");
		return danArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @param ssi
	 * @param zoneId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getASFDanReportForZone(java.sql.Date startDate,
			java.sql.Date endDate, String id, String ssi, String zoneId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getASFDanReportForZone", "Entered");
		PreparedStatement danStmt;
		ResultSet danResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danArray = new ArrayList();
		// System.out.println("startDate:"+startDate);
		// System.out.println("endDate:"+endDate);
		/* added by sukumar@path 04-04-2008 */
		String dateString = "01/10/2007";
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		java.util.Date d;
		try {
			d = dateFormat.parse(dateString);
			dateFormat.applyPattern("yyyy-MM-dd");
			dateString = dateFormat.format(d);
			// System.out.println("dateString:"+dateString);
		} catch (Exception e) {
			e.printStackTrace();
		}
		java.sql.Date a3 = java.sql.Date.valueOf(dateString);
		// System.out.println("test date:"+a3);
		/* added by sukumar@path */
		if (startDate != null && (a3.compareTo(startDate) <= 0)) {
			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query =
					// " (mem.MEM_REPORTING_ZONE_ID = ? or
					// ) " +
					"SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, dci.CGPAN,ssi.SSI_UNIT_NAME,DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, DAN_CGPAN_INFO DCI,"
							+ "  DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM WHERE TRUNC(DAN_GENERATED_DT) "
							+ "   between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ "mem.MEM_ZNE_ID = ?"
							+ "  and APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ "GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, dci.CGPAN,ssi.SSI_UNIT_NAME,DCI.DAN_ID,"
							+ "  DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danStmt.setString(4, zoneId); // Set id parameter
					// danStmt.setString(5,zoneId);//Set id parameter
					danResult = danStmt.executeQuery();
					// System.out.println("test query:"+query);
					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, dci.CGPAN,ssi.SSI_UNIT_NAME,DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? and "
							+ " (mem.MEM_REPORTING_ZONE_ID = ? or mem.MEM_ZNE_ID = ?) "
							+ " AND APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND"
							+ "  DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID"
							+ "  AND DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, dci.CGPAN,ssi.SSI_UNIT_NAME,DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(5, zoneId); // Set id parameter
					danStmt.setString(6, zoneId); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		/* end here */
		else if (startDate != null) {
			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query =
					// " (mem.MEM_REPORTING_ZONE_ID = ? or
					// ) " +
					"SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, DAN_CGPAN_INFO DCI,"
							+ "  DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM WHERE TRUNC(DAN_GENERATED_DT) "
							+ "   between ? and ? and dan.MEM_BNK_ID = ? AND "
							+ "mem.MEM_ZNE_ID = ?"
							+ "  and APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN  AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('SF','AF')  AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID,"
							+ "  DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danStmt.setString(4, zoneId); // Set id parameter
					// danStmt.setString(5,zoneId);//Set id parameter
					danResult = danStmt.executeQuery();
					// System.out.println("test query:"+query);
					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-2016
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID = ? and "
							+ " (mem.MEM_REPORTING_ZONE_ID = ? or mem.MEM_ZNE_ID = ?) "
							+ " AND APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND"
							+ "  DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID"
							+ "  AND DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(5, zoneId); // Set id parameter
					danStmt.setString(6, zoneId); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, DAN_CGPAN_INFO DCI,"
							+ "  DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM WHERE TRUNC(DAN_GENERATED_DT) "
							+ "  <= ? and dan.MEM_BNK_ID = ? AND "
							+ " (mem.MEM_REPORTING_ZONE_ID = ? or mem.MEM_ZNE_ID = ?) "
							+ "  and APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,DCI.DAN_ID,"
							+ "  DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, endDate); // Set endDate parameter
					danStmt.setString(2, id); // Set id parameter
					danStmt.setString(3, zoneId); // Set id parameter
					danStmt.setString(4, zoneId); // Set id parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {

						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ "  sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " <= ? and dan.MEM_BNK_ID = ? and "
							+ " (mem.MEM_REPORTING_ZONE_ID = ? or mem.MEM_ZNE_ID = ?) "
							+ " AND APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND"
							+ "  DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID  AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID"
							+ "  AND DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ "  DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " MEM.MEM_BANK_NAME, MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, endDate); // Set startDate parameter
					danStmt.setString(3, id); // Set id parameter
					danStmt.setString(4, zoneId); // Set id parameter
					danStmt.setString(5, zoneId); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "getASFDanReportForZone", "Exited");
		return danArray;
	}

	/* ----------------- */
	// Fix Completed

	public ArrayList getDanReportForBranch(java.sql.Date startDate,
			java.sql.Date endDate, String id, String ssi)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getDanReportForBranch", "Entered");
		PreparedStatement danStmt;
		ResultSet danResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danArray = new ArrayList();
		/* added by sukumar@path 01-04-2008 */
		String dateString = "01/10/2007";
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		java.util.Date d;
		try {
			d = dateFormat.parse(dateString);
			dateFormat.applyPattern("yyyy-MM-dd");
			dateString = dateFormat.format(d);
			// System.out.println("dateString:"+dateString);
		} catch (Exception e) {
			e.printStackTrace();
		}
		java.sql.Date a3 = java.sql.Date.valueOf(dateString);
		// System.out.println("a3:"+a3);
		/* added by sukumar@path 04-04-2008 */
		if (startDate != null && (a3.compareTo(startDate) <= 0)) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.CGPAN, SSI.SSI_UNIT_NAME, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.CGPAN, SSI.SSI_UNIT_NAME, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME, APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, APP_MLI_BRANCH_NAME";

					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// ADDED @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.CGPAN, SSI.SSI_UNIT_NAME, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME)"
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID||dan.MEM_ZNE_ID||dan.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,DCI.CGPAN,SSI.SSI_UNIT_NAME,DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME, APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT ,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();
					while (danResult.next()) {

						// Instantiate a DanReport value object

						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// ADDED @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		/* -- end -- */
		else if (startDate != null) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME, UPPER(APP_MLI_BRANCH_NAME)"
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT ,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME, APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT  "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// ADDED @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep @path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME, UPPER(APP_MLI_BRANCH_NAME)"
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID||dan.MEM_ZNE_ID||dan.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME, APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT ,dci.DCI_KKALYANCESS_AMT"
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();
					while (danResult.next()) {

						// Instantiate a DanReport value object

						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// ADDED @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME)"
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " <= ? and DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, endDate); // Set endDate parameter
					danStmt.setString(2, id); // Set id parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// ADDED @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME)"
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT ,dci.DCI_KKALYANCESS_AMT"
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " <= ? and dan.MEM_BNK_ID||dan.MEM_ZNE_ID||dan.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT ,dci.DCI_KKALYANCESS_AMT"
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, endDate); // Set startDate parameter
					danStmt.setString(3, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// ADDED @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "getDanReportForBranch", "Exited");
		return danArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @param ssi
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getGFDanReportForBranch(java.sql.Date startDate,
			java.sql.Date endDate, String id, String ssi)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getGFDanReportForBranch", "Entered");
		PreparedStatement danStmt;
		ResultSet danResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danArray = new ArrayList();
		/* added by sukumar@path 01-04-2008 */
		String dateString = "01/10/2007";
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		java.util.Date d;
		try {
			d = dateFormat.parse(dateString);
			dateFormat.applyPattern("yyyy-MM-dd");
			dateString = dateFormat.format(d);
			// System.out.println("dateString:"+dateString);
		} catch (Exception e) {
			e.printStackTrace();
		}
		java.sql.Date a3 = java.sql.Date.valueOf(dateString);
		// System.out.println("a3:"+a3);
		/* added by sukumar@path 04-04-2008 */
		if (startDate != null && (a3.compareTo(startDate) <= 0)) {
			String DCI;

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.CGPAN, SSI.SSI_UNIT_NAME, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE trunc(DAN_GENERATED_DT) "
							+ " between ? and ? and DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " and (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ "GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.CGPAN, SSI.SSI_UNIT_NAME, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.CGPAN, SSI.SSI_UNIT_NAME, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID||dan.MEM_ZNE_ID||dan.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,DCI.CGPAN,SSI.SSI_UNIT_NAME,DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();
					while (danResult.next()) {

						// Instantiate a DanReport value object

						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));

						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		/* -- end -- */
		else if (startDate != null) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));

						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID||dan.MEM_ZNE_ID||dan.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();
					while (danResult.next()) {

						// Instantiate a DanReport value object

						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " <= ? and DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, endDate); // Set endDate parameter
					danStmt.setString(2, id); // Set id parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " <= ? and dan.MEM_BNK_ID||dan.MEM_ZNE_ID||dan.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('CG','GF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, endDate); // Set startDate parameter
					danStmt.setString(3, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 17-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "getGFDanReportForBranch", "Exited");
		return danArray;
	}

	/**
	 * 
	 * @param startDate
	 * @param endDate
	 * @param id
	 * @param ssi
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getASFDanReportForBranch(java.sql.Date startDate,
			java.sql.Date endDate, String id, String ssi)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getASFDanReportForBranch", "Entered");
		PreparedStatement danStmt;
		ResultSet danResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danArray = new ArrayList();
		/* added by sukumar@path 01-04-2008 */
		String dateString = "01/10/2007";
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		java.util.Date d;
		try {
			d = dateFormat.parse(dateString);
			dateFormat.applyPattern("yyyy-MM-dd");
			dateString = dateFormat.format(d);
			// System.out.println("dateString:"+dateString);
		} catch (Exception e) {
			e.printStackTrace();
		}
		java.sql.Date a3 = java.sql.Date.valueOf(dateString);
		// System.out.println("a3:"+a3);
		/* added by sukumar@path 04-04-2008 */
		if (startDate != null && (a3.compareTo(startDate) <= 0)) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.CGPAN, SSI.SSI_UNIT_NAME, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ "GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.CGPAN, SSI.SSI_UNIT_NAME, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.CGPAN, SSI.SSI_UNIT_NAME, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID||dan.MEM_ZNE_ID||dan.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,DCI.CGPAN,SSI.SSI_UNIT_NAME,DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();
					while (danResult.next()) {

						// Instantiate a DanReport value object

						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setCgpan(danResult.getString(2));
						danReport.setSsi(danResult.getString(3));
						danReport.setDan(danResult.getString(4));
						danReport.setDanDate(danResult.getDate(5));
						danReport.setCount(danResult.getInt(6));
						danReport.setTotalAmount(danResult.getDouble(7));
						danReport.setBank(danResult.getString(8));
						danReport.setZone(danResult.getString(9));
						danReport.setBranch(danResult.getString(10));
						danReport.setBranchName(danResult.getString(11));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(12));
						danReport.setInclECESSAmnt(danResult.getDouble(13));
						danReport.setInclHECESSAmnt(danResult.getDouble(14));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(15));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(16));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		/* -- end -- */
		else if (startDate != null) {

			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, startDate); // Set startDate parameter
					danStmt.setDate(2, endDate); // Set endDate parameter
					danStmt.setString(3, id); // Set id parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeepath 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);

					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " between ? and ? and dan.MEM_BNK_ID||dan.MEM_ZNE_ID||dan.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, startDate); // Set startDate parameter
					danStmt.setDate(3, endDate); // Set startDate parameter
					danStmt.setString(4, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();
					while (danResult.next()) {

						// Instantiate a DanReport value object

						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if ((id != null) && ((ssi == null) || (ssi.equals("")))) {
				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN),"
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE TRUNC(DAN_GENERATED_DT) "
							+ " <= ? and DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(1, endDate); // Set endDate parameter
					danStmt.setString(2, id); // Set id parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@pth 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}

			else if ((id != null) && (ssi != null)) {
				String ssiTrim = ssi.trim();
				String ssiCase = ssiTrim.toUpperCase();

				try {
					String query = "SELECT DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||"
							+ " DAN.MEM_BRN_ID, DCI.DAN_ID, DAN.DAN_GENERATED_DT, "
							+ " COUNT(APP.CGPAN), "
							+ " sum((dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0))), "
							+ " MEM.MEM_BANK_NAME,MEM.MEM_ZONE_NAME, MEM.MEM_BRANCH_NAME,UPPER(APP_MLI_BRANCH_NAME) "
							+ ",dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " FROM APPLICATION_DETAIL APP, SSI_DETAIL SSI, "
							+ " DAN_CGPAN_INFO DCI, DEMAND_ADVICE_INFO DAN, MEMBER_INFO MEM "
							+ " WHERE  SSI.SSI_UNIT_NAME LIKE ? AND TRUNC(DAN_GENERATED_DT) "
							+ " <= ? and dan.MEM_BNK_ID||dan.MEM_ZNE_ID||dan.MEM_BRN_ID = ? AND "
							+ " APP.SSI_REFERENCE_NUMBER = SSI.SSI_REFERENCE_NUMBER AND "
							+ " DCI.CGPAN = APP.CGPAN AND DAN.DAN_STATUS='O' AND DCI.DAN_ID= DAN.DAN_ID AND DAN.dan_type in ('SF','AF') AND "
							+ " DAN.MEM_BNK_ID= MEM.MEM_BNK_ID AND "
							+ " DAN.MEM_ZNE_ID= MEM.MEM_ZNE_ID AND "
							+ " DAN.MEM_BRN_ID= MEM.MEM_BRN_ID "
							+ " AND (dci.DCI_AMOUNT_RAISED-nvl(dci.DCI_AMOUNT_CANCELLED,0)) > 0 "
							+ " GROUP BY DAN.MEM_BNK_ID||"
							+ " DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID, DCI.DAN_ID, "
							+ " DAN.DAN_GENERATED_DT, MEM.MEM_BANK_NAME, "
							+ " MEM.MEM_BRANCH_NAME, MEM.MEM_ZONE_NAME,APP_MLI_BRANCH_NAME,dci.DCI_STAX_AMT,dci.DCI_ECESS_AMT,dci.DCI_HECESS_AMT,dci.DCI_SWBHCESS_AMT,dci.DCI_KKALYANCESS_AMT "
							+ " ORDER BY DAN.MEM_BNK_ID||DAN.MEM_ZNE_ID||DAN.MEM_BRN_ID,APP_MLI_BRANCH_NAME";
					danStmt = connection.prepareStatement(query);
					danStmt.setDate(2, endDate); // Set startDate parameter
					danStmt.setString(3, id); // Set id parameter
					danStmt.setString(1, "%" + ssiCase + "%"); // Set ssi
																// parameter
					danResult = danStmt.executeQuery();

					while (danResult.next()) {
						// Instantiate a DanReport value object
						DanReport danReport = new DanReport();
						danReport.setMemberId(danResult.getString(1));
						danReport.setDan(danResult.getString(2));
						danReport.setDanDate(danResult.getDate(3));
						danReport.setCount(danResult.getInt(4));
						danReport.setTotalAmount(danResult.getDouble(5));
						danReport.setBank(danResult.getString(6));
						danReport.setZone(danResult.getString(7));
						danReport.setBranch(danResult.getString(8));
						danReport.setBranchName(danResult.getString(9));

						// added @path on 07-09-2013
						danReport.setInclSTaxAmnt(danResult.getDouble(10));
						danReport.setInclECESSAmnt(danResult.getDouble(11));
						danReport.setInclHECESSAmnt(danResult.getDouble(12));
						// added by vinod@path 18-nov-15
						danReport.setSwBhaCessDed(danResult.getDouble(13));
						// added by kuldeep@path 19-5-16
						danReport.setKrishiKalCess(danResult.getDouble(14));
						danArray.add(danReport);
					}
					danResult.close();
					danResult = null;
					danStmt.close();
					danStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				}

				finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "getASFDanReportForBranch", "Exited");
		return danArray;
	}

	/* -------------------- */

	public ArrayList danReportDetails(String id) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "danReportDetails", "Entered");
		PreparedStatement danStmt;
		ResultSet danResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danArray = new ArrayList();
		double totalGFee = 0;

		try {
			/*
			 * ORG CODE BEFORE MODIFICATION String query =
			 * "select a.cgpan, a.APP_BANK_APP_REF_NO, a.APP_SUBMITTED_DT, " +
			 * " s.SCM_NAME, d.SSI_UNIT_NAME,(dc.DCI_AMOUNT_RAISED-nvl(dc.DCI_AMOUNT_CANCELLED,0)), "
			 * + " (v.TC_SANCTIONED_AMT+v.WC_FB_LIMIT+ v.WC_NFB_LIMIT)"+
			 * " ,dc.DCI_ALLOCATION_FLAG ,dc.DCI_NEW_DAN_ID from " +
			 * " application_detail a, scheme_master s, ssi_detail d, " +
			 * " VIEW_APPL_AMOUNTS v, dan_Cgpan_info dc where dc.DAN_ID = ? and"
			 * + " a.CGPAN = dc.CGPAN and a.SCM_ID = s.SCM_id  and " +
			 * " a.SSI_REFERENCE_NUMBER = d.SSI_REFERENCE_NUMBER and " +
			 * " a.APP_REF_NO = v.APPREF group by  a.cgpan,a.APP_BANK_APP_REF_NO, "
			 * +
			 * " a.APP_SUBMITTED_DT,d.SSI_UNIT_NAME,s.SCM_NAME,(dc.DCI_AMOUNT_RAISED-nvl(dc.DCI_AMOUNT_CANCELLED,0)),"
			 * + " (v.TC_SANCTIONED_AMT+v.WC_FB_LIMIT+v.WC_NFB_LIMIT)," +
			 * " dc.DCI_ALLOCATION_FLAG ,dc.DCI_NEW_DAN_ID ";
			 * 
			 * danStmt = connection.prepareStatement(query);
			 * danStmt.setString(1,id);//Set id parameter danResult =
			 * danStmt.executeQuery();
			 * 
			 * while(danResult.next()) { // Instantiate a DanReport value object
			 * DanReport danReport = new DanReport();
			 * danReport.setCgpan(danResult.getString(1));
			 * danReport.setApplicationNumber(danResult.getString(2));
			 * danReport.setApplicationDate(danResult.getDate(3));
			 * danReport.setScheme(danResult.getString(4));
			 * danReport.setSsi(danResult.getString(5)); double gFee =
			 * danResult.getDouble(6); danReport.setGuaranteeFee(gFee);
			 * danReport.setTotalAmount(danResult.getDouble(7));
			 * danReport.setDan(danResult.getString(9)); String allocationStatus
			 * = danResult.getString(8);
			 * if(allocationStatus.equalsIgnoreCase("Y")) {
			 * danReport.setGuaranteeFeePaid(gFee);
			 * 
			 * } danArray.add(danReport); } danResult.close(); danResult = null;
			 * danStmt.close(); danStmt= null;
			 */
			// modified@sudeep.dhiman INTEGRATED BY RITESH PATH ON 10NOV2006
			String query = // 1
			// 2
			// 3
			// 4
			// 5
			// 6
			// 7
			// 8
			// 9
			// 10 modified@sudeep.dhiman
			// 11 modified@sudeep.dhiman
			// 12
			// 13 added by Sukumar
			"select a.cgpan, "
					+ " a.APP_BANK_APP_REF_NO,"
					+ " a.APP_SUBMITTED_DT, "
					+ " a.APP_STATUS,"
					+ " d.SSI_UNIT_NAME,"
					+ " (dc.DCI_AMOUNT_RAISED-nvl(dc.DCI_AMOUNT_CANCELLED,0)), "
					+ " (v.TC_SANCTIONED_AMT+v.WC_FB_LIMIT+ v.WC_NFB_LIMIT),"
					+ " dc.DCI_ALLOCATION_FLAG ,"
					+ " dc.DCI_NEW_DAN_ID, "
					+ " a.APP_APPROVED_AMOUNT, "
					+ " DECODE(a.app_status,'CL',a.APP_CREATED_MODIFIED_DT,NULL) dt,"
					+ " dan.MEM_BNK_ID ||dan.MEM_ZNE_ID ||dan.MEM_BRN_ID,"
					+ " a.APP_GUAR_START_DATE_TIME,a.APP_REAPPROVE_AMOUNT,a.APP_REAPPROVE_DT,dci_appropriation_by,dc.DCI_STAX_AMT,dc.DCI_ECESS_AMT,dc.DCI_HECESS_AMT,DC.DCI_SWBHCESS_AMT,dc.DCI_BASE_AMT,dc.DCI_KKALYANCESS_AMT   from "
					+ " application_detail a, scheme_master s, ssi_detail d, "
					+ " VIEW_APPL_AMOUNTS_NEW v, dan_Cgpan_info dc, demand_advice_info dan where dc.DAN_ID = ? and"
					+ " a.CGPAN = dc.CGPAN and a.SCM_ID = s.SCM_id  and "
					+ " a.SSI_REFERENCE_NUMBER = d.SSI_REFERENCE_NUMBER and "
					+ " a.APP_REF_NO = v.APPREF AND DAN.dan_type in ('SF','AF','GF','CN','CG','RS') and DAN.MEM_BNK_ID= a.MEM_BNK_ID AND   DAN.MEM_ZNE_ID= a.MEM_ZNE_ID AND   DAN.MEM_BRN_ID= a.MEM_BRN_ID and DAN.DAN_STATUS='O' AND DC.DAN_ID= DAN.DAN_ID";

			/*
			 * group by a.cgpan,a.APP_BANK_APP_REF_NO, " +
			 * " a.APP_SUBMITTED_DT,d.SSI_UNIT_NAME,s.SCM_NAME,(dc.DCI_AMOUNT_RAISED-nvl(dc.DCI_AMOUNT_CANCELLED,0)),"
			 * + " (v.TC_SANCTIONED_AMT+v.WC_FB_LIMIT+v.WC_NFB_LIMIT)," +
			 * " dc.DCI_ALLOCATION_FLAG ,dc.DCI_NEW_DAN_ID ";
			 */
			// System.out.println("Query:"+query.toString());
			danStmt = connection.prepareStatement(query);
			danStmt.setString(1, id); // Set id parameter
			danResult = danStmt.executeQuery();

			while (danResult.next()) {
				// Instantiate a DanReport value object
				DanReport danReport = new DanReport();
				danReport.setCgpan(danResult.getString(1));
				danReport.setApplicationNumber(danResult.getString(2));
				danReport.setApplicationDate(danResult.getDate(3));
				danReport.setStatus(danResult.getString(4)); // modified@sudeep.dhiman
				danReport.setSsi(danResult.getString(5));
				double gFee = danResult.getDouble(6);
				danReport.setGuaranteeFee(gFee);
				danReport.setTotalAmount(danResult.getDouble(7));
				danReport.setDan(danResult.getString(9));
				danReport.setMemberId(danResult.getString(12));
				danReport.setGuaranteeStartDate(danResult.getDate(13)); // added
																		// by
																		// sukumar
				danReport.setAppAmount(danResult.getDouble(10)); // modified@sudeep.dhiman
				danReport.setCloseDate(danResult.getDate(11)); // modified@sudeep.dhiman
				danReport.setReAppAmount(danResult.getDouble(14));
				danReport.setDanDate(danResult.getDate(15));
				danReport.setAppropriationBy(danResult.getString(16));
				String allocationStatus = danResult.getString(8);

				danReport.setInclSTaxAmnt(danResult.getDouble(17));
				danReport.setInclECESSAmnt(danResult.getDouble(18));
				danReport.setInclHECESSAmnt(danResult.getDouble(19));
				danReport.setSwBhaCessDed(danResult.getDouble(20));// added by
																	// vinod@path
																	// 17-nov-15

				danReport.setKrishiKalCess(danResult.getDouble(22)); // added by
																		// kuldeep@path
																		// 25-5-16
				// System.out.println("KrishiKalCess "+danResult.getDouble(22));
				danReport.setBaseAmnt(danResult.getDouble(21));

				if (allocationStatus.equalsIgnoreCase("Y")) {
					danReport.setGuaranteeFeePaid(gFee);
				}
				danArray.add(danReport);
			}
			danResult.close();
			danResult = null;
			danStmt.close();
			danStmt = null;
			// ////////////////////////////////
		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "danReportDetails", "Exited");
		return danArray;
	}

	public ArrayList danReportDetailsForSsi(String id, String ssiName)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "danReportDetailsForSsi", "Entered");
		PreparedStatement danStmt;
		ResultSet danResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danArray = new ArrayList();
		double totalGFee = 0;

		try {
			/*
			 * String query =
			 * "select a.cgpan, a.APP_BANK_APP_REF_NO, a.APP_SUBMITTED_DT, " +
			 * " s.SCM_NAME, d.SSI_UNIT_NAME,(dc.DCI_AMOUNT_RAISED-nvl(dc.DCI_AMOUNT_CANCELLED,0)), "
			 * + " (v.TC_SANCTIONED_AMT+v.WC_FB_LIMIT+ v.WC_NFB_LIMIT)" +
			 * " ,dc.DCI_ALLOCATION_FLAG,dc.DCI_NEW_DAN_ID from " +
			 * " application_detail a, scheme_master s, ssi_detail d, " +
			 * " VIEW_APPL_AMOUNTS v, dan_Cgpan_info dc where dc.DAN_ID = ? and"
			 * +
			 * " LTRIM(RTRIM(UPPER(d.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) and "
			 * + " a.CGPAN = dc.CGPAN and a.SCM_ID = s.SCM_id  and " +
			 * " a.SSI_REFERENCE_NUMBER = d.SSI_REFERENCE_NUMBER and " +
			 * " a.APP_REF_NO = v.APPREF group by  a.cgpan,a.APP_BANK_APP_REF_NO, "
			 * + " a.APP_SUBMITTED_DT,d.SSI_UNIT_NAME,s.SCM_NAME, " +
			 * " (dc.DCI_AMOUNT_RAISED-nvl(dc.DCI_AMOUNT_CANCELLED,0)) ," +
			 * " (v.TC_SANCTIONED_AMT+v.WC_FB_LIMIT+v.WC_NFB_LIMIT)," +
			 * " dc.DCI_ALLOCATION_FLAG,dc.DCI_NEW_DAN_ID";
			 * 
			 * danStmt = connection.prepareStatement(query);
			 * danStmt.setString(1,id);//Set id parameter
			 * danStmt.setString(2,"%"+ssiName+"%");//Set ssiparameter danResult
			 * = danStmt.executeQuery();
			 * 
			 * while(danResult.next()) { // Instantiate a DanReport value object
			 * DanReport danReport = new DanReport();
			 * danReport.setCgpan(danResult.getString(1));
			 * danReport.setApplicationNumber(danResult.getString(2));
			 * danReport.setApplicationDate(danResult.getDate(3));
			 * danReport.setScheme(danResult.getString(4));
			 * danReport.setSsi(danResult.getString(5)); double gFee =
			 * danResult.getDouble(6); danReport.setGuaranteeFee(gFee);
			 * danReport.setTotalAmount(danResult.getDouble(7));
			 * danReport.setDan(danResult.getString(9)); String allocationStatus
			 * = danResult.getString(8);
			 * if(allocationStatus.equalsIgnoreCase("Y")) {
			 * danReport.setGuaranteeFeePaid(gFee);
			 * 
			 * } danArray.add(danReport); } danResult.close(); danResult = null;
			 * danStmt.close(); danStmt= null;
			 */

			// System.out.println("id-"+id);
			// System.out.println("ssiName"+ssiName);
			// modified@sudeep.dhiman INTEGRATED BY RITESH PATH ON 10NOV2006
			String query = // 1
			// 2
			// 3
			// 4 modified@sudeep.dhiman
			// 5
			// 6
			// 7
			// 8
			// 9
			// 10 modified@sudeep.dhiman
			// 11 modified@sudeep.dhiman
			// 12
			// 13 added by Sukumar
			"select a.cgpan,"
					+ " a.APP_BANK_APP_REF_NO,"
					+ " a.APP_SUBMITTED_DT,"
					+ " a.APP_STATUS,"
					+ " d.SSI_UNIT_NAME,"
					+ " (dc.DCI_AMOUNT_RAISED-nvl(dc.DCI_AMOUNT_CANCELLED,0)),"
					+ " (v.TC_SANCTIONED_AMT+v.WC_FB_LIMIT+ v.WC_NFB_LIMIT),"
					+ " dc.DCI_ALLOCATION_FLAG,"
					+ " dc.DCI_NEW_DAN_ID,"
					+ " a.APP_APPROVED_AMOUNT, "
					+ " DECODE(a.app_status,'CL',a.APP_CREATED_MODIFIED_DT,NULL),"
					+ " dan.MEM_BNK_ID || dan.MEM_ZNE_ID || dan.MEM_BRN_ID,"
					+ " a.APP_GUAR_START_DATE_TIME,a.APP_REAPPROVE_AMOUNT,a.APP_REAPPROVE_DT,dci_appropriation_by, dc.DCI_STAX_AMT,dc.DCI_ECESS_AMT,dc.DCI_HECESS_AMT,dc.DCI_BASE_AMT,DC.DCI_SWBHCESS_AMT,dc.DCI_KKALYANCESS_AMT  from "
					+ " application_detail a, scheme_master s, ssi_detail d, "
					+ " VIEW_APPL_AMOUNTS_NEW v, dan_Cgpan_info dc,demand_advice_info dan where dc.DAN_ID = ? and"
					+ " LTRIM(RTRIM(UPPER(d.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) and "
					+ " a.CGPAN = dc.CGPAN and a.SCM_ID = s.SCM_id  and "
					+ " a.SSI_REFERENCE_NUMBER = d.SSI_REFERENCE_NUMBER and "
					+ " a.APP_REF_NO = v.APPREF  and DAN.dan_type in ('SF','AF','GF','CN','CG','RS') and  DAN.MEM_BNK_ID= a.MEM_BNK_ID AND DAN.MEM_ZNE_ID= a.MEM_ZNE_ID AND DAN.MEM_BRN_ID= a.MEM_BRN_ID  and DAN.DAN_STATUS='O' AND DC.DAN_ID= DAN.DAN_ID ";
			/*
			 * group by a.cgpan,a.APP_BANK_APP_REF_NO, " +
			 * " a.APP_SUBMITTED_DT,d.SSI_UNIT_NAME,s.SCM_NAME, " +
			 * " (dc.DCI_AMOUNT_RAISED-nvl(dc.DCI_AMOUNT_CANCELLED,0)) ," +
			 * " (v.TC_SANCTIONED_AMT+v.WC_FB_LIMIT+v.WC_NFB_LIMIT)," +
			 * " dc.DCI_ALLOCATION_FLAG,dc.DCI_NEW_DAN_ID";
			 */
			danStmt = connection.prepareStatement(query);
			danStmt.setString(1, id); // Set id parameter
			danStmt.setString(2, "%" + ssiName + "%"); // Set ssiparameter
			danResult = danStmt.executeQuery();
			// System.out.println("Query1:"+query);
			while (danResult.next()) {
				// Instantiate a DanReport value object
				DanReport danReport = new DanReport();
				danReport.setCgpan(danResult.getString(1));
				danReport.setApplicationNumber(danResult.getString(2));
				danReport.setApplicationDate(danResult.getDate(3));
				danReport.setStatus(danResult.getString(4)); // modified@sudeep.dhiman
				danReport.setSsi(danResult.getString(5));
				double gFee = danResult.getDouble(6);
				danReport.setGuaranteeFee(gFee);
				danReport.setTotalAmount(danResult.getDouble(7));
				danReport.setDan(danResult.getString(9));
				danReport.setMemberId(danResult.getString(12));
				danReport.setGuaranteeStartDate(danResult.getDate(13)); // added
																		// by
																		// sukumar
				danReport.setAppAmount(danResult.getDouble(10)); // modified@sudeep.dhiman
				danReport.setCloseDate(danResult.getDate(11)); // modified@sudeep.dhiman
				danReport.setReAppAmount(danResult.getDouble(14));
				danReport.setDanDate(danResult.getDate(15));
				danReport.setAppropriationBy(danResult.getString(16));
				String allocationStatus = danResult.getString(8);

				danReport.setInclSTaxAmnt(danResult.getDouble(17));
				danReport.setInclECESSAmnt(danResult.getDouble(18));
				danReport.setInclHECESSAmnt(danResult.getDouble(19));
				danReport.setBaseAmnt(danResult.getDouble(20));
				danReport.setSwBhaCessDed(danResult.getDouble(21));// added by
																	// kuldeep@path
																	// 25-5-16

				danReport.setKrishiKalCess(danResult.getDouble(22)); // added by
																		// kuldeep@path
																		// 25-5-16
				if (allocationStatus.equalsIgnoreCase("Y")) {
					danReport.setGuaranteeFeePaid(gFee);
				}
				danArray.add(danReport);
			}
			danResult.close();
			danResult = null;
			danStmt.close();
			danStmt = null;
			// ///////////////////////////////
		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "danReportDetailsForSsi", "Exited");
		return danArray;
	}

	// Fix 070904 - 07

	public ArrayList mliList() throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "mliList", "Entered");
		PreparedStatement mliStmt;
		ArrayList mliArray = new ArrayList();
		ResultSet mliResult;
		Connection connection = DBConnection.getConnection();
		GeneralReport mliList = null;
		String status = "A";

		try {
			// Added the order by clause in query to sort the result By Path on
			// 10Oct06
			String query = "select mem_bank_name,mem_bnk_id,count(m.mem_brn_id) from member_info m"
					+ "  where  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID <> 000000000000 "
					+ " and m.MEM_STATUS = ? group by mem_bank_name,mem_bnk_id  order by MEM_BANK_NAME";
			System.out.println("query"+query);
			mliStmt = connection.prepareStatement(query);
			mliStmt.setString(1, status);

			mliResult = mliStmt.executeQuery();

			while (mliResult.next()) {
				// Instantiate a GeneralReport value object
				mliList = new GeneralReport();
				mliList.setType(mliResult.getString(1));
				mliList.setMembnkId(mliResult.getString(2));
				mliList.setProposals(mliResult.getInt(3));
				mliArray.add(mliList);
			}
			mliResult.close();
			mliResult = null;
			mliStmt.close();
			mliStmt = null;

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "mliList", "Exited");
		return mliArray;
	}

	// Fix Completed

	// Added by Ritesh Path on 20Nov2006 to show the summary report

	public ArrayList AppListMliWise() throws DatabaseException {

		// System.out.println("rep1");
		Log.log(Log.INFO, "ReportDAO", "AppListMliWise", "Entered");
		ArrayList mliArray = new ArrayList();
		Connection connection = DBConnection.getConnection();
		GeneralReport mliList = null;
		String status = "A";

		try {
			// System.out.println("rep2");
			CallableStatement pendingApps = connection.prepareCall("{?=call packGetPackagePath1.funcGetAllAppCount1(?,?)}");
			pendingApps.registerOutParameter(1, Types.INTEGER);
			pendingApps.registerOutParameter(2, Constants.CURSOR);
			pendingApps.registerOutParameter(3, Types.VARCHAR);
			pendingApps.execute();
			int functionReturnValues = pendingApps.getInt(1);
			if (functionReturnValues == Constants.FUNCTION_FAILURE) {
				// System.out.println("rep3");
				String error = pendingApps.getString(3);
				pendingApps.close();
				pendingApps = null;
				connection.rollback();
				throw new DatabaseException(error);
			} else {
				// System.out.println("rep4");
				ResultSet pendingAppsResults = (ResultSet) pendingApps
						.getObject(2);
				while (pendingAppsResults.next()) {
					mliList = new GeneralReport();
					mliList.setType(pendingAppsResults.getString(1));
				    mliList.setProposals(pendingAppsResults.getInt(2));
				    mliList.setProposaltotal(pendingAppsResults.getString(3));
				   
					mliArray.add(mliList);
				}
				pendingAppsResults.close();
				pendingAppsResults = null;
				 System.out.println("mliArray>>>>>>>>DAO>>>>>>>"+mliArray.size());
					
			}
		}
		// System.out.println(mliArray.size());
		catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "AppListMliWise", "Exited");
		// System.out.println(mliArray.size());
		return mliArray;
	}

	/**
	 * 
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList ClmListMliWise() throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "ClmListMliWise", "Entered");
		ArrayList mliArray = new ArrayList();
		Connection connection = DBConnection.getConnection();
		GeneralReport mliList = null;
		String status = "A";

		try {
			CallableStatement pendingApps = connection
					.prepareCall("{?=call packGetPackagePath1.funcGetAllClmCount(?,?)}");
			pendingApps.registerOutParameter(1, Types.INTEGER);
			pendingApps.registerOutParameter(2, Constants.CURSOR);
			pendingApps.registerOutParameter(3, Types.VARCHAR);
			pendingApps.execute();
			int functionReturnValues = pendingApps.getInt(1);
			if (functionReturnValues == Constants.FUNCTION_FAILURE) {
				String error = pendingApps.getString(3);
				pendingApps.close();
				pendingApps = null;
				connection.rollback();
				throw new DatabaseException(error);
			} else {
				ResultSet pendingAppsResults = (ResultSet) pendingApps
						.getObject(2);
				while (pendingAppsResults.next()) {
					mliList = new GeneralReport();
					mliList.setType(pendingAppsResults.getString(1));
					mliList.setProposals(pendingAppsResults.getInt(2));
					mliArray.add(mliList);
				}
				pendingAppsResults.close();
				pendingAppsResults = null;
			}
		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "ClmListMliWise", "Exited");
		return mliArray;
	}

	public ArrayList mliListReport(String bank) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "mliListReport", "Entered");
		PreparedStatement mliStmt = null;
		ArrayList mliArray = new ArrayList();
		ResultSet mliResult = null;
		Connection connection = DBConnection.getConnection();
		MliDetails mliList = null;
		String status = "A";
		// Start Code by Path to replace & with Path on 9Oct06
		bank = bank.replaceAll("PATH", "&");
		// End Code by Path to replace & with Path on 9Oct06
		try {
			String query = "select  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID || ' ' "
					+ " ||  m.MEM_CITY,m.MEM_ADDRESS , m.MEM_CITY || '-' || "
					+ " m.MEM_PINCODE, m.MEM_PHONE_CODE || '-' || m.MEM_PHONE_NUMBER "
					+ " from member_info m where LTRIM(RTRIM(UPPER(m.mem_bank_name))) =  "
					+ " LTRIM(RTRIM(UPPER(?))) and m.MEM_STATUS = ? ";
			// System.out.println("Query:"+query);
			mliStmt = connection.prepareStatement(query);
			mliStmt.setString(1, bank); // Set bank parameter
			mliStmt.setString(2, status); // Set bank parameter
			mliResult = mliStmt.executeQuery();
			// System.out.println("Bank:"+bank);
			while (mliResult.next()) {
				// Instantiate a MliDetails value object
				mliList = new MliDetails();
				mliList.setOffice(mliResult.getString(1));
				mliList.setAddress(mliResult.getString(2));
				mliList.setCity(mliResult.getString(3));
				mliList.setPhone(mliResult.getString(4));
				mliArray.add(mliList);

			}
			mliResult.close();
			mliResult = null;
			mliStmt.close();
			mliStmt = null;

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "mliListReport", "Exited");
		return mliArray;
	}

	public ArrayList getMliListForBranch(String bank) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getMliListForBranch", "Entered");
		PreparedStatement mliStmt = null;
		ArrayList mliArray = new ArrayList();
		ResultSet mliResult = null;
		Connection connection = DBConnection.getConnection();
		MliDetails mliList = null;

		try {
			String query = "select  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID || ' ' ||"
					+ "  m.MEM_CITY, m.MEM_ADDRESS, m.MEM_CITY || '-' || m.MEM_PINCODE, "
					+ " m.MEM_PHONE_CODE || '-' || "
					+ " m.MEM_PHONE_NUMBER  from member_info m where "
					+ " m.MEM_BNK_ID|| m.MEM_ZNE_ID|| m.MEM_BRN_ID =? ";
			System.out.println("query"+query);
			mliStmt = connection.prepareStatement(query);
			mliStmt.setString(1, bank); // Set bank parameter
			mliResult = mliStmt.executeQuery();

			while (mliResult.next()) {
				// Instantiate a MliDetails value object
				mliList = new MliDetails();
				mliList.setOffice(mliResult.getString(1));
				mliList.setAddress(mliResult.getString(2));
				mliList.setCity(mliResult.getString(3));
				mliList.setPhone(mliResult.getString(4));

				mliArray.add(mliList);

			}
			mliResult.close();
			mliResult = null;
			mliStmt.close();
			mliStmt = null;

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "getMliListForBranch", "Exited");
		return mliArray;
	}

	/**
	 * 
	 * @param memberId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public String getMLIAddressforMemberId(String memberId)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getMLIAddressforMemberId", "Entered");
		PreparedStatement mliStmt = null;
		String memberAddress = null;
		ResultSet mliResult = null;
		Connection connection = DBConnection.getConnection();
		MliDetails mliList = null;

		try {
			String query = "select INITCAP(MEM_BANK_NAME||','||MEM_ADDRESS||','||MEM_CITY)||'-'||MEM_PINCODE "
					+ " from member_info m where "
					+ " m.MEM_BNK_ID|| m.MEM_ZNE_ID|| m.MEM_BRN_ID =? ";
			mliStmt = connection.prepareStatement(query);
			mliStmt.setString(1, memberId); // Set bank parameter
			mliResult = mliStmt.executeQuery();

			while (mliResult.next()) {
				// Instantiate a MliDetails value object

				memberAddress = mliResult.getString(1);
			}
			mliResult.close();
			mliResult = null;
			mliStmt.close();
			mliStmt = null;

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "getMliListForBranch", "Exited");
		return memberAddress;
	}

	public ArrayList getMliListForZone(String bank, String zone)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getMliListForZone", "Entered");
		PreparedStatement mliStmt = null;
		ArrayList mliArray = new ArrayList();
		ResultSet mliResult = null;
		Connection connection = DBConnection.getConnection();
		MliDetails mliList = null;
		String active = "A";

		try {
			String query = "select  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ||"
					+ "  ' ' || m.MEM_CITY, m.MEM_ADDRESS,m.MEM_CITY || '-' || m.MEM_PINCODE, "
					+ " m.MEM_PHONE_CODE || '-' || "
					+ " m.MEM_PHONE_NUMBER  from member_info m where m.MEM_BNK_ID = ? and "
					+ " (m.MEM_ZNE_ID = ? or m.MEM_REPORTING_ZONE_ID = ?)  "
					+ " and m.MEM_STATUS = ? ";
			System.out.println("query"+query);
			mliStmt = connection.prepareStatement(query);
			mliStmt.setString(1, bank); // Set bank parameter
			mliStmt.setString(2, zone); // Set bank parameter
			mliStmt.setString(3, zone); // Set bank parameter
			mliStmt.setString(4, active); // Set status parameter
			mliResult = mliStmt.executeQuery();

			while (mliResult.next()) {
				// Instantiate a MliDetails value object
				mliList = new MliDetails();
				mliList.setOffice(mliResult.getString(1));
				mliList.setAddress(mliResult.getString(2));
				mliList.setCity(mliResult.getString(3));
				mliList.setPhone(mliResult.getString(4));

				mliArray.add(mliList);

			}
			mliResult.close();
			mliResult = null;
			mliStmt.close();
			mliStmt = null;

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "getMliListForZone", "Exited");
		return mliArray;
	}

	public ArrayList getMliListForBank(String bank) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getMliListForBank", "Entered");
		PreparedStatement mliStmt = null;
		ArrayList mliArray = new ArrayList();
		ResultSet mliResult = null;
		Connection connection = DBConnection.getConnection();
		MliDetails mliList = null;
		String active = "A";

		try {
			String query = "select  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID || ' ' ||"
					+ "  m.MEM_CITY, m.MEM_ADDRESS, m.MEM_CITY || '-' || m.MEM_PINCODE,  "
					+ " m.MEM_PHONE_CODE || '-' || "
					+ " m.MEM_PHONE_NUMBER  from member_info m where m.MEM_BNK_ID = ? "
					+ " and m.MEM_STATUS = ? ";
			System.out.println("query"+query);
			mliStmt = connection.prepareStatement(query);
			mliStmt.setString(1, bank); // Set bank parameter
			mliStmt.setString(2, active); // Set status parameter
			mliResult = mliStmt.executeQuery();

			while (mliResult.next()) {
				// Instantiate a MliDetails value object
				mliList = new MliDetails();
				mliList.setOffice(mliResult.getString(1));
				mliList.setAddress(mliResult.getString(2));
				mliList.setCity(mliResult.getString(3));
				mliList.setPhone(mliResult.getString(4));

				mliArray.add(mliList);

			}
			mliResult.close();
			mliResult = null;
			mliStmt.close();
			mliStmt = null;

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "getMliListForBank", "Exited");
		return mliArray;
	}

	public ArrayList mliPendingReport() throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "mliPendingReport", "Entered");
		PreparedStatement mliStmt;
		ArrayList mliArray = new ArrayList();
		ResultSet mliResult;
		Connection connection = DBConnection.getConnection();
		GeneralReport mliList = null;
		String status = "PE";
		String active = "A";

		try { // the s,t alias are used to to get the the data insorted order
				// done by : sudeep.dhiman
			String query =
			/**/" select s,t from(select m.MEM_BANK_NAME || ',' || m.MEM_ZONE_NAME || ',' ||"
					+ " m.MEM_BRANCH_NAME s, count(a.APP_REF_NO) t from member_info m, "
					+ " application_detail a where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID"
					+ " = a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and a.APP_STATUS = ?"
					+ " and m.MEM_STATUS = ?  and"
					+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID <> 0000 "
					+ " group by  m.MEM_BANK_NAME || ',' || m.MEM_ZONE_NAME || ',' ||m.MEM_BRANCH_NAME"
					+ " )order by s";
			mliStmt = connection.prepareStatement(query);
			mliStmt.setString(1, status);
			mliStmt.setString(2, active);
			mliResult = mliStmt.executeQuery();

			while (mliResult.next()) {
				// Instantiate a GeneralReport value object
				mliList = new GeneralReport();
				mliList.setType(mliResult.getString(1));
				mliList.setProposals(mliResult.getInt(2));
				mliArray.add(mliList);
			}
			mliResult.close();
			mliResult = null;
			mliStmt.close();
			mliStmt = null;

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "mliPendingReport", "Exited");
		return mliArray;
	}

	/*
	 * ##########################################################################
	 * #################
	 */

	public ArrayList monthlyProgressReport(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "monthlyProgressReport", "Entered");
		PreparedStatement progressStmt = null;
		;
		ResultSet progressResult = null;
		Connection connection = DBConnection.getConnection();
		ArrayList progressArray = new ArrayList();
		HashMap progressMap = new HashMap();

		if (startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select v.TC_SANCTIONED_AMT+v.WC_FB_LIMIT+v.WC_NFB_LIMIT, "
						+ " m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " from application_Detail a, member_info m,VIEW_APPL_AMOUNTS v where "
						+ " v.SUBMITTED_DT between ? and ? and m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000'"
						+ " and a.MEM_BNK_ID =  m.MEM_BNK_ID  and "
						+ " a.APP_REF_NO = v.APPREF"
						+ " ORDER BY m.MEM_BANK_NAME";
				progressStmt = connection.prepareStatement(query);
				progressStmt.setDate(1, startDate); // Set startDate parameter
				progressStmt.setDate(2, endDate); // Set endDate parameter
				progressResult = progressStmt.executeQuery();
				// System.out.println("the query string is ~~~~~~~~~"+query);
				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();
						progressReport.setSanctionedAmountDuring(progressResult
								.getDouble(1));
						progressReport.setBankName(progressResult.getString(2));
						progressMap.put(memberId, progressReport);
					} else {
						progressReport.setSanctionedAmountDuring(progressReport
								.getSanctionedAmountDuring()
								+ progressResult.getDouble(1));
						progressReport.setBankName(progressResult.getString(2));
					}
				}
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query1 = "select v.TC_SANCTIONED_AMT+v.WC_FB_LIMIT+v.WC_NFB_LIMIT, "
						+ " m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " from application_Detail a, member_info m,VIEW_APPL_AMOUNTS v where "
						+ " v.SUBMITTED_DT <= ? and m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID  and"
						+ " a.APP_REF_NO = v.APPREF "
						+ " ORDER BY m.MEM_BANK_NAME";
				progressStmt = connection.prepareStatement(query1);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressResult = progressStmt.executeQuery();
				// System.out.println("the query String is !!!!!!!!!!! "+query1);
				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();
						progressReport.setTotalSanctionedAmount(progressResult
								.getDouble(1));
						progressReport.setBankName(progressResult.getString(2));
						progressMap.put(memberId, progressReport);
					} else {
						progressReport.setTotalSanctionedAmount(progressReport
								.getTotalSanctionedAmount()
								+ progressResult.getDouble(1));
						progressReport.setBankName(progressResult.getString(2));
					}
				}

				String status0 = "RE";
				String status1 = "NE";
				String status2 = "AP";
				String status3 = "CL";
				String status4 = "PE";
				String status7 = "EX";
				String status8 = "HO";
				String status9 = "MO";
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query2 = "select cnt,bnkname,bnkid,idx from"
						+ " (select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx "
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID  "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID  "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union  "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID  "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID  "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail_temp@cginter a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID  "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail_temp@cginter a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID  "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union  "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,2 idx"
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID   = m.MEM_BNK_ID"
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union  "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,3 idx"
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID   =  m.MEM_BNK_ID "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,4 idx"
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " )order by bnkname";
				// System.out.println("query2:"+query2);
				progressStmt = connection.prepareStatement(query2);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressStmt.setString(2, status0); // Set Application Status
													// parameter RE
				progressStmt.setDate(3, endDate); // Set endDate parameter
				progressStmt.setString(4, status2); // Set Application Status
													// parameter AP
				progressStmt.setDate(5, endDate); // Set endDate parameter
				progressStmt.setString(6, status3); // Set Application Status
													// parameter CL
				progressStmt.setDate(7, endDate); // Set endDate parameter
				progressStmt.setString(8, status4); // Set Application Status
													// parameter PE
				progressStmt.setDate(9, endDate); // Set endDate parameter
				progressStmt.setString(10, status7); // Set Application Status
														// parameter EX
				progressStmt.setDate(11, endDate); // Set endDate parameter
				progressStmt.setString(12, status9); // Set Application Status
														// parameter MO
				progressStmt.setDate(13, endDate); // Set endDate parameter
				progressStmt.setString(14, status1); // Set Application Status
														// parameter NE
				progressStmt.setDate(15, endDate); // Set endDate parameter
				progressStmt.setString(16, status8); // Set Application Status
														// parameter HO
				progressStmt.setDate(17, endDate); // Set endDate parameter
				progressStmt.setString(18, status2); // Set Application Status
														// parameter AP
				progressStmt.setDate(19, endDate); // Set endDate parameter
				progressStmt.setString(20, status3); // Set Application Status
														// parameter CL
				progressStmt.setDate(21, endDate); // Set endDate parameter
				progressStmt.setString(22, status4); // Set Application Status
														// parameter PE

				// System.out.println("the query String is @@@@@@@@@@@@@@@@@"+
				// query2);
				progressResult = progressStmt.executeQuery();

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					int index = progressResult.getInt(4);
					// System.out.println("index:"+index);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();

						if (index == 1) {
							progressReport
									.setTotalProposalsRecieved(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 2) {
							progressReport
									.setTotalProposalsApproved(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 3) {
							progressReport.setProposalsCancelled(progressResult
									.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 4) {
							progressReport.setProposalsPending(progressResult
									.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						}
						progressMap.put(memberId, progressReport);
					} else {
						if (index == 1) {
							progressReport
									.setTotalProposalsRecieved(progressReport
											.getTotalProposalsRecieved()
											+ progressResult.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 2) {
							progressReport
									.setTotalProposalsApproved(progressReport
											.getTotalProposalsApproved()
											+ progressResult.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 3) {
							progressReport.setProposalsCancelled(progressReport
									.getProposalsCancelled()
									+ progressResult.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 4) {
							progressReport.setProposalsPending(progressReport
									.getProposalsPending()
									+ progressResult.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						}
					}
				}

				String status5 = "NE";
				String status6 = "AP";
				String status10 = "CL";
				String status11 = "PE";
				String status12 = "EX";
				String status13 = "MO";
				String status14 = "HO";
				String status15 = "RE";
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query3 = "select cnt,bnkname,bnkid,idx from("
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' "
						+ " and  a.APP_STATUS = ? and  a.MEM_BNK_ID "
						+ " =  m.MEM_BNK_ID  group by  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID=  m.MEM_BNK_ID  "
						+ " group by  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.APP_STATUS = ? and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID  group by  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and  a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID  group by  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and  a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID   group by  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and  a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID   group by  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname,"
						+ " m.MEM_BNK_ID bnkid, 1 idx from"
						+ " application_Detail_temp@cginter a,  member_info m where"
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and  a.APP_STATUS = ? and"
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and"
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID   group by  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union"
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname,"
						+ " m.MEM_BNK_ID bnkid, 1 idx from"
						+ " application_Detail_temp@cginter a,  member_info m where"
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and  a.APP_STATUS = ? and"
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and"
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID   group by  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union"
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 2 idx from "
						+ " application_Detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and  a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID group by  m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " )order by bnkname";

				// System.out.println("query3 :::::::::::::::::::::::::::"+query3);
				progressStmt = connection.prepareStatement(query3);
				progressStmt.setDate(1, startDate); // Set startDate parameter
				progressStmt.setDate(2, endDate); // Set endDate parameter
				progressStmt.setString(3, status6); // Set Application Status
													// parameter
				progressStmt.setDate(4, startDate); // Set startDate parameter
				progressStmt.setDate(5, endDate); // Set endDate parameter
				progressStmt.setString(6, status10); // Set Application Status
														// parameter
				progressStmt.setDate(7, startDate); // Set startDate parameter
				progressStmt.setDate(8, endDate); // Set endDate parameter
				progressStmt.setString(9, status11); // Set Application Status
														// parameter
				progressStmt.setDate(10, startDate); // Set startDate parameter
				progressStmt.setDate(11, endDate); // Set endDate parameter
				progressStmt.setString(12, status12); // Set Application Status
														// parameter
				progressStmt.setDate(13, startDate); // Set startDate parameter
				progressStmt.setDate(14, endDate); // Set endDate parameter
				progressStmt.setString(15, status13); // Set Application Status
														// parameter
				progressStmt.setDate(16, startDate); // Set startDate parameter
				progressStmt.setDate(17, endDate); // Set endDate parameter
				progressStmt.setString(18, status15); // Set Application Status
														// parameter
				progressStmt.setDate(19, startDate); // Set startDate parameter
				progressStmt.setDate(20, endDate); // Set endDate parameter
				progressStmt.setString(21, status5); // Set Application Status
														// parameter
				progressStmt.setDate(22, startDate); // Set startDate parameter
				progressStmt.setDate(23, endDate); // Set endDate parameter
				progressStmt.setString(24, status14); // Set Application Status
														// parameter
				progressStmt.setDate(25, startDate); // Set startDate parameter
				progressStmt.setDate(26, endDate); // Set endDate parameter
				progressStmt.setString(27, status6); // Set Application Status
														// parameter

				progressResult = progressStmt.executeQuery();
				// System.out.println("query 3 Executed");

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					int index = progressResult.getInt(4);
					// System.out.println("index:"+index);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();

						if (index == 1) {
							progressReport
									.setProposalsRecievedDuring(progressResult
											.getInt(1));
							// System.out.println("progressResult.getInt(1):"+progressResult.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 2) {
							progressReport
									.setProposalsApprovedDuring(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						}
						progressMap.put(memberId, progressReport);
					} else {
						if (index == 1) {
							progressReport
									.setProposalsRecievedDuring(progressReport
											.getProposalsRecievedDuring()
											+ progressResult.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 2) {
							progressReport
									.setProposalsApprovedDuring(progressReport
											.getProposalsApprovedDuring()
											+ progressResult.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						}
					}
				}
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query4 = " select cnt,bnkname,bnkid from"
						+ " (select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, m.MEM_BNK_ID bnkid"
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ?  and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID and a.APP_GUAR_START_DATE_TIME is not null "
						+ " and a.APP_STATUS='AP' "
						+ " group by m.MEM_BANK_NAME,  m.MEM_BNK_ID "
						+ " )order by bnkname";
				progressStmt = connection.prepareStatement(query4);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressResult = progressStmt.executeQuery();
				// System.out.println("the query String is ############### "+
				// query4);

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					// System.out.println("memberId:"+memberId);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();
						// progressReport.setGuaranteeIssued(progressResult.getDouble(1));
						progressReport.setNumberOfProposals(progressResult
								.getInt(1));
						progressReport.setBankName(progressResult.getString(2));

						progressMap.put(memberId, progressReport);
					} else {
						// progressReport.setGuaranteeIssued(progressReport.getGuaranteeIssued()+progressResult.getDouble(1));
						progressReport.setNumberOfProposals(progressReport
								.getNumberOfProposals()
								+ progressResult.getInt(1));
						progressReport.setBankName(progressResult.getString(2));
					}
				}

				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query5 = "select SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)),"
						+ "  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " from application_Detail a, member_info m where"
						+ " trunc(a.APP_SUBMITTED_DT) <= ?  and"
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and"
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID and a.APP_GUAR_START_DATE_TIME is not null"
						+ " and a.APP_STATUS='AP'  group by m.MEM_BANK_NAME,  m.MEM_BNK_ID"
						+ " ORDER BY  m.MEM_BANK_NAME";
				progressStmt = connection.prepareStatement(query5);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressResult = progressStmt.executeQuery();
				// System.out.println("the query String is $$$$$$$$$$$$$$$ "+query5);

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					// System.out.println("memberId:"+memberId);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();
						progressReport.setGuaranteeIssued(progressResult
								.getDouble(1));
						// progressReport.setNumberOfProposals(progressResult.getInt(2));
						progressReport.setBankName(progressResult.getString(2));

						progressMap.put(memberId, progressReport);
					} else {
						progressReport.setGuaranteeIssued(progressReport
								.getGuaranteeIssued()
								+ progressResult.getDouble(1));
						// progressReport.setNumberOfProposals(progressReport.getNumberOfProposals()+progressResult.getInt(2));
						progressReport.setBankName(progressResult.getString(2));
					}
				}
				Set progressReportSet = progressMap.keySet();
				Iterator progressReportIterator = progressReportSet.iterator();

				while (progressReportIterator.hasNext()) {
					ProgressReport progressReportDetail = new ProgressReport();
					String progressKey = (String) progressReportIterator.next();
					progressReportDetail = (ProgressReport) progressMap
							.get(progressKey);
					progressReportDetail.setMemberId(progressKey);
					progressArray.add(progressReportDetail);
				}
				progressResult.close();
				progressResult = null;
				progressStmt.close();
				progressStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				Log.log(Log.ERROR, "ReportsDAO", "monthlyProgressReport",
						exception.getMessage());

				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		} else if (startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = " select v.TC_SANCTIONED_AMT+v.WC_FB_LIMIT+v.WC_NFB_LIMIT, "
						+ " m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " from application_Detail a, member_info m,VIEW_APPL_AMOUNTS v where"
						+ " v.SUBMITTED_DT <= ? and m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and  "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID  and "
						+ " a.APP_REF_NO = v.APPREF"
						+ " order by m.MEM_BANK_NAME";
				progressStmt = connection.prepareStatement(query);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressResult = progressStmt.executeQuery();
				// System.out.println("the query String is %%%%%%%%%%%%%%%% "+query);

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();
						progressReport.setSanctionedAmountDuring(progressResult
								.getDouble(1));
						progressReport.setBankName(progressResult.getString(2));
						progressMap.put(memberId, progressReport);
					} else {
						progressReport.setSanctionedAmountDuring(progressResult
								.getDouble(1));
						progressReport.setBankName(progressResult.getString(2));
					}
				}
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query1 = "select v.TC_SANCTIONED_AMT+v.WC_FB_LIMIT+v.WC_NFB_LIMIT, "
						+ " m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " from application_Detail a, member_info m,VIEW_APPL_AMOUNTS v where "
						+ " v.SUBMITTED_DT <= ? and m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   and "
						+ " a.APP_REF_NO = v.APPREF"
						+ " order by m.MEM_BANK_NAME";
				progressStmt = connection.prepareStatement(query1);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressResult = progressStmt.executeQuery();
				// System.out.println("the query String is ^^^^^^^^^^^^^^^"+query1);

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();
						progressReport.setTotalSanctionedAmount(progressResult
								.getDouble(1));
						progressReport.setBankName(progressResult.getString(2));
						progressMap.put(memberId, progressReport);
					} else {
						progressReport.setTotalSanctionedAmount(progressResult
								.getDouble(1));
						progressReport.setBankName(progressResult.getString(2));
					}
				}

				String status0 = "RE";
				String status1 = "NE";
				String status2 = "AP";
				String status3 = "CL";
				String status4 = "PE";
				String status7 = "EX";
				String status8 = "HO";
				String status9 = "MO";
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query2 = "select cnt,bnkname,bnkid,idx from"
						+ "(select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union"
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname,"
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where"
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and"
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and"
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID"
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000'and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " union  "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID  "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID  "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail_temp@cginter a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail_temp@cginter a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " union  "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,2 idx"
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,3 idx"
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " union  "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,4 idx"
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " )order by bnkname";
				progressStmt = connection.prepareStatement(query2);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressStmt.setString(2, status0); // Set Application Status
													// parameter
				progressStmt.setDate(3, endDate); // Set endDate parameter
				progressStmt.setString(4, status2); // Set Application Status
													// parameter
				progressStmt.setDate(5, endDate); // Set endDate parameter
				progressStmt.setString(6, status3); // Set Application Status
													// parameter
				progressStmt.setDate(7, endDate); // Set endDate parameter
				progressStmt.setString(8, status4); // Set Application Status
													// parameter
				progressStmt.setDate(9, endDate); // Set endDate parameter
				progressStmt.setString(10, status7); // Set Application Status
														// parameter
				progressStmt.setDate(11, endDate); // Set endDate parameter
				progressStmt.setString(12, status9); // Set Application Status
														// parameter
				progressStmt.setDate(13, endDate); // Set endDate parameter
				progressStmt.setString(14, status1); // Set Application Status
														// parameter
				progressStmt.setDate(15, endDate); // Set endDate parameter
				progressStmt.setString(16, status8); // Set Application Status
														// parameter
				progressStmt.setDate(17, endDate); // Set endDate parameter
				progressStmt.setString(18, status2); // Set Application Status
														// parameter
				progressStmt.setDate(19, endDate); // Set endDate parameter
				progressStmt.setString(20, status3); // Set Application Status
														// parameter
				progressStmt.setDate(21, endDate); // Set endDate parameter
				progressStmt.setString(22, status4); // Set Application Status
														// parameter
				// System.out.println("the query is String &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& "+query2);
				progressResult = progressStmt.executeQuery();

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					int index = progressResult.getInt(4);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();

						if (index == 1) {
							progressReport
									.setTotalProposalsRecieved(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 2) {
							progressReport
									.setTotalProposalsApproved(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 3) {
							progressReport.setProposalsCancelled(progressResult
									.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 4) {
							progressReport.setProposalsPending(progressResult
									.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						}
						progressMap.put(memberId, progressReport);
					} else {
						if (index == 1) {
							progressReport
									.setTotalProposalsRecieved(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 2) {
							progressReport
									.setTotalProposalsApproved(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 3) {
							progressReport.setProposalsCancelled(progressResult
									.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 4) {
							progressReport.setProposalsPending(progressResult
									.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						}
					}
				}

				String status5 = "NE";
				String status6 = "AP";
				String status10 = "CL";
				String status11 = "PE";
				String status12 = "EX";
				String status13 = "MO";
				String status14 = "HO";
				String status15 = "RE";
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query3 = "select cnt,bnkname,bnkid,idx from"
						+ " (select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, "
						+ " m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, "
						+ " m.MEM_BNK_ID "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where   "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, "
						+ " m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where   "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, "
						+ " m.MEM_BNK_ID "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where   "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, "
						+ " m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where   "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, "
						+ " m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_detail_temp@cginter a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, "
						+ " m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_detail_temp@cginter a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, "
						+ " m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,2 idx from "
						+ " application_detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, " + " m.MEM_BNK_ID"
						+ " )order by bnkname";
				progressStmt = connection.prepareStatement(query3);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressStmt.setString(2, status6); // Set Application Status
													// parameter
				progressStmt.setDate(3, endDate); // Set endDate parameter
				progressStmt.setString(4, status10); // Set Application Status
														// parameter
				progressStmt.setDate(5, endDate); // Set endDate parameter
				progressStmt.setString(6, status11); // Set Application Status
														// parameter
				progressStmt.setDate(7, endDate); // Set endDate parameter
				progressStmt.setString(8, status12); // Set Application Status
														// parameter
				progressStmt.setDate(9, endDate); // Set endDate parameter
				progressStmt.setString(10, status13); // Set Application Status
														// parameter
				progressStmt.setDate(11, endDate); // Set endDate parameter
				progressStmt.setString(12, status15); // Set Application Status
														// parameter
				progressStmt.setDate(13, endDate); // Set endDate parameter
				progressStmt.setString(14, status5); // Set Application Status
														// parameter
				progressStmt.setDate(15, endDate); // Set endDate parameter
				progressStmt.setString(16, status14); // Set Application Status
														// parameter
				progressStmt.setDate(17, endDate); // Set endDate parameter
				progressStmt.setString(18, status6); // Set Application Status
														// parameter
				// System.out.println("the query String is ************************"+query3);
				progressResult = progressStmt.executeQuery();

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					int index = progressResult.getInt(4);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();

						if (index == 1) {
							progressReport
									.setProposalsRecievedDuring(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 2) {
							progressReport
									.setProposalsApprovedDuring(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						}
						progressMap.put(memberId, progressReport);
					} else {
						if (index == 1) {
							progressReport
									.setProposalsRecievedDuring(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 2) {
							progressReport
									.setProposalsApprovedDuring(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						}
					}
				} /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query4 = "select count(a.APP_REF_NO), m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " from application_Detail a, member_info m where"
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and"
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and"
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID and a.APP_GUAR_START_DATE_TIME is not null"
						+ " and a.APP_STATUS='AP'  group by m.MEM_BANK_NAME,  m.MEM_BNK_ID"
						+ " order by m.MEM_BANK_NAME";
				progressStmt = connection.prepareStatement(query4);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressResult = progressStmt.executeQuery();
				// System.out.println("the query String is +++++++++++++++++ "+query4);

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					// System.out.println("memberId:"+memberId);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();
						// progressReport.setGuaranteeIssued(progressResult.getDouble(1));
						progressReport.setNumberOfProposals(progressResult
								.getInt(1));
						progressReport.setBankName(progressResult.getString(2));

						progressMap.put(memberId, progressReport);
					} else {
						// progressReport.setGuaranteeIssued(progressReport.getGuaranteeIssued()+progressResult.getDouble(1));
						progressReport.setNumberOfProposals(progressReport
								.getNumberOfProposals()
								+ progressResult.getInt(1));
						progressReport.setBankName(progressResult.getString(2));
					}
				}

				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query5 = "select SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)),"
						+ " m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ?  and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID and a.APP_GUAR_START_DATE_TIME is not null "
						+ " and a.APP_STATUS='AP' group by m.MEM_BANK_NAME,  m.MEM_BNK_ID"
						+ " order by m.MEM_BANK_NAME";
				progressStmt = connection.prepareStatement(query5);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressResult = progressStmt.executeQuery();
				// System.out.println("the query String is |||||||||||||||||| "+query5);

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();
						progressReport.setGuaranteeIssued(progressResult
								.getDouble(1));
						// progressReport.setNumberOfProposals(progressResult.getInt(2));
						progressReport.setBankName(progressResult.getString(2));

						progressMap.put(memberId, progressReport);
					} else {
						progressReport.setGuaranteeIssued(progressReport
								.getGuaranteeIssued()
								+ progressResult.getDouble(1));
						// progressReport.setNumberOfProposals(progressReport.getNumberOfProposals()+progressResult.getInt(2));
						progressReport.setBankName(progressResult.getString(2));
					}
				}
				Set progressReportSet = progressMap.keySet();
				Iterator progressReportIterator = progressReportSet.iterator();

				while (progressReportIterator.hasNext()) {
					ProgressReport progressReportDetail = new ProgressReport();
					String progressKey = (String) progressReportIterator.next();
					progressReportDetail = (ProgressReport) progressMap
							.get(progressKey);
					progressReportDetail.setMemberId(progressKey);
					progressArray.add(progressReportDetail);
				}
				progressResult.close();
				progressResult = null;
				progressStmt.close();
				progressStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "monthlyProgressReport", "Exited");
		return progressArray;

	}

	/* --------------------------------- */

	public ArrayList getMonthlyProgressReportNew(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "monthlyProgressReport", "Entered");
		PreparedStatement progressStmt = null;
		;
		ResultSet progressResult = null;
		Connection connection = DBConnection.getConnection();
		ArrayList progressArray = new ArrayList();
		HashMap progressMap = new HashMap();

		if (startDate != null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = "select v.TC_SANCTIONED_AMT+v.WC_FB_LIMIT+v.WC_NFB_LIMIT, "
						+ " m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " from application_Detail a, member_info m,VIEW_APPL_AMOUNTS v where "
						+ " v.SUBMITTED_DT between ? and ? and m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000'"
						+ " and a.MEM_BNK_ID =  m.MEM_BNK_ID  and "
						+ " a.APP_REF_NO = v.APPREF"
						+ " ORDER BY m.MEM_BANK_NAME";
				progressStmt = connection.prepareStatement(query);
				progressStmt.setDate(1, startDate); // Set startDate parameter
				progressStmt.setDate(2, endDate); // Set endDate parameter
				progressResult = progressStmt.executeQuery();
				// System.out.println("the query string is ~~~~~~~~~"+query);
				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();
						progressReport.setSanctionedAmountDuring(progressResult
								.getDouble(1));
						progressReport.setBankName(progressResult.getString(2));
						progressMap.put(memberId, progressReport);
					} else {
						progressReport.setSanctionedAmountDuring(progressReport
								.getSanctionedAmountDuring()
								+ progressResult.getDouble(1));
						progressReport.setBankName(progressResult.getString(2));
					}
				}
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query1 = "select v.TC_SANCTIONED_AMT+v.WC_FB_LIMIT+v.WC_NFB_LIMIT, "
						+ " m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " from application_Detail a, member_info m,VIEW_APPL_AMOUNTS v where "
						+ " v.SUBMITTED_DT <= ? and m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID  and"
						+ " a.APP_REF_NO = v.APPREF "
						+ " ORDER BY m.MEM_BANK_NAME";
				progressStmt = connection.prepareStatement(query1);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressResult = progressStmt.executeQuery();
				// System.out.println("the query String is !!!!!!!!!!! "+query1);
				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();
						progressReport.setTotalSanctionedAmount(progressResult
								.getDouble(1));
						progressReport.setBankName(progressResult.getString(2));
						progressMap.put(memberId, progressReport);
					} else {
						progressReport.setTotalSanctionedAmount(progressReport
								.getTotalSanctionedAmount()
								+ progressResult.getDouble(1));
						progressReport.setBankName(progressResult.getString(2));
					}
				}

				String status0 = "RE";
				String status1 = "NE";
				String status2 = "AP";
				String status3 = "CL";
				String status4 = "PE";
				String status7 = "EX";
				String status8 = "HO";
				String status9 = "MO";
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query2 = "select cnt,bnkname,bnkid,idx from"
						+ " (select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx "
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID  "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID  "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union  "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID  "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID  "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail_temp a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID  "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail_temp a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID  "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union  "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,2 idx"
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID   = m.MEM_BNK_ID"
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union  "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,3 idx"
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID   =  m.MEM_BNK_ID "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,4 idx"
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " )order by bnkname";
				// System.out.println("query2:"+query2);
				progressStmt = connection.prepareStatement(query2);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressStmt.setString(2, status0); // Set Application Status
													// parameter
				progressStmt.setDate(3, endDate); // Set endDate parameter
				progressStmt.setString(4, status2); // Set Application Status
													// parameter
				progressStmt.setDate(5, endDate); // Set endDate parameter
				progressStmt.setString(6, status3); // Set Application Status
													// parameter
				progressStmt.setDate(7, endDate); // Set endDate parameter
				progressStmt.setString(8, status4); // Set Application Status
													// parameter
				progressStmt.setDate(9, endDate); // Set endDate parameter
				progressStmt.setString(10, status7); // Set Application Status
														// parameter
				progressStmt.setDate(11, endDate); // Set endDate parameter
				progressStmt.setString(12, status9); // Set Application Status
														// parameter
				progressStmt.setDate(13, endDate); // Set endDate parameter
				progressStmt.setString(14, status1); // Set Application Status
														// parameter
				progressStmt.setDate(15, endDate); // Set endDate parameter
				progressStmt.setString(16, status8); // Set Application Status
														// parameter
				progressStmt.setDate(17, endDate); // Set endDate parameter
				progressStmt.setString(18, status2); // Set Application Status
														// parameter
				progressStmt.setDate(19, endDate); // Set endDate parameter
				progressStmt.setString(20, status3); // Set Application Status
														// parameter
				progressStmt.setDate(21, endDate); // Set endDate parameter
				progressStmt.setString(22, status4); // Set Application Status
														// parameter

				// System.out.println("the query String is @@@@@@@@@@@@@@@@@"+
				// query2);
				progressResult = progressStmt.executeQuery();

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					int index = progressResult.getInt(4);
					// System.out.println("index:"+index);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();

						if (index == 1) {
							progressReport
									.setTotalProposalsRecieved(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 2) {
							progressReport
									.setTotalProposalsApproved(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 3) {
							progressReport.setProposalsCancelled(progressResult
									.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 4) {
							progressReport.setProposalsPending(progressResult
									.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						}
						progressMap.put(memberId, progressReport);
					} else {
						if (index == 1) {
							progressReport
									.setTotalProposalsRecieved(progressReport
											.getTotalProposalsRecieved()
											+ progressResult.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 2) {
							progressReport
									.setTotalProposalsApproved(progressReport
											.getTotalProposalsApproved()
											+ progressResult.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 3) {
							progressReport.setProposalsCancelled(progressReport
									.getProposalsCancelled()
									+ progressResult.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 4) {
							progressReport.setProposalsPending(progressReport
									.getProposalsPending()
									+ progressResult.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						}
					}
				}

				String status5 = "NE";
				String status6 = "AP";
				String status10 = "CL";
				String status11 = "PE";
				String status12 = "EX";
				String status13 = "MO";
				String status14 = "HO";
				String status15 = "RE";
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query3 = "select cnt,bnkname,bnkid,idx from("
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' "
						+ " and  a.APP_STATUS = ? and  a.MEM_BNK_ID "
						+ " =  m.MEM_BNK_ID  group by  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID=  m.MEM_BNK_ID  "
						+ " group by  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.APP_STATUS = ? and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID  group by  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and  a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID  group by  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and  a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID   group by  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and  a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID   group by  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname,"
						+ " m.MEM_BNK_ID bnkid, 1 idx from"
						+ " application_Detail_temp a,  member_info m where"
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and  a.APP_STATUS = ? and"
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and"
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID   group by  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union"
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname,"
						+ " m.MEM_BNK_ID bnkid, 1 idx from"
						+ " application_Detail_temp a,  member_info m where"
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and  a.APP_STATUS = ? and"
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and"
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID   group by  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union"
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 2 idx from "
						+ " application_Detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) between ? and ? and  a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID group by  m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " )order by bnkname";

				// System.out.println("query3 :::::::::::::::::::::::::::"+query3);
				progressStmt = connection.prepareStatement(query3);
				progressStmt.setDate(1, startDate); // Set startDate parameter
				progressStmt.setDate(2, endDate); // Set endDate parameter
				progressStmt.setString(3, status6); // Set Application Status
													// parameter
				progressStmt.setDate(4, startDate); // Set startDate parameter
				progressStmt.setDate(5, endDate); // Set endDate parameter
				progressStmt.setString(6, status10); // Set Application Status
														// parameter
				progressStmt.setDate(7, startDate); // Set startDate parameter
				progressStmt.setDate(8, endDate); // Set endDate parameter
				progressStmt.setString(9, status11); // Set Application Status
														// parameter
				progressStmt.setDate(10, startDate); // Set startDate parameter
				progressStmt.setDate(11, endDate); // Set endDate parameter
				progressStmt.setString(12, status12); // Set Application Status
														// parameter
				progressStmt.setDate(13, startDate); // Set startDate parameter
				progressStmt.setDate(14, endDate); // Set endDate parameter
				progressStmt.setString(15, status13); // Set Application Status
														// parameter
				progressStmt.setDate(16, startDate); // Set startDate parameter
				progressStmt.setDate(17, endDate); // Set endDate parameter
				progressStmt.setString(18, status15); // Set Application Status
														// parameter
				progressStmt.setDate(19, startDate); // Set startDate parameter
				progressStmt.setDate(20, endDate); // Set endDate parameter
				progressStmt.setString(21, status5); // Set Application Status
														// parameter
				progressStmt.setDate(22, startDate); // Set startDate parameter
				progressStmt.setDate(23, endDate); // Set endDate parameter
				progressStmt.setString(24, status14); // Set Application Status
														// parameter
				progressStmt.setDate(25, startDate); // Set startDate parameter
				progressStmt.setDate(26, endDate); // Set endDate parameter
				progressStmt.setString(27, status6); // Set Application Status
														// parameter

				progressResult = progressStmt.executeQuery();
				// System.out.println("query 3 Executed");

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					int index = progressResult.getInt(4);
					// System.out.println("index:"+index);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();

						if (index == 1) {
							progressReport
									.setProposalsRecievedDuring(progressResult
											.getInt(1));
							// System.out.println("progressResult.getInt(1):"+progressResult.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 2) {
							progressReport
									.setProposalsApprovedDuring(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						}
						progressMap.put(memberId, progressReport);
					} else {
						if (index == 1) {
							progressReport
									.setProposalsRecievedDuring(progressReport
											.getProposalsRecievedDuring()
											+ progressResult.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 2) {
							progressReport
									.setProposalsApprovedDuring(progressReport
											.getProposalsApprovedDuring()
											+ progressResult.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						}
					}
				}
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query4 = " select cnt,bnkname,bnkid from"
						+ " (select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, m.MEM_BNK_ID bnkid"
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ?  and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID and a.APP_GUAR_START_DATE_TIME is not null "
						+ " and a.APP_STATUS='AP' "
						+ " group by m.MEM_BANK_NAME,  m.MEM_BNK_ID "
						+ " )order by bnkname";
				progressStmt = connection.prepareStatement(query4);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressResult = progressStmt.executeQuery();
				// System.out.println("the query String is ############### "+
				// query4);

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					// System.out.println("memberId:"+memberId);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();
						// progressReport.setGuaranteeIssued(progressResult.getDouble(1));
						progressReport.setNumberOfProposals(progressResult
								.getInt(1));
						progressReport.setBankName(progressResult.getString(2));

						progressMap.put(memberId, progressReport);
					} else {
						// progressReport.setGuaranteeIssued(progressReport.getGuaranteeIssued()+progressResult.getDouble(1));
						progressReport.setNumberOfProposals(progressReport
								.getNumberOfProposals()
								+ progressResult.getInt(1));
						progressReport.setBankName(progressResult.getString(2));
					}
				}

				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query5 = "select SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)),"
						+ "  m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " from application_Detail a, member_info m where"
						+ " trunc(a.APP_SUBMITTED_DT) <= ?  and"
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and"
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID and a.APP_GUAR_START_DATE_TIME is not null"
						+ " and a.APP_STATUS='AP'  group by m.MEM_BANK_NAME,  m.MEM_BNK_ID"
						+ " ORDER BY  m.MEM_BANK_NAME";
				progressStmt = connection.prepareStatement(query5);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressResult = progressStmt.executeQuery();
				// System.out.println("the query String is $$$$$$$$$$$$$$$ "+query5);

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					// System.out.println("memberId:"+memberId);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();
						progressReport.setGuaranteeIssued(progressResult
								.getDouble(1));
						// progressReport.setNumberOfProposals(progressResult.getInt(2));
						progressReport.setBankName(progressResult.getString(2));

						progressMap.put(memberId, progressReport);
					} else {
						progressReport.setGuaranteeIssued(progressReport
								.getGuaranteeIssued()
								+ progressResult.getDouble(1));
						// progressReport.setNumberOfProposals(progressReport.getNumberOfProposals()+progressResult.getInt(2));
						progressReport.setBankName(progressResult.getString(2));
					}
				}
				Set progressReportSet = progressMap.keySet();
				Iterator progressReportIterator = progressReportSet.iterator();

				while (progressReportIterator.hasNext()) {
					ProgressReport progressReportDetail = new ProgressReport();
					String progressKey = (String) progressReportIterator.next();
					progressReportDetail = (ProgressReport) progressMap
							.get(progressKey);
					progressReportDetail.setMemberId(progressKey);
					progressArray.add(progressReportDetail);
				}
				progressResult.close();
				progressResult = null;
				progressStmt.close();
				progressStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				Log.log(Log.ERROR, "ReportsDAO", "monthlyProgressReport",
						exception.getMessage());

				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		} else if (startDate == null) {
			try { /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query = " select v.TC_SANCTIONED_AMT+v.WC_FB_LIMIT+v.WC_NFB_LIMIT, "
						+ " m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " from application_Detail a, member_info m,VIEW_APPL_AMOUNTS v where"
						+ " v.SUBMITTED_DT <= ? and m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and  "
						+ " a.MEM_BNK_ID  =  m.MEM_BNK_ID  and "
						+ " a.APP_REF_NO = v.APPREF"
						+ " order by m.MEM_BANK_NAME";
				progressStmt = connection.prepareStatement(query);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressResult = progressStmt.executeQuery();
				// System.out.println("the query String is %%%%%%%%%%%%%%%% "+query);

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();
						progressReport.setSanctionedAmountDuring(progressResult
								.getDouble(1));
						progressReport.setBankName(progressResult.getString(2));
						progressMap.put(memberId, progressReport);
					} else {
						progressReport.setSanctionedAmountDuring(progressResult
								.getDouble(1));
						progressReport.setBankName(progressResult.getString(2));
					}
				}
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query1 = "select v.TC_SANCTIONED_AMT+v.WC_FB_LIMIT+v.WC_NFB_LIMIT, "
						+ " m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " from application_Detail a, member_info m,VIEW_APPL_AMOUNTS v where "
						+ " v.SUBMITTED_DT <= ? and m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   and "
						+ " a.APP_REF_NO = v.APPREF"
						+ " order by m.MEM_BANK_NAME";
				progressStmt = connection.prepareStatement(query1);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressResult = progressStmt.executeQuery();
				// System.out.println("the query String is ^^^^^^^^^^^^^^^"+query1);

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();
						progressReport.setTotalSanctionedAmount(progressResult
								.getDouble(1));
						progressReport.setBankName(progressResult.getString(2));
						progressMap.put(memberId, progressReport);
					} else {
						progressReport.setTotalSanctionedAmount(progressResult
								.getDouble(1));
						progressReport.setBankName(progressResult.getString(2));
					}
				}

				String status0 = "RE";
				String status1 = "NE";
				String status2 = "AP";
				String status3 = "CL";
				String status4 = "PE";
				String status7 = "EX";
				String status8 = "HO";
				String status9 = "MO";
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query2 = "select cnt,bnkname,bnkid,idx from"
						+ "(select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union"
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname,"
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where"
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and"
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and"
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID"
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000'and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " union  "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID  "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID  "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail_temp a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,1 idx"
						+ " from application_detail_temp a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " union  "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,2 idx"
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,3 idx"
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID "
						+ " union  "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,4 idx"
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " )order by bnkname";
				progressStmt = connection.prepareStatement(query2);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressStmt.setString(2, status0); // Set Application Status
													// parameter
				progressStmt.setDate(3, endDate); // Set endDate parameter
				progressStmt.setString(4, status2); // Set Application Status
													// parameter
				progressStmt.setDate(5, endDate); // Set endDate parameter
				progressStmt.setString(6, status3); // Set Application Status
													// parameter
				progressStmt.setDate(7, endDate); // Set endDate parameter
				progressStmt.setString(8, status4); // Set Application Status
													// parameter
				progressStmt.setDate(9, endDate); // Set endDate parameter
				progressStmt.setString(10, status7); // Set Application Status
														// parameter
				progressStmt.setDate(11, endDate); // Set endDate parameter
				progressStmt.setString(12, status9); // Set Application Status
														// parameter
				progressStmt.setDate(13, endDate); // Set endDate parameter
				progressStmt.setString(14, status1); // Set Application Status
														// parameter
				progressStmt.setDate(15, endDate); // Set endDate parameter
				progressStmt.setString(16, status8); // Set Application Status
														// parameter
				progressStmt.setDate(17, endDate); // Set endDate parameter
				progressStmt.setString(18, status2); // Set Application Status
														// parameter
				progressStmt.setDate(19, endDate); // Set endDate parameter
				progressStmt.setString(20, status3); // Set Application Status
														// parameter
				progressStmt.setDate(21, endDate); // Set endDate parameter
				progressStmt.setString(22, status4); // Set Application Status
														// parameter
				// System.out.println("the query is String &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& "+query2);
				progressResult = progressStmt.executeQuery();

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					int index = progressResult.getInt(4);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();

						if (index == 1) {
							progressReport
									.setTotalProposalsRecieved(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 2) {
							progressReport
									.setTotalProposalsApproved(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 3) {
							progressReport.setProposalsCancelled(progressResult
									.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 4) {
							progressReport.setProposalsPending(progressResult
									.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						}
						progressMap.put(memberId, progressReport);
					} else {
						if (index == 1) {
							progressReport
									.setTotalProposalsRecieved(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 2) {
							progressReport
									.setTotalProposalsApproved(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 3) {
							progressReport.setProposalsCancelled(progressResult
									.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 4) {
							progressReport.setProposalsPending(progressResult
									.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						}
					}
				}

				String status5 = "NE";
				String status6 = "AP";
				String status10 = "CL";
				String status11 = "PE";
				String status12 = "EX";
				String status13 = "MO";
				String status14 = "HO";
				String status15 = "RE";
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query3 = "select cnt,bnkname,bnkid,idx from"
						+ " (select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, "
						+ " m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, "
						+ " m.MEM_BNK_ID "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where   "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, "
						+ " m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where   "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, "
						+ " m.MEM_BNK_ID "
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where   "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, "
						+ " m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_Detail a,  member_info m where   "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, "
						+ " m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_detail_temp a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, "
						+ " m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid, 1 idx from "
						+ " application_detail_temp a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, "
						+ " m.MEM_BNK_ID"
						+ " union "
						+ " select count(a.APP_REF_NO) cnt, m.MEM_BANK_NAME bnkname, "
						+ " m.MEM_BNK_ID bnkid,2 idx from "
						+ " application_detail a,  member_info m where  "
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and a.APP_STATUS = ? and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID =  m.MEM_BNK_ID   "
						+ " group by  m.MEM_BANK_NAME, " + " m.MEM_BNK_ID"
						+ " )order by bnkname";
				progressStmt = connection.prepareStatement(query3);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressStmt.setString(2, status6); // Set Application Status
													// parameter
				progressStmt.setDate(3, endDate); // Set endDate parameter
				progressStmt.setString(4, status10); // Set Application Status
														// parameter
				progressStmt.setDate(5, endDate); // Set endDate parameter
				progressStmt.setString(6, status11); // Set Application Status
														// parameter
				progressStmt.setDate(7, endDate); // Set endDate parameter
				progressStmt.setString(8, status12); // Set Application Status
														// parameter
				progressStmt.setDate(9, endDate); // Set endDate parameter
				progressStmt.setString(10, status13); // Set Application Status
														// parameter
				progressStmt.setDate(11, endDate); // Set endDate parameter
				progressStmt.setString(12, status15); // Set Application Status
														// parameter
				progressStmt.setDate(13, endDate); // Set endDate parameter
				progressStmt.setString(14, status5); // Set Application Status
														// parameter
				progressStmt.setDate(15, endDate); // Set endDate parameter
				progressStmt.setString(16, status14); // Set Application Status
														// parameter
				progressStmt.setDate(17, endDate); // Set endDate parameter
				progressStmt.setString(18, status6); // Set Application Status
														// parameter
				// System.out.println("the query String is ************************"+query3);
				progressResult = progressStmt.executeQuery();

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					int index = progressResult.getInt(4);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();

						if (index == 1) {
							progressReport
									.setProposalsRecievedDuring(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 2) {
							progressReport
									.setProposalsApprovedDuring(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						}
						progressMap.put(memberId, progressReport);
					} else {
						if (index == 1) {
							progressReport
									.setProposalsRecievedDuring(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						} else if (index == 2) {
							progressReport
									.setProposalsApprovedDuring(progressResult
											.getInt(1));
							progressReport.setBankName(progressResult
									.getString(2));
						}
					}
				} /*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query4 = "select count(a.APP_REF_NO), m.MEM_BANK_NAME, m.MEM_BNK_ID"
						+ " from application_Detail a, member_info m where"
						+ " trunc(a.APP_SUBMITTED_DT) <= ? and"
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and"
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID and a.APP_GUAR_START_DATE_TIME is not null"
						+ " and a.APP_STATUS='AP'  group by m.MEM_BANK_NAME,  m.MEM_BNK_ID"
						+ " order by m.MEM_BANK_NAME";
				progressStmt = connection.prepareStatement(query4);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressResult = progressStmt.executeQuery();
				// System.out.println("the query String is +++++++++++++++++ "+query4);

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					// System.out.println("memberId:"+memberId);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();
						// progressReport.setGuaranteeIssued(progressResult.getDouble(1));
						progressReport.setNumberOfProposals(progressResult
								.getInt(1));
						progressReport.setBankName(progressResult.getString(2));

						progressMap.put(memberId, progressReport);
					} else {
						// progressReport.setGuaranteeIssued(progressReport.getGuaranteeIssued()+progressResult.getDouble(1));
						progressReport.setNumberOfProposals(progressReport
								.getNumberOfProposals()
								+ progressResult.getInt(1));
						progressReport.setBankName(progressResult.getString(2));
					}
				}

				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				String query5 = "select SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)),"
						+ " m.MEM_BANK_NAME, m.MEM_BNK_ID  "
						+ " from application_Detail a, member_info m where "
						+ " trunc(a.APP_SUBMITTED_DT) <= ?  and "
						+ " m.MEM_ZNE_ID='0000' and m.mem_brn_id='0000' and "
						+ " a.MEM_BNK_ID = m.MEM_BNK_ID and a.APP_GUAR_START_DATE_TIME is not null "
						+ " and a.APP_STATUS='AP' group by m.MEM_BANK_NAME,  m.MEM_BNK_ID"
						+ " order by m.MEM_BANK_NAME";
				progressStmt = connection.prepareStatement(query5);
				progressStmt.setDate(1, endDate); // Set endDate parameter
				progressResult = progressStmt.executeQuery();
				// System.out.println("the query String is |||||||||||||||||| "+query5);

				while (progressResult.next()) {
					// Instantiate a ProgressReport value object
					String memberId = progressResult.getString(3);
					ProgressReport progressReport = (ProgressReport) progressMap
							.get(memberId);

					if (progressReport == null) {
						progressReport = new ProgressReport();
						progressReport.setGuaranteeIssued(progressResult
								.getDouble(1));
						// progressReport.setNumberOfProposals(progressResult.getInt(2));
						progressReport.setBankName(progressResult.getString(2));

						progressMap.put(memberId, progressReport);
					} else {
						progressReport.setGuaranteeIssued(progressReport
								.getGuaranteeIssued()
								+ progressResult.getDouble(1));
						// progressReport.setNumberOfProposals(progressReport.getNumberOfProposals()+progressResult.getInt(2));
						progressReport.setBankName(progressResult.getString(2));
					}
				}
				Set progressReportSet = progressMap.keySet();
				Iterator progressReportIterator = progressReportSet.iterator();

				while (progressReportIterator.hasNext()) {
					ProgressReport progressReportDetail = new ProgressReport();
					String progressKey = (String) progressReportIterator.next();
					progressReportDetail = (ProgressReport) progressMap
							.get(progressKey);
					progressReportDetail.setMemberId(progressKey);
					progressArray.add(progressReportDetail);
				}
				progressResult.close();
				progressResult = null;
				progressStmt.close();
				progressStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "monthlyProgressReport", "Exited");
		return progressArray;

	}

	/* ---------------------------------- */

	/*
	 * ##########################################################################
	 * ###################3
	 */

	public ArrayList sanctionedApplicationReport(java.sql.Date startDate,
			java.sql.Date endDate, String checkValue) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "sanctionedApplicationReport", "Entered");
		PreparedStatement sanctionedStmt = null;
		ResultSet sanctionedResult = null;
		Connection connection = DBConnection.getConnection();
		ArrayList danDetailsArray = new ArrayList();
		ArrayList danRaisedArrayFinal = new ArrayList();

		if (checkValue.equals("yes")) {
			if (startDate != null) {
				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					String query = "select m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID first,"
							+ " sum(NVL(v.TC_SANCTIONED_AMT,0)+NVL(v.WC_FB_LIMIT,0)+NVL(v.WC_NFB_LIMIT,0)),"
							+ " count(dc.CGPAN), sum(dc.DCI_AMOUNT_RAISED),"
							+ " dc.DCI_APPROPRIATION_FLAG from VIEW_APPL_AMOUNTS v,"
							+ " member_info m, application_detail a, dan_cgpan_info dc "
							+ " where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID = "
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and"
							+ " a.APP_REF_NO = v.APPREF and a.CGPAN = dc.CGPAN and "
							+ " trunc(a.APP_APPROVED_DATE_TIME) between ? and ? "
							+ " group by  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID,"
							+ " dc.DCI_APPROPRIATION_FLAG order by first";
					sanctionedStmt = connection.prepareStatement(query);
					sanctionedStmt.setDate(1, startDate); // Set startDate
															// parameter
					sanctionedStmt.setDate(2, endDate); // Set endDate parameter
					sanctionedResult = sanctionedStmt.executeQuery();

					String danId = null;
					int applications = 0;
					double guaranteeFee = 0.0;
					long amount = 0;
					String danFlag = null;

					while (sanctionedResult.next()) {
						// Instantiate a SanctionedReport value object
						SanctionedReport sanctionedReport = new SanctionedReport();
						danId = sanctionedResult.getString(1);
						amount = sanctionedResult.getLong(2);
						applications = sanctionedResult.getInt(3);
						guaranteeFee = sanctionedResult.getDouble(4);
						danFlag = sanctionedResult.getString(5);

						sanctionedReport.setMliId(danId);
						sanctionedReport.setApplications(applications);
						sanctionedReport.setSanctionedAmount(amount);
						sanctionedReport.setGuaranteeFee(guaranteeFee);
						sanctionedReport.setFlag(danFlag);

						danDetailsArray.add(sanctionedReport);

					}

					for (int i = 0; i < danDetailsArray.size(); i++) {
						SanctionedReport danReport1 = new SanctionedReport();
						danReport1 = (SanctionedReport) danDetailsArray.get(i);
						String danId1 = danReport1.getMliId();
						long amount1 = danReport1.getSanctionedAmount();
						int cgpans1 = danReport1.getApplications();
						double gFee1 = danReport1.getGuaranteeFee();
						String flag1 = danReport1.getFlag();
						boolean setFlag = false;

						for (int j = 0; j < danDetailsArray.size(); j++) {
							SanctionedReport danReport2 = new SanctionedReport();
							danReport2 = (SanctionedReport) danDetailsArray
									.get(j);
							String danId2 = danReport2.getMliId();
							long amount2 = danReport2.getSanctionedAmount();
							int cgpans2 = danReport2.getApplications();
							double gFee2 = danReport2.getGuaranteeFee();
							String flag2 = danReport2.getFlag();
							if (i != j) {
								if (danId1.equals(danId2)) {
									SanctionedReport danReportFinal = null;
									double totalGFee = gFee1 + gFee2;
									long totalAmount = amount1 + amount2;
									int totalCgpans = cgpans1 + cgpans2;

									if (flag1.equals("Y") && flag2.equals("N")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee1);
										double outstanding = totalGFee - gFee1;
										danReportFinal
												.setOutstanding(outstanding);

									} else if (flag1.equals("N")
											&& flag2.equals("Y")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee2);
										double outstanding = totalGFee - gFee2;
										danReportFinal
												.setOutstanding(outstanding);

									}
									setFlag = true;
									danRaisedArrayFinal.add(danReportFinal);

									danDetailsArray.remove(j);
									j--;
								} // end of if block
							} // end of verification(i!=j) block
						} // end of j loop

						if (!setFlag) {
							String flag = danReport1.getFlag();

							if (flag.equals("Y")) {
								double setGuaranteeFee = danReport1
										.getGuaranteeFee();
								double setGuaranteeFeePaid = danReport1
										.getGuaranteeFee();
								double outstanding = setGuaranteeFee
										- setGuaranteeFeePaid;
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							} else if (flag.equals("N")) {
								// double setGuaranteeFee =
								// danReport1.getGuaranteeFee();
								double setGuaranteeFeePaid = 0.0;
								double outstanding = danReport1
										.getGuaranteeFee();
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							}
							danRaisedArrayFinal.add(danReport1);
						} // end of if block
					} // end of i loop
					sanctionedResult.close();
					sanctionedResult = null;
					sanctionedStmt.close();
					sanctionedStmt = null;

				} // end of try block

				catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			if (startDate == null) {
				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					String query = "select m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID idx,"
							+ " sum(NVL(v.TC_SANCTIONED_AMT,0)+NVL(v.WC_FB_LIMIT,0)+NVL(v.WC_NFB_LIMIT,0))"
							+ " ,count(dc.CGPAN), sum(dc.DCI_AMOUNT_RAISED),"
							+ " dc.DCI_APPROPRIATION_FLAG from VIEW_APPL_AMOUNTS v,"
							+ " member_info m, application_detail a, dan_cgpan_info dc "
							+ " where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID = "
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and"
							+ " a.APP_REF_NO = v.APPREF and a.CGPAN = dc.CGPAN and "
							+ " trunc(a.APP_APPROVED_DATE_TIME) <= ? "
							+ " group by  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID,"
							+ " dc.DCI_APPROPRIATION_FLAG order by idx";
					sanctionedStmt = connection.prepareStatement(query);
					sanctionedStmt.setDate(1, endDate); // Set endDate parameter
					sanctionedResult = sanctionedStmt.executeQuery();

					String danId = null;
					int applications = 0;
					double guaranteeFee = 0.0;
					long amount = 0;
					String danFlag = null;
					// double gfeeforN = 0.0;
					// double gfeeforY = 0.0;

					while (sanctionedResult.next()) {
						// Instantiate a SanctionedReport value object
						SanctionedReport sanctionedReport = new SanctionedReport();
						danId = sanctionedResult.getString(1);
						amount = sanctionedResult.getLong(2);
						applications = sanctionedResult.getInt(3);
						guaranteeFee = sanctionedResult.getDouble(4);
						danFlag = sanctionedResult.getString(5);

						sanctionedReport.setMliId(danId);
						sanctionedReport.setApplications(applications);
						sanctionedReport.setSanctionedAmount(amount);
						sanctionedReport.setGuaranteeFee(guaranteeFee);
						sanctionedReport.setFlag(danFlag);

						danDetailsArray.add(sanctionedReport);

					}

					for (int i = 0; i < danDetailsArray.size(); i++) {

						SanctionedReport danReport1 = new SanctionedReport();
						danReport1 = (SanctionedReport) danDetailsArray.get(i);
						String danId1 = danReport1.getMliId();
						long amount1 = danReport1.getSanctionedAmount();
						int cgpans1 = danReport1.getApplications();
						double gFee1 = danReport1.getGuaranteeFee();
						String flag1 = danReport1.getFlag();
						boolean setFlag = false;

						for (int j = 0; j < danDetailsArray.size(); j++) {

							SanctionedReport danReport2 = new SanctionedReport();
							danReport2 = (SanctionedReport) danDetailsArray
									.get(j);
							String danId2 = danReport2.getMliId();
							long amount2 = danReport2.getSanctionedAmount();
							int cgpans2 = danReport2.getApplications();
							double gFee2 = danReport2.getGuaranteeFee();
							String flag2 = danReport2.getFlag();
							if (i != j) {
								if (danId1.equals(danId2)) {
									SanctionedReport danReportFinal = null;
									double totalGFee = gFee1 + gFee2;
									long totalAmount = amount1 + amount2;
									int totalCgpans = cgpans1 + cgpans2;

									if (flag1.equals("Y") && flag2.equals("N")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee1);
										double outstanding = totalGFee - gFee1;
										danReportFinal
												.setOutstanding(outstanding);

									} else if (flag1.equals("N")
											&& flag2.equals("Y")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee2);
										double outstanding = totalGFee - gFee2;
										danReportFinal
												.setOutstanding(outstanding);

									}
									setFlag = true;
									danRaisedArrayFinal.add(danReportFinal);

									danDetailsArray.remove(j);
									j--;
								} // end of if block
							} // end of verification(i!=j) block
						} // end of j loop

						if (!setFlag) {
							String flag = danReport1.getFlag();

							if (flag.equals("Y")) {
								double setGuaranteeFee = danReport1
										.getGuaranteeFee();
								double setGuaranteeFeePaid = danReport1
										.getGuaranteeFee();
								double outstanding = setGuaranteeFee
										- setGuaranteeFeePaid;
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							} else if (flag.equals("N")) {
								// double setGuaranteeFee =
								// danReport1.getGuaranteeFee();
								double setGuaranteeFeePaid = 0.0;
								double outstanding = danReport1
										.getGuaranteeFee();
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							}
							danRaisedArrayFinal.add(danReport1);
						} // end of if block
					} // end of i loop
					sanctionedResult.close();
					sanctionedResult = null;
					sanctionedStmt.close();
					sanctionedStmt = null;

				} // end of try block

				catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}
		}

		else if (checkValue.equals("no")) {
			if (startDate != null) {

				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					String query = "select m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID idx,"
							+ " sum(NVL(v.TC_SANCTIONED_AMT,0)+NVL(v.WC_FB_LIMIT,0)+NVL(v.WC_NFB_LIMIT,0))"
							+ " ,count(dc.CGPAN), sum(dc.DCI_AMOUNT_RAISED),"
							+ " dc.DCI_APPROPRIATION_FLAG from VIEW_APPL_AMOUNTS v,"
							+ " member_info m, application_detail a, dan_cgpan_info dc "
							+ " where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID = "
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and"
							+ " a.APP_REF_NO = v.APPREF and a.CGPAN = dc.CGPAN and "
							+ " a.APP_GUAR_START_DATE_TIME between ? and ? "
							+ " group by  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID,"
							+ " dc.DCI_APPROPRIATION_FLAG order by idx";
					sanctionedStmt = connection.prepareStatement(query);
					sanctionedStmt.setDate(1, startDate); // Set startDate
															// parameter
					sanctionedStmt.setDate(2, endDate); // Set endDate parameter
					sanctionedResult = sanctionedStmt.executeQuery();

					String danId = null;
					int applications = 0;
					double guaranteeFee = 0.0;
					long amount = 0;
					String danFlag = null;
					double gfeeforN = 0.0;
					double gfeeforY = 0.0;

					while (sanctionedResult.next()) {
						// Instantiate a SanctionedReport value object
						SanctionedReport sanctionedReport = new SanctionedReport();
						danId = sanctionedResult.getString(1);
						amount = sanctionedResult.getLong(2);
						applications = sanctionedResult.getInt(3);
						guaranteeFee = sanctionedResult.getDouble(4);
						danFlag = sanctionedResult.getString(5);

						sanctionedReport.setMliId(danId);
						sanctionedReport.setApplications(applications);
						sanctionedReport.setSanctionedAmount(amount);
						sanctionedReport.setGuaranteeFee(guaranteeFee);
						sanctionedReport.setFlag(danFlag);

						danDetailsArray.add(sanctionedReport);

					}

					for (int i = 0; i < danDetailsArray.size(); i++) {

						SanctionedReport danReport1 = new SanctionedReport();
						danReport1 = (SanctionedReport) danDetailsArray.get(i);
						String danId1 = danReport1.getMliId();
						long amount1 = danReport1.getSanctionedAmount();
						int cgpans1 = danReport1.getApplications();
						double gFee1 = danReport1.getGuaranteeFee();
						String flag1 = danReport1.getFlag();
						boolean setFlag = false;

						for (int j = 0; j < danDetailsArray.size(); j++) {

							SanctionedReport danReport2 = new SanctionedReport();
							danReport2 = (SanctionedReport) danDetailsArray
									.get(j);
							String danId2 = danReport2.getMliId();
							long amount2 = danReport2.getSanctionedAmount();
							int cgpans2 = danReport2.getApplications();
							double gFee2 = danReport2.getGuaranteeFee();
							String flag2 = danReport2.getFlag();
							if (i != j) {
								if (danId1.equals(danId2)) {
									SanctionedReport danReportFinal = null;
									double totalGFee = gFee1 + gFee2;
									long totalAmount = amount1 + amount2;
									int totalCgpans = cgpans1 + cgpans2;

									if (flag1.equals("Y") && flag2.equals("N")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee1);
										double outstanding = totalGFee - gFee1;
										danReportFinal
												.setOutstanding(outstanding);

									} else if (flag1.equals("N")
											&& flag2.equals("Y")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee2);
										double outstanding = totalGFee - gFee2;
										danReportFinal
												.setOutstanding(outstanding);

									}
									setFlag = true;
									danRaisedArrayFinal.add(danReportFinal);

									danDetailsArray.remove(j);
									j--;
								} // end of if block
							} // end of verification(i!=j) block
						} // end of j loop

						if (!setFlag) {
							String flag = danReport1.getFlag();

							if (flag.equals("Y")) {
								double setGuaranteeFee = danReport1
										.getGuaranteeFee();
								double setGuaranteeFeePaid = danReport1
										.getGuaranteeFee();
								double outstanding = setGuaranteeFee
										- setGuaranteeFeePaid;
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							} else if (flag.equals("N")) {
								// double setGuaranteeFee =
								// danReport1.getGuaranteeFee();
								double setGuaranteeFeePaid = 0.0;
								double outstanding = danReport1
										.getGuaranteeFee();
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							}
							danRaisedArrayFinal.add(danReport1);
						} // end of if block
					} // end of i loop
					sanctionedResult.close();
					sanctionedResult = null;
					sanctionedStmt.close();
					sanctionedStmt = null;

				} // end of try block

				catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			if (startDate == null) {

				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					String query = "select m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID idx,"
							+ " sum(NVL(v.TC_SANCTIONED_AMT,0)+NVL(v.WC_FB_LIMIT,0)+NVL(v.WC_NFB_LIMIT,0))"
							+ " ,count(dc.CGPAN), sum(dc.DCI_AMOUNT_RAISED),"
							+ " dc.DCI_APPROPRIATION_FLAG from VIEW_APPL_AMOUNTS v,"
							+ " member_info m, application_detail a, dan_cgpan_info dc "
							+ " where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID = "
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and"
							+ " a.APP_REF_NO = v.APPREF and a.CGPAN = dc.CGPAN and "
							+ " a.APP_GUAR_START_DATE_TIME <= ? "
							+ " group by  m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID,"
							+ " dc.DCI_APPROPRIATION_FLAG order by idx";
					sanctionedStmt = connection.prepareStatement(query);
					sanctionedStmt.setDate(1, endDate); // Set endDate parameter
					sanctionedResult = sanctionedStmt.executeQuery();

					String danId = null;
					int applications = 0;
					double guaranteeFee = 0.0;
					long amount = 0;
					String danFlag = null;
					// double gfeeforN = 0.0;
					// double gfeeforY = 0.0;

					while (sanctionedResult.next()) {
						// Instantiate a SanctionedReport value object
						SanctionedReport sanctionedReport = new SanctionedReport();
						danId = sanctionedResult.getString(1);
						amount = sanctionedResult.getLong(2);
						applications = sanctionedResult.getInt(3);
						guaranteeFee = sanctionedResult.getDouble(4);
						danFlag = sanctionedResult.getString(5);

						sanctionedReport.setMliId(danId);
						sanctionedReport.setApplications(applications);
						sanctionedReport.setSanctionedAmount(amount);
						sanctionedReport.setGuaranteeFee(guaranteeFee);
						sanctionedReport.setFlag(danFlag);

						danDetailsArray.add(sanctionedReport);

					}

					for (int i = 0; i < danDetailsArray.size(); i++) {

						SanctionedReport danReport1 = new SanctionedReport();
						danReport1 = (SanctionedReport) danDetailsArray.get(i);
						String danId1 = danReport1.getMliId();
						long amount1 = danReport1.getSanctionedAmount();
						int cgpans1 = danReport1.getApplications();
						double gFee1 = danReport1.getGuaranteeFee();
						String flag1 = danReport1.getFlag();
						boolean setFlag = false;

						for (int j = 0; j < danDetailsArray.size(); j++) {

							SanctionedReport danReport2 = new SanctionedReport();
							danReport2 = (SanctionedReport) danDetailsArray
									.get(j);
							String danId2 = danReport2.getMliId();
							long amount2 = danReport2.getSanctionedAmount();
							int cgpans2 = danReport2.getApplications();
							double gFee2 = danReport2.getGuaranteeFee();
							String flag2 = danReport2.getFlag();
							if (i != j) {
								if (danId1.equals(danId2)) {
									SanctionedReport danReportFinal = null;
									double totalGFee = gFee1 + gFee2;
									long totalAmount = amount1 + amount2;
									int totalCgpans = cgpans1 + cgpans2;

									if (flag1.equals("Y") && flag2.equals("N")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee1);
										double outstanding = totalGFee - gFee1;
										danReportFinal
												.setOutstanding(outstanding);

									} else if (flag1.equals("N")
											&& flag2.equals("Y")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee2);
										double outstanding = totalGFee - gFee2;
										danReportFinal
												.setOutstanding(outstanding);

									}
									setFlag = true;
									danRaisedArrayFinal.add(danReportFinal);

									danDetailsArray.remove(j);
									j--;
								} // end of if block
							} // end of verification(i!=j) block
						} // end of j loop

						if (!setFlag) {
							String flag = danReport1.getFlag();

							if (flag.equals("Y")) {
								double setGuaranteeFee = danReport1
										.getGuaranteeFee();
								double setGuaranteeFeePaid = danReport1
										.getGuaranteeFee();
								double outstanding = setGuaranteeFee
										- setGuaranteeFeePaid;
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							} else if (flag.equals("N")) {
								// double setGuaranteeFee =
								// danReport1.getGuaranteeFee();
								double setGuaranteeFeePaid = 0.0;
								double outstanding = danReport1
										.getGuaranteeFee();
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							}
							danRaisedArrayFinal.add(danReport1);
						} // end of if block
					} // end of i loop
					sanctionedResult.close();
					sanctionedResult = null;
					sanctionedStmt.close();
					sanctionedStmt = null;

				} // end of try block

				catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "sanctionedApplicationReport", "Exited");
		return danRaisedArrayFinal;
	}

	/*
	 * ##########################################################################
	 * ############3
	 */

	public ArrayList getSanctionedApplicationReportForBranch(
			java.sql.Date startDate, java.sql.Date endDate, String memberId,
			String checkValue) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO",
				"getSanctionedApplicationReportForBranch", "Entered");
		PreparedStatement sanctionedStmt = null;
		ResultSet sanctionedResult = null;
		Connection connection = DBConnection.getConnection();
		ArrayList danDetailsArray = new ArrayList();
		ArrayList danRaisedArrayFinal = new ArrayList();

		if (checkValue.equals("yes")) {
			if (startDate != null) {
				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					String query = "select m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID,"
							+ " sum(NVL(v.TC_SANCTIONED_AMT,0)+NVL(v.WC_FB_LIMIT,0)+NVL(v.WC_NFB_LIMIT,0))"
							+ " ,count(dc.CGPAN), sum(dc.DCI_AMOUNT_RAISED),"
							+ " dc.DCI_APPROPRIATION_FLAG from VIEW_APPL_AMOUNTS v,"
							+ " member_info m, application_detail a, dan_cgpan_info dc"
							+ " where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and"
							+ " a.APP_REF_NO = v.APPREF and a.CGPAN = dc.CGPAN and "
							+ " trunc(a.APP_APPROVED_DATE_TIME) between ? and ? and"
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) group by"
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID,"
							+ " dc.DCI_APPROPRIATION_FLAG";
					sanctionedStmt = connection.prepareStatement(query);
					sanctionedStmt.setDate(1, startDate); // Set startDate
															// parameter
					sanctionedStmt.setDate(2, endDate); // Set endDate parameter
					sanctionedStmt.setString(3, memberId); // Set memberId
															// parameter
					sanctionedResult = sanctionedStmt.executeQuery();

					String danId = null;
					int applications = 0;
					double guaranteeFee = 0.0;
					long amount = 0;
					String danFlag = null;
					// double gfeeforN = 0.0;
					// double gfeeforY = 0.0;

					while (sanctionedResult.next()) {
						// Instantiate a SanctionedReport value object
						SanctionedReport sanctionedReport = new SanctionedReport();
						danId = sanctionedResult.getString(1);
						amount = sanctionedResult.getLong(2);
						applications = sanctionedResult.getInt(3);
						guaranteeFee = sanctionedResult.getDouble(4);
						danFlag = sanctionedResult.getString(5);

						sanctionedReport.setMliId(danId);
						sanctionedReport.setApplications(applications);
						sanctionedReport.setSanctionedAmount(amount);
						sanctionedReport.setGuaranteeFee(guaranteeFee);
						sanctionedReport.setFlag(danFlag);

						danDetailsArray.add(sanctionedReport);

					}

					for (int i = 0; i < danDetailsArray.size(); i++) {

						SanctionedReport danReport1 = new SanctionedReport();
						danReport1 = (SanctionedReport) danDetailsArray.get(i);
						String danId1 = danReport1.getMliId();
						long amount1 = danReport1.getSanctionedAmount();
						int cgpans1 = danReport1.getApplications();
						double gFee1 = danReport1.getGuaranteeFee();
						String flag1 = danReport1.getFlag();
						boolean setFlag = false;

						for (int j = 0; j < danDetailsArray.size(); j++) {

							SanctionedReport danReport2 = new SanctionedReport();
							danReport2 = (SanctionedReport) danDetailsArray
									.get(j);
							String danId2 = danReport2.getMliId();
							long amount2 = danReport2.getSanctionedAmount();
							int cgpans2 = danReport2.getApplications();
							double gFee2 = danReport2.getGuaranteeFee();
							String flag2 = danReport2.getFlag();
							if (i != j) {
								if (danId1.equals(danId2)) {
									SanctionedReport danReportFinal = null;
									double totalGFee = gFee1 + gFee2;
									long totalAmount = amount1 + amount2;
									int totalCgpans = cgpans1 + cgpans2;

									if (flag1.equals("Y") && flag2.equals("N")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee1);
										double outstanding = totalGFee - gFee1;
										danReportFinal
												.setOutstanding(outstanding);

									} else if (flag1.equals("N")
											&& flag2.equals("Y")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee2);
										double outstanding = totalGFee - gFee2;
										danReportFinal
												.setOutstanding(outstanding);

									}
									setFlag = true;
									danRaisedArrayFinal.add(danReportFinal);

									danDetailsArray.remove(j);
									j--;
								} // end of if block
							} // end of verification(i!=j) block
						} // end of j loop

						if (!setFlag) {
							String flag = danReport1.getFlag();

							if (flag.equals("Y")) {
								double setGuaranteeFee = danReport1
										.getGuaranteeFee();
								double setGuaranteeFeePaid = danReport1
										.getGuaranteeFee();
								double outstanding = setGuaranteeFee
										- setGuaranteeFeePaid;
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							} else if (flag.equals("N")) {
								// double setGuaranteeFee =
								// danReport1.getGuaranteeFee();
								double setGuaranteeFeePaid = 0.0;
								double outstanding = danReport1
										.getGuaranteeFee();
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							}
							danRaisedArrayFinal.add(danReport1);
						} // end of if block
					} // end of i loop
					sanctionedResult.close();
					sanctionedResult = null;
					sanctionedStmt.close();
					sanctionedStmt = null;

				} // end of try block

				catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			if (startDate == null) {
				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					String query = "select m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID, "
							+ " sum(NVL(v.TC_SANCTIONED_AMT,0)+NVL(v.WC_FB_LIMIT,0)+NVL(v.WC_NFB_LIMIT,0))"
							+ " ,count(dc.CGPAN), sum(dc.DCI_AMOUNT_RAISED),  "
							+ " dc.DCI_APPROPRIATION_FLAG from VIEW_APPL_AMOUNTS v, "
							+ " member_info m, application_detail a, dan_cgpan_info dc "
							+ " where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and "
							+ " a.APP_REF_NO = v.APPREF and a.CGPAN = dc.CGPAN and "
							+ " trunc(a.APP_APPROVED_DATE_TIME) <= ? and"
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) group by "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID,"
							+ " dc.DCI_APPROPRIATION_FLAG";
					sanctionedStmt = connection.prepareStatement(query);
					sanctionedStmt.setDate(1, endDate); // Set endDate parameter
					sanctionedStmt.setString(2, memberId); // Set memberId
															// parameter
					sanctionedResult = sanctionedStmt.executeQuery();

					String danId = null;
					int applications = 0;
					double guaranteeFee = 0.0;
					long amount = 0;
					String danFlag = null;
					// double gfeeforN = 0.0;
					// double gfeeforY = 0.0;

					while (sanctionedResult.next()) {
						// Instantiate a SanctionedReport value object
						SanctionedReport sanctionedReport = new SanctionedReport();
						danId = sanctionedResult.getString(1);
						amount = sanctionedResult.getLong(2);
						applications = sanctionedResult.getInt(3);
						guaranteeFee = sanctionedResult.getDouble(4);
						danFlag = sanctionedResult.getString(5);

						sanctionedReport.setMliId(danId);
						sanctionedReport.setApplications(applications);
						sanctionedReport.setSanctionedAmount(amount);
						sanctionedReport.setGuaranteeFee(guaranteeFee);
						sanctionedReport.setFlag(danFlag);

						danDetailsArray.add(sanctionedReport);

					}

					for (int i = 0; i < danDetailsArray.size(); i++) {

						SanctionedReport danReport1 = new SanctionedReport();
						danReport1 = (SanctionedReport) danDetailsArray.get(i);
						String danId1 = danReport1.getMliId();
						long amount1 = danReport1.getSanctionedAmount();
						int cgpans1 = danReport1.getApplications();
						double gFee1 = danReport1.getGuaranteeFee();
						String flag1 = danReport1.getFlag();
						boolean setFlag = false;

						for (int j = 0; j < danDetailsArray.size(); j++) {

							SanctionedReport danReport2 = new SanctionedReport();
							danReport2 = (SanctionedReport) danDetailsArray
									.get(j);
							String danId2 = danReport2.getMliId();
							long amount2 = danReport2.getSanctionedAmount();
							int cgpans2 = danReport2.getApplications();
							double gFee2 = danReport2.getGuaranteeFee();
							String flag2 = danReport2.getFlag();
							if (i != j) {
								if (danId1.equals(danId2)) {
									SanctionedReport danReportFinal = null;
									double totalGFee = gFee1 + gFee2;
									long totalAmount = amount1 + amount2;
									int totalCgpans = cgpans1 + cgpans2;

									if (flag1.equals("Y") && flag2.equals("N")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee1);
										double outstanding = totalGFee - gFee1;
										danReportFinal
												.setOutstanding(outstanding);

									} else if (flag1.equals("N")
											&& flag2.equals("Y")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee2);
										double outstanding = totalGFee - gFee2;
										danReportFinal
												.setOutstanding(outstanding);

									}
									setFlag = true;
									danRaisedArrayFinal.add(danReportFinal);

									danDetailsArray.remove(j);
									j--;
								} // end of if block
							} // end of verification(i!=j) block
						} // end of j loop

						if (!setFlag) {
							String flag = danReport1.getFlag();

							if (flag.equals("Y")) {
								double setGuaranteeFee = danReport1
										.getGuaranteeFee();
								double setGuaranteeFeePaid = danReport1
										.getGuaranteeFee();
								double outstanding = setGuaranteeFee
										- setGuaranteeFeePaid;
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							} else if (flag.equals("N")) {
								// double setGuaranteeFee =
								// danReport1.getGuaranteeFee();
								double setGuaranteeFeePaid = 0.0;
								double outstanding = danReport1
										.getGuaranteeFee();
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							}
							danRaisedArrayFinal.add(danReport1);
						} // end of if block
					} // end of i loop
					sanctionedResult.close();
					sanctionedResult = null;
					sanctionedStmt.close();
					sanctionedStmt = null;

				} // end of try block

				catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (checkValue.equals("no")) {
			if (startDate != null) {

				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					String query = "select m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID, "
							+ " sum(NVL(v.TC_SANCTIONED_AMT,0)+NVL(v.WC_FB_LIMIT,0)+NVL(v.WC_NFB_LIMIT,0))"
							+ " ,count(dc.CGPAN), sum(dc.DCI_AMOUNT_RAISED),  "
							+ " dc.DCI_APPROPRIATION_FLAG from VIEW_APPL_AMOUNTS v, "
							+ " member_info m, application_detail a, dan_cgpan_info dc "
							+ " where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and "
							+ " a.APP_REF_NO = v.APPREF and a.CGPAN = dc.CGPAN and "
							+ " a.APP_GUAR_START_DATE_TIME between ? and ? and"
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) group by "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID,"
							+ " dc.DCI_APPROPRIATION_FLAG";
					sanctionedStmt = connection.prepareStatement(query);
					sanctionedStmt.setDate(1, startDate); // Set startDate
															// parameter
					sanctionedStmt.setDate(2, endDate); // Set endDate parameter
					sanctionedStmt.setString(3, memberId); // Set memberId
															// parameter
					sanctionedResult = sanctionedStmt.executeQuery();

					String danId = null;
					int applications = 0;
					double guaranteeFee = 0.0;
					long amount = 0;
					String danFlag = null;
					// double gfeeforN = 0.0;
					// double gfeeforY = 0.0;

					while (sanctionedResult.next()) {
						// Instantiate a SanctionedReport value object
						SanctionedReport sanctionedReport = new SanctionedReport();
						danId = sanctionedResult.getString(1);
						amount = sanctionedResult.getLong(2);
						applications = sanctionedResult.getInt(3);
						guaranteeFee = sanctionedResult.getDouble(4);
						danFlag = sanctionedResult.getString(5);

						sanctionedReport.setMliId(danId);
						sanctionedReport.setApplications(applications);
						sanctionedReport.setSanctionedAmount(amount);
						sanctionedReport.setGuaranteeFee(guaranteeFee);
						sanctionedReport.setFlag(danFlag);

						danDetailsArray.add(sanctionedReport);

					}

					for (int i = 0; i < danDetailsArray.size(); i++) {

						SanctionedReport danReport1 = new SanctionedReport();
						danReport1 = (SanctionedReport) danDetailsArray.get(i);
						String danId1 = danReport1.getMliId();
						long amount1 = danReport1.getSanctionedAmount();
						int cgpans1 = danReport1.getApplications();
						double gFee1 = danReport1.getGuaranteeFee();
						String flag1 = danReport1.getFlag();
						boolean setFlag = false;

						for (int j = 0; j < danDetailsArray.size(); j++) {

							SanctionedReport danReport2 = new SanctionedReport();
							danReport2 = (SanctionedReport) danDetailsArray
									.get(j);
							String danId2 = danReport2.getMliId();
							long amount2 = danReport2.getSanctionedAmount();
							int cgpans2 = danReport2.getApplications();
							double gFee2 = danReport2.getGuaranteeFee();
							String flag2 = danReport2.getFlag();
							if (i != j) {
								if (danId1.equals(danId2)) {
									SanctionedReport danReportFinal = null;
									double totalGFee = gFee1 + gFee2;
									long totalAmount = amount1 + amount2;
									int totalCgpans = cgpans1 + cgpans2;

									if (flag1.equals("Y") && flag2.equals("N")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee1);
										double outstanding = totalGFee - gFee1;
										danReportFinal
												.setOutstanding(outstanding);

									} else if (flag1.equals("N")
											&& flag2.equals("Y")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee2);
										double outstanding = totalGFee - gFee2;
										danReportFinal
												.setOutstanding(outstanding);

									}
									setFlag = true;
									danRaisedArrayFinal.add(danReportFinal);

									danDetailsArray.remove(j);
									j--;
								} // end of if block
							} // end of verification(i!=j) block
						} // end of j loop

						if (!setFlag) {
							String flag = danReport1.getFlag();

							if (flag.equals("Y")) {
								double setGuaranteeFee = danReport1
										.getGuaranteeFee();
								double setGuaranteeFeePaid = danReport1
										.getGuaranteeFee();
								double outstanding = setGuaranteeFee
										- setGuaranteeFeePaid;
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							} else if (flag.equals("N")) {
								// double setGuaranteeFee =
								// danReport1.getGuaranteeFee();
								double setGuaranteeFeePaid = 0.0;
								double outstanding = danReport1
										.getGuaranteeFee();
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							}
							danRaisedArrayFinal.add(danReport1);
						} // end of if block
					} // end of i loop
					sanctionedResult.close();
					sanctionedResult = null;
					sanctionedStmt.close();
					sanctionedStmt = null;

				} // end of try block

				catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			if (startDate == null) {

				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					String query = "select m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID, "
							+ " sum(NVL(v.TC_SANCTIONED_AMT,0)+NVL(v.WC_FB_LIMIT,0)+NVL(v.WC_NFB_LIMIT,0))"
							+ " ,count(dc.CGPAN), sum(dc.DCI_AMOUNT_RAISED),  "
							+ " dc.DCI_APPROPRIATION_FLAG from VIEW_APPL_AMOUNTS v, "
							+ " member_info m, application_detail a, dan_cgpan_info dc "
							+ " where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and "
							+ " a.APP_REF_NO = v.APPREF and a.CGPAN = dc.CGPAN and "
							+ " a.APP_GUAR_START_DATE_TIME <= ? and"
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) group by "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID,"
							+ " dc.DCI_APPROPRIATION_FLAG";
					sanctionedStmt = connection.prepareStatement(query);
					sanctionedStmt.setDate(1, endDate); // Set endDate parameter
					sanctionedStmt.setString(2, memberId); // Set memberId
															// parameter
					sanctionedResult = sanctionedStmt.executeQuery();

					String danId = null;
					int applications = 0;
					double guaranteeFee = 0.0;
					long amount = 0;
					String danFlag = null;
					double gfeeforN = 0.0;
					double gfeeforY = 0.0;

					while (sanctionedResult.next()) {
						// Instantiate a SanctionedReport value object
						SanctionedReport sanctionedReport = new SanctionedReport();
						danId = sanctionedResult.getString(1);
						amount = sanctionedResult.getLong(2);
						applications = sanctionedResult.getInt(3);
						guaranteeFee = sanctionedResult.getDouble(4);
						danFlag = sanctionedResult.getString(5);

						sanctionedReport.setMliId(danId);
						sanctionedReport.setApplications(applications);
						sanctionedReport.setSanctionedAmount(amount);
						sanctionedReport.setGuaranteeFee(guaranteeFee);
						sanctionedReport.setFlag(danFlag);

						danDetailsArray.add(sanctionedReport);

					}

					for (int i = 0; i < danDetailsArray.size(); i++) {

						SanctionedReport danReport1 = new SanctionedReport();
						danReport1 = (SanctionedReport) danDetailsArray.get(i);
						String danId1 = danReport1.getMliId();
						long amount1 = danReport1.getSanctionedAmount();
						int cgpans1 = danReport1.getApplications();
						double gFee1 = danReport1.getGuaranteeFee();
						String flag1 = danReport1.getFlag();
						boolean setFlag = false;

						for (int j = 0; j < danDetailsArray.size(); j++) {

							SanctionedReport danReport2 = new SanctionedReport();
							danReport2 = (SanctionedReport) danDetailsArray
									.get(j);
							String danId2 = danReport2.getMliId();
							long amount2 = danReport2.getSanctionedAmount();
							int cgpans2 = danReport2.getApplications();
							double gFee2 = danReport2.getGuaranteeFee();
							String flag2 = danReport2.getFlag();
							if (i != j) {
								if (danId1.equals(danId2)) {
									SanctionedReport danReportFinal = null;
									double totalGFee = gFee1 + gFee2;
									long totalAmount = amount1 + amount2;
									int totalCgpans = cgpans1 + cgpans2;

									if (flag1.equals("Y") && flag2.equals("N")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee1);
										double outstanding = totalGFee - gFee1;
										danReportFinal
												.setOutstanding(outstanding);

									} else if (flag1.equals("N")
											&& flag2.equals("Y")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee2);
										double outstanding = totalGFee - gFee2;
										danReportFinal
												.setOutstanding(outstanding);

									}
									setFlag = true;
									danRaisedArrayFinal.add(danReportFinal);

									danDetailsArray.remove(j);
									j--;
								} // end of if block
							} // end of verification(i!=j) block
						} // end of j loop

						if (!setFlag) {
							String flag = danReport1.getFlag();

							if (flag.equals("Y")) {
								double setGuaranteeFee = danReport1
										.getGuaranteeFee();
								double setGuaranteeFeePaid = danReport1
										.getGuaranteeFee();
								double outstanding = setGuaranteeFee
										- setGuaranteeFeePaid;
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							} else if (flag.equals("N")) {
								// double setGuaranteeFee =
								// danReport1.getGuaranteeFee();
								double setGuaranteeFeePaid = 0.0;
								double outstanding = danReport1
										.getGuaranteeFee();
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							}
							danRaisedArrayFinal.add(danReport1);
						} // end of if block
					} // end of i loop
					sanctionedResult.close();
					sanctionedResult = null;
					sanctionedStmt.close();
					sanctionedStmt = null;

				} // end of try block

				catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO",
				"getSanctionedApplicationReportForBranch", "Exited");
		return danRaisedArrayFinal;
	}

	public ArrayList getSanctionedApplicationReportForZone(
			java.sql.Date startDate, java.sql.Date endDate, String memberId,
			String checkValue) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getSanctionedApplicationReportForZone",
				"Entered");
		PreparedStatement sanctionedStmt;
		ResultSet sanctionedResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danDetailsArray = new ArrayList();
		ArrayList danRaisedArrayFinal = new ArrayList();

		if (checkValue.equals("yes")) {
			if (startDate != null) {

				try {
					String query = "select m.MEM_BNK_ID || m.MEM_ZNE_ID, "
							+ " sum(NVL(v.TC_SANCTIONED_AMT,0)+NVL(v.WC_FB_LIMIT,0)+NVL(v.WC_NFB_LIMIT,0))"
							+ " ,count(dc.CGPAN), sum(dc.DCI_AMOUNT_RAISED),  "
							+ " dc.DCI_APPROPRIATION_FLAG from VIEW_APPL_AMOUNTS v, "
							+ " member_info m, application_detail a, dan_cgpan_info dc "
							+ " where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and "
							+ " a.APP_REF_NO = v.APPREF and a.CGPAN = dc.CGPAN and "
							+ " trunc(a.APP_APPROVED_DATE_TIME) between ? and ? and"
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID || m.MEM_ZNE_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) group by "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID,"
							+ " dc.DCI_APPROPRIATION_FLAG";
					sanctionedStmt = connection.prepareStatement(query);
					sanctionedStmt.setDate(1, startDate); // Set startDate
															// parameter
					sanctionedStmt.setDate(2, endDate); // Set endDate parameter
					sanctionedStmt.setString(3, memberId); // Set memberId
															// parameter
					sanctionedResult = sanctionedStmt.executeQuery();

					String danId = null;
					int applications = 0;
					double guaranteeFee = 0.0;
					long amount = 0;
					String danFlag = null;
					// double gfeeforN = 0.0;
					// double gfeeforY = 0.0;

					while (sanctionedResult.next()) {
						// Instantiate a SanctionedReport value object
						SanctionedReport sanctionedReport = new SanctionedReport();
						danId = sanctionedResult.getString(1);
						amount = sanctionedResult.getLong(2);
						applications = sanctionedResult.getInt(3);
						guaranteeFee = sanctionedResult.getDouble(4);
						danFlag = sanctionedResult.getString(5);

						sanctionedReport.setMliId(danId);
						sanctionedReport.setApplications(applications);
						sanctionedReport.setSanctionedAmount(amount);
						sanctionedReport.setGuaranteeFee(guaranteeFee);
						sanctionedReport.setFlag(danFlag);

						danDetailsArray.add(sanctionedReport);

					}

					for (int i = 0; i < danDetailsArray.size(); i++) {

						SanctionedReport danReport1 = new SanctionedReport();
						danReport1 = (SanctionedReport) danDetailsArray.get(i);
						String danId1 = danReport1.getMliId();
						long amount1 = danReport1.getSanctionedAmount();
						int cgpans1 = danReport1.getApplications();
						double gFee1 = danReport1.getGuaranteeFee();
						String flag1 = danReport1.getFlag();
						boolean setFlag = false;

						for (int j = 0; j < danDetailsArray.size(); j++) {

							SanctionedReport danReport2 = new SanctionedReport();
							danReport2 = (SanctionedReport) danDetailsArray
									.get(j);
							String danId2 = danReport2.getMliId();
							long amount2 = danReport2.getSanctionedAmount();
							int cgpans2 = danReport2.getApplications();
							double gFee2 = danReport2.getGuaranteeFee();
							String flag2 = danReport2.getFlag();
							if (i != j) {
								if (danId1.equals(danId2)) {
									SanctionedReport danReportFinal = null;
									double totalGFee = gFee1 + gFee2;
									long totalAmount = amount1 + amount2;
									int totalCgpans = cgpans1 + cgpans2;

									if (flag1.equals("Y") && flag2.equals("N")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee1);
										double outstanding = totalGFee - gFee1;
										danReportFinal
												.setOutstanding(outstanding);

									} else if (flag1.equals("N")
											&& flag2.equals("Y")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee2);
										double outstanding = totalGFee - gFee2;
										danReportFinal
												.setOutstanding(outstanding);

									}
									setFlag = true;
									danRaisedArrayFinal.add(danReportFinal);

									danDetailsArray.remove(j);
									j--;
								} // end of if block
							} // end of verification(i!=j) block
						} // end of j loop

						if (!setFlag) {
							String flag = danReport1.getFlag();

							if (flag.equals("Y")) {
								double setGuaranteeFee = danReport1
										.getGuaranteeFee();
								double setGuaranteeFeePaid = danReport1
										.getGuaranteeFee();
								double outstanding = setGuaranteeFee
										- setGuaranteeFeePaid;
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							} else if (flag.equals("N")) {
								// double setGuaranteeFee =
								// danReport1.getGuaranteeFee();
								double setGuaranteeFeePaid = 0.0;
								double outstanding = danReport1
										.getGuaranteeFee();
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							}
							danRaisedArrayFinal.add(danReport1);
						} // end of if block
					} // end of i loop
					sanctionedResult.close();
					sanctionedResult = null;
					sanctionedStmt.close();
					sanctionedStmt = null;

				} // end of try block

				catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			if (startDate == null) {
				try {
					String query = "select m.MEM_BNK_ID || m.MEM_ZNE_ID, "
							+ " sum(NVL(v.TC_SANCTIONED_AMT,0)+NVL(v.WC_FB_LIMIT,0)+NVL(v.WC_NFB_LIMIT,0))"
							+ " ,count(dc.CGPAN), sum(dc.DCI_AMOUNT_RAISED),  "
							+ " dc.DCI_APPROPRIATION_FLAG from VIEW_APPL_AMOUNTS v, "
							+ " member_info m, application_detail a, dan_cgpan_info dc "
							+ " where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and "
							+ " a.APP_REF_NO = v.APPREF and a.CGPAN = dc.CGPAN and "
							+ " trunc(a.APP_APPROVED_DATE_TIME) <= ? and"
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID || m.MEM_ZNE_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) group by "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID,"
							+ " dc.DCI_APPROPRIATION_FLAG";
					sanctionedStmt = connection.prepareStatement(query);
					sanctionedStmt.setDate(1, endDate); // Set endDate parameter
					sanctionedStmt.setString(2, memberId); // Set memberId
															// parameter
					sanctionedResult = sanctionedStmt.executeQuery();

					String danId = null;
					int applications = 0;
					double guaranteeFee = 0.0;
					long amount = 0;
					String danFlag = null;
					// double gfeeforN = 0.0;
					// double gfeeforY = 0.0;

					while (sanctionedResult.next()) {
						// Instantiate a SanctionedReport value object
						SanctionedReport sanctionedReport = new SanctionedReport();
						danId = sanctionedResult.getString(1);
						amount = sanctionedResult.getLong(2);
						applications = sanctionedResult.getInt(3);
						guaranteeFee = sanctionedResult.getDouble(4);
						danFlag = sanctionedResult.getString(5);

						sanctionedReport.setMliId(danId);
						sanctionedReport.setApplications(applications);
						sanctionedReport.setSanctionedAmount(amount);
						sanctionedReport.setGuaranteeFee(guaranteeFee);
						sanctionedReport.setFlag(danFlag);

						danDetailsArray.add(sanctionedReport);

					}

					for (int i = 0; i < danDetailsArray.size(); i++) {

						SanctionedReport danReport1 = new SanctionedReport();
						danReport1 = (SanctionedReport) danDetailsArray.get(i);
						String danId1 = danReport1.getMliId();
						long amount1 = danReport1.getSanctionedAmount();
						int cgpans1 = danReport1.getApplications();
						double gFee1 = danReport1.getGuaranteeFee();
						String flag1 = danReport1.getFlag();
						boolean setFlag = false;

						for (int j = 0; j < danDetailsArray.size(); j++) {

							SanctionedReport danReport2 = new SanctionedReport();
							danReport2 = (SanctionedReport) danDetailsArray
									.get(j);
							String danId2 = danReport2.getMliId();
							long amount2 = danReport2.getSanctionedAmount();
							int cgpans2 = danReport2.getApplications();
							double gFee2 = danReport2.getGuaranteeFee();
							String flag2 = danReport2.getFlag();
							if (i != j) {
								if (danId1.equals(danId2)) {
									SanctionedReport danReportFinal = null;
									double totalGFee = gFee1 + gFee2;
									long totalAmount = amount1 + amount2;
									int totalCgpans = cgpans1 + cgpans2;

									if (flag1.equals("Y") && flag2.equals("N")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee1);
										double outstanding = totalGFee - gFee1;
										danReportFinal
												.setOutstanding(outstanding);

									} else if (flag1.equals("N")
											&& flag2.equals("Y")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee2);
										double outstanding = totalGFee - gFee2;
										danReportFinal
												.setOutstanding(outstanding);

									}
									setFlag = true;
									danRaisedArrayFinal.add(danReportFinal);

									danDetailsArray.remove(j);
									j--;
								} // end of if block
							} // end of verification(i!=j) block
						} // end of j loop

						if (!setFlag) {
							String flag = danReport1.getFlag();

							if (flag.equals("Y")) {
								double setGuaranteeFee = danReport1
										.getGuaranteeFee();
								double setGuaranteeFeePaid = danReport1
										.getGuaranteeFee();
								double outstanding = setGuaranteeFee
										- setGuaranteeFeePaid;
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							} else if (flag.equals("N")) {
								// double setGuaranteeFee =
								// danReport1.getGuaranteeFee();
								double setGuaranteeFeePaid = 0.0;
								double outstanding = danReport1
										.getGuaranteeFee();
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							}
							danRaisedArrayFinal.add(danReport1);
						} // end of if block
					} // end of i loop
					sanctionedResult.close();
					sanctionedResult = null;
					sanctionedStmt.close();
					sanctionedStmt = null;

				} // end of try block

				catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (checkValue.equals("no")) {
			if (startDate != null) {

				try {
					String query = "select m.MEM_BNK_ID || m.MEM_ZNE_ID, "
							+ " sum(NVL(v.TC_SANCTIONED_AMT,0)+NVL(v.WC_FB_LIMIT,0)+NVL(v.WC_NFB_LIMIT,0))"
							+ " ,count(dc.CGPAN), sum(dc.DCI_AMOUNT_RAISED),  "
							+ " dc.DCI_APPROPRIATION_FLAG from VIEW_APPL_AMOUNTS v, "
							+ " member_info m, application_detail a, dan_cgpan_info dc "
							+ " where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and "
							+ " a.APP_REF_NO = v.APPREF and a.CGPAN = dc.CGPAN and "
							+ " a.APP_GUAR_START_DATE_TIME between ? and ? and"
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID || m.MEM_ZNE_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) group by "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID,"
							+ " dc.DCI_APPROPRIATION_FLAG";
					sanctionedStmt = connection.prepareStatement(query);
					sanctionedStmt.setDate(1, startDate); // Set startDate
															// parameter
					sanctionedStmt.setDate(2, endDate); // Set endDate parameter
					sanctionedStmt.setString(3, memberId); // Set memberId
															// parameter
					sanctionedResult = sanctionedStmt.executeQuery();

					String danId = null;
					int applications = 0;
					double guaranteeFee = 0.0;
					long amount = 0;
					String danFlag = null;
					// double gfeeforN = 0.0;
					// double gfeeforY = 0.0;

					while (sanctionedResult.next()) {
						// Instantiate a SanctionedReport value object
						SanctionedReport sanctionedReport = new SanctionedReport();
						danId = sanctionedResult.getString(1);
						amount = sanctionedResult.getLong(2);
						applications = sanctionedResult.getInt(3);
						guaranteeFee = sanctionedResult.getDouble(4);
						danFlag = sanctionedResult.getString(5);

						sanctionedReport.setMliId(danId);
						sanctionedReport.setApplications(applications);
						sanctionedReport.setSanctionedAmount(amount);
						sanctionedReport.setGuaranteeFee(guaranteeFee);
						sanctionedReport.setFlag(danFlag);

						danDetailsArray.add(sanctionedReport);

					}

					for (int i = 0; i < danDetailsArray.size(); i++) {

						SanctionedReport danReport1 = new SanctionedReport();
						danReport1 = (SanctionedReport) danDetailsArray.get(i);
						String danId1 = danReport1.getMliId();
						long amount1 = danReport1.getSanctionedAmount();
						int cgpans1 = danReport1.getApplications();
						double gFee1 = danReport1.getGuaranteeFee();
						String flag1 = danReport1.getFlag();
						boolean setFlag = false;

						for (int j = 0; j < danDetailsArray.size(); j++) {

							SanctionedReport danReport2 = new SanctionedReport();
							danReport2 = (SanctionedReport) danDetailsArray
									.get(j);
							String danId2 = danReport2.getMliId();
							long amount2 = danReport2.getSanctionedAmount();
							int cgpans2 = danReport2.getApplications();
							double gFee2 = danReport2.getGuaranteeFee();
							String flag2 = danReport2.getFlag();
							if (i != j) {
								if (danId1.equals(danId2)) {
									SanctionedReport danReportFinal = null;
									double totalGFee = gFee1 + gFee2;
									long totalAmount = amount1 + amount2;
									int totalCgpans = cgpans1 + cgpans2;

									if (flag1.equals("Y") && flag2.equals("N")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee1);
										double outstanding = totalGFee - gFee1;
										danReportFinal
												.setOutstanding(outstanding);

									} else if (flag1.equals("N")
											&& flag2.equals("Y")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee2);
										double outstanding = totalGFee - gFee2;
										danReportFinal
												.setOutstanding(outstanding);

									}
									setFlag = true;
									danRaisedArrayFinal.add(danReportFinal);

									danDetailsArray.remove(j);
									j--;
								} // end of if block
							} // end of verification(i!=j) block
						} // end of j loop

						if (!setFlag) {
							String flag = danReport1.getFlag();

							if (flag.equals("Y")) {
								double setGuaranteeFee = danReport1
										.getGuaranteeFee();
								double setGuaranteeFeePaid = danReport1
										.getGuaranteeFee();
								double outstanding = setGuaranteeFee
										- setGuaranteeFeePaid;
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							} else if (flag.equals("N")) {
								// double setGuaranteeFee =
								// danReport1.getGuaranteeFee();
								double setGuaranteeFeePaid = 0.0;
								double outstanding = danReport1
										.getGuaranteeFee();
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							}
							danRaisedArrayFinal.add(danReport1);
						} // end of if block
					} // end of i loop
					sanctionedResult.close();
					sanctionedResult = null;
					sanctionedStmt.close();
					sanctionedStmt = null;

				} // end of try block

				catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			if (startDate == null) {

				try {
					String query = "select m.MEM_BNK_ID || m.MEM_ZNE_ID, "
							+ " sum(NVL(v.TC_SANCTIONED_AMT,0)+NVL(v.WC_FB_LIMIT,0)+NVL(v.WC_NFB_LIMIT,0))"
							+ " ,count(dc.CGPAN), sum(dc.DCI_AMOUNT_RAISED),  "
							+ " dc.DCI_APPROPRIATION_FLAG from VIEW_APPL_AMOUNTS v, "
							+ " member_info m, application_detail a, dan_cgpan_info dc "
							+ " where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and "
							+ " a.APP_REF_NO = v.APPREF and a.CGPAN = dc.CGPAN and "
							+ " a.APP_GUAR_START_DATE_TIME <= ? and"
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID || m.MEM_ZNE_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) group by "
							+ " m.MEM_BNK_ID || m.MEM_ZNE_ID,"
							+ " dc.DCI_APPROPRIATION_FLAG";
					sanctionedStmt = connection.prepareStatement(query);
					sanctionedStmt.setDate(1, endDate); // Set endDate parameter
					sanctionedStmt.setString(2, memberId); // Set memberId
															// parameter
					sanctionedResult = sanctionedStmt.executeQuery();

					String danId = null;
					int applications = 0;
					double guaranteeFee = 0.0;
					long amount = 0;
					String danFlag = null;
					// double gfeeforN = 0.0;
					// double gfeeforY = 0.0;

					while (sanctionedResult.next()) {
						// Instantiate a SanctionedReport value object
						SanctionedReport sanctionedReport = new SanctionedReport();
						danId = sanctionedResult.getString(1);
						amount = sanctionedResult.getLong(2);
						applications = sanctionedResult.getInt(3);
						guaranteeFee = sanctionedResult.getDouble(4);
						danFlag = sanctionedResult.getString(5);

						sanctionedReport.setMliId(danId);
						sanctionedReport.setApplications(applications);
						sanctionedReport.setSanctionedAmount(amount);
						sanctionedReport.setGuaranteeFee(guaranteeFee);
						sanctionedReport.setFlag(danFlag);

						danDetailsArray.add(sanctionedReport);

					}

					for (int i = 0; i < danDetailsArray.size(); i++) {

						SanctionedReport danReport1 = new SanctionedReport();
						danReport1 = (SanctionedReport) danDetailsArray.get(i);
						String danId1 = danReport1.getMliId();
						long amount1 = danReport1.getSanctionedAmount();
						int cgpans1 = danReport1.getApplications();
						double gFee1 = danReport1.getGuaranteeFee();
						String flag1 = danReport1.getFlag();
						boolean setFlag = false;

						for (int j = 0; j < danDetailsArray.size(); j++) {

							SanctionedReport danReport2 = new SanctionedReport();
							danReport2 = (SanctionedReport) danDetailsArray
									.get(j);
							String danId2 = danReport2.getMliId();
							long amount2 = danReport2.getSanctionedAmount();
							int cgpans2 = danReport2.getApplications();
							double gFee2 = danReport2.getGuaranteeFee();
							String flag2 = danReport2.getFlag();
							if (i != j) {
								if (danId1.equals(danId2)) {
									SanctionedReport danReportFinal = null;
									double totalGFee = gFee1 + gFee2;
									long totalAmount = amount1 + amount2;
									int totalCgpans = cgpans1 + cgpans2;

									if (flag1.equals("Y") && flag2.equals("N")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee1);
										double outstanding = totalGFee - gFee1;
										danReportFinal
												.setOutstanding(outstanding);

									} else if (flag1.equals("N")
											&& flag2.equals("Y")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee2);
										double outstanding = totalGFee - gFee2;
										danReportFinal
												.setOutstanding(outstanding);

									}
									setFlag = true;
									danRaisedArrayFinal.add(danReportFinal);

									danDetailsArray.remove(j);
									j--;
								} // end of if block
							} // end of verification(i!=j) block
						} // end of j loop

						if (!setFlag) {
							String flag = danReport1.getFlag();

							if (flag.equals("Y")) {
								double setGuaranteeFee = danReport1
										.getGuaranteeFee();
								double setGuaranteeFeePaid = danReport1
										.getGuaranteeFee();
								double outstanding = setGuaranteeFee
										- setGuaranteeFeePaid;
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							} else if (flag.equals("N")) {
								// double setGuaranteeFee =
								// danReport1.getGuaranteeFee();
								double setGuaranteeFeePaid = 0.0;
								double outstanding = danReport1
										.getGuaranteeFee();
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							}
							danRaisedArrayFinal.add(danReport1);
						} // end of if block
					} // end of i loop
					sanctionedResult.close();
					sanctionedResult = null;
					sanctionedStmt.close();
					sanctionedStmt = null;

				} // end of try block

				catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "getSanctionedApplicationReportForZone",
				"Exited");
		return danRaisedArrayFinal;
	}

	public ArrayList getSanctionedApplicationReportForBank(
			java.sql.Date startDate, java.sql.Date endDate, String memberId,
			String checkValue) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getSanctionedApplicationReportForBank",
				"Entered");
		PreparedStatement sanctionedStmt;
		ResultSet sanctionedResult;
		Connection connection = DBConnection.getConnection();
		ArrayList danDetailsArray = new ArrayList();
		ArrayList danRaisedArrayFinal = new ArrayList();

		if (checkValue.equals("yes")) {
			if (startDate != null) {

				try {
					String query = "select m.MEM_BNK_ID, "
							+ " sum(NVL(v.TC_SANCTIONED_AMT,0)+NVL(v.WC_FB_LIMIT,0)+NVL(v.WC_NFB_LIMIT,0))"
							+ " ,count(dc.CGPAN), sum(dc.DCI_AMOUNT_RAISED),  "
							+ " dc.DCI_APPROPRIATION_FLAG from VIEW_APPL_AMOUNTS v, "
							+ " member_info m, application_detail a, dan_cgpan_info dc "
							+ " where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and "
							+ " a.APP_REF_NO = v.APPREF and a.CGPAN = dc.CGPAN and "
							+ " trunc(a.APP_APPROVED_DATE_TIME) between ? and ? and"
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) group by "
							+ " m.MEM_BNK_ID," + " dc.DCI_APPROPRIATION_FLAG";
					sanctionedStmt = connection.prepareStatement(query);
					sanctionedStmt.setDate(1, startDate); // Set startDate
															// parameter
					sanctionedStmt.setDate(2, endDate); // Set endDate parameter
					sanctionedStmt.setString(3, memberId); // Set memberId
															// parameter
					sanctionedResult = sanctionedStmt.executeQuery();

					String danId = null;
					int applications = 0;
					double guaranteeFee = 0.0;
					long amount = 0;
					String danFlag = null;
					// double gfeeforN = 0.0;
					// double gfeeforY = 0.0;

					while (sanctionedResult.next()) {
						// Instantiate a SanctionedReport value object
						SanctionedReport sanctionedReport = new SanctionedReport();
						danId = sanctionedResult.getString(1);
						amount = sanctionedResult.getLong(2);
						applications = sanctionedResult.getInt(3);
						guaranteeFee = sanctionedResult.getDouble(4);
						danFlag = sanctionedResult.getString(5);

						sanctionedReport.setMliId(danId);
						sanctionedReport.setApplications(applications);
						sanctionedReport.setSanctionedAmount(amount);
						sanctionedReport.setGuaranteeFee(guaranteeFee);
						sanctionedReport.setFlag(danFlag);

						danDetailsArray.add(sanctionedReport);

					}

					for (int i = 0; i < danDetailsArray.size(); i++) {

						SanctionedReport danReport1 = new SanctionedReport();
						danReport1 = (SanctionedReport) danDetailsArray.get(i);
						String danId1 = danReport1.getMliId();
						long amount1 = danReport1.getSanctionedAmount();
						int cgpans1 = danReport1.getApplications();
						double gFee1 = danReport1.getGuaranteeFee();
						String flag1 = danReport1.getFlag();
						boolean setFlag = false;

						for (int j = 0; j < danDetailsArray.size(); j++) {

							SanctionedReport danReport2 = new SanctionedReport();
							danReport2 = (SanctionedReport) danDetailsArray
									.get(j);
							String danId2 = danReport2.getMliId();
							long amount2 = danReport2.getSanctionedAmount();
							int cgpans2 = danReport2.getApplications();
							double gFee2 = danReport2.getGuaranteeFee();
							String flag2 = danReport2.getFlag();
							if (i != j) {
								if (danId1.equals(danId2)) {
									SanctionedReport danReportFinal = null;
									double totalGFee = gFee1 + gFee2;
									long totalAmount = amount1 + amount2;
									int totalCgpans = cgpans1 + cgpans2;

									if (flag1.equals("Y") && flag2.equals("N")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee1);
										double outstanding = totalGFee - gFee1;
										danReportFinal
												.setOutstanding(outstanding);

									} else if (flag1.equals("N")
											&& flag2.equals("Y")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee2);
										double outstanding = totalGFee - gFee2;
										danReportFinal
												.setOutstanding(outstanding);

									}
									setFlag = true;
									danRaisedArrayFinal.add(danReportFinal);

									danDetailsArray.remove(j);
									j--;
								} // end of if block
							} // end of verification(i!=j) block
						} // end of j loop

						if (!setFlag) {
							String flag = danReport1.getFlag();

							if (flag.equals("Y")) {
								double setGuaranteeFee = danReport1
										.getGuaranteeFee();
								double setGuaranteeFeePaid = danReport1
										.getGuaranteeFee();
								double outstanding = setGuaranteeFee
										- setGuaranteeFeePaid;
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							} else if (flag.equals("N")) {
								// double setGuaranteeFee =
								// danReport1.getGuaranteeFee();
								double setGuaranteeFeePaid = 0.0;
								double outstanding = danReport1
										.getGuaranteeFee();
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							}
							danRaisedArrayFinal.add(danReport1);
						} // end of if block
					} // end of i loop
					sanctionedResult.close();
					sanctionedResult = null;
					sanctionedStmt.close();
					sanctionedStmt = null;

				} // end of try block

				catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			if (startDate == null) {
				try {
					String query = "select m.MEM_BNK_ID, "
							+ " sum(NVL(v.TC_SANCTIONED_AMT,0)+NVL(v.WC_FB_LIMIT,0)+NVL(v.WC_NFB_LIMIT,0))"
							+ " ,count(dc.CGPAN), sum(dc.DCI_AMOUNT_RAISED),  "
							+ " dc.DCI_APPROPRIATION_FLAG from VIEW_APPL_AMOUNTS v, "
							+ " member_info m, application_detail a, dan_cgpan_info dc "
							+ " where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and "
							+ " a.APP_REF_NO = v.APPREF and a.CGPAN = dc.CGPAN and "
							+ " trunc(a.APP_APPROVED_DATE_TIME) <= ? and"
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) group by "
							+ " m.MEM_BNK_ID," + " dc.DCI_APPROPRIATION_FLAG";
					sanctionedStmt = connection.prepareStatement(query);
					sanctionedStmt.setDate(1, endDate); // Set endDate parameter
					sanctionedStmt.setString(2, memberId); // Set memberId
															// parameter
					sanctionedResult = sanctionedStmt.executeQuery();

					String danId = null;
					int applications = 0;
					double guaranteeFee = 0.0;
					long amount = 0;
					String danFlag = null;
					// double gfeeforN = 0.0;
					// double gfeeforY = 0.0;

					while (sanctionedResult.next()) {
						// Instantiate a SanctionedReport value object
						SanctionedReport sanctionedReport = new SanctionedReport();
						danId = sanctionedResult.getString(1);
						amount = sanctionedResult.getLong(2);
						applications = sanctionedResult.getInt(3);
						guaranteeFee = sanctionedResult.getDouble(4);
						danFlag = sanctionedResult.getString(5);

						sanctionedReport.setMliId(danId);
						sanctionedReport.setApplications(applications);
						sanctionedReport.setSanctionedAmount(amount);
						sanctionedReport.setGuaranteeFee(guaranteeFee);
						sanctionedReport.setFlag(danFlag);

						danDetailsArray.add(sanctionedReport);

					}

					for (int i = 0; i < danDetailsArray.size(); i++) {

						SanctionedReport danReport1 = new SanctionedReport();
						danReport1 = (SanctionedReport) danDetailsArray.get(i);
						String danId1 = danReport1.getMliId();
						long amount1 = danReport1.getSanctionedAmount();
						int cgpans1 = danReport1.getApplications();
						double gFee1 = danReport1.getGuaranteeFee();
						String flag1 = danReport1.getFlag();
						boolean setFlag = false;

						for (int j = 0; j < danDetailsArray.size(); j++) {

							SanctionedReport danReport2 = new SanctionedReport();
							danReport2 = (SanctionedReport) danDetailsArray
									.get(j);
							String danId2 = danReport2.getMliId();
							long amount2 = danReport2.getSanctionedAmount();
							int cgpans2 = danReport2.getApplications();
							double gFee2 = danReport2.getGuaranteeFee();
							String flag2 = danReport2.getFlag();
							if (i != j) {
								if (danId1.equals(danId2)) {
									SanctionedReport danReportFinal = null;
									double totalGFee = gFee1 + gFee2;
									long totalAmount = amount1 + amount2;
									int totalCgpans = cgpans1 + cgpans2;

									if (flag1.equals("Y") && flag2.equals("N")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee1);
										double outstanding = totalGFee - gFee1;
										danReportFinal
												.setOutstanding(outstanding);

									} else if (flag1.equals("N")
											&& flag2.equals("Y")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee2);
										double outstanding = totalGFee - gFee2;
										danReportFinal
												.setOutstanding(outstanding);

									}
									setFlag = true;
									danRaisedArrayFinal.add(danReportFinal);

									danDetailsArray.remove(j);
									j--;
								} // end of if block
							} // end of verification(i!=j) block
						} // end of j loop

						if (!setFlag) {
							String flag = danReport1.getFlag();

							if (flag.equals("Y")) {
								double setGuaranteeFee = danReport1
										.getGuaranteeFee();
								double setGuaranteeFeePaid = danReport1
										.getGuaranteeFee();
								double outstanding = setGuaranteeFee
										- setGuaranteeFeePaid;
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							} else if (flag.equals("N")) {
								// double setGuaranteeFee =
								// danReport1.getGuaranteeFee();
								double setGuaranteeFeePaid = 0.0;
								double outstanding = danReport1
										.getGuaranteeFee();
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							}
							danRaisedArrayFinal.add(danReport1);
						} // end of if block
					} // end of i loop
					sanctionedResult.close();
					sanctionedResult = null;
					sanctionedStmt.close();
					sanctionedStmt = null;

				} // end of try block

				catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (checkValue.equals("no")) {
			if (startDate != null) {

				try {
					String query = "select m.MEM_BNK_ID, "
							+ " sum(NVL(v.TC_SANCTIONED_AMT,0)+NVL(v.WC_FB_LIMIT,0)+NVL(v.WC_NFB_LIMIT,0))"
							+ " ,count(dc.CGPAN), sum(dc.DCI_AMOUNT_RAISED),  "
							+ " dc.DCI_APPROPRIATION_FLAG from VIEW_APPL_AMOUNTS v, "
							+ " member_info m, application_detail a, dan_cgpan_info dc "
							+ " where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and "
							+ " a.APP_REF_NO = v.APPREF and a.CGPAN = dc.CGPAN and "
							+ " trunc(a.APP_GUAR_START_DATE_TIME) between ? and ? and"
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) group by "
							+ " m.MEM_BNK_ID," + " dc.DCI_APPROPRIATION_FLAG";
					sanctionedStmt = connection.prepareStatement(query);
					sanctionedStmt.setDate(1, startDate); // Set startDate
															// parameter
					sanctionedStmt.setDate(2, endDate); // Set endDate parameter
					sanctionedStmt.setString(3, memberId); // Set memberId
															// parameter
					sanctionedResult = sanctionedStmt.executeQuery();

					String danId = null;
					int applications = 0;
					double guaranteeFee = 0.0;
					long amount = 0;
					String danFlag = null;
					// double gfeeforN = 0.0;
					// double gfeeforY = 0.0;

					while (sanctionedResult.next()) {
						// Instantiate a SanctionedReport value object
						SanctionedReport sanctionedReport = new SanctionedReport();
						danId = sanctionedResult.getString(1);
						amount = sanctionedResult.getLong(2);
						applications = sanctionedResult.getInt(3);
						guaranteeFee = sanctionedResult.getDouble(4);
						danFlag = sanctionedResult.getString(5);

						sanctionedReport.setMliId(danId);
						sanctionedReport.setApplications(applications);
						sanctionedReport.setSanctionedAmount(amount);
						sanctionedReport.setGuaranteeFee(guaranteeFee);
						sanctionedReport.setFlag(danFlag);

						danDetailsArray.add(sanctionedReport);

					}

					for (int i = 0; i < danDetailsArray.size(); i++) {

						SanctionedReport danReport1 = new SanctionedReport();
						danReport1 = (SanctionedReport) danDetailsArray.get(i);
						String danId1 = danReport1.getMliId();
						long amount1 = danReport1.getSanctionedAmount();
						int cgpans1 = danReport1.getApplications();
						double gFee1 = danReport1.getGuaranteeFee();
						String flag1 = danReport1.getFlag();
						boolean setFlag = false;

						for (int j = 0; j < danDetailsArray.size(); j++) {

							SanctionedReport danReport2 = new SanctionedReport();
							danReport2 = (SanctionedReport) danDetailsArray
									.get(j);
							String danId2 = danReport2.getMliId();
							long amount2 = danReport2.getSanctionedAmount();
							int cgpans2 = danReport2.getApplications();
							double gFee2 = danReport2.getGuaranteeFee();
							String flag2 = danReport2.getFlag();
							if (i != j) {
								if (danId1.equals(danId2)) {
									SanctionedReport danReportFinal = null;
									double totalGFee = gFee1 + gFee2;
									long totalAmount = amount1 + amount2;
									int totalCgpans = cgpans1 + cgpans2;

									if (flag1.equals("Y") && flag2.equals("N")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee1);
										double outstanding = totalGFee - gFee1;
										danReportFinal
												.setOutstanding(outstanding);

									} else if (flag1.equals("N")
											&& flag2.equals("Y")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee2);
										double outstanding = totalGFee - gFee2;
										danReportFinal
												.setOutstanding(outstanding);

									}
									setFlag = true;
									danRaisedArrayFinal.add(danReportFinal);

									danDetailsArray.remove(j);
									j--;
								} // end of if block
							} // end of verification(i!=j) block
						} // end of j loop

						if (!setFlag) {
							String flag = danReport1.getFlag();

							if (flag.equals("Y")) {
								double setGuaranteeFee = danReport1
										.getGuaranteeFee();
								double setGuaranteeFeePaid = danReport1
										.getGuaranteeFee();
								double outstanding = setGuaranteeFee
										- setGuaranteeFeePaid;
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							} else if (flag.equals("N")) {
								// double setGuaranteeFee =
								// danReport1.getGuaranteeFee();
								double setGuaranteeFeePaid = 0.0;
								double outstanding = danReport1
										.getGuaranteeFee();
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							}
							danRaisedArrayFinal.add(danReport1);
						} // end of if block
					} // end of i loop
					sanctionedResult.close();
					sanctionedResult = null;
					sanctionedStmt.close();
					sanctionedStmt = null;

				} // end of try block

				catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}

			if (startDate == null) {

				try {
					String query = "select m.MEM_BNK_ID, "
							+ " sum(NVL(v.TC_SANCTIONED_AMT,0)+NVL(v.WC_FB_LIMIT,0)+NVL(v.WC_NFB_LIMIT,0))"
							+ " ,count(dc.CGPAN), sum(dc.DCI_AMOUNT_RAISED),  "
							+ " dc.DCI_APPROPRIATION_FLAG from VIEW_APPL_AMOUNTS v, "
							+ " member_info m, application_detail a, dan_cgpan_info dc "
							+ " where m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ="
							+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID and "
							+ " a.APP_REF_NO = v.APPREF and a.CGPAN = dc.CGPAN and "
							+ " trunc(a.APP_GUAR_START_DATE_TIME) <= ? and"
							+ " LTRIM(RTRIM(UPPER(m.MEM_BNK_ID)))"
							+ " = LTRIM(RTRIM(UPPER(?))) group by "
							+ " m.MEM_BNK_ID," + " dc.DCI_APPROPRIATION_FLAG";
					sanctionedStmt = connection.prepareStatement(query);
					sanctionedStmt.setDate(1, endDate); // Set endDate parameter
					sanctionedStmt.setString(2, memberId); // Set memberId
															// parameter
					sanctionedResult = sanctionedStmt.executeQuery();

					String danId = null;
					int applications = 0;
					double guaranteeFee = 0.0;
					long amount = 0;
					String danFlag = null;
					// double gfeeforN = 0.0;
					// double gfeeforY = 0.0;

					while (sanctionedResult.next()) {
						// Instantiate a SanctionedReport value object
						SanctionedReport sanctionedReport = new SanctionedReport();
						danId = sanctionedResult.getString(1);
						amount = sanctionedResult.getLong(2);
						applications = sanctionedResult.getInt(3);
						guaranteeFee = sanctionedResult.getDouble(4);
						danFlag = sanctionedResult.getString(5);

						sanctionedReport.setMliId(danId);
						sanctionedReport.setApplications(applications);
						sanctionedReport.setSanctionedAmount(amount);
						sanctionedReport.setGuaranteeFee(guaranteeFee);
						sanctionedReport.setFlag(danFlag);

						danDetailsArray.add(sanctionedReport);

					}

					for (int i = 0; i < danDetailsArray.size(); i++) {

						SanctionedReport danReport1 = new SanctionedReport();
						danReport1 = (SanctionedReport) danDetailsArray.get(i);
						String danId1 = danReport1.getMliId();
						long amount1 = danReport1.getSanctionedAmount();
						int cgpans1 = danReport1.getApplications();
						double gFee1 = danReport1.getGuaranteeFee();
						String flag1 = danReport1.getFlag();
						boolean setFlag = false;

						for (int j = 0; j < danDetailsArray.size(); j++) {

							SanctionedReport danReport2 = new SanctionedReport();
							danReport2 = (SanctionedReport) danDetailsArray
									.get(j);
							String danId2 = danReport2.getMliId();
							long amount2 = danReport2.getSanctionedAmount();
							int cgpans2 = danReport2.getApplications();
							double gFee2 = danReport2.getGuaranteeFee();
							String flag2 = danReport2.getFlag();
							if (i != j) {
								if (danId1.equals(danId2)) {
									SanctionedReport danReportFinal = null;
									double totalGFee = gFee1 + gFee2;
									long totalAmount = amount1 + amount2;
									int totalCgpans = cgpans1 + cgpans2;

									if (flag1.equals("Y") && flag2.equals("N")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee1);
										double outstanding = totalGFee - gFee1;
										danReportFinal
												.setOutstanding(outstanding);

									} else if (flag1.equals("N")
											&& flag2.equals("Y")) {
										danReportFinal = new SanctionedReport();
										danReportFinal.setMliId(danReport1
												.getMliId());
										danReportFinal
												.setSanctionedAmount(totalAmount);
										danReportFinal
												.setApplications(totalCgpans);
										danReportFinal
												.setGuaranteeFee(totalGFee);
										danReportFinal
												.setGuaranteeFeePaid(gFee2);
										double outstanding = totalGFee - gFee2;
										danReportFinal
												.setOutstanding(outstanding);

									}
									setFlag = true;
									danRaisedArrayFinal.add(danReportFinal);

									danDetailsArray.remove(j);
									j--;
								} // end of if block
							} // end of verification(i!=j) block
						} // end of j loop

						if (!setFlag) {
							String flag = danReport1.getFlag();

							if (flag.equals("Y")) {
								double setGuaranteeFee = danReport1
										.getGuaranteeFee();
								double setGuaranteeFeePaid = danReport1
										.getGuaranteeFee();
								double outstanding = setGuaranteeFee
										- setGuaranteeFeePaid;
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							} else if (flag.equals("N")) {
								// double setGuaranteeFee =
								// danReport1.getGuaranteeFee();
								double setGuaranteeFeePaid = 0.0;
								double outstanding = danReport1
										.getGuaranteeFee();
								danReport1.setMliId(danReport1.getMliId());
								danReport1.setSanctionedAmount(danReport1
										.getSanctionedAmount());
								danReport1.setApplications(danReport1
										.getApplications());
								danReport1.setGuaranteeFee(danReport1
										.getGuaranteeFee());
								danReport1
										.setGuaranteeFeePaid(setGuaranteeFeePaid);
								danReport1.setOutstanding(outstanding);

							}
							danRaisedArrayFinal.add(danReport1);
						} // end of if block
					} // end of i loop
					sanctionedResult.close();
					sanctionedResult = null;
					sanctionedStmt.close();
					sanctionedStmt = null;

				} // end of try block

				catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "getSanctionedApplicationReportForBank",
				"Exited");
		return danRaisedArrayFinal;
	}

	/* ------------------------------------ */

	/**
	 * 
	 * @param cgpan
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ApplicationReport applicationReportNew(String cgpan)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "applicationReport", "Entered");
		ApplicationReport appReport = null;
		ResultSet applicationResult;
		PreparedStatement applicationStmt = null;
		Connection connection = DBConnection.getConnection();
		// String active = "A";

		if (cgpan != null) {
			try {
				String query = "select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ "s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ "s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ "s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ "s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ "p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ "p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER,  "
						+ "p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ "a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ "a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR, s.BID,a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE,S.SSI_TYPE_OF_ACTIVITY,APP_EXPIRY_DT,S.SSI_REFERENCE_NUMBER,SC.SCM_NAME,DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT)  "
						+ " from ssi_detail s, promoter_detail p, application_detail a,SCHEME_MASTER SC where "
						+ " LTRIM(RTRIM(UPPER(a.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER "
						+ " and s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER AND A.SCM_ID=SC.SCM_ID";
				// System.out.println("query-success2:"+query);
				applicationStmt = connection.prepareStatement(query);
				applicationStmt.setString(1, cgpan);
				applicationResult = applicationStmt.executeQuery();
				appReport = new ApplicationReport();

				while (applicationResult.next()) {
					appReport.setSsiName(applicationResult.getString(1));
					appReport.setAddress(applicationResult.getString(2));
					appReport.setDistrict(applicationResult.getString(3));
					appReport.setState(applicationResult.getString(4));
					appReport.setUnitType(applicationResult.getString(5));
					appReport.setRegistrationNumber(applicationResult
							.getString(6));
					appReport.setStartDate(applicationResult.getDate(7));
					appReport.setEmployees(applicationResult.getInt(8));
					appReport.setStatus(applicationResult.getString(9));
					appReport.setOutstanding(applicationResult.getDouble(10));
					appReport.setIndustryType(applicationResult.getString(11));
					appReport.setTurnover(applicationResult.getDouble(12));
					appReport.setExport(applicationResult.getDouble(13));
					appReport.setChiefPromoter(applicationResult.getString(14));
					appReport.setItpan(applicationResult.getString(15));
					appReport.setGender(applicationResult.getString(16));
					appReport.setOthers(applicationResult.getString(17));
					appReport.setMemberId(applicationResult.getString(19));
					appReport.setCgpan(applicationResult.getString(18));
					appReport.setReferenceNumber(applicationResult
							.getString(25));
					appReport.setApplicationDate(applicationResult.getDate(21));
					appReport.setRemarks(applicationResult.getString(22));
					appReport.setStatus(applicationResult.getString(23));
					appReport.setLoanType(applicationResult.getString(24));
					appReport
							.setIndustrySector(applicationResult.getString(26));
					appReport.setBid(applicationResult.getString(27));
					appReport.setProjectOutlay(applicationResult.getDouble(28));
					appReport.setCity(applicationResult.getString(29));
					appReport
							.setTypeOfActivity(applicationResult.getString(30));
					appReport.setExpiryDate(applicationResult.getDate(31));
					appReport.setSsiReferenceNumber(applicationResult
							.getString(32));
					appReport.setAppSubsidySchemeName(applicationResult
							.getString(33));
					appReport.setAppApprovedAmount(applicationResult
							.getString(34));
				}

				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

			} catch (SQLException exception) {

				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		Log.log(Log.INFO, "ReportDAO", "applicationReport", "Exited");
		return appReport;
	}

	/* ----------------------------------- */
	public ApplicationReport applicationReport(String cgpan, String ssi)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "applicationReport", "Entered");
		ApplicationReport appReport = null;
		ResultSet applicationResult;
		PreparedStatement applicationStmt = null;
		Connection connection = DBConnection.getConnection();
		// String active = "A";

		if (((ssi == null) || (ssi.equals(""))) && (cgpan != null)) {
			try {
				String query = "select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER,  p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE, a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR, s.BID,a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE,S.SSI_TYPE_OF_ACTIVITY,APP_EXPIRY_DT,a.APP_DC_HANDICRAFT_ACC_FLAG,a.APP_DC_HANDICRAFT_REIMB,a.APP_DC_ICARD_NO,a.APP_DC_ICARD_ISSUE_DATE,s.SSI_MICRO_ENTERPRISE   from ssi_detail s, promoter_detail p, application_detail a where  LTRIM(RTRIM(UPPER(a.CGPAN))) = LTRIM(RTRIM(UPPER(?)))  and s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER  and s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER";
				// System.out.println("query 1===43352===="+query);
				applicationStmt = connection.prepareStatement(query);
				applicationStmt.setString(1, cgpan);
				applicationResult = applicationStmt.executeQuery();
				appReport = new ApplicationReport();

				while (applicationResult.next()) {
					appReport.setSsiName(applicationResult.getString(1));
					appReport.setAddress(applicationResult.getString(2));
					appReport.setDistrict(applicationResult.getString(3));
					appReport.setState(applicationResult.getString(4));
					appReport.setUnitType(applicationResult.getString(5));
					appReport.setRegistrationNumber(applicationResult
							.getString(6));
					appReport.setStartDate(applicationResult.getDate(7));
					appReport.setEmployees(applicationResult.getInt(8));
					appReport.setStatus(applicationResult.getString(9));
					appReport.setOutstanding(applicationResult.getDouble(10));
					appReport.setIndustryType(applicationResult.getString(11));
					appReport.setTurnover(applicationResult.getDouble(12));
					appReport.setExport(applicationResult.getDouble(13));
					appReport.setChiefPromoter(applicationResult.getString(14));
					appReport.setItpan(applicationResult.getString(15));
					appReport.setGender(applicationResult.getString(16));
					appReport.setOthers(applicationResult.getString(17));
					appReport.setMemberId(applicationResult.getString(19));
					appReport.setCgpan(applicationResult.getString(18));
					appReport.setReferenceNumber(applicationResult
							.getString(25));
					appReport.setApplicationDate(applicationResult.getDate(21));
					appReport.setRemarks(applicationResult.getString(22));
					appReport.setStatus(applicationResult.getString(23));
					appReport.setLoanType(applicationResult.getString(24));
					appReport
							.setIndustrySector(applicationResult.getString(26));
					appReport.setBid(applicationResult.getString(27));
					appReport.setProjectOutlay(applicationResult.getDouble(28));
					appReport.setCity(applicationResult.getString(29));
					appReport
							.setTypeOfActivity(applicationResult.getString(30));
					appReport.setExpiryDate(applicationResult.getDate(31));
					appReport.setHandiCraftsAccFlag(applicationResult
							.getString(32));
					appReport.setDcHandicraftsReimb(applicationResult
							.getString(33));
					appReport.setAppDcIcardNo(applicationResult.getString(34));
					appReport.setAppDcIcardIssueDate(applicationResult
							.getDate(35));
					if (applicationResult.getString(36) == null)
						appReport.setMicroFlag("Not Capture");
					else
						appReport.setMicroFlag(applicationResult.getString(36));

				}

				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query1 = " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ "t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION, "
						+ "t.TRM_SUBSIDY_EQUITY_SUPPORT,  t.TRM_OTHERS, "
						+ "a.APP_PROJECT_OUTLAY,  t.TRM_REPAYMENT_MORATORIUM, "
						+ "t.TRM_FIRST_INSTALLMENT_DUE_DT,  t.TRM_NO_OF_INSTALLMENTS, "
						+ "t.TRM_REPAYMENT_PERIODICITY,TRM_TENURE from "
						+ "term_loan_Detail t , application_Detail a "
						+ "where LTRIM(RTRIM(UPPER(t.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and t.APP_REF_NO = a.APP_REF_NO ";
				// System.out.println("query1:2====43416======="+query1);
				applicationStmt = connection.prepareStatement(query1);
				applicationStmt.setString(1, cgpan);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					appReport.setTcSanctionedOn(applicationResult.getDate(2));
					appReport.setTcSanctioned(applicationResult.getDouble(1));
					appReport.setTcRate(applicationResult.getDouble(3));
					appReport.setTcPlr(applicationResult.getDouble(4));
					appReport.setTcPromoterContribution(applicationResult
							.getDouble(5));
					appReport.setTcSubsidy(applicationResult.getDouble(6));
					appReport.setTcEquity(applicationResult.getDouble(7));
					appReport.setTcProjectCost(applicationResult.getDouble(8));
					appReport.setRepaymentMoratorium(applicationResult
							.getInt(9));
					appReport.setFirstInstallmentDueDate(applicationResult
							.getDate(10));
					appReport.setNumberOfInstallments(applicationResult
							.getInt(11));
					int repayment = applicationResult.getInt(12);
					if (repayment == 0) {
						appReport.setRepaymentPeriodicity("");
					}
					if (repayment == 1) {
						appReport.setRepaymentPeriodicity("Monthly");
					}
					if (repayment == 2) {
						appReport.setRepaymentPeriodicity("Quarterly");
					}
					if (repayment == 3) {
						appReport.setRepaymentPeriodicity("Half yearly");
					}
					appReport.setTcTenure(applicationResult.getInt(13));
					// applicationArray.add(appReport);
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query2 = "select t.WCP_FB_LIMIT_SANCTIONED, "
						+ "t.WCP_FB_LIMIT_SANCTIONED_DT, t.WCP_NFB_LIMIT_SANCTIONED,  "
						+ "t.WCP_NFB_LIMIT_SANCTIONED_DT, t.WCP_INTEREST, t.WCP_PLR,  "
						+ "t.WCP_PROMOTERS_CONTRIBUTION, t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS, "
						+ "a.APP_PROJECT_OUTLAY,NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0)+  "
						+ "NVL(tc.WCO_FB_INTEREST_OUTSTAND_AMT,0),  "
						+ "NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0)+NVL(tc.WCO_NFB_COMM_OUTSTAND_AMT,0),WCP_TENURE "
						+ "from working_capital_Detail t, wc_outstanding_detail tc, "
						+ "application_Detail a  "
						+ "where LTRIM(RTRIM(UPPER(tc.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ "and t.APP_REF_NO = a.APP_REF_NO "
						+ "and t.APP_REF_NO = tc.APP_REF_NO(+)";
				// System.out.println("query2:3======43467===="+query2);
				applicationStmt = connection.prepareStatement(query2);
				applicationStmt.setString(1, cgpan);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					appReport.setWcFbSanctioned(applicationResult.getDouble(1));
					appReport.setWcFbSanctionedOn(applicationResult.getDate(2));
					appReport
							.setWcNfbSanctioned(applicationResult.getDouble(3));
					appReport
							.setWcNfbSanctionedOn(applicationResult.getDate(4));
					appReport.setWcInterest(applicationResult.getDouble(5));
					appReport.setWcPlr(applicationResult.getDouble(6));
					appReport.setWcPromoterContribution(applicationResult
							.getDouble(7));
					appReport.setWcSubsidy(applicationResult.getDouble(8));
					appReport.setWcEquity(applicationResult.getDouble(9));
					appReport.setWcProjectCost(applicationResult.getDouble(10));
					appReport.setWcFbPrincipalOutstanding(applicationResult
							.getDouble(11));
					appReport.setWcNfbPrincipalOutstanding(applicationResult
							.getDouble(12));
					appReport.setWcTenure(applicationResult.getInt(13));
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query3 = "select d.DBR_AMOUNT, d.DBR_DT, d.DBR_FINAL_DISBURSEMENT_FLAG "
						+ " from disbursement_detail d, application_Detail a where "
						+ " LTRIM(RTRIM(UPPER(d.CGPAN))) = LTRIM(RTRIM(UPPER(?))) and d.CGPAN = "
						+ " a.CGPAN and d.DBR_DT = (select max(DBR_DT) "
						+ " from disbursement_detail d where LTRIM(RTRIM(UPPER(d.CGPAN))) = "
						+ " LTRIM(RTRIM(UPPER(?))))";
				// System.out.println("query3:4===43500==="+query3);
				applicationStmt = connection.prepareStatement(query3);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, cgpan);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					appReport.setDisbursementAmount(applicationResult
							.getDouble(1));
					appReport.setDisbursementDate(applicationResult.getDate(2));
					appReport.setFinalDisbursement(applicationResult
							.getString(3));

				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query4 = " select tc.TCO_OUTSTANDING_AMOUNT from TC_OUTSTANDING_DETAIL tc, "
						+ " application_Detail a   where tc.CGPAN = ? and tc.tco_outstanding_on_dt"
						+ " =(select max(tco_outstanding_on_dt) from TC_OUTSTANDING_DETAIL where "
						+ " CGPAN = ?) and  tc.APP_REF_NO = a.APP_REF_NO";
				// System.out.println("query4:5====43524===="+query4);
				// System.out.println(query3);
				applicationStmt = connection.prepareStatement(query4);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, cgpan);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					// System.out.println("-------TC -Outstanding---------");
					appReport.setTcOutstanding(applicationResult.getDouble(1));
					// System.out.println(applicationResult.getDouble(1));
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				// Diksha 06/11/2017

				String query5 = "SELECT MIN(NVL(p.PMR_BANK_ACCOUNT_NO,'NA')) AS PMR_BANK_ACCOUNT_NO"
						+ " FROM PROMOTER_DETAIL p, application_detail a, SSI_DETAIL S"
						+ " WHERE a.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER"
						+ " AND A.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER"
						+ " AND (a.cgpan = '" + cgpan + "')";

				// System.out.println("Query5:6===43552====="+query5);
				applicationStmt = connection.prepareStatement(query5);
				// applicationStmt.setString(1, cgpan);
				// applicationStmt.setString(2, cgpan);
				applicationResult = applicationStmt.executeQuery();
				// System.out.println("Query:"+query5);

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					// System.out.println("-------TC -Outstanding---------");
					appReport.setPmrBankAccNo(applicationResult.getString(1));
					// System.out.println(applicationResult.getDouble(1));
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				// end diksha
//sayali added---------------
				String query6 = "SELECT MAX (REVIVAL_DATE),"
                               +" CASE WHEN MAX (REVIVAL_DATE) IS NOT NULL THEN 'Y' ELSE 'N' END "
                               +" AS STATUS "
                               +" FROM revival_cgpan_data WHERE LTRIM(RTRIM(UPPER(CGPAN)))= LTRIM(RTRIM(UPPER(?)))";

				// System.out.println("Query5:6===43552====="+query5);
				 applicationStmt = connection.prepareStatement(query6);
				 applicationStmt.setString(1, cgpan);
				// applicationStmt.setString(2, cgpan);
				 applicationResult = applicationStmt.executeQuery();
				// System.out.println("Query:"+query5);

				 while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					  appReport.setRevivalDate(applicationResult.getDate(1));
				      System.out.println( "Date" +applicationResult.getString(1));
					  appReport.setRevivalStatus(applicationResult.getString(2));
					 System.out.println( "Status"  +applicationResult.getString(2));
				
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;
				
				
//end by sayali
				// Diksha 06/11/2017

			} catch (SQLException exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else {
			try {
				String query = "select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER,  "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR, s.BID,a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE,S.SSI_TYPE_OF_ACTIVITY,a.APP_DC_HANDICRAFT_ACC_FLAG,a.APP_DC_HANDICRAFT_REIMB,a.APP_DC_ICARD_NO,a.APP_DC_ICARD_ISSUE_DATE "
						+ " from ssi_detail s, promoter_detail p, application_detail a where "
						+ " LTRIM(RTRIM(UPPER(a.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
						+ " and s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER "
						+ " and s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER";
				// System.out.println("query-0:"+query);
				applicationStmt = connection.prepareStatement(query);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();
				appReport = new ApplicationReport();

				while (applicationResult.next()) {
					appReport.setSsiName(applicationResult.getString(1));
					appReport.setAddress(applicationResult.getString(2));
					appReport.setDistrict(applicationResult.getString(3));
					appReport.setState(applicationResult.getString(4));
					appReport.setUnitType(applicationResult.getString(5));
					appReport.setRegistrationNumber(applicationResult
							.getString(6));
					appReport.setStartDate(applicationResult.getDate(7));
					appReport.setEmployees(applicationResult.getInt(8));
					appReport.setStatus(applicationResult.getString(9));
					appReport.setOutstanding(applicationResult.getDouble(10));
					appReport.setIndustryType(applicationResult.getString(11));
					appReport.setTurnover(applicationResult.getDouble(12));
					appReport.setExport(applicationResult.getDouble(13));
					appReport.setChiefPromoter(applicationResult.getString(14));
					appReport.setItpan(applicationResult.getString(15));
					appReport.setGender(applicationResult.getString(16));
					appReport.setOthers(applicationResult.getString(17));
					appReport.setMemberId(applicationResult.getString(19));
					appReport.setCgpan(applicationResult.getString(18));
					appReport.setReferenceNumber(applicationResult
							.getString(25));
					appReport.setApplicationDate(applicationResult.getDate(21));
					appReport.setRemarks(applicationResult.getString(22));
					appReport.setStatus(applicationResult.getString(23));
					appReport.setLoanType(applicationResult.getString(24));
					appReport
							.setIndustrySector(applicationResult.getString(26));
					appReport.setBid(applicationResult.getString(27));
					appReport.setProjectOutlay(applicationResult.getDouble(28));
					appReport.setCity(applicationResult.getString(29));
					appReport
							.setTypeOfActivity(applicationResult.getString(30));
					appReport.setHandiCraftsAccFlag(applicationResult
							.getString(31));
					appReport.setDcHandicraftsReimb(applicationResult
							.getString(32));
					appReport.setAppDcIcardNo(applicationResult.getString(33));
					appReport.setAppDcIcardIssueDate(applicationResult
							.getDate(34));
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query1 = " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ " t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION, "
						+ " t.TRM_SUBSIDY_EQUITY_SUPPORT,  t.TRM_OTHERS, "
						+ " a.APP_PROJECT_OUTLAY,  t.TRM_REPAYMENT_MORATORIUM, "
						+ " t.TRM_FIRST_INSTALLMENT_DUE_DT,  t.TRM_NO_OF_INSTALLMENTS, "
						+ " t.TRM_REPAYMENT_PERIODICITY,TRM_TENURE from "
						+ " term_loan_Detail t , application_Detail a, ssi_Detail s "
						+ " where LTRIM(RTRIM(UPPER(t.CGPAN))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
						+ " and t.APP_REF_NO = a.APP_REF_NO "
						+ " and a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER";
				// System.out.println("query-1:"+query1);
				applicationStmt = connection.prepareStatement(query1);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					appReport.setTcSanctionedOn(applicationResult.getDate(2));
					appReport.setTcSanctioned(applicationResult.getDouble(1));
					appReport.setTcRate(applicationResult.getDouble(3));
					appReport.setTcPlr(applicationResult.getDouble(4));
					appReport.setTcPromoterContribution(applicationResult
							.getDouble(5));
					appReport.setTcSubsidy(applicationResult.getDouble(6));
					appReport.setTcEquity(applicationResult.getDouble(7));
					appReport.setTcProjectCost(applicationResult.getDouble(8));
					appReport.setRepaymentMoratorium(applicationResult
							.getInt(9));
					appReport.setFirstInstallmentDueDate(applicationResult
							.getDate(10));
					appReport.setNumberOfInstallments(applicationResult
							.getInt(11));
					int repayment = applicationResult.getInt(12);
					if (repayment == 0) {
						appReport.setRepaymentPeriodicity("");
					}
					if (repayment == 1) {
						appReport.setRepaymentPeriodicity("Monthly");
					}
					if (repayment == 2) {
						appReport.setRepaymentPeriodicity("Quarterly");
					}
					if (repayment == 3) {
						appReport.setRepaymentPeriodicity("Half yearly");
					}
					appReport.setTcTenure(applicationResult.getInt(13));
					// applicationArray.add(appReport);
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query2 = "select t.WCP_FB_LIMIT_SANCTIONED, "
						+ " t.WCP_FB_LIMIT_SANCTIONED_DT, t.WCP_NFB_LIMIT_SANCTIONED,  "
						+ " t.WCP_NFB_LIMIT_SANCTIONED_DT, t.WCP_INTEREST, t.WCP_PLR,  "
						+ " t.WCP_PROMOTERS_CONTRIBUTION, t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS, "
						+ " a.APP_PROJECT_OUTLAY,NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0)+  "
						+ " NVL(tc.WCO_FB_INTEREST_OUTSTAND_AMT,0),  "
						+ " NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0)+NVL(tc.WCO_NFB_COMM_OUTSTAND_AMT,0),WCP_TENURE "
						+ " from working_capital_Detail t, wc_outstanding_detail tc, "
						+ " application_Detail a, ssi_detail s  "
						+ " where LTRIM(RTRIM(UPPER(t.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
						+ " and t.APP_REF_NO = a.APP_REF_NO "
						+ " and t.APP_REF_NO = tc.APP_REF_NO(+)"
						+ " and a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER";
				// System.out.println("query-2:"+query2);
				applicationStmt = connection.prepareStatement(query2);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					appReport.setWcFbSanctioned(applicationResult.getDouble(1));
					appReport.setWcFbSanctionedOn(applicationResult.getDate(2));
					appReport
							.setWcNfbSanctioned(applicationResult.getDouble(3));
					appReport
							.setWcNfbSanctionedOn(applicationResult.getDate(4));
					appReport.setWcInterest(applicationResult.getDouble(5));
					appReport.setWcPlr(applicationResult.getDouble(6));
					appReport.setWcPromoterContribution(applicationResult
							.getDouble(7));
					appReport.setWcSubsidy(applicationResult.getDouble(8));
					appReport.setWcEquity(applicationResult.getDouble(9));
					appReport.setWcProjectCost(applicationResult.getDouble(10));
					appReport.setWcFbPrincipalOutstanding(applicationResult
							.getDouble(11));
					appReport.setWcNfbPrincipalOutstanding(applicationResult
							.getDouble(12));
					appReport.setWcTenure(applicationResult.getInt(13));
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query3 = "select d.DBR_AMOUNT, d.DBR_DT, d.DBR_FINAL_DISBURSEMENT_FLAG "
						+ " from disbursement_detail d, application_Detail a, ssi_detail s where "
						+ " LTRIM(RTRIM(UPPER(d.CGPAN))) = LTRIM(RTRIM(UPPER(?))) and d.CGPAN = "
						+ " a.CGPAN and  d.DBR_DT = (select max(DBR_DT) "
						+ " from disbursement_detail d where LTRIM(RTRIM(UPPER(d.CGPAN))) = "
						+ " LTRIM(RTRIM(UPPER(?)))) and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME)))"
						+ " like LTRIM(RTRIM(UPPER(?))) and a.SSI_REFERENCE_NUMBER = "
						+ " s.SSI_REFERENCE_NUMBER";
				// System.out.println("query-3:"+query3);

				applicationStmt = connection.prepareStatement(query3);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, cgpan);
				applicationStmt.setString(3, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					appReport.setDisbursementAmount(applicationResult
							.getDouble(1));
					appReport.setDisbursementDate(applicationResult.getDate(2));
					appReport.setFinalDisbursement(applicationResult
							.getString(3));

				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query4 = " select tc.TCO_OUTSTANDING_AMOUNT from TC_OUTSTANDING_DETAIL tc, "
						+ " application_Detail a, ssi_Detail s   where tc.CGPAN = ? and"
						+ "  tc.tco_outstanding_on_dt =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL where CGPAN = ?) and  tc.APP_REF_NO = a.APP_REF_NO  "
						+ " and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
						+ " and a.SSI_REFERENCE_NUMBER =  s.SSI_REFERENCE_NUMBER";

				// System.out.println("query-4:"+query4);
				applicationStmt = connection.prepareStatement(query4);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, cgpan);
				applicationStmt.setString(3, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					appReport.setTcOutstanding(applicationResult.getDouble(1));
					// System.out.println(applicationResult.getDouble(1));
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

		//added by sayali		
				String query5 = " SELECT MAX (r.REVIVAL_DATE),"
     +"  CASE WHEN MAX (r.REVIVAL_DATE) IS NOT NULL THEN 'Y' ELSE 'N' END AS STATUS"
     +" FROM revival_cgpan_data r,application_Detail a, ssi_Detail s "
     +" WHERE LTRIM(RTRIM(UPPER(r.CGPAN)))= LTRIM(RTRIM(UPPER(?)))"
     +" and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?)))"
     +" and a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER";

			// System.out.println("query-4:"+query4);
			applicationStmt = connection.prepareStatement(query5);
			applicationStmt.setString(1, cgpan);
			applicationStmt.setString(3, "%" + ssi + "%");
			applicationResult = applicationStmt.executeQuery();

			while (applicationResult.next()) {
				 appReport.setRevivalDate(applicationResult.getDate(1));
			     System.out.println( "Date" +applicationResult.getString(1));
				 appReport.setRevivalStatus(applicationResult.getString(2));
				 System.out.println( "Status"  +applicationResult.getString(2));
			}
			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;
				
				
			} catch (SQLException exception) {

				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		Log.log(Log.INFO, "ReportDAO", "applicationReport", "Exited");
		return appReport;
	}

	public ApplicationReport applicationReportForMember(String cgpan,
			String ssi, String memberId) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "applicationReportForMember", "Entered");
		ApplicationReport appReport = null;
		ResultSet applicationResult;
		PreparedStatement applicationStmt = null;
		Connection connection = DBConnection.getConnection();
		// String active = "A";

		if (((ssi == null) || (ssi.equals(""))) && (cgpan != null)) {
			try {
				String query = "select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ "s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ "s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ "s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ "s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ "p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ "p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER,  "
						+ "p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ "a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ "a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR, s.BID,a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE,s.SSI_TYPE_OF_ACTIVITY,APP_EXPIRY_DT,a.APP_DC_HANDICRAFT_ACC_FLAG,a.APP_DC_HANDICRAFT_REIMB,a.APP_DC_ICARD_NO,a.APP_DC_ICARD_ISSUE_DATE  "
						+ "from ssi_detail s, promoter_detail p, application_detail a where "
						+ "LTRIM(RTRIM(UPPER(a.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ "and a.MEM_BNK_ID = ? "
						+ "and s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER "
						+ "and s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER";

				applicationStmt = connection.prepareStatement(query);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, memberId);
				applicationResult = applicationStmt.executeQuery();
				appReport = new ApplicationReport();

				while (applicationResult.next()) {
					appReport.setSsiName(applicationResult.getString(1));
					appReport.setAddress(applicationResult.getString(2));
					appReport.setDistrict(applicationResult.getString(3));
					appReport.setState(applicationResult.getString(4));
					appReport.setUnitType(applicationResult.getString(5));
					appReport.setRegistrationNumber(applicationResult
							.getString(6));
					appReport.setStartDate(applicationResult.getDate(7));
					appReport.setEmployees(applicationResult.getInt(8));
					appReport.setStatus(applicationResult.getString(9));
					appReport.setOutstanding(applicationResult.getDouble(10));
					appReport.setIndustryType(applicationResult.getString(11));
					appReport.setTurnover(applicationResult.getDouble(12));
					appReport.setExport(applicationResult.getDouble(13));
					appReport.setChiefPromoter(applicationResult.getString(14));
					appReport.setItpan(applicationResult.getString(15));
					appReport.setGender(applicationResult.getString(16));
					appReport.setOthers(applicationResult.getString(17));
					appReport.setMemberId(applicationResult.getString(19));
					appReport.setCgpan(applicationResult.getString(18));
					appReport.setReferenceNumber(applicationResult
							.getString(25));
					appReport.setApplicationDate(applicationResult.getDate(21));
					appReport.setRemarks(applicationResult.getString(22));
					appReport.setStatus(applicationResult.getString(23));
					appReport.setLoanType(applicationResult.getString(24));
					appReport
							.setIndustrySector(applicationResult.getString(26));
					appReport.setBid(applicationResult.getString(27));
					appReport.setProjectOutlay(applicationResult.getDouble(28));
					appReport.setCity(applicationResult.getString(29));
					appReport
							.setTypeOfActivity(applicationResult.getString(30));
					appReport.setExpiryDate(applicationResult.getDate(31));
					appReport.setHandiCraftsAccFlag(applicationResult
							.getString(32));
					appReport.setDcHandicraftsReimb(applicationResult
							.getString(33));
					appReport.setAppDcIcardNo(applicationResult.getString(34));
					appReport.setAppDcIcardIssueDate(applicationResult
							.getDate(35));
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query1 = " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ "t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION, "
						+ "t.TRM_SUBSIDY_EQUITY_SUPPORT,  t.TRM_OTHERS, "
						+ "a.APP_PROJECT_OUTLAY,  t.TRM_REPAYMENT_MORATORIUM, "
						+ "t.TRM_FIRST_INSTALLMENT_DUE_DT,  t.TRM_NO_OF_INSTALLMENTS, "
						+ "t.TRM_REPAYMENT_PERIODICITY,TRM_TENURE from "
						+ "term_loan_Detail t , application_Detail a "
						+ "where LTRIM(RTRIM(UPPER(t.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ "and a.MEM_BNK_ID  = ? "
						+ "and t.APP_REF_NO = a.APP_REF_NO ";
				applicationStmt = connection.prepareStatement(query1);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, memberId);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					appReport.setTcSanctionedOn(applicationResult.getDate(2));
					appReport.setTcSanctioned(applicationResult.getDouble(1));
					appReport.setTcRate(applicationResult.getDouble(3));
					appReport.setTcPlr(applicationResult.getDouble(4));
					appReport.setTcPromoterContribution(applicationResult
							.getDouble(5));
					appReport.setTcSubsidy(applicationResult.getDouble(6));
					appReport.setTcEquity(applicationResult.getDouble(7));
					appReport.setTcProjectCost(applicationResult.getDouble(8));
					appReport.setRepaymentMoratorium(applicationResult
							.getInt(9));
					appReport.setFirstInstallmentDueDate(applicationResult
							.getDate(10));
					appReport.setNumberOfInstallments(applicationResult
							.getInt(11));
					int repayment = applicationResult.getInt(12);
					if (repayment == 0) {
						appReport.setRepaymentPeriodicity("");
					}
					if (repayment == 1) {
						appReport.setRepaymentPeriodicity("Monthly");
					}
					if (repayment == 2) {
						appReport.setRepaymentPeriodicity("Quarterly");
					}
					if (repayment == 3) {
						appReport.setRepaymentPeriodicity("Half yearly");
					}
					appReport.setTcTenure(applicationResult.getInt(13));
					// applicationArray.add(appReport);
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query2 = "select t.WCP_FB_LIMIT_SANCTIONED, "
						+ "t.WCP_FB_LIMIT_SANCTIONED_DT, t.WCP_NFB_LIMIT_SANCTIONED,  "
						+ "t.WCP_NFB_LIMIT_SANCTIONED_DT, t.WCP_INTEREST, t.WCP_PLR,  "
						+ "t.WCP_PROMOTERS_CONTRIBUTION, t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS, "
						+ "a.APP_PROJECT_OUTLAY,NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0)+  "
						+ "NVL(tc.WCO_FB_INTEREST_OUTSTAND_AMT,0),  "
						+ "NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0)+NVL(tc.WCO_NFB_COMM_OUTSTAND_AMT,0),WCP_TENURE "
						+ "from working_capital_Detail t, wc_outstanding_detail tc, "
						+ "application_Detail a  "
						+ "where LTRIM(RTRIM(UPPER(tc.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ "and a.MEM_BNK_ID = ? "
						+ "and t.APP_REF_NO = a.APP_REF_NO "
						+ "and t.APP_REF_NO = tc.APP_REF_NO(+)";
				applicationStmt = connection.prepareStatement(query2);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, memberId);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					appReport.setWcFbSanctioned(applicationResult.getDouble(1));
					appReport.setWcFbSanctionedOn(applicationResult.getDate(2));
					appReport
							.setWcNfbSanctioned(applicationResult.getDouble(3));
					appReport
							.setWcNfbSanctionedOn(applicationResult.getDate(4));
					appReport.setWcInterest(applicationResult.getDouble(5));
					appReport.setWcPlr(applicationResult.getDouble(6));
					appReport.setWcPromoterContribution(applicationResult
							.getDouble(7));
					appReport.setWcSubsidy(applicationResult.getDouble(8));
					appReport.setWcEquity(applicationResult.getDouble(9));
					appReport.setWcProjectCost(applicationResult.getDouble(10));
					appReport.setWcFbPrincipalOutstanding(applicationResult
							.getDouble(11));
					appReport.setWcNfbPrincipalOutstanding(applicationResult
							.getDouble(12));
					appReport.setWcTenure(applicationResult.getInt(13));
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query3 = "select d.DBR_AMOUNT, d.DBR_DT, d.DBR_FINAL_DISBURSEMENT_FLAG "
						+ " from disbursement_detail d, application_Detail a where "
						+ " LTRIM(RTRIM(UPPER(d.CGPAN))) = LTRIM(RTRIM(UPPER(?))) and d.CGPAN = "
						+ " a.CGPAN and a.MEM_BNK_ID = ? and d.DBR_DT = (select max(DBR_DT) "
						+ " from disbursement_detail d where LTRIM(RTRIM(UPPER(d.CGPAN))) = "
						+ " LTRIM(RTRIM(UPPER(?))))";
				applicationStmt = connection.prepareStatement(query3);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(3, cgpan);
				applicationStmt.setString(2, memberId);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					appReport.setDisbursementAmount(applicationResult
							.getDouble(1));
					appReport.setDisbursementDate(applicationResult.getDate(2));
					appReport.setFinalDisbursement(applicationResult
							.getString(3));

				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query4 = " select tc.TCO_OUTSTANDING_AMOUNT from TC_OUTSTANDING_DETAIL tc, "
						+ " application_Detail a   where tc.CGPAN = ? and tc.tco_outstanding_on_dt"
						+ " =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL where CGPAN = ?) and a.MEM_BNK_ID  = ?"
						+ " and  tc.APP_REF_NO = a.APP_REF_NO";

				// System.out.println(query3);
				applicationStmt = connection.prepareStatement(query4);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, cgpan);
				applicationStmt.setString(3, memberId);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					// System.out.println("-------TC -Outstanding---------");
					appReport.setTcOutstanding(applicationResult.getDouble(1));
					// System.out.println(applicationResult.getDouble(1));
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				// Diksha 06/11/2017

				String query5 = "SELECT MIN(NVL(p.PMR_BANK_ACCOUNT_NO,'NA')) AS PMR_BANK_ACCOUNT_NO"
						+ " FROM PROMOTER_DETAIL p, application_detail a, SSI_DETAIL S"
						+ " WHERE a.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER"
						+ " AND A.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER"
						+ " AND (a.cgpan = '" + cgpan + "')";

				// System.out.println("Query5:6===43552====="+query5);
				applicationStmt = connection.prepareStatement(query5);
				// applicationStmt.setString(1, cgpan);
				// applicationStmt.setString(2, cgpan);
				applicationResult = applicationStmt.executeQuery();
				// System.out.println("Query:"+query5);

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					// System.out.println("-------TC -Outstanding---------");
					appReport.setPmrBankAccNo(applicationResult.getString(1));
					// System.out.println(applicationResult.getDouble(1));
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				// end diksha
				//sayali added---------------
				String query6 = "SELECT MAX (REVIVAL_DATE),"
                               +" CASE WHEN MAX (REVIVAL_DATE) IS NOT NULL THEN 'Y' ELSE 'N' END "
                               +" AS STATUS "
                               +" FROM revival_cgpan_data WHERE LTRIM(RTRIM(UPPER(CGPAN)))= LTRIM(RTRIM(UPPER(?)))";

				// System.out.println("Query5:6===43552====="+query5);
				 applicationStmt = connection.prepareStatement(query6);
				 applicationStmt.setString(1, cgpan);
				// applicationStmt.setString(2, cgpan);
				 applicationResult = applicationStmt.executeQuery();
				// System.out.println("Query:"+query5);

				 while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					  appReport.setRevivalDate(applicationResult.getDate(1));
				      System.out.println( "Date" +applicationResult.getString(1));
					  appReport.setRevivalStatus(applicationResult.getString(2));
					 System.out.println( "Status"  +applicationResult.getString(2));
				
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;
				
				
//end by sayali
				// Diksha 06/11/2017

			} catch (SQLException exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else {
			try {
				String query = "select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER,  "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR, s.BID, a.APP_PROJECT_OUTLAY , s.SSI_CITY || '-' || s.SSI_PINCODE,s.SSI_TYPE_OF_ACTIVITY,a.APP_DC_HANDICRAFT_ACC_FLAG,a.APP_DC_HANDICRAFT_REIMB,a.APP_DC_ICARD_NO,a.APP_DC_ICARD_ISSUE_DATE "
						+ " from ssi_detail s, promoter_detail p, application_detail a where "
						+ " LTRIM(RTRIM(UPPER(a.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
						+ " and a.MEM_BNK_ID  = ? "
						+ " and s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER "
						+ " and s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER";

				applicationStmt = connection.prepareStatement(query);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(3, memberId);
				applicationStmt.setString(2, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();
				appReport = new ApplicationReport();

				while (applicationResult.next()) {
					appReport.setSsiName(applicationResult.getString(1));
					appReport.setAddress(applicationResult.getString(2));
					appReport.setDistrict(applicationResult.getString(3));
					appReport.setState(applicationResult.getString(4));
					appReport.setUnitType(applicationResult.getString(5));
					appReport.setRegistrationNumber(applicationResult
							.getString(6));
					appReport.setStartDate(applicationResult.getDate(7));
					appReport.setEmployees(applicationResult.getInt(8));
					appReport.setStatus(applicationResult.getString(9));
					appReport.setOutstanding(applicationResult.getDouble(10));
					appReport.setIndustryType(applicationResult.getString(11));
					appReport.setTurnover(applicationResult.getDouble(12));
					appReport.setExport(applicationResult.getDouble(13));
					appReport.setChiefPromoter(applicationResult.getString(14));
					appReport.setItpan(applicationResult.getString(15));
					appReport.setGender(applicationResult.getString(16));
					appReport.setOthers(applicationResult.getString(17));
					appReport.setMemberId(applicationResult.getString(19));
					appReport.setCgpan(applicationResult.getString(18));
					appReport.setReferenceNumber(applicationResult
							.getString(25));
					appReport.setApplicationDate(applicationResult.getDate(21));
					appReport.setRemarks(applicationResult.getString(22));
					appReport.setStatus(applicationResult.getString(23));
					appReport.setLoanType(applicationResult.getString(24));
					appReport
							.setIndustrySector(applicationResult.getString(26));
					appReport.setBid(applicationResult.getString(27));
					appReport.setProjectOutlay(applicationResult.getDouble(28));
					appReport.setCity(applicationResult.getString(29));
					appReport
							.setTypeOfActivity(applicationResult.getString(30));
					appReport.setHandiCraftsAccFlag(applicationResult
							.getString(31));
					appReport.setDcHandicraftsReimb(applicationResult
							.getString(32));
					appReport.setAppDcIcardNo(applicationResult.getString(33));
					appReport.setAppDcIcardIssueDate(applicationResult
							.getDate(34));
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query1 = " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ " t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION, "
						+ " t.TRM_SUBSIDY_EQUITY_SUPPORT,  t.TRM_OTHERS, "
						+ " a.APP_PROJECT_OUTLAY,  t.TRM_REPAYMENT_MORATORIUM, "
						+ " t.TRM_FIRST_INSTALLMENT_DUE_DT,  t.TRM_NO_OF_INSTALLMENTS, "
						+ " t.TRM_REPAYMENT_PERIODICITY,TRM_TENURE from "
						+ " term_loan_Detail t , application_Detail a, ssi_Detail s "
						+ " where LTRIM(RTRIM(UPPER(t.CGPAN))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
						+ " and a.MEM_BNK_ID  = ? "
						+ " and t.APP_REF_NO = a.APP_REF_NO "
						+ " and a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER";
				applicationStmt = connection.prepareStatement(query1);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(3, memberId);
				applicationStmt.setString(2, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					appReport.setTcSanctionedOn(applicationResult.getDate(2));
					appReport.setTcSanctioned(applicationResult.getDouble(1));
					appReport.setTcRate(applicationResult.getDouble(3));
					appReport.setTcPlr(applicationResult.getDouble(4));
					appReport.setTcPromoterContribution(applicationResult
							.getDouble(5));
					appReport.setTcSubsidy(applicationResult.getDouble(6));
					appReport.setTcEquity(applicationResult.getDouble(7));
					appReport.setTcProjectCost(applicationResult.getDouble(8));
					appReport.setRepaymentMoratorium(applicationResult
							.getInt(9));
					appReport.setFirstInstallmentDueDate(applicationResult
							.getDate(10));
					appReport.setNumberOfInstallments(applicationResult
							.getInt(11));
					int repayment = applicationResult.getInt(12);
					if (repayment == 0) {
						appReport.setRepaymentPeriodicity("");
					}
					if (repayment == 1) {
						appReport.setRepaymentPeriodicity("Monthly");
					}
					if (repayment == 2) {
						appReport.setRepaymentPeriodicity("Quarterly");
					}
					if (repayment == 3) {
						appReport.setRepaymentPeriodicity("Half yearly");
					}
					appReport.setTcTenure(applicationResult.getInt(13));
					// applicationArray.add(appReport);
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query2 = "select t.WCP_FB_LIMIT_SANCTIONED, "
						+ " t.WCP_FB_LIMIT_SANCTIONED_DT, t.WCP_NFB_LIMIT_SANCTIONED,  "
						+ " t.WCP_NFB_LIMIT_SANCTIONED_DT, t.WCP_INTEREST, t.WCP_PLR,  "
						+ " t.WCP_PROMOTERS_CONTRIBUTION, t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS, "
						+ " a.APP_PROJECT_OUTLAY,NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0)+  "
						+ " NVL(tc.WCO_FB_INTEREST_OUTSTAND_AMT,0),  "
						+ " NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0)+NVL(tc.WCO_NFB_COMM_OUTSTAND_AMT,0),WCP_TENURE "
						+ " from working_capital_Detail t, wc_outstanding_detail tc, "
						+ " application_Detail a, ssi_detail s  "
						+ " where LTRIM(RTRIM(UPPER(t.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
						+ " and a.MEM_BNK_ID = ? "
						+ " and t.APP_REF_NO = a.APP_REF_NO "
						+ " and t.APP_REF_NO = tc.APP_REF_NO(+)"
						+ " and a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER";
				applicationStmt = connection.prepareStatement(query2);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(3, memberId);
				applicationStmt.setString(2, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					appReport.setWcFbSanctioned(applicationResult.getDouble(1));
					appReport.setWcFbSanctionedOn(applicationResult.getDate(2));
					appReport
							.setWcNfbSanctioned(applicationResult.getDouble(3));
					appReport
							.setWcNfbSanctionedOn(applicationResult.getDate(4));
					appReport.setWcInterest(applicationResult.getDouble(5));
					appReport.setWcPlr(applicationResult.getDouble(6));
					appReport.setWcPromoterContribution(applicationResult
							.getDouble(7));
					appReport.setWcSubsidy(applicationResult.getDouble(8));
					appReport.setWcEquity(applicationResult.getDouble(9));
					appReport.setWcProjectCost(applicationResult.getDouble(10));
					appReport.setWcFbPrincipalOutstanding(applicationResult
							.getDouble(11));
					appReport.setWcNfbPrincipalOutstanding(applicationResult
							.getDouble(12));
					appReport.setWcTenure(applicationResult.getInt(13));
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query3 = "select d.DBR_AMOUNT, d.DBR_DT, d.DBR_FINAL_DISBURSEMENT_FLAG "
						+ " from disbursement_detail d, application_Detail a, ssi_detail s where "
						+ " LTRIM(RTRIM(UPPER(d.CGPAN))) = LTRIM(RTRIM(UPPER(?))) and d.CGPAN = "
						+ " a.CGPAN and a.MEM_BNK_ID = ? and d.DBR_DT = (select max(DBR_DT) "
						+ " from disbursement_detail d where LTRIM(RTRIM(UPPER(d.CGPAN))) = "
						+ " LTRIM(RTRIM(UPPER(?)))) and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME)))"
						+ " like LTRIM(RTRIM(UPPER(?))) and a.SSI_REFERENCE_NUMBER = "
						+ " s.SSI_REFERENCE_NUMBER";

				applicationStmt = connection.prepareStatement(query3);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(3, cgpan);
				applicationStmt.setString(2, memberId);
				applicationStmt.setString(4, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					appReport.setDisbursementAmount(applicationResult
							.getDouble(1));
					appReport.setDisbursementDate(applicationResult.getDate(2));
					appReport.setFinalDisbursement(applicationResult
							.getString(3));

				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query4 = " select tc.TCO_OUTSTANDING_AMOUNT from TC_OUTSTANDING_DETAIL tc, "
						+ " application_Detail a, ssi_Detail s   where tc.CGPAN = ? and"
						+ "  tc.tco_outstanding_on_dt =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL where CGPAN = ?) and a.MEM_BNK_ID  = ? "
						+ " and  tc.APP_REF_NO = a.APP_REF_NO  "
						+ " and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
						+ " and a.SSI_REFERENCE_NUMBER =  s.SSI_REFERENCE_NUMBER";

				applicationStmt = connection.prepareStatement(query4);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, cgpan);
				applicationStmt.setString(3, memberId);
				applicationStmt.setString(4, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					appReport.setTcOutstanding(applicationResult.getDouble(1));
					// System.out.println(applicationResult.getDouble(1));
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				//added by sayali		
	 String query5 = " SELECT MAX (r.REVIVAL_DATE),"
     +" CASE WHEN MAX (r.REVIVAL_DATE) IS NOT NULL THEN 'Y' ELSE 'N' END AS STATUS"
     +" FROM revival_cgpan_data r,application_Detail a, ssi_Detail s "
     +" WHERE LTRIM(RTRIM(UPPER(r.CGPAN)))= LTRIM(RTRIM(UPPER(?)))"
     +" and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?)))"
     +" and a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER";

			// System.out.println("query-4:"+query4);
			applicationStmt = connection.prepareStatement(query5);
			applicationStmt.setString(1, cgpan);
			applicationStmt.setString(3, "%" + ssi + "%");
			applicationResult = applicationStmt.executeQuery();

			while (applicationResult.next()) {
				 appReport.setRevivalDate(applicationResult.getDate(1));
			     System.out.println( "Date" +applicationResult.getString(1));
				 appReport.setRevivalStatus(applicationResult.getString(2));
				 System.out.println( "Status"  +applicationResult.getString(2));
			}
			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;
				
			} catch (SQLException exception) {

				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "applicationReportForMember", "Exited");
		return appReport;
	}

	// Fix Bug 02 - 07092004

	public ApplicationReport applicationReportForZone(String cgpan, String ssi,
			String bankId, String zoneId) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "applicationReportForZone", "Entered");
		ApplicationReport appReport = null;
		ResultSet applicationResult;
		PreparedStatement applicationStmt = null;
		Connection connection = DBConnection.getConnection();
		// String active = "A";

		if (((ssi == null) || (ssi.equals(""))) && (cgpan != null)) {
			try {
				String query = "select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME,"
						+ "  s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, p.PMR_FIRST_NAME || ',' ||"
						+ " p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, a.CGPAN,"
						+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE, "
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR, s.BID,a.APP_PROJECT_OUTLAY , s.SSI_CITY || '-' || s.SSI_PINCODE,s.SSI_TYPE_OF_ACTIVITY,APP_EXPIRY_DT,a.APP_DC_HANDICRAFT_ACC_FLAG,a.APP_DC_HANDICRAFT_REIMB,a.APP_DC_ICARD_NO,a.APP_DC_ICARD_ISSUE_DATE  "
						+ " from ssi_detail s,"
						+ " promoter_detail p, application_detail a, member_info m where "
						+ " LTRIM(RTRIM(UPPER(a.CGPAN))) = LTRIM(RTRIM(UPPER(?))) and "
						+ " a.MEM_BNK_ID||a.MEM_ZNE_ID = m.MEM_BNK_ID||m.MEM_ZNE_ID and "
						+ " m.MEM_BNK_ID = ? and "
						+ " (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
						+ " and s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and"
						+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER";
				// System.out.println("query:"+query);
				applicationStmt = connection.prepareStatement(query);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, bankId);
				applicationStmt.setString(3, zoneId);
				applicationStmt.setString(4, zoneId);
				applicationResult = applicationStmt.executeQuery();
				appReport = new ApplicationReport();

				while (applicationResult.next()) {
					appReport.setSsiName(applicationResult.getString(1));
					appReport.setAddress(applicationResult.getString(2));
					appReport.setDistrict(applicationResult.getString(3));
					appReport.setState(applicationResult.getString(4));
					appReport.setUnitType(applicationResult.getString(5));
					appReport.setRegistrationNumber(applicationResult
							.getString(6));
					appReport.setStartDate(applicationResult.getDate(7));
					appReport.setEmployees(applicationResult.getInt(8));
					appReport.setStatus(applicationResult.getString(9));
					appReport.setOutstanding(applicationResult.getDouble(10));
					appReport.setIndustryType(applicationResult.getString(11));
					appReport.setTurnover(applicationResult.getDouble(12));
					appReport.setExport(applicationResult.getDouble(13));
					appReport.setChiefPromoter(applicationResult.getString(14));
					appReport.setItpan(applicationResult.getString(15));
					appReport.setGender(applicationResult.getString(16));
					appReport.setOthers(applicationResult.getString(17));
					appReport.setMemberId(applicationResult.getString(19));
					appReport.setCgpan(applicationResult.getString(18));
					appReport.setReferenceNumber(applicationResult
							.getString(25));
					appReport.setApplicationDate(applicationResult.getDate(21));
					appReport.setRemarks(applicationResult.getString(22));
					appReport.setStatus(applicationResult.getString(23));
					appReport.setLoanType(applicationResult.getString(24));
					appReport
							.setIndustrySector(applicationResult.getString(26));
					appReport.setBid(applicationResult.getString(27));
					appReport.setProjectOutlay(applicationResult.getDouble(28));
					appReport.setCity(applicationResult.getString(29));
					appReport
							.setTypeOfActivity(applicationResult.getString(30));
					appReport.setExpiryDate(applicationResult.getDate(31));
					appReport.setHandiCraftsAccFlag(applicationResult
							.getString(32));
					appReport.setDcHandicraftsReimb(applicationResult
							.getString(33));
					appReport.setAppDcIcardNo(applicationResult.getString(34));
					appReport.setAppDcIcardIssueDate(applicationResult
							.getDate(35));
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query1 = " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ "t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION, "
						+ "t.TRM_SUBSIDY_EQUITY_SUPPORT,  t.TRM_OTHERS, "
						+ "a.APP_PROJECT_OUTLAY,  t.TRM_REPAYMENT_MORATORIUM, "
						+ "t.TRM_FIRST_INSTALLMENT_DUE_DT,  t.TRM_NO_OF_INSTALLMENTS, "
						+ "t.TRM_REPAYMENT_PERIODICITY,TRM_TENURE from "
						+ "term_loan_Detail t , application_Detail a, member_info m "
						+ "where LTRIM(RTRIM(UPPER(t.CGPAN))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and a.MEM_BNK_ID||a.MEM_ZNE_ID = m.MEM_BNK_ID||m.MEM_ZNE_ID  "
						+ " and m.MEM_BNK_ID  = ? "
						+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?)  "
						+ "and t.APP_REF_NO = a.APP_REF_NO ";
				applicationStmt = connection.prepareStatement(query1);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, bankId);
				applicationStmt.setString(3, zoneId);
				applicationStmt.setString(4, zoneId);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					appReport.setTcSanctionedOn(applicationResult.getDate(2));
					appReport.setTcSanctioned(applicationResult.getDouble(1));
					appReport.setTcRate(applicationResult.getDouble(3));
					appReport.setTcPlr(applicationResult.getDouble(4));
					appReport.setTcPromoterContribution(applicationResult
							.getDouble(5));
					appReport.setTcSubsidy(applicationResult.getDouble(6));
					appReport.setTcEquity(applicationResult.getDouble(7));
					appReport.setTcProjectCost(applicationResult.getDouble(8));
					appReport.setRepaymentMoratorium(applicationResult
							.getInt(9));
					appReport.setFirstInstallmentDueDate(applicationResult
							.getDate(10));
					appReport.setNumberOfInstallments(applicationResult
							.getInt(11));
					int repayment = applicationResult.getInt(12);
					if (repayment == 0) {
						appReport.setRepaymentPeriodicity("");
					}
					if (repayment == 1) {
						appReport.setRepaymentPeriodicity("Monthly");
					}
					if (repayment == 2) {
						appReport.setRepaymentPeriodicity("Quarterly");
					}
					if (repayment == 3) {
						appReport.setRepaymentPeriodicity("Half yearly");
					}
					appReport.setTcTenure(applicationResult.getInt(13));
					// applicationArray.add(appReport);
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query2 = "select t.WCP_FB_LIMIT_SANCTIONED, "
						+ "t.WCP_FB_LIMIT_SANCTIONED_DT, t.WCP_NFB_LIMIT_SANCTIONED,  "
						+ "t.WCP_NFB_LIMIT_SANCTIONED_DT, t.WCP_INTEREST, t.WCP_PLR,  "
						+ "t.WCP_PROMOTERS_CONTRIBUTION, t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS, "
						+ "a.APP_PROJECT_OUTLAY,NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0)+  "
						+ "NVL(tc.WCO_FB_INTEREST_OUTSTAND_AMT,0),  "
						+ "NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0)+NVL(tc.WCO_NFB_COMM_OUTSTAND_AMT,0),WCP_TENURE "
						+ "from working_capital_Detail t, wc_outstanding_detail tc, "
						+ "application_Detail a , member_info m "
						+ " where LTRIM(RTRIM(UPPER(tc.CGPAN))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and a.MEM_BNK_ID||a.MEM_ZNE_ID = m.MEM_BNK_ID||m.MEM_ZNE_ID"
						+ " and a.MEM_BNK_ID = ?"
						+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
						+ " and t.APP_REF_NO = a.APP_REF_NO "
						+ " and t.APP_REF_NO = tc.APP_REF_NO(+)";
				applicationStmt = connection.prepareStatement(query2);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, bankId);
				applicationStmt.setString(3, zoneId);
				applicationStmt.setString(4, zoneId);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					appReport.setWcFbSanctioned(applicationResult.getDouble(1));
					appReport.setWcFbSanctionedOn(applicationResult.getDate(2));
					appReport
							.setWcNfbSanctioned(applicationResult.getDouble(3));
					appReport
							.setWcNfbSanctionedOn(applicationResult.getDate(4));
					appReport.setWcInterest(applicationResult.getDouble(5));
					appReport.setWcPlr(applicationResult.getDouble(6));
					appReport.setWcPromoterContribution(applicationResult
							.getDouble(7));
					appReport.setWcSubsidy(applicationResult.getDouble(8));
					appReport.setWcEquity(applicationResult.getDouble(9));
					appReport.setWcProjectCost(applicationResult.getDouble(10));
					appReport.setWcFbPrincipalOutstanding(applicationResult
							.getDouble(11));
					appReport.setWcNfbPrincipalOutstanding(applicationResult
							.getDouble(12));
					appReport.setWcTenure(applicationResult.getInt(13));
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query3 = "select d.DBR_AMOUNT, d.DBR_DT, d.DBR_FINAL_DISBURSEMENT_FLAG "
						+ " from disbursement_detail d, application_Detail a, member_info m where "
						+ " LTRIM(RTRIM(UPPER(d.CGPAN))) = LTRIM(RTRIM(UPPER(?))) and d.CGPAN = "
						+ " a.CGPAN and a.MEM_BNK_ID  = ?  "
						+ " and a.MEM_BNK_ID||a.MEM_ZNE_ID = m.MEM_BNK_ID||m.MEM_ZNE_ID"
						+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?)  and "
						+ " d.DBR_DT = (select max(DBR_DT) "
						+ " from disbursement_detail d where LTRIM(RTRIM(UPPER(d.CGPAN))) = "
						+ " LTRIM(RTRIM(UPPER(?))))";
				applicationStmt = connection.prepareStatement(query3);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(5, cgpan);
				applicationStmt.setString(2, bankId);
				applicationStmt.setString(3, zoneId);
				applicationStmt.setString(4, zoneId);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					appReport.setDisbursementAmount(applicationResult
							.getDouble(1));
					appReport.setDisbursementDate(applicationResult.getDate(2));
					appReport.setFinalDisbursement(applicationResult
							.getString(3));

				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query4 = " select tc.TCO_OUTSTANDING_AMOUNT from TC_OUTSTANDING_DETAIL tc, "
						+ " application_Detail a, member_info m   where tc.CGPAN = ? "
						+ " and a.MEM_BNK_ID||a.MEM_ZNE_ID = m.MEM_BNK_ID||m.MEM_ZNE_ID "
						+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?)  and "
						+ " tc.tco_outstanding_on_dt =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL where CGPAN = ?) and a.MEM_BNK_ID = ?"
						+ " and  tc.APP_REF_NO = a.APP_REF_NO";

				// System.out.println(query3);
				applicationStmt = connection.prepareStatement(query4);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(4, cgpan);
				applicationStmt.setString(5, bankId);
				applicationStmt.setString(2, zoneId);
				applicationStmt.setString(3, zoneId);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					// System.out.println("-------TC -Outstanding---------");
					appReport.setTcOutstanding(applicationResult.getDouble(1));
					// System.out.println(applicationResult.getDouble(1));
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				// Diksha 06/11/2017

				String query5 = "SELECT MIN(NVL(p.PMR_BANK_ACCOUNT_NO,'NA')) AS PMR_BANK_ACCOUNT_NO"
						+ " FROM PROMOTER_DETAIL p, application_detail a, SSI_DETAIL S"
						+ " WHERE a.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER"
						+ " AND A.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER"
						+ " AND (a.cgpan = '" + cgpan + "')";

				// System.out.println("Query5:6===43552====="+query5);
				applicationStmt = connection.prepareStatement(query5);
				// applicationStmt.setString(1, cgpan);
				// applicationStmt.setString(2, cgpan);
				applicationResult = applicationStmt.executeQuery();
				// System.out.println("Query:"+query5);

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					// System.out.println("-------TC -Outstanding---------");
					appReport.setPmrBankAccNo(applicationResult.getString(1));
					// System.out.println(applicationResult.getDouble(1));
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				// end diksha

				// Diksha 06/11/2017

			} catch (SQLException exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else {
			try {
				String query = "select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER,  "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR, s.BID,a.APP_PROJECT_OUTLAY, s.SSI_CITY || '-' || s.SSI_PINCODE,s.SSI_TYPE_OF_ACTIVITY,a.APP_DC_HANDICRAFT_ACC_FLAG,a.APP_DC_HANDICRAFT_REIMB,a.APP_DC_ICARD_NO,a.APP_DC_ICARD_ISSUE_DATE  "
						+ " from ssi_detail s, promoter_detail p, application_detail a, member_info m where "
						+ " LTRIM(RTRIM(UPPER(a.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
						+ " and a.MEM_BNK_ID||a.MEM_ZNE_ID = m.MEM_BNK_ID||m.MEM_ZNE_ID "
						+ " and a.MEM_BNK_ID = ? "
						+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
						+ " and s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER "
						+ " and s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER";

				applicationStmt = connection.prepareStatement(query);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(3, bankId);
				applicationStmt.setString(4, zoneId);
				applicationStmt.setString(5, zoneId);
				applicationStmt.setString(2, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();
				appReport = new ApplicationReport();

				while (applicationResult.next()) {
					appReport.setSsiName(applicationResult.getString(1));
					appReport.setAddress(applicationResult.getString(2));
					appReport.setDistrict(applicationResult.getString(3));
					appReport.setState(applicationResult.getString(4));
					appReport.setUnitType(applicationResult.getString(5));
					appReport.setRegistrationNumber(applicationResult
							.getString(6));
					appReport.setStartDate(applicationResult.getDate(7));
					appReport.setEmployees(applicationResult.getInt(8));
					appReport.setStatus(applicationResult.getString(9));
					appReport.setOutstanding(applicationResult.getDouble(10));
					appReport.setIndustryType(applicationResult.getString(11));
					appReport.setTurnover(applicationResult.getDouble(12));
					appReport.setExport(applicationResult.getDouble(13));
					appReport.setChiefPromoter(applicationResult.getString(14));
					appReport.setItpan(applicationResult.getString(15));
					appReport.setGender(applicationResult.getString(16));
					appReport.setOthers(applicationResult.getString(17));
					appReport.setMemberId(applicationResult.getString(19));
					appReport.setCgpan(applicationResult.getString(18));
					appReport.setReferenceNumber(applicationResult
							.getString(25));
					appReport.setApplicationDate(applicationResult.getDate(21));
					appReport.setRemarks(applicationResult.getString(22));
					appReport.setStatus(applicationResult.getString(23));
					appReport.setLoanType(applicationResult.getString(24));
					appReport
							.setIndustrySector(applicationResult.getString(26));
					appReport.setBid(applicationResult.getString(27));
					appReport.setProjectOutlay(applicationResult.getDouble(28));
					appReport.setCity(applicationResult.getString(29));
					appReport
							.setTypeOfActivity(applicationResult.getString(30));
					appReport.setHandiCraftsAccFlag(applicationResult
							.getString(31));
					appReport.setDcHandicraftsReimb(applicationResult
							.getString(32));
					appReport.setAppDcIcardNo(applicationResult.getString(33));
					appReport.setAppDcIcardIssueDate(applicationResult
							.getDate(34));
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query1 = " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ " t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION, "
						+ " t.TRM_SUBSIDY_EQUITY_SUPPORT,  t.TRM_OTHERS, "
						+ " a.APP_PROJECT_OUTLAY,  t.TRM_REPAYMENT_MORATORIUM, "
						+ " t.TRM_FIRST_INSTALLMENT_DUE_DT,  t.TRM_NO_OF_INSTALLMENTS, "
						+ " t.TRM_REPAYMENT_PERIODICITY,TRM_TENURE from "
						+ " term_loan_Detail t , application_Detail a, ssi_Detail s, member_info m "
						+ " where LTRIM(RTRIM(UPPER(t.CGPAN))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
						+ " and a.MEM_BNK_ID = ? "
						+ " and a.MEM_BNK_ID||a.MEM_ZNE_ID = m.MEM_BNK_ID||m.MEM_ZNE_ID "
						+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
						+ " and t.APP_REF_NO = a.APP_REF_NO "
						+ " and a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER";
				applicationStmt = connection.prepareStatement(query1);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(3, bankId);
				applicationStmt.setString(4, zoneId);
				applicationStmt.setString(5, zoneId);
				applicationStmt.setString(2, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					appReport.setTcSanctionedOn(applicationResult.getDate(2));
					appReport.setTcSanctioned(applicationResult.getDouble(1));
					appReport.setTcRate(applicationResult.getDouble(3));
					appReport.setTcPlr(applicationResult.getDouble(4));
					appReport.setTcPromoterContribution(applicationResult
							.getDouble(5));
					appReport.setTcSubsidy(applicationResult.getDouble(6));
					appReport.setTcEquity(applicationResult.getDouble(7));
					appReport.setTcProjectCost(applicationResult.getDouble(8));
					appReport.setRepaymentMoratorium(applicationResult
							.getInt(9));
					appReport.setFirstInstallmentDueDate(applicationResult
							.getDate(10));
					appReport.setNumberOfInstallments(applicationResult
							.getInt(11));
					int repayment = applicationResult.getInt(12);
					if (repayment == 0) {
						appReport.setRepaymentPeriodicity("");
					}
					if (repayment == 1) {
						appReport.setRepaymentPeriodicity("Monthly");
					}
					if (repayment == 2) {
						appReport.setRepaymentPeriodicity("Quarterly");
					}
					if (repayment == 3) {
						appReport.setRepaymentPeriodicity("Half yearly");
					}
					appReport.setTcTenure(applicationResult.getInt(13));
					// applicationArray.add(appReport);
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query2 = "select t.WCP_FB_LIMIT_SANCTIONED, "
						+ " t.WCP_FB_LIMIT_SANCTIONED_DT, t.WCP_NFB_LIMIT_SANCTIONED,  "
						+ " t.WCP_NFB_LIMIT_SANCTIONED_DT, t.WCP_INTEREST, t.WCP_PLR,  "
						+ " t.WCP_PROMOTERS_CONTRIBUTION, t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS, "
						+ " a.APP_PROJECT_OUTLAY ,NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0)+  "
						+ " NVL(tc.WCO_FB_INTEREST_OUTSTAND_AMT,0),  "
						+ " NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0)+NVL(tc.WCO_NFB_COMM_OUTSTAND_AMT,0),WCP_TENURE "
						+ " from working_capital_Detail t, wc_outstanding_detail tc, "
						+ " application_Detail a, ssi_detail s, member_info m  "
						+ " where LTRIM(RTRIM(UPPER(t.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
						+ " and a.MEM_BNK_ID = ? "
						+ " and a.MEM_BNK_ID||a.MEM_ZNE_ID = m.MEM_BNK_ID||m.MEM_ZNE_ID "
						+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) "
						+ " and t.APP_REF_NO = a.APP_REF_NO "
						+ " and t.APP_REF_NO = tc.APP_REF_NO(+)"
						+ " and a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER";
				applicationStmt = connection.prepareStatement(query2);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(3, bankId);
				applicationStmt.setString(4, zoneId);
				applicationStmt.setString(5, zoneId);
				applicationStmt.setString(2, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					appReport.setWcFbSanctioned(applicationResult.getDouble(1));
					appReport.setWcFbSanctionedOn(applicationResult.getDate(2));
					appReport
							.setWcNfbSanctioned(applicationResult.getDouble(3));
					appReport
							.setWcNfbSanctionedOn(applicationResult.getDate(4));
					appReport.setWcInterest(applicationResult.getDouble(5));
					appReport.setWcPlr(applicationResult.getDouble(6));
					appReport.setWcPromoterContribution(applicationResult
							.getDouble(7));
					appReport.setWcSubsidy(applicationResult.getDouble(8));
					appReport.setWcEquity(applicationResult.getDouble(9));
					appReport.setWcProjectCost(applicationResult.getDouble(10));
					appReport.setWcFbPrincipalOutstanding(applicationResult
							.getDouble(11));
					appReport.setWcNfbPrincipalOutstanding(applicationResult
							.getDouble(12));
					appReport.setWcTenure(applicationResult.getInt(13));
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query3 = "select d.DBR_AMOUNT, d.DBR_DT, d.DBR_FINAL_DISBURSEMENT_FLAG "
						+ " from disbursement_detail d, application_Detail a, ssi_detail s, member_info m where "
						+ " LTRIM(RTRIM(UPPER(d.CGPAN))) = LTRIM(RTRIM(UPPER(?))) and d.CGPAN = "
						+ " a.CGPAN and a.MEM_BNK_ID = ?  "
						+ " and a.MEM_BNK_ID||a.MEM_ZNE_ID = m.MEM_BNK_ID||m.MEM_ZNE_ID "
						+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) and "
						+ " d.DBR_DT = (select max(DBR_DT) "
						+ " from disbursement_detail d where LTRIM(RTRIM(UPPER(d.CGPAN))) = "
						+ " LTRIM(RTRIM(UPPER(?)))) and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME)))"
						+ " like LTRIM(RTRIM(UPPER(?))) and a.SSI_REFERENCE_NUMBER = "
						+ " s.SSI_REFERENCE_NUMBER";

				applicationStmt = connection.prepareStatement(query3);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(5, cgpan);
				applicationStmt.setString(2, bankId);
				applicationStmt.setString(3, zoneId);
				applicationStmt.setString(4, zoneId);
				applicationStmt.setString(6, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					appReport.setDisbursementAmount(applicationResult
							.getDouble(1));
					appReport.setDisbursementDate(applicationResult.getDate(2));
					appReport.setFinalDisbursement(applicationResult
							.getString(3));

				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query4 = " select tc.TCO_OUTSTANDING_AMOUNT from TC_OUTSTANDING_DETAIL tc, "
						+ " application_Detail a, ssi_Detail s, member_info m   where tc.CGPAN = ? "
						+ " and a.MEM_BNK_ID||a.MEM_ZNE_ID = m.MEM_BNK_ID||m.MEM_ZNE_ID"
						+ " and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) and "
						+ "  tc.tco_outstanding_on_dt =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL where CGPAN = ?) and a.MEM_BNK_ID  = ? "
						+ " and  tc.APP_REF_NO = a.APP_REF_NO  "
						+ " and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
						+ " and a.SSI_REFERENCE_NUMBER =  s.SSI_REFERENCE_NUMBER";

				applicationStmt = connection.prepareStatement(query4);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(4, cgpan);
				applicationStmt.setString(5, bankId);
				applicationStmt.setString(2, zoneId);
				applicationStmt.setString(3, zoneId);
				applicationStmt.setString(6, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					appReport.setTcOutstanding(applicationResult.getDouble(1));
					// System.out.println(applicationResult.getDouble(1));
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

			} catch (SQLException exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "applicationReportForZone", "Exited");
		return appReport;
	}

	// Fix Completed

	/*
	 * ##########################################################################
	 * #####################################3
	 */

	public ApplicationReport applicationReportForBranch(String cgpan,
			String ssi, String memberId) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "applicationReportForBranch", "Entered");
		ApplicationReport appReport = null;
		ResultSet applicationResult = null;
		PreparedStatement applicationStmt = null;
		Connection connection = DBConnection.getConnection();

		if (((ssi == null) || (ssi.equals(""))) && (cgpan != null)) {
			try {
				String query = " select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER,  "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR, s.BID,a.APP_PROJECT_OUTLAY , s.SSI_CITY || '-' || s.SSI_PINCODE,s.SSI_TYPE_OF_ACTIVITY,APP_EXPIRY_DT,a.APP_DC_HANDICRAFT_ACC_FLAG,a.APP_DC_HANDICRAFT_REIMB,a.APP_DC_ICARD_NO,a.APP_DC_ICARD_ISSUE_DATE "
						+ " from ssi_detail s, promoter_detail p, application_detail a where "
						+ " LTRIM(RTRIM(UPPER(a.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID  = ? "
						+ " and s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER "
						+ " and s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER";

				applicationStmt = connection.prepareStatement(query);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, memberId);
				applicationResult = applicationStmt.executeQuery();
				appReport = new ApplicationReport();

				while (applicationResult.next()) {
					appReport.setSsiName(applicationResult.getString(1));
					appReport.setAddress(applicationResult.getString(2));
					appReport.setDistrict(applicationResult.getString(3));
					appReport.setState(applicationResult.getString(4));
					appReport.setUnitType(applicationResult.getString(5));
					appReport.setRegistrationNumber(applicationResult
							.getString(6));
					appReport.setStartDate(applicationResult.getDate(7));
					appReport.setEmployees(applicationResult.getInt(8));
					appReport.setStatus(applicationResult.getString(9));
					appReport.setOutstanding(applicationResult.getDouble(10));
					appReport.setIndustryType(applicationResult.getString(11));
					appReport.setTurnover(applicationResult.getDouble(12));
					appReport.setExport(applicationResult.getDouble(13));
					appReport.setChiefPromoter(applicationResult.getString(14));
					appReport.setItpan(applicationResult.getString(15));
					appReport.setGender(applicationResult.getString(16));
					appReport.setOthers(applicationResult.getString(17));
					appReport.setMemberId(applicationResult.getString(19));
					appReport.setCgpan(applicationResult.getString(18));
					appReport.setReferenceNumber(applicationResult
							.getString(25));
					appReport.setApplicationDate(applicationResult.getDate(21));
					appReport.setRemarks(applicationResult.getString(22));
					appReport.setStatus(applicationResult.getString(23));
					appReport.setLoanType(applicationResult.getString(24));
					appReport
							.setIndustrySector(applicationResult.getString(26));
					appReport.setBid(applicationResult.getString(27));
					appReport.setProjectOutlay(applicationResult.getDouble(28));
					appReport.setCity(applicationResult.getString(29));
					appReport
							.setTypeOfActivity(applicationResult.getString(30));
					appReport.setExpiryDate(applicationResult.getDate(31));
					appReport.setHandiCraftsAccFlag(applicationResult
							.getString(32));
					appReport.setDcHandicraftsReimb(applicationResult
							.getString(33));
					appReport.setAppDcIcardNo(applicationResult.getString(34));
					appReport.setAppDcIcardIssueDate(applicationResult
							.getDate(35));
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query1 = "select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ " t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION, "
						+ " t.TRM_SUBSIDY_EQUITY_SUPPORT,  t.TRM_OTHERS, "
						+ " a.APP_PROJECT_OUTLAY,  t.TRM_REPAYMENT_MORATORIUM, "
						+ " t.TRM_FIRST_INSTALLMENT_DUE_DT,  t.TRM_NO_OF_INSTALLMENTS, "
						+ " t.TRM_REPAYMENT_PERIODICITY,TRM_TENURE from "
						+ " term_loan_Detail t , application_Detail a "
						+ " where LTRIM(RTRIM(UPPER(t.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID  = ? "
						+ " and t.APP_REF_NO = a.APP_REF_NO ";
				applicationStmt = connection.prepareStatement(query1);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, memberId);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					appReport.setTcSanctionedOn(applicationResult.getDate(2));
					appReport.setTcSanctioned(applicationResult.getDouble(1));
					appReport.setTcRate(applicationResult.getDouble(3));
					appReport.setTcPlr(applicationResult.getDouble(4));
					appReport.setTcPromoterContribution(applicationResult
							.getDouble(5));
					appReport.setTcSubsidy(applicationResult.getDouble(6));
					appReport.setTcEquity(applicationResult.getDouble(7));
					appReport.setTcProjectCost(applicationResult.getDouble(8));
					appReport.setRepaymentMoratorium(applicationResult
							.getInt(9));
					appReport.setFirstInstallmentDueDate(applicationResult
							.getDate(10));
					appReport.setNumberOfInstallments(applicationResult
							.getInt(11));
					int repayment = applicationResult.getInt(12);
					if (repayment == 0) {
						appReport.setRepaymentPeriodicity("");
					}
					if (repayment == 1) {
						appReport.setRepaymentPeriodicity("Monthly");
					}
					if (repayment == 2) {
						appReport.setRepaymentPeriodicity("Quarterly");
					}
					if (repayment == 3) {
						appReport.setRepaymentPeriodicity("Half yearly");
					}
					appReport.setTcTenure(applicationResult.getInt(13));
					// applicationArray.add(appReport);
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query2 = "select t.WCP_FB_LIMIT_SANCTIONED, "
						+ " t.WCP_FB_LIMIT_SANCTIONED_DT, t.WCP_NFB_LIMIT_SANCTIONED,  "
						+ " t.WCP_NFB_LIMIT_SANCTIONED_DT, t.WCP_INTEREST, t.WCP_PLR,  "
						+ " t.WCP_PROMOTERS_CONTRIBUTION, t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS, "
						+ " a.APP_PROJECT_OUTLAY,NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0)+  "
						+ " NVL(tc.WCO_FB_INTEREST_OUTSTAND_AMT,0),  "
						+ " NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0)+NVL(tc.WCO_NFB_COMM_OUTSTAND_AMT,0),WCP_TENURE "
						+ " from working_capital_Detail t, wc_outstanding_detail tc, "
						+ " application_Detail a  "
						+ " where LTRIM(RTRIM(UPPER(tc.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID = ? "
						+ " and t.APP_REF_NO = a.APP_REF_NO "
						+ " and t.APP_REF_NO = tc.APP_REF_NO(+)";
				applicationStmt = connection.prepareStatement(query2);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, memberId);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					appReport.setWcFbSanctioned(applicationResult.getDouble(1));
					appReport.setWcFbSanctionedOn(applicationResult.getDate(2));
					appReport
							.setWcNfbSanctioned(applicationResult.getDouble(3));
					appReport
							.setWcNfbSanctionedOn(applicationResult.getDate(4));
					appReport.setWcInterest(applicationResult.getDouble(5));
					appReport.setWcPlr(applicationResult.getDouble(6));
					appReport.setWcPromoterContribution(applicationResult
							.getDouble(7));
					appReport.setWcSubsidy(applicationResult.getDouble(8));
					appReport.setWcEquity(applicationResult.getDouble(9));
					appReport.setWcProjectCost(applicationResult.getDouble(10));
					appReport.setWcFbPrincipalOutstanding(applicationResult
							.getDouble(11));
					appReport.setWcNfbPrincipalOutstanding(applicationResult
							.getDouble(12));
					appReport.setWcTenure(applicationResult.getInt(13));
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query3 = "select d.DBR_AMOUNT, d.DBR_DT, d.DBR_FINAL_DISBURSEMENT_FLAG "
						+ " from disbursement_detail d, application_Detail a where "
						+ " LTRIM(RTRIM(UPPER(d.CGPAN))) = LTRIM(RTRIM(UPPER(?))) and d.CGPAN = "
						+ " a.CGPAN and a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID = ? and d.DBR_DT = (select max(DBR_DT) "
						+ " from disbursement_detail d where LTRIM(RTRIM(UPPER(d.CGPAN))) = "
						+ " LTRIM(RTRIM(UPPER(?))))";
				applicationStmt = connection.prepareStatement(query3);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(3, cgpan);
				applicationStmt.setString(2, memberId);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					appReport.setDisbursementAmount(applicationResult
							.getDouble(1));
					appReport.setDisbursementDate(applicationResult.getDate(2));
					appReport.setFinalDisbursement(applicationResult
							.getString(3));

				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query4 = " select tc.TCO_OUTSTANDING_AMOUNT from TC_OUTSTANDING_DETAIL tc, "
						+ " application_Detail a   where tc.CGPAN = ? and tc.tco_outstanding_on_dt"
						+ " =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL where CGPAN = ?) and a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID  = ?"
						+ " and  tc.APP_REF_NO = a.APP_REF_NO";

				// System.out.println(query3);
				applicationStmt = connection.prepareStatement(query4);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, cgpan);
				applicationStmt.setString(3, memberId);
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					// System.out.println("-------TC -Outstanding---------");
					appReport.setTcOutstanding(applicationResult.getDouble(1));
					// System.out.println(applicationResult.getDouble(1));
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				// Diksha 06/11/2017

				String query5 = "SELECT MIN(NVL(p.PMR_BANK_ACCOUNT_NO,'NA')) AS PMR_BANK_ACCOUNT_NO"
						+ " FROM PROMOTER_DETAIL p, application_detail a, SSI_DETAIL S"
						+ " WHERE a.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER"
						+ " AND A.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER"
						+ " AND (a.cgpan = '" + cgpan + "')";

				// System.out.println("Query5:6===43552====="+query5);
				applicationStmt = connection.prepareStatement(query5);
				// applicationStmt.setString(1, cgpan);
				// applicationStmt.setString(2, cgpan);
				applicationResult = applicationStmt.executeQuery();
				// System.out.println("Query:"+query5);

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					// System.out.println("-------TC -Outstanding---------");
					appReport.setPmrBankAccNo(applicationResult.getString(1));
					// System.out.println(applicationResult.getDouble(1));
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				// end diksha

				// Diksha 06/11/2017
				//String pattern = "yyyy-MM-dd";
				//SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);

				//String date = simpleDateFormat.format(new Date());
				//System.out.println(date);

				//sayali added---------------
				String query6 = "SELECT MAX (REVIVAL_DATE),"
	                           +" CASE WHEN MAX (REVIVAL_DATE) IS NOT NULL THEN 'Y' ELSE 'N' END "
	                           +" AS STATUS "
	                           +" FROM revival_cgpan_data WHERE LTRIM(RTRIM(UPPER(CGPAN)))= LTRIM(RTRIM(UPPER(?)))";

				// System.out.println("Query5:6===43552====="+query5);
				 applicationStmt = connection.prepareStatement(query6);
				 applicationStmt.setString(1, cgpan);
				// applicationStmt.setString(2, cgpan);
				 applicationResult = applicationStmt.executeQuery();
				// System.out.println("Query:"+query5);

				 while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					  appReport.setRevivalDate(applicationResult.getDate(1));
				      System.out.println( "Date" +applicationResult.getString(1));
					  appReport.setRevivalStatus(applicationResult.getString(2));
					 System.out.println( "Status"  +applicationResult.getString(2));
				
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;
				
				
	//end by sayali	

			} catch (SQLException exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else {
			try {
				String query = "select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME, "
						+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER, "
						+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
						+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE, "
						+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS, "
						+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER,  "
						+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME, "
						+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO, "
						+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
						+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR, s.BID,a.APP_PROJECT_OUTLAY , s.SSI_CITY || '-' || s.SSI_PINCODE,s.SSI_TYPE_OF_ACTIVITY,a.APP_DC_HANDICRAFT_ACC_FLAG,a.APP_DC_HANDICRAFT_REIMB,a.APP_DC_ICARD_NO,a.APP_DC_ICARD_ISSUE_DATE "
						+ " from ssi_detail s, promoter_detail p, application_detail a where "
						+ " LTRIM(RTRIM(UPPER(a.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
						+ " and a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID  = ? "
						+ " and s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER "
						+ " and s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER";

				applicationStmt = connection.prepareStatement(query);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(3, memberId);
				applicationStmt.setString(2, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();
				appReport = new ApplicationReport();

				while (applicationResult.next()) {
					appReport.setSsiName(applicationResult.getString(1));
					appReport.setAddress(applicationResult.getString(2));
					appReport.setDistrict(applicationResult.getString(3));
					appReport.setState(applicationResult.getString(4));
					appReport.setUnitType(applicationResult.getString(5));
					appReport.setRegistrationNumber(applicationResult
							.getString(6));
					appReport.setStartDate(applicationResult.getDate(7));
					appReport.setEmployees(applicationResult.getInt(8));
					appReport.setStatus(applicationResult.getString(9));
					appReport.setOutstanding(applicationResult.getDouble(10));
					appReport.setIndustryType(applicationResult.getString(11));
					appReport.setTurnover(applicationResult.getDouble(12));
					appReport.setExport(applicationResult.getDouble(13));
					appReport.setChiefPromoter(applicationResult.getString(14));
					appReport.setItpan(applicationResult.getString(15));
					appReport.setGender(applicationResult.getString(16));
					appReport.setOthers(applicationResult.getString(17));
					appReport.setMemberId(applicationResult.getString(19));
					appReport.setCgpan(applicationResult.getString(18));
					appReport.setReferenceNumber(applicationResult
							.getString(25));
					appReport.setApplicationDate(applicationResult.getDate(21));
					appReport.setRemarks(applicationResult.getString(22));
					appReport.setStatus(applicationResult.getString(23));
					appReport.setLoanType(applicationResult.getString(24));
					appReport
							.setIndustrySector(applicationResult.getString(26));
					appReport.setBid(applicationResult.getString(27));
					appReport.setProjectOutlay(applicationResult.getDouble(28));
					appReport.setCity(applicationResult.getString(29));
					appReport
							.setTypeOfActivity(applicationResult.getString(30));
					appReport.setHandiCraftsAccFlag(applicationResult
							.getString(31));
					appReport.setDcHandicraftsReimb(applicationResult
							.getString(32));
					appReport.setAppDcIcardNo(applicationResult.getString(33));
					appReport.setAppDcIcardIssueDate(applicationResult
							.getDate(34));
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query1 = " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
						+ " t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION, "
						+ " t.TRM_SUBSIDY_EQUITY_SUPPORT,  t.TRM_OTHERS, "
						+ " a.APP_PROJECT_OUTLAY,  t.TRM_REPAYMENT_MORATORIUM, "
						+ " t.TRM_FIRST_INSTALLMENT_DUE_DT,  t.TRM_NO_OF_INSTALLMENTS, "
						+ " t.TRM_REPAYMENT_PERIODICITY,TRM_TENURE from "
						+ " term_loan_Detail t , application_Detail a, ssi_Detail s "
						+ " where LTRIM(RTRIM(UPPER(t.CGPAN))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
						+ " and a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID  = ? "
						+ " and t.APP_REF_NO = a.APP_REF_NO "
						+ " and a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER";
				applicationStmt = connection.prepareStatement(query1);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(3, memberId);
				applicationStmt.setString(2, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					appReport.setTcSanctionedOn(applicationResult.getDate(2));
					appReport.setTcSanctioned(applicationResult.getDouble(1));
					appReport.setTcRate(applicationResult.getDouble(3));
					appReport.setTcPlr(applicationResult.getDouble(4));
					appReport.setTcPromoterContribution(applicationResult
							.getDouble(5));
					appReport.setTcSubsidy(applicationResult.getDouble(6));
					appReport.setTcEquity(applicationResult.getDouble(7));
					appReport.setTcProjectCost(applicationResult.getDouble(8));
					appReport.setRepaymentMoratorium(applicationResult
							.getInt(9));
					appReport.setFirstInstallmentDueDate(applicationResult
							.getDate(10));
					appReport.setNumberOfInstallments(applicationResult
							.getInt(11));
					int repayment = applicationResult.getInt(12);
					if (repayment == 0) {
						appReport.setRepaymentPeriodicity("");
					}
					if (repayment == 1) {
						appReport.setRepaymentPeriodicity("Monthly");
					}
					if (repayment == 2) {
						appReport.setRepaymentPeriodicity("Quarterly");
					}
					if (repayment == 3) {
						appReport.setRepaymentPeriodicity("Half yearly");
					}
					appReport.setTcTenure(applicationResult.getInt(13));
					// applicationArray.add(appReport);
				}

				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query2 = "select t.WCP_FB_LIMIT_SANCTIONED, "
						+ " t.WCP_FB_LIMIT_SANCTIONED_DT, t.WCP_NFB_LIMIT_SANCTIONED,  "
						+ " t.WCP_NFB_LIMIT_SANCTIONED_DT, t.WCP_INTEREST, t.WCP_PLR,  "
						+ " t.WCP_PROMOTERS_CONTRIBUTION, t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS, "
						+ " a.APP_PROJECT_OUTLAY,NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0)+  "
						+ " NVL(tc.WCO_FB_INTEREST_OUTSTAND_AMT,0),  "
						+ " NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0)+NVL(tc.WCO_NFB_COMM_OUTSTAND_AMT,0),WCP_TENURE "
						+ " from working_capital_Detail t, wc_outstanding_detail tc, "
						+ " application_Detail a, ssi_detail s  "
						+ " where LTRIM(RTRIM(UPPER(t.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
						+ " and a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID = ? "
						+ " and t.APP_REF_NO = a.APP_REF_NO "
						+ " and t.APP_REF_NO = tc.APP_REF_NO(+)"
						+ " and a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER";
				applicationStmt = connection.prepareStatement(query2);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(3, memberId);
				applicationStmt.setString(2, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					appReport.setWcFbSanctioned(applicationResult.getDouble(1));
					appReport.setWcFbSanctionedOn(applicationResult.getDate(2));
					appReport
							.setWcNfbSanctioned(applicationResult.getDouble(3));
					appReport
							.setWcNfbSanctionedOn(applicationResult.getDate(4));
					appReport.setWcInterest(applicationResult.getDouble(5));
					appReport.setWcPlr(applicationResult.getDouble(6));
					appReport.setWcPromoterContribution(applicationResult
							.getDouble(7));
					appReport.setWcSubsidy(applicationResult.getDouble(8));
					appReport.setWcEquity(applicationResult.getDouble(9));
					appReport.setWcProjectCost(applicationResult.getDouble(10));
					appReport.setWcFbPrincipalOutstanding(applicationResult
							.getDouble(11));
					appReport.setWcNfbPrincipalOutstanding(applicationResult
							.getDouble(12));
					appReport.setWcTenure(applicationResult.getInt(13));
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query3 = "select d.DBR_AMOUNT, d.DBR_DT, d.DBR_FINAL_DISBURSEMENT_FLAG "
						+ " from disbursement_detail d, application_Detail a, ssi_detail s where "
						+ " LTRIM(RTRIM(UPPER(d.CGPAN))) = LTRIM(RTRIM(UPPER(?))) and d.CGPAN = "
						+ " a.CGPAN and a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID = ? and d.DBR_DT = (select max(DBR_DT) "
						+ " from disbursement_detail d where LTRIM(RTRIM(UPPER(d.CGPAN))) = "
						+ " LTRIM(RTRIM(UPPER(?)))) and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME)))"
						+ " like LTRIM(RTRIM(UPPER(?))) and a.SSI_REFERENCE_NUMBER = "
						+ " s.SSI_REFERENCE_NUMBER";

				applicationStmt = connection.prepareStatement(query3);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(3, cgpan);
				applicationStmt.setString(2, memberId);
				applicationStmt.setString(4, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					appReport.setDisbursementAmount(applicationResult
							.getDouble(1));
					appReport.setDisbursementDate(applicationResult.getDate(2));
					appReport.setFinalDisbursement(applicationResult
							.getString(3));

				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;

				String query4 = " select tc.TCO_OUTSTANDING_AMOUNT from TC_OUTSTANDING_DETAIL tc, "
						+ " application_Detail a, ssi_Detail s   where tc.CGPAN = ? and"
						+ "  tc.tco_outstanding_on_dt =(select max(tco_outstanding_on_dt) from "
						+ " TC_OUTSTANDING_DETAIL where CGPAN = ?) and a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID  = ? "
						+ " and  tc.APP_REF_NO = a.APP_REF_NO  "
						+ " and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?))) "
						+ " and a.SSI_REFERENCE_NUMBER =  s.SSI_REFERENCE_NUMBER";

				applicationStmt = connection.prepareStatement(query4);
				applicationStmt.setString(1, cgpan);
				applicationStmt.setString(2, cgpan);
				applicationStmt.setString(3, memberId);
				applicationStmt.setString(4, "%" + ssi + "%");
				applicationResult = applicationStmt.executeQuery();

				while (applicationResult.next()) {
					// appReport = new ApplicationReport();
					appReport.setTcOutstanding(applicationResult.getDouble(1));
					// System.out.println(applicationResult.getDouble(1));
					// System.out.println("----------------");
				}
				applicationResult.close();
				applicationResult = null;
				applicationStmt.close();
				applicationStmt = null;
				
				//added by sayali		
				String query5 = " SELECT MAX (r.REVIVAL_DATE),"
     +"  CASE WHEN MAX (r.REVIVAL_DATE) IS NOT NULL THEN 'Y' ELSE 'N' END AS STATUS"
     +" FROM revival_cgpan_data r,application_Detail a, ssi_Detail s "
     +" WHERE LTRIM(RTRIM(UPPER(r.CGPAN)))= LTRIM(RTRIM(UPPER(?)))"
     +" and LTRIM(RTRIM(UPPER(s.SSI_UNIT_NAME))) like LTRIM(RTRIM(UPPER(?)))"
     +" and a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER";

			// System.out.println("query-4:"+query4);
			applicationStmt = connection.prepareStatement(query5);
			applicationStmt.setString(1, cgpan);
			applicationStmt.setString(3, "%" + ssi + "%");
			applicationResult = applicationStmt.executeQuery();

			while (applicationResult.next()) {
				 appReport.setRevivalDate(applicationResult.getDate(1));
			     System.out.println( "Date" +applicationResult.getString(1));
				 appReport.setRevivalStatus(applicationResult.getString(2));
				 System.out.println( "Status"  +applicationResult.getString(2));
			}
			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;
				
				

			} catch (SQLException exception) {

				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "applicationReportForBranch", "Exited");
		return appReport;
	}

	public ApplicationReport applicationReportForCgpan(String cgpan)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "applicationReportForCgpan", "Entered");
		ApplicationReport appReport = null;
		ResultSet applicationResult;
		PreparedStatement applicationStmt = null;
		Connection connection = DBConnection.getConnection();

		try {
			String query = " select s.SSI_UNIT_NAME,s.SSI_ADDRESS,s.SSI_DISTRICT_NAME,"
					+ " s.SSI_STATE_NAME,s.SSI_CONSTITUTION, s.SSI_REGN_NUMBER,"
					+ " s.SSI_COMMENCEMENT_DT,s.SSI_NO_OF_EMPLOYEES,s.SSI_STATUS, "
					+ " s.SSI_EXISTING_OUTSTANDING_AMT,s.SSI_INDUSTRY_NATURE,"
					+ " s.SSI_PROJECTED_SALES_TURNOVER, s.SSI_PROJECTED_EXPORTS,"
					+ " p.PMR_CHIEF_FIRST_NAME||' '||p.PMR_CHIEF_MIDDLE_NAME||' '||p.PMR_CHIEF_LAST_NAME,"
					+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_GENDER, "
					+ " p.PMR_FIRST_NAME || ',' || p.PMR_SECOND_NAME || ',' || p.PMR_THIRD_NAME,"
					+ " a.CGPAN,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID, a.APP_REF_NO,"
					+ " a.APP_SUBMITTED_DT,a.APP_REMARKS,a.APP_STATUS,a.APP_LOAN_TYPE,"
					+ " a.APP_BANK_APP_REF_NO, s.SSI_INDUSTRY_SECTOR, s.BID,a.APP_PROJECT_OUTLAY, "
					+ " s.SSI_CITY || '-' || s.SSI_PINCODE,s.SSI_TYPE_OF_ACTIVITY,APP_EXPIRY_DT,S.SSI_REFERENCE_NUMBER,"
					+ " a.APP_DC_HANDICRAFT_ACC_FLAG,a.APP_DC_HANDICRAFT_REIMB,a.APP_DC_ICARD_NO,a.APP_DC_ICARD_ISSUE_DATE "
					+ " from ssi_detail s,"
					+ " promoter_detail p, application_detail a where"
					+ " s.SSI_REFERENCE_NUMBER = a.SSI_REFERENCE_NUMBER and "
					+ " s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER and"
					+ " LTRIM(RTRIM(UPPER(a.CGPAN))) = LTRIM(RTRIM(UPPER(?)))";

			applicationStmt = connection.prepareStatement(query);
			applicationStmt.setString(1, cgpan);
			// System.out.println("qUERY1" + query);
			applicationResult = applicationStmt.executeQuery();
			appReport = new ApplicationReport();

			while (applicationResult.next()) {

				appReport.setSsiName(applicationResult.getString(1));
				appReport.setAddress(applicationResult.getString(2));
				appReport.setDistrict(applicationResult.getString(3));
				appReport.setState(applicationResult.getString(4));
				appReport.setUnitType(applicationResult.getString(5));
				appReport.setRegistrationNumber(applicationResult.getString(6));
				appReport.setStartDate(applicationResult.getDate(7));
				appReport.setEmployees(applicationResult.getInt(8));
				appReport.setStatus(applicationResult.getString(9));
				appReport.setOutstanding(applicationResult.getDouble(10));
				appReport.setIndustryType(applicationResult.getString(11));
				appReport.setTurnover(applicationResult.getDouble(12));
				appReport.setExport(applicationResult.getDouble(13));
				appReport.setChiefPromoter(applicationResult.getString(14));
				appReport.setItpan(applicationResult.getString(15));
				appReport.setGender(applicationResult.getString(16));
				appReport.setOthers(applicationResult.getString(17));
				appReport.setMemberId(applicationResult.getString(19));
				appReport.setCgpan(applicationResult.getString(18));
				appReport.setReferenceNumber(applicationResult.getString(25));
				appReport.setApplicationDate(applicationResult.getDate(21));
				appReport.setRemarks(applicationResult.getString(22));
				appReport.setStatus(applicationResult.getString(23));
				appReport.setLoanType(applicationResult.getString(24));
				appReport.setIndustrySector(applicationResult.getString(26));
				appReport.setBid(applicationResult.getString(27));
				appReport.setProjectOutlay(applicationResult.getDouble(28));
				appReport.setCity(applicationResult.getString(29));
				appReport.setTypeOfActivity(applicationResult.getString(30));
				appReport.setExpiryDate(applicationResult.getDate(31));
				appReport
						.setSsiReferenceNumber(applicationResult.getString(32));
				appReport
						.setHandiCraftsAccFlag(applicationResult.getString(33));
				appReport
						.setDcHandicraftsReimb(applicationResult.getString(34));
				appReport.setAppDcIcardNo(applicationResult.getString(35));
				appReport.setAppDcIcardIssueDate(applicationResult.getDate(36));
				// applicationArray.add(appReport);
			}
			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;

			String query1 = " select t.TRM_AMOUNT_SANCTIONED,t.TRM_AMOUNT_SANCTIONED_DT, "
					+ "t.TRM_INTEREST_RATE, t.TRM_PLR, t.TRM_PROMOTER_CONTRIBUTION, "
					+ "t.TRM_SUBSIDY_EQUITY_SUPPORT,  t.TRM_OTHERS, "
					+ "a.APP_PROJECT_OUTLAY,  t.TRM_REPAYMENT_MORATORIUM, "
					+ "t.TRM_FIRST_INSTALLMENT_DUE_DT,  t.TRM_NO_OF_INSTALLMENTS, "
					+ "t.TRM_REPAYMENT_PERIODICITY,TRM_TENURE from "
					+ "term_loan_Detail t , application_Detail a "
					+ "where LTRIM(RTRIM(UPPER(t.CGPAN))) = LTRIM(RTRIM(UPPER(?))) "
					+ "and t.APP_REF_NO = a.APP_REF_NO ";
			applicationStmt = connection.prepareStatement(query1);
			applicationStmt.setString(1, cgpan);
			applicationResult = applicationStmt.executeQuery();
			// System.out.println("qUERY2" + query1);
			while (applicationResult.next()) {
				appReport.setTcSanctionedOn(applicationResult.getDate(2));
				appReport.setTcSanctioned(applicationResult.getDouble(1));
				appReport.setTcRate(applicationResult.getDouble(3));
				appReport.setTcPlr(applicationResult.getDouble(4));
				appReport.setTcPromoterContribution(applicationResult
						.getDouble(5));
				appReport.setTcSubsidy(applicationResult.getDouble(6));
				appReport.setTcEquity(applicationResult.getDouble(7));
				appReport.setTcProjectCost(applicationResult.getDouble(8));
				appReport.setRepaymentMoratorium(applicationResult.getInt(9));
				appReport.setFirstInstallmentDueDate(applicationResult
						.getDate(10));
				appReport.setNumberOfInstallments(applicationResult.getInt(11));
				int repayment = applicationResult.getInt(12);
				if (repayment == 0) {
					appReport.setRepaymentPeriodicity("");
				}
				if (repayment == 1) {
					appReport.setRepaymentPeriodicity("Monthly");
				}
				if (repayment == 2) {
					appReport.setRepaymentPeriodicity("Quarterly");
				}
				if (repayment == 3) {
					appReport.setRepaymentPeriodicity("Half yearly");
				}
				appReport.setTcTenure(applicationResult.getInt(13));
				// applicationArray.add(appReport);
			}
			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;

			String query2 = "select t.WCP_FB_LIMIT_SANCTIONED, "
					+ "t.WCP_FB_LIMIT_SANCTIONED_DT, t.WCP_NFB_LIMIT_SANCTIONED, "
					+ "t.WCP_NFB_LIMIT_SANCTIONED_DT, t.WCP_INTEREST, t.WCP_PLR, "
					+ "t.WCP_PROMOTERS_CONTRIBUTION, t.WCP_SUBSIDY_EQUITY_SUPPORT,t.WCP_OTHERS, "
					+ "NVL(t.WCP_PROMOTERS_CONTRIBUTION,0)+NVL(t.WCP_SUBSIDY_EQUITY_SUPPORT,0)+ "
					+ " NVL(t.WCP_OTHERS,0),NVL(tc.WCO_FB_PRINCIPAL_OUTSTAND_AMT,0)+ "
					+ "NVL(tc.WCO_FB_INTEREST_OUTSTAND_AMT,0), "
					+ " NVL(tc.WCO_NFB_PRINCIPAL_OUTSTAND_AMT,0)+NVL(tc.WCO_NFB_COMM_OUTSTAND_AMT,0),WCP_TENURE "
					+ " from working_capital_Detail t, wc_outstanding_detail tc "
					+ "where LTRIM(RTRIM(UPPER(tc.CGPAN))) = LTRIM(RTRIM(UPPER(?)))"
					+ " and LTRIM(RTRIM(UPPER(t.CGPAN))) = LTRIM(RTRIM(UPPER(?)))";
			applicationStmt = connection.prepareStatement(query2);
			applicationStmt.setString(1, cgpan);
			applicationStmt.setString(2, cgpan);
			applicationResult = applicationStmt.executeQuery();
			// System.out.println("qUERY3" + query2);

			while (applicationResult.next()) {
				appReport.setWcFbSanctioned(applicationResult.getDouble(1));
				appReport.setWcFbSanctionedOn(applicationResult.getDate(2));
				appReport.setWcNfbSanctioned(applicationResult.getDouble(3));
				appReport.setWcNfbSanctionedOn(applicationResult.getDate(4));
				appReport.setWcInterest(applicationResult.getDouble(5));
				appReport.setWcPlr(applicationResult.getDouble(6));
				appReport.setWcPromoterContribution(applicationResult
						.getDouble(7));
				appReport.setWcSubsidy(applicationResult.getDouble(8));
				appReport.setWcEquity(applicationResult.getDouble(9));
				appReport.setWcProjectCost(applicationResult.getDouble(10));
				appReport.setWcFbPrincipalOutstanding(applicationResult
						.getDouble(11));
				appReport.setWcNfbPrincipalOutstanding(applicationResult
						.getDouble(12));
				appReport.setWcTenure(applicationResult.getInt(13));
			}
			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;

			String query3 = "select DBR_AMOUNT, DBR_DT, DBR_FINAL_DISBURSEMENT_FLAG from "
					+ " disbursement_detail where DBR_DT = (select max(DBR_DT) from "
					+ " disbursement_detail where LTRIM(RTRIM(UPPER(CGPAN))) = LTRIM(RTRIM(UPPER(?))))"
					+ " and LTRIM(RTRIM(UPPER(CGPAN))) = LTRIM(RTRIM(UPPER(?)))";
			applicationStmt = connection.prepareStatement(query3);
			applicationStmt.setString(1, cgpan);
			applicationStmt.setString(2, cgpan);
			applicationResult = applicationStmt.executeQuery();
			// System.out.println("qUERY4" + query3);

			while (applicationResult.next()) {
				// appReport = new ApplicationReport();
				appReport.setDisbursementAmount(applicationResult.getDouble(1));
				appReport.setDisbursementDate(applicationResult.getDate(2));
				appReport.setFinalDisbursement(applicationResult.getString(3));

			}
			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;

			String query4 = " select tc.TCO_OUTSTANDING_AMOUNT from TC_OUTSTANDING_DETAIL tc "
					+ "   where tc.CGPAN = ? and tc.tco_outstanding_on_dt"
					+ " =(select max(tco_outstanding_on_dt) from "
					+ " TC_OUTSTANDING_DETAIL where CGPAN = ?)";

			// System.out.println(query3);
			// System.out.println("qUERY5" + query4);
			applicationStmt = connection.prepareStatement(query4);
			applicationStmt.setString(1, cgpan);
			applicationStmt.setString(2, cgpan);
			applicationResult = applicationStmt.executeQuery();

			while (applicationResult.next()) {
				// appReport = new ApplicationReport();
				// System.out.println("-------TC -Outstanding---------");
				appReport.setTcOutstanding(applicationResult.getDouble(1));
				// System.out.println(applicationResult.getDouble(1));
				// System.out.println("----------------");
			}
			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;

			String query5 = " SELECT  M.MEM_BANK_NAME BANK,M.MEM_ZONE_NAME ZONE, "
					+ " DECODE(MEM_BRANCH_NAME,NULL,APP_MLI_BRANCH_NAME,MEM_BRANCH_NAME) BRANCH, "
					+ " M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID MEMBERID,APP_REF_NO APPREF,CGPAN CGPAN, "
					+ " SCM_NAME SCHEME,APP_BANK_APP_REF_NO BANKREF,APP_LOAN_TYPE LOANTYPE, "
					+ " APP_SUBMITTED_DT SUBMITTEDDT,DECODE(APP_REAPPROVE_AMOUNT,NULL,APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT) APPROVEDAMT, "
					+ " TRUNC(APP_APPROVED_DATE_TIME) APPROVEDDT,APP_GUAR_START_DATE_TIME GUARSTDT,APP_STATUS STATUS,APP_EXPIRY_DT EXPIRTDT FROM APPLICATION_DETAIL A,MEMBER_INFO M,SCHEME_MASTER SC WHERE "
					+ " A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID=M.MEM_BNK_ID||M.MEM_ZNE_ID||M.MEM_BRN_ID "
					+ " AND A.APP_STATUS NOT IN ('RE') AND A.SCM_ID=SC.SCM_ID AND A.CGPAN= ? ";

			applicationStmt = connection.prepareStatement(query5);
			applicationStmt.setString(1, cgpan);
			applicationResult = applicationStmt.executeQuery();
			// System.out.println("qUERY5" + query5);
			while (applicationResult.next()) {
				appReport.setBankName(applicationResult.getString(1));
				appReport.setZoneName(applicationResult.getString(2));
				appReport.setBranchName(applicationResult.getString(3));
				appReport.setMemberId(applicationResult.getString(4));
				appReport.setAppRefNo(applicationResult.getString(5));
				appReport.setCgpan(applicationResult.getString(6));
				appReport.setSchemeName(applicationResult.getString(7));
				appReport.setAppBankAppRefNo(applicationResult.getString(8));
				appReport.setLoanType(applicationResult.getString(9));
				appReport.setApplicationDate(applicationResult.getDate(10));
				appReport.setAppApprovedAmount(applicationResult.getString(11));
				appReport.setAppApprovedDateTime(applicationResult.getDate(12));
				appReport
						.setAppGuarStartDateTime(applicationResult.getDate(13));
				appReport.setStatus(applicationResult.getString(14));
				appReport.setExpiryDate(applicationResult.getDate(15));

			}

			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;

			String query6 = "SELECT PMR_CHIEF_TITLE||' '||PMR_CHIEF_FIRST_NAME||' '||PMR_CHIEF_MIDDLE_NAME||' '||PMR_CHIEF_LAST_NAME CHIEFPROMNAME, "
					+ " PMR_CHIEF_IT_PAN ITPAN,PMR_CHIEF_GENDER GENDER,PMR_CHIEF_SOCIAL_CAT SOCIALCAT, "
					+ " PMR_CHIEF_DOB "
					+ " FROM APPLICATION_DETAIL A,PROMOTER_DETAIL P "
					+ " WHERE A.SSI_REFERENCE_NUMBER=P.SSI_REFERENCE_NUMBER "
					+ " AND APP_STATUS NOT IN ('RE') " + " AND A.CGPAN=? ";
			applicationStmt = connection.prepareStatement(query6);
			applicationStmt.setString(1, cgpan);
			applicationResult = applicationStmt.executeQuery();
			while (applicationResult.next()) {
				appReport.setChiefPromoter(applicationResult.getString(1));
				appReport.setItpan(applicationResult.getString(2));
				appReport.setGender(applicationResult.getString(3));
				appReport.setSocialCategory(applicationResult.getString(4));
				appReport.setPromoterDob(applicationResult.getDate(5));

			}

			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;

			String query7 = " SELECT  NPA_EFFECTIVE_DT NPAEFFECTIVEDT,NPA_CGTSI_REPORTING_DT REPORTINGDT, "
					+ " NPA_OUTSTANDING_AMT_ON_NPA_DT OUTSTANDINGASONDTNPA,NPA_REASONS_TURNING_NPA NPAREASONS, "
					+ " LDT_SUIT_NUMBER,LDT_LEGAL_FORUM,LDT_FORUM_NAME,LDT_LOCATION,LDT_FILING_DT, "
					+ " LDT_LEGAL_CLAIM_AMOUNT "
					+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL_TEMP N, "
					+ " LEGAL_DETAIL_TEMP L WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
					+ " AND S.BID=N.BID "
					+ " AND N.NPA_ID=L.NPA_ID "
					+ " AND A.APP_STATUS NOT IN ('RE') "
					+ " AND A.CGPAN= ? "
					+ " UNION ALL "
					+ " SELECT  NPA_EFFECTIVE_DT NPAEFFECTIVEDT,NPA_CGTSI_REPORTING_DT REPORTINGDT, "
					+ " NPA_OUTSTANDING_AMT_ON_NPA_DT OUTSTANDINGASONDTNPA,NPA_REASONS_TURNING_NPA NPAREASONS, "
					+ " LDT_SUIT_NUMBER,LDT_LEGAL_FORUM,LDT_FORUM_NAME,LDT_LOCATION,LDT_FILING_DT, "
					+ " LDT_LEGAL_CLAIM_AMOUNT "
					+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL_TEMP N, "
					+ " LEGAL_DETAIL L WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
					+ " AND S.BID=N.BID "
					+ " AND N.NPA_ID=L.NPA_ID "
					+ " AND A.APP_STATUS NOT IN ('RE') "
					+ " AND A.CGPAN= ? "
					+ " UNION ALL "
					+ " SELECT  NPA_EFFECTIVE_DT NPAEFFECTIVEDT,NPA_CGTSI_REPORTING_DT REPORTINGDT, "
					+ " NPA_OUTSTANDING_AMT_ON_NPA_DT OUTSTANDINGASONDTNPA,NPA_REASONS_TURNING_NPA NPAREASONS, "
					+ " LDT_SUIT_NUMBER,LDT_LEGAL_FORUM,LDT_FORUM_NAME,LDT_LOCATION,LDT_FILING_DT, "
					+ " LDT_LEGAL_CLAIM_AMOUNT "
					+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,NPA_DETAIL N, "
					+ " LEGAL_DETAIL L WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
					+ " AND S.BID=N.BID "
					+ " AND N.NPA_ID=L.NPA_ID "
					+ " AND A.APP_STATUS NOT IN ('RE') " + " AND A.CGPAN= ? ";
			applicationStmt = connection.prepareStatement(query7);
			applicationStmt.setString(1, cgpan);
			applicationStmt.setString(2, cgpan);
			applicationStmt.setString(3, cgpan);
			// System.out.println("Query 7 Executed"+query7);
			applicationResult = applicationStmt.executeQuery();
			// System.out.println("Query 7 Successfully Executed");
			while (applicationResult.next()) {
				appReport.setNpaEffectiveDt(applicationResult.getDate(1));
				appReport.setReportingDt(applicationResult.getDate(2));
				appReport.setOutstandingAsonNPA(applicationResult.getDouble(3));
				appReport.setNpaReasons(applicationResult.getString(4));
				appReport.setSuitNumber(applicationResult.getString(5));
				appReport.setLegalForum(applicationResult.getString(6));
				appReport.setForumName(applicationResult.getString(7));
				appReport.setLocation(applicationResult.getString(8));
				appReport.setLegalFilingDt(applicationResult.getDate(9));
				appReport.setLegalClaimAmt(applicationResult.getDouble(10));

			}

			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;

			String query8 = "SELECT CLM_REF_NO CLMREF,CGCLAN CLAN,CLM_FILING_DT FILINGDT, "
					+ " CLM_APPROVED_AMT CLMAPPROVEDAMT, "
					+ " TRUNC(CLM_APPROVED_DT) APPROVEDT,CLM_STATUS STATUS,CLM_DATE CLMDATE, "
					+ " CLM_CREATED_MODIFIED_BY USERID,CLM_OFFICIAL_NAME OFFICIALNAME,CLM_OFFICIAL_DESIGNATION DESG "
					+ " FROM CLAIM_DETAIL C,SSI_DETAIL S,APPLICATION_DETAIL A "
					+ " WHERE C.BID=S.BID "
					+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
					+ " AND A.APP_STATUS NOT IN ('RE') "
					+ " AND A.CGPAN= ? "
					+ " UNION ALL "
					+ " SELECT CLM_REF_NO CLMREF,CGCLAN CLAN,CLM_FILING_DT FILINGDT, "
					+ " CLM_APPROVED_AMT CLMAPPROVEDAMT, "
					+ " TRUNC(CLM_CREATED_MODIFIED_DT) APPROVEDT,CLM_STATUS STATUS,CLM_DATE CLMDATE,  "
					+ " CLM_CREATED_MODIFIED_BY USERID,CLM_OFFICIAL_NAME OFFICIALNAME,CLM_OFFICIAL_DESIGNATION DESG  "
					+ " FROM CLAIM_DETAIL_TEMP C,SSI_DETAIL S,APPLICATION_DETAIL A "
					+ " WHERE C.BID=S.BID "
					+ " AND A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
					+ " AND A.APP_STATUS NOT IN ('RE') " + " AND A.CGPAN= ? ";

			applicationStmt = connection.prepareStatement(query8);
			applicationStmt.setString(1, cgpan);
			applicationStmt.setString(2, cgpan);
			applicationResult = applicationStmt.executeQuery();
			while (applicationResult.next()) {
				appReport.setClaimRefNo(applicationResult.getString(1));
				appReport.setCgClan(applicationResult.getString(2));
				appReport.setClaimFilingDt(applicationResult.getDate(3));
				appReport.setClaimApprovedAmt(applicationResult.getDouble(4));
				appReport.setClaimApprovedDt(applicationResult.getDate(5));
				appReport.setClaimStatus(applicationResult.getString(6));
				appReport.setClaimDate(applicationResult.getDate(7));
			}
			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;

			String query9 = "SELECT TC_SANCTIONED_AMT,WC_FB_LIMIT, "
					+ "  WC_NFB_LIMIT,SANCTIOED_DT,TENURE FROM VIEW_CGPAN_HISTORY WHERE CGPAN= ? ";

			applicationStmt = connection.prepareStatement(query9);
			applicationStmt.setString(1, cgpan);
			applicationResult = applicationStmt.executeQuery();
			while (applicationResult.next()) {
				appReport.setTcSanctioned(applicationResult.getDouble(1));
				appReport.setWcFbSanctioned(applicationResult.getDouble(2));
				appReport.setWcNfbSanctioned(applicationResult.getDouble(3));
				appReport.setTcSanctionedOn(applicationResult.getDate(4));
				appReport.setTcTenure(applicationResult.getInt(5));
			}
			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;

			// Diksha 06/11/2017

			String query10 = "SELECT MIN(NVL(p.PMR_BANK_ACCOUNT_NO,'NA')) AS PMR_BANK_ACCOUNT_NO"
					+ " FROM PROMOTER_DETAIL p, application_detail a, SSI_DETAIL S"
					+ " WHERE a.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER"
					+ " AND A.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER"
					+ " AND (a.cgpan = '" + cgpan + "')";

			// System.out.println("Query5:6===43552====="+query5);
			applicationStmt = connection.prepareStatement(query10);
			// applicationStmt.setString(1, cgpan);
			// applicationStmt.setString(2, cgpan);
			applicationResult = applicationStmt.executeQuery();
			// System.out.println("Query:"+query10);

			while (applicationResult.next()) {
				// appReport = new ApplicationReport();
				// System.out.println("-------TC -Outstanding---------");
				appReport.setPmrBankAccNo(applicationResult.getString(1));
				// System.out.println(applicationResult.getDouble(1));
				// System.out.println("----------------");
			}
			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;

			// end diksha

			// Diksha 06/11/2017

			//sayali added---------------
			String query11 = "SELECT MAX (REVIVAL_DATE),"
                           +" CASE WHEN MAX (REVIVAL_DATE) IS NOT NULL THEN 'Y' ELSE 'N' END "
                           +" AS STATUS "
                           +" FROM revival_cgpan_data WHERE LTRIM(RTRIM(UPPER(CGPAN)))= LTRIM(RTRIM(UPPER(?)))";

			// System.out.println("Query5:6===43552====="+query5);
			 applicationStmt = connection.prepareStatement(query11);
			 applicationStmt.setString(1, cgpan);
			// applicationStmt.setString(2, cgpan);
			 applicationResult = applicationStmt.executeQuery();
			// System.out.println("Query:"+query5);

			 while (applicationResult.next()) {
				// appReport = new ApplicationReport();
				  appReport.setRevivalDate(applicationResult.getDate(1));
			      System.out.println( "Date" +applicationResult.getString(1));
				  appReport.setRevivalStatus(applicationResult.getString(2));
				 System.out.println( "Status"  +applicationResult.getString(2));
			
				// System.out.println("----------------");
			}
			applicationResult.close();
			applicationResult = null;
			applicationStmt.close();
			applicationStmt = null;
			
			
//end by sayali	
	
		} catch (SQLException exception) {
			Log.logException(exception);

			throw new DatabaseException(exception.getMessage());

		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "applicationReportForCgpan", "Exited");
		return appReport;
	}

	/**
	 * 
	 * @param payId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getAllocationCancelledReport(String payId, String id)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getAllocationCancelledReport",
				"Entered");

		ArrayList rpCancelledReport = new ArrayList();

		PreparedStatement pStmt = null;
		ResultSet rsSet = null;
		Connection connection = DBConnection.getConnection();
		try {
			String query = "SELECT A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID MEMBERID, "
					+ " S.SSI_UNIT_NAME UNITNAME,D.DAN_ID DAN,D.CGPAN CGPAN,DCI_AMOUNT_RAISED AMOUNT, "
					+ "  D.PAY_ID RP,DCI_REMARKS REMARKS,P.PAY_INSTRUMENT_NUMBER DDNUM, "
					+ "  P.PAY_INSTRUMENT_DT DDDT "
					+ " FROM DAN_CGPAN_INFO_TEMP_CANC D,APPLICATION_DETAIL A,SSI_DETAIL S, "
					+ " PAYMENT_DETAIL_TEMP_CANC P "
					+ " WHERE A.SSI_REFERENCE_NUMBER=S.SSI_REFERENCE_NUMBER "
					+ " AND A.CGPAN=D.CGPAN "
					+ " AND D.PAY_ID=? "
					+ " AND D.PAY_ID=P.PAY_ID ";
			// System.out.println("id:"+id);
			if ((id.equals(null)) || (id.equals(""))) {
				query = query + "  ORDER BY 1,2";
			} else {
				query = query
						+ " AND A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID= '"
						+ id + "' ORDER BY 1,2";
			}
			// System.out.println("Query 2:"+ query);
			pStmt = connection.prepareStatement(query);
			pStmt.setString(1, payId);
			rsSet = pStmt.executeQuery();
			while (rsSet.next()) {
				ApplicationReport appReport = new ApplicationReport();
				appReport.setMemberId(rsSet.getString(1));
				appReport.setBid(rsSet.getString(2));
				appReport.setDan(rsSet.getString(3));
				appReport.setCgpan(rsSet.getString(4));
				appReport.setDciAmountRaised(rsSet.getString(5));
				appReport.setPayId(rsSet.getString(6));
				appReport.setRemarks(rsSet.getString(7));
				appReport.setDdNum(rsSet.getString(8));
				appReport.setDbrDt(rsSet.getDate(9));
				rpCancelledReport.add(appReport);
			}

			rsSet.close();
			pStmt.close();
		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "getAllocationCancelledReport", "Exited");

		return rpCancelledReport;

	}

	/**
	 * 
	 * @param payId
	 * @param memberId
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getAllocationCancelledList(String memberId,
			java.sql.Date startDate, java.sql.Date endDate)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getAllocationCancelledList", "Entered");

		ArrayList rpCancelledReport = new ArrayList();

		PreparedStatement pStmt = null;
		ResultSet rsSet = null;
		Connection connection = DBConnection.getConnection();
		if (startDate != null) {
			try {
				String query = "SELECT DAI.MEM_BNK_ID||DAI.MEM_ZNE_ID||DAI.MEM_BRN_ID MEMBERID,P.PAY_ID RP,SUM(DCI_AMOUNT_RAISED) DANAMT, "
						+ " P.PAY_INSTRUMENT_NUMBER DDNUM,P.PAY_INSTRUMENT_DT DDDT "
						+ " FROM DAN_CGPAN_INFO_TEMP_CANC D,PAYMENT_DETAIL_TEMP_CANC P,DEMAND_ADVICE_INFO DAI "
						+ " WHERE D.PAY_ID=P.PAY_ID "
						+ " AND TRUNC(DCI_ALLOCATION_DT) BETWEEN ? AND ? ";
				if ((memberId.equals(null)) || (memberId.equals(""))) {
					query = query
							+ " AND D.DAN_ID=DAI.DAN_ID GROUP BY DAI.MEM_BNK_ID||DAI.MEM_ZNE_ID||DAI.MEM_BRN_ID,P.PAY_ID,  P.PAY_INSTRUMENT_NUMBER,P.PAY_INSTRUMENT_DT ORDER BY 1 ";
				} else {
					query = query
							+ " AND D.DAN_ID=DAI.DAN_ID AND DAI.MEM_BNK_ID||DAI.MEM_ZNE_ID||DAI.MEM_BRN_ID='"
							+ memberId
							+ "' GROUP BY DAI.MEM_BNK_ID||DAI.MEM_ZNE_ID||DAI.MEM_BRN_ID,P.PAY_ID, P.PAY_INSTRUMENT_NUMBER,P.PAY_INSTRUMENT_DT ORDER BY 1 ";
				}
				// " AND D.DAN_ID=DAI.DAN_ID "+
				// " AND DAI.MEM_BNK_ID||DAI.MEM_ZNE_ID||DAI.MEM_BRN_ID=? "+
				// " GROUP BY DAI.MEM_BNK_ID||DAI.MEM_ZNE_ID||DAI.MEM_BRN_ID,P.PAY_ID, "+
				// " P.PAY_INSTRUMENT_NUMBER,P.PAY_INSTRUMENT_DT ";
				// System.out.println("Query:"+query);
				pStmt = connection.prepareStatement(query);
				pStmt.setDate(1, startDate);
				pStmt.setDate(2, endDate);
				rsSet = pStmt.executeQuery();
				while (rsSet.next()) {
					ApplicationReport appReport = new ApplicationReport();
					appReport.setMemberId(rsSet.getString(1));
					appReport.setPayId(rsSet.getString(2));
					appReport.setDciAmountRaised(rsSet.getString(3));
					appReport.setDdNum(rsSet.getString(4));
					appReport.setDbrDt(rsSet.getDate(5));
					rpCancelledReport.add(appReport);
				}

				rsSet.close();
				pStmt.close();
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		} else if (startDate == null) {
			try {
				String query = "SELECT DAI.MEM_BNK_ID||DAI.MEM_ZNE_ID||DAI.MEM_BRN_ID MEMBERID,P.PAY_ID RP,SUM(DCI_AMOUNT_RAISED) DANAMT, "
						+ " P.PAY_INSTRUMENT_NUMBER DDNUM,P.PAY_INSTRUMENT_DT DDDT "
						+ " FROM DAN_CGPAN_INFO_TEMP_CANC D,PAYMENT_DETAIL_TEMP_CANC P,DEMAND_ADVICE_INFO DAI "
						+ " WHERE D.PAY_ID=P.PAY_ID "
						+ " AND TRUNC(DCI_ALLOCATION_DT) <= ? "
						+ " AND D.DAN_ID=DAI.DAN_ID ";
				if ((memberId.equals(null)) || (memberId.equals(""))) {
					query = query
							+ " AND D.DAN_ID=DAI.DAN_ID GROUP BY DAI.MEM_BNK_ID||DAI.MEM_ZNE_ID||DAI.MEM_BRN_ID,P.PAY_ID,  P.PAY_INSTRUMENT_NUMBER,P.PAY_INSTRUMENT_DT ORDER BY 1 ";
				} else {
					query = query
							+ " AND D.DAN_ID=DAI.DAN_ID AND DAI.MEM_BNK_ID||DAI.MEM_ZNE_ID||DAI.MEM_BRN_ID='"
							+ memberId
							+ "' GROUP BY DAI.MEM_BNK_ID||DAI.MEM_ZNE_ID||DAI.MEM_BRN_ID,P.PAY_ID, P.PAY_INSTRUMENT_NUMBER,P.PAY_INSTRUMENT_DT  ORDER BY 1";
				}
				// " AND DAI.MEM_BNK_ID||DAI.MEM_ZNE_ID||DAI.MEM_BRN_ID=? "+
				// " GROUP BY DAI.MEM_BNK_ID||DAI.MEM_ZNE_ID||DAI.MEM_BRN_ID,P.PAY_ID, "+
				// " P.PAY_INSTRUMENT_NUMBER,P.PAY_INSTRUMENT_DT ";
				// System.out.println("Query1:"+query);
				pStmt = connection.prepareStatement(query);
				pStmt.setDate(1, endDate);
				if (memberId != null) {
					pStmt.setString(2, memberId);
				}
				rsSet = pStmt.executeQuery();
				while (rsSet.next()) {
					ApplicationReport appReport = new ApplicationReport();
					appReport.setMemberId(rsSet.getString(1));
					appReport.setPayId(rsSet.getString(2));
					appReport.setDciAmountRaised(rsSet.getString(3));
					appReport.setDdNum(rsSet.getString(4));
					appReport.setDbrDt(rsSet.getDate(5));
					rpCancelledReport.add(appReport);
				}

				rsSet.close();
				pStmt.close();
			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}
		Log.log(Log.INFO, "ReportDAO", "getAllocationCancelledList", "Exited");

		return rpCancelledReport;
	}

	/**
	 * Added by sukumar@path This method provides the all the details of entered
	 * CGPAN
	 * 
	 * @param cgpan
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public ArrayList getCgpanHistoryReportDetails(String cgpan)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getCgpanHistoryReportDetails",
				"Entered");

		PreparedStatement pStmt = null;
		ArrayList aList = new ArrayList();
		ResultSet rsSet = null;
		Connection connection = DBConnection.getConnection();
		try {
			/*
			 * String query =
			 * "SELECT A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID,S.SSI_UNIT_NAME,D.DAN_ID,D.CGPAN,"
			 * +
			 * " DECODE(A.APP_REAPPROVE_AMOUNT,NULL,A.APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT),DCI_AMOUNT_RAISED,D.PAY_ID,DCI_GUARANTEE_START_DT,APP_EXPIRY_DT, "
			 * +
			 * " APP_STATUS,TRUNC(DCI_APPROPRIATION_DT),DCI_APPROPRIATION_BY FROM APPLICATION_DETAIL A,SSI_DETAIL S,DAN_CGPAN_INFO D "
			 * +
			 * " WHERE A.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER AND A.CGPAN = D.CGPAN "
			 * + " AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))<>0 "+
			 * " AND A.CGPAN = ? ";
			 */
	/*		String query = "SELECT A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID,S.SSI_UNIT_NAME,D.DAN_ID,D.CGPAN,"
					+ " DECODE(A.APP_REAPPROVE_AMOUNT,NULL,A.APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT), "
					+ " DCI_AMOUNT_RAISED,D.PAY_ID,DCI_GUARANTEE_START_DT,APP_EXPIRY_DT, "
					+ " APP_STATUS,TRUNC(DCI_APPROPRIATION_DT),DCI_APPROPRIATION_BY,P.PAY_INSTRUMENT_NUMBER DDNUM, "
					+ " NVL(APP_CLOSURE_DATE,''),TRUNC(DAN_GENERATED_DT)  FROM APPLICATION_DETAIL A,SSI_DETAIL S,DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI "
					+ " WHERE A.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER AND A.CGPAN = D.CGPAN  "
					+ " AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))<>0 "
					+ " AND D.DAN_ID=DAI.DAN_ID AND D.PAY_ID=P.PAY_ID AND DCI_ALLOCATION_FLAG='Y' AND A.CGPAN = ? "
					+ " UNION ALL "
					+ " SELECT A.MEM_BNK_ID||A.MEM_ZNE_ID||A.MEM_BRN_ID,S.SSI_UNIT_NAME,D.DAN_ID,D.CGPAN, "
					+ " DECODE(A.APP_REAPPROVE_AMOUNT,NULL,A.APP_APPROVED_AMOUNT,APP_REAPPROVE_AMOUNT), "
					+ " DCI_AMOUNT_RAISED,D.PAY_ID,DCI_GUARANTEE_START_DT,APP_EXPIRY_DT, "
					+ " APP_STATUS,TRUNC(DCI_APPROPRIATION_DT),DCI_APPROPRIATION_BY,'' DDNUM, "
					+ " NVL(APP_CLOSURE_DATE,''),TRUNC(DAN_GENERATED_DT) "
					+ " FROM APPLICATION_DETAIL A,SSI_DETAIL S,DAN_CGPAN_INFO D, DEMAND_ADVICE_INFO DAI "
					+ " WHERE A.SSI_REFERENCE_NUMBER =S.SSI_REFERENCE_NUMBER AND A.CGPAN = D.CGPAN AND D.DAN_ID=DAI.DAN_ID "
					+ " AND (DCI_AMOUNT_RAISED-NVL(DCI_AMOUNT_CANCELLED,0))<>0  "
					+ " AND DCI_ALLOCATION_FLAG='N' AND A.CGPAN = ? "
					+ " ORDER BY 15 ";*/
			String query="SELECT A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID,"
				+ "  S.SSI_UNIT_NAME,"
				+ "   D.DAN_ID,"
				+ " D.CGPAN,"
				+ " DECODE (A.APP_REAPPROVE_AMOUNT,"
				+ "      NULL, A.APP_APPROVED_AMOUNT,"
				+ "      APP_REAPPROVE_AMOUNT),"
				+ "       (select OUTSTANDING_AMT from service_fee_staging s where OUTSTANDING_AMT is not null and d.dan_id =s.dan_id ) as OUTSTANDING_AMT,"
				+ " DCI_AMOUNT_RAISED,"
				+ " D.PAY_ID,"
				+ "  DCI_GUARANTEE_START_DT,"
				+ " APP_EXPIRY_DT,"
				+ " APP_STATUS,"
				+ " TRUNC (DCI_APPROPRIATION_DT),"
				+ " DCI_APPROPRIATION_BY,"
				+ " P.PAY_INSTRUMENT_NUMBER DDNUM,"
				+ "  NVL (APP_CLOSURE_DATE, ''),"
				+ "  TRUNC (DAN_GENERATED_DT)"
				+ " FROM APPLICATION_DETAIL A,"
				+ "   SSI_DETAIL S,"
				+ " DAN_CGPAN_INFO D,"
				+ "  PAYMENT_DETAIL P,"
				+ "    DEMAND_ADVICE_INFO DAI"
				+ " WHERE     A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER"
				+ "  AND A.CGPAN = D.CGPAN"
				+ "  AND (DCI_AMOUNT_RAISED - NVL (DCI_AMOUNT_CANCELLED, 0)) <> 0"
				+ "  AND D.DAN_ID = DAI.DAN_ID"
				+ "  AND D.PAY_ID = P.PAY_ID"
				+ "  AND DCI_ALLOCATION_FLAG = 'Y'"
				+ "  AND A.CGPAN = ?"
				+ " UNION ALL"
				+ " SELECT A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID,"
				+ "   S.SSI_UNIT_NAME,"
				+ "    D.DAN_ID,"
				+ "  D.CGPAN,"
				+ "  DECODE (A.APP_REAPPROVE_AMOUNT,"
				+ "        NULL, A.APP_APPROVED_AMOUNT,"
				+ "      APP_REAPPROVE_AMOUNT),"
				+ "         (select OUTSTANDING_AMT from service_fee_staging s where OUTSTANDING_AMT is not null and d.dan_id =s.dan_id ) as OUTSTANDING_AMT,"
				+ "   DCI_AMOUNT_RAISED,"
				+ " D.PAY_ID,"
				+ "   DCI_GUARANTEE_START_DT,"
		       + "  APP_EXPIRY_DT,"
		       + "  APP_STATUS,"
		       + "   TRUNC (DCI_APPROPRIATION_DT),"
		       + "  DCI_APPROPRIATION_BY,"
		       + "   '' DDNUM,"
		       + "  NVL (APP_CLOSURE_DATE, ''),"
		       + " TRUNC (DAN_GENERATED_DT)"
		       + "  FROM APPLICATION_DETAIL A,"
		       + "      SSI_DETAIL S,"
		       + "   DAN_CGPAN_INFO D,"
		       + "  DEMAND_ADVICE_INFO DAI"
		       + "  WHERE     A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER"
		       + "  AND A.CGPAN = D.CGPAN"
		       + "  AND D.DAN_ID = DAI.DAN_ID"
		       + "    AND (DCI_AMOUNT_RAISED - NVL (DCI_AMOUNT_CANCELLED, 0)) <> 0"
		       + " AND DCI_ALLOCATION_FLAG = 'N'"
		       + "  AND A.CGPAN = ? "
		       + " ORDER BY 16";
			
			// System.out.println("Query:"+query);
			pStmt = connection.prepareStatement(query);
			pStmt.setString(1, cgpan);
			pStmt.setString(2, cgpan);
			rsSet = pStmt.executeQuery();
			while (rsSet.next()) {
				ApplicationReport appReport = new ApplicationReport();
				appReport.setMemberId(rsSet.getString(1));
				appReport.setSsiName(rsSet.getString(2));
				appReport.setDan(rsSet.getString(3));
				appReport.setCgpan(rsSet.getString(4));
				appReport.setAppApprovedAmount(rsSet.getString(5));
				appReport.setDbrAmount(rsSet.getString(6));
				appReport.setAppGuaranteeFee(rsSet.getString(7));
				appReport.setPayId(rsSet.getString(8));
				appReport.setAppGuarStartDateTime(rsSet.getDate(9));
				appReport.setExpiryDate(rsSet.getDate(10));
				appReport.setStatus(rsSet.getString(11));
				appReport.setStartDate(rsSet.getDate(12));
				appReport.setUsrId(rsSet.getString(13));
				appReport.setDdNum(rsSet.getString(14));
				appReport.setClosureDate(rsSet.getDate(15));
				aList.add(appReport);

			}
			rsSet.close();
			pStmt.close();

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "getCgpanHistoryReportDetails", "Exited");
		return aList;
	}

	/* ##################################################################333 */

	public ArrayList proposalSizeWise(java.sql.Date startDate,
			java.sql.Date endDate, String guarantee) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "proposalSizeWise", "Entered");
		PreparedStatement sizeWiseStmt = null;
		ResultSet sizeWiseResult = null;
		Connection connection = DBConnection.getConnection();
		HashMap sizeReport = new HashMap();
		ArrayList sizeReportDetails = new ArrayList();
		String active = "A";

		if (guarantee.equals("no")) {
			try {
				if (startDate != null) { /*
										 * query modification@sudeep.dhiman to
										 * get resultset in sorted order
										 */
					String query = "SELECT w,x,y,z,o FROM(select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount))"
							+ " y ,count(*) z,0 o "
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and m.mem_zne_id = a.mem_zne_id "
							+ " and m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) between  ? and ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)"
							+ " between  1 and 5000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,1 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	m.mem_zne_id = a.mem_zne_id "
							+ " and	m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) between  ? and ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  5001 and 10000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,2 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	m.mem_zne_id = a.mem_zne_id "
							+ " and	m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) between  ? and ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  10001   and 15000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y "
							+ " ,count(*) z,3 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	m.mem_zne_id = a.mem_zne_id "
							+ " and	m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) between  ? and ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  15001 and 20000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,4 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	m.mem_zne_id = a.mem_zne_id "
							+ " and	m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) between  ? and ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  20001 and 25000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,5 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	m.mem_zne_id	= a.mem_zne_id "
							+ " and	m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) between  ? and ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  25001 and 50000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,6 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	m.mem_zne_id	= a.mem_zne_id "
							+ " and	m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) between  ? and ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  50001 and 75000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,7 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	m.mem_zne_id = a.mem_zne_id "
							+ " and	m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) between  ? and ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  75001 and 100000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,8 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	m.mem_zne_id	= a.mem_zne_id "
							+ " and	m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) between  ? and ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  100001 and 200000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,9 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	m.mem_zne_id	= a.mem_zne_id "
							+ " and	m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) between  ? and ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  200001 and 500000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,10 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	m.mem_zne_id	= a.mem_zne_id "
							+ " and	m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) between  ? and ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) >= 500001  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID )order by x";

					sizeWiseStmt = connection.prepareStatement(query);
					sizeWiseStmt.setDate(1, startDate);
					sizeWiseStmt.setDate(2, endDate);
					sizeWiseStmt.setString(3, active);
					sizeWiseStmt.setDate(4, startDate);
					sizeWiseStmt.setDate(5, endDate);
					sizeWiseStmt.setString(6, active);
					sizeWiseStmt.setDate(7, startDate);
					sizeWiseStmt.setDate(8, endDate);
					sizeWiseStmt.setString(9, active);
					sizeWiseStmt.setDate(10, startDate);
					sizeWiseStmt.setDate(11, endDate);
					sizeWiseStmt.setString(12, active);
					sizeWiseStmt.setDate(13, startDate);
					sizeWiseStmt.setDate(14, endDate);
					sizeWiseStmt.setString(15, active);
					sizeWiseStmt.setDate(16, startDate);
					sizeWiseStmt.setDate(17, endDate);
					sizeWiseStmt.setString(18, active);
					sizeWiseStmt.setDate(19, startDate);
					sizeWiseStmt.setDate(20, endDate);
					sizeWiseStmt.setString(21, active);
					sizeWiseStmt.setDate(22, startDate);
					sizeWiseStmt.setDate(23, endDate);
					sizeWiseStmt.setString(24, active);
					sizeWiseStmt.setDate(25, startDate);
					sizeWiseStmt.setDate(26, endDate);
					sizeWiseStmt.setString(27, active);
					sizeWiseStmt.setDate(28, startDate);
					sizeWiseStmt.setDate(29, endDate);
					sizeWiseStmt.setString(30, active);
					sizeWiseStmt.setDate(31, startDate);
					sizeWiseStmt.setDate(32, endDate);
					sizeWiseStmt.setString(33, active);

					// System.out.println("the query is ::::::::::::::::"+query);
					sizeWiseResult = sizeWiseStmt.executeQuery();

					while (sizeWiseResult.next()) {
						// SizeWiseReport sizeWiseReport = new SizeWiseReport();
						String memberId = sizeWiseResult.getString(1);
						SizeWiseReport sizeWiseReport = (SizeWiseReport) sizeReport
								.get(memberId);
						int index = sizeWiseResult.getInt(5);

						if (sizeWiseReport == null) {
							sizeWiseReport = new SizeWiseReport();

							if (index == 0) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange0(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount0(sizeWiseResult
										.getInt(4));

							} else if (index == 1) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange1(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount1(sizeWiseResult
										.getInt(4));

							} else if (index == 2) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange2(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount2(sizeWiseResult
										.getInt(4));

							} else if (index == 3) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange3(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount3(sizeWiseResult
										.getInt(4));

							} else if (index == 4) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange4(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount4(sizeWiseResult
										.getInt(4));

							} else if (index == 5) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange5(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount5(sizeWiseResult
										.getInt(4));

							} else if (index == 6) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange6(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount6(sizeWiseResult
										.getInt(4));

							} else if (index == 7) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange7(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount7(sizeWiseResult
										.getInt(4));

							} else if (index == 8) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange8(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount8(sizeWiseResult
										.getInt(4));

							} else if (index == 9) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange9(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount9(sizeWiseResult
										.getInt(4));

							} else if (index == 10) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange10(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount10(sizeWiseResult
										.getInt(4));

							}

							sizeReport.put(memberId, sizeWiseReport);

						} else {
							if (index == 0) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange0(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount0(sizeWiseResult
										.getInt(4));
							} else if (index == 1) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange1(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount1(sizeWiseResult
										.getInt(4));

							} else if (index == 2) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange2(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount2(sizeWiseResult
										.getInt(4));

							} else if (index == 3) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange3(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount3(sizeWiseResult
										.getInt(4));

							} else if (index == 4) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange4(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount4(sizeWiseResult
										.getInt(4));

							} else if (index == 5) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange5(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount5(sizeWiseResult
										.getInt(4));

							} else if (index == 6) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange6(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount6(sizeWiseResult
										.getInt(4));

							} else if (index == 7) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange7(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount7(sizeWiseResult
										.getInt(4));

							} else if (index == 8) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange8(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount8(sizeWiseResult
										.getInt(4));

							} else if (index == 9) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange9(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount9(sizeWiseResult
										.getInt(4));

							} else if (index == 10) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange10(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount10(sizeWiseResult
										.getInt(4));
							}

						}
					}
				} else if (startDate == null) { /*
												 * query
												 * modification@sudeep.dhiman to
												 * get resultset in sorted order
												 */
					String query = " SELECT w,x,y,z,o FROM(select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,0 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	   m.mem_zne_id	= a.mem_zne_id "
							+ " and	   m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) <= ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  1 and 5000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,1 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	   m.mem_zne_id	= a.mem_zne_id "
							+ " and	   m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) <= ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  5001 and 10000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,2 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	   m.mem_zne_id	= a.mem_zne_id "
							+ " and	   m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) <= ?"
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  10001   and 15000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,3 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	   m.mem_zne_id	= a.mem_zne_id "
							+ " and	   m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) <= ?"
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  15001 and 20000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,4 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	   m.mem_zne_id	= a.mem_zne_id "
							+ " and	   m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) <= ?"
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  20001 and 25000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,5 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	   m.mem_zne_id	= a.mem_zne_id "
							+ " and	   m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) <= ?"
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  25001 and 50000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,6 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	   m.mem_zne_id	= a.mem_zne_id "
							+ " and	   m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) <= ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  50001 and 75000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,7 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	   m.mem_zne_id	= a.mem_zne_id "
							+ " and	   m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) <= ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  75001 and 100000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,8 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and m.mem_zne_id	= a.mem_zne_id "
							+ " and m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) <= ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  100001 and 200000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,9 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and m.mem_zne_id	= a.mem_zne_id "
							+ " and m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) <= ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  200001 and 500000  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ " union "
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,"
							+ " count(*) z,10 o"
							+ " from member_info m, application_Detail a "
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ " and	   m.mem_zne_id	= a.mem_zne_id "
							+ " and	   m.mem_brn_id = a.mem_brn_id "
							+ " and trunc(a.APP_GUAR_START_DATE_TIME) <= ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) >= 500001  "
							+ " and m.MEM_STATUS = ? "
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID )order by x";

					sizeWiseStmt = connection.prepareStatement(query);
					sizeWiseStmt.setDate(1, endDate);
					sizeWiseStmt.setString(2, active);
					sizeWiseStmt.setDate(3, endDate);
					sizeWiseStmt.setString(4, active);
					sizeWiseStmt.setDate(5, endDate);
					sizeWiseStmt.setString(6, active);
					sizeWiseStmt.setDate(7, endDate);
					sizeWiseStmt.setString(8, active);
					sizeWiseStmt.setDate(9, endDate);
					sizeWiseStmt.setString(10, active);
					sizeWiseStmt.setDate(11, endDate);
					sizeWiseStmt.setString(12, active);
					sizeWiseStmt.setDate(13, endDate);
					sizeWiseStmt.setString(14, active);
					sizeWiseStmt.setDate(15, endDate);
					sizeWiseStmt.setString(16, active);
					sizeWiseStmt.setDate(17, endDate);
					sizeWiseStmt.setString(18, active);
					sizeWiseStmt.setDate(19, endDate);
					sizeWiseStmt.setString(20, active);
					sizeWiseStmt.setDate(21, endDate);
					sizeWiseStmt.setString(22, active);

					// System.out.println("the query is #####################"+query);
					sizeWiseResult = sizeWiseStmt.executeQuery();

					while (sizeWiseResult.next()) {
						// SizeWiseReport sizeWiseReport = new SizeWiseReport();
						String memberId = sizeWiseResult.getString(1);
						SizeWiseReport sizeWiseReport = (SizeWiseReport) sizeReport
								.get(memberId);
						int index = sizeWiseResult.getInt(5);
						if (sizeWiseReport == null) {
							sizeWiseReport = new SizeWiseReport();

							if (index == 0) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange0(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount0(sizeWiseResult
										.getInt(4));
							} else if (index == 1) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange1(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount1(sizeWiseResult
										.getInt(4));
							} else if (index == 2) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange2(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount2(sizeWiseResult
										.getInt(4));
							} else if (index == 3) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange3(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount3(sizeWiseResult
										.getInt(4));
							} else if (index == 4) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange4(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount4(sizeWiseResult
										.getInt(4));
							} else if (index == 5) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange5(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount5(sizeWiseResult
										.getInt(4));
							} else if (index == 6) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange6(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount6(sizeWiseResult
										.getInt(4));
							} else if (index == 7) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange7(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount7(sizeWiseResult
										.getInt(4));
							} else if (index == 8) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange8(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount8(sizeWiseResult
										.getInt(4));
							} else if (index == 9) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange9(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount9(sizeWiseResult
										.getInt(4));
							} else if (index == 10) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange10(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount10(sizeWiseResult
										.getInt(4));
							}

							sizeReport.put(memberId, sizeWiseReport);

						} else {
							if (index == 0) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange0(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount0(sizeWiseResult
										.getInt(4));
							} else if (index == 1) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange1(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount1(sizeWiseResult
										.getInt(4));
							} else if (index == 2) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange2(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount2(sizeWiseResult
										.getInt(4));
							} else if (index == 3) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange3(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount3(sizeWiseResult
										.getInt(4));
							} else if (index == 4) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange4(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount4(sizeWiseResult
										.getInt(4));
							} else if (index == 5) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange5(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount5(sizeWiseResult
										.getInt(4));
							} else if (index == 6) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange6(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount6(sizeWiseResult
										.getInt(4));
							} else if (index == 7) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange7(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount7(sizeWiseResult
										.getInt(4));
							} else if (index == 8) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange8(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount8(sizeWiseResult
										.getInt(4));
							} else if (index == 9) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange9(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount9(sizeWiseResult
										.getInt(4));
							} else if (index == 10) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange10(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount10(sizeWiseResult
										.getInt(4));
							}

						}

					}

				}
				Set sizeReportSet = sizeReport.keySet();
				Iterator sizeReportIterator = sizeReportSet.iterator();

				while (sizeReportIterator.hasNext()) {
					SizeWiseReport sizeReportDetail = new SizeWiseReport();
					String sizeKey = (String) sizeReportIterator.next();
					sizeReportDetail = (SizeWiseReport) sizeReport.get(sizeKey);
					sizeReportDetail.setBankId(sizeKey);
					sizeReportDetails.add(sizeReportDetail);

				}
				sizeWiseResult.close();
				sizeWiseResult = null;
				sizeWiseStmt.close();
				sizeWiseStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (guarantee.equals("yes")) {
			try {
				if (startDate != null) { /*
										 * query modification@sudeep.dhiman to
										 * get resultset in sorted order
										 */
					String query = "SELECT w,x,y,z,o FROM(select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,0 o"
							+ " from member_info m, application_Detail a,view_appl_amounts vw"
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID"
							+ " and	m.mem_zne_id = a.mem_zne_id"
							+ " and	m.mem_brn_id = a.mem_brn_id"
							+ " and a.cgpan = vw.cgpan"
							+ " and trunc(a.APP_APPROVED_DATE_TIME) between  ? and ?"
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  1 and 5000"
							+ " and m.MEM_STATUS = ?"
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID"
							+ " union"
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,1 o"
							+ " from member_info m, application_Detail a,view_appl_amounts vw"
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID"
							+ " and	m.mem_zne_id = a.mem_zne_id"
							+ " and	m.mem_brn_id = a.mem_brn_id"
							+ " and a.cgpan = vw.cgpan"
							+ " and trunc(a.APP_APPROVED_DATE_TIME) between  ? and ?"
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  5001 and 10000"
							+ " and m.MEM_STATUS = ?"
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID"
							+ " union"
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,2 o"
							+ " from member_info m, application_Detail a,view_appl_amounts vw"
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID"
							+ " and	m.mem_zne_id = a.mem_zne_id"
							+ " and	m.mem_brn_id = a.mem_brn_id"
							+ " and a.cgpan = vw.cgpan"
							+ " and trunc(a.APP_APPROVED_DATE_TIME) between  ? and ?"
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  10001   and 15000"
							+ " and m.MEM_STATUS = ?"
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID"
							+ " union"
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,3 o"
							+ " from member_info m, application_Detail a,view_appl_amounts vw"
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID"
							+ " and	m.mem_zne_id = a.mem_zne_id"
							+ " and	m.mem_brn_id = a.mem_brn_id"
							+ " and a.cgpan = vw.cgpan"
							+ " and trunc(a.APP_APPROVED_DATE_TIME) between  ? and ?"
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  15001 and 20000"
							+ " and m.MEM_STATUS = ?"
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID"
							+ " union"
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,4 o"
							+ " from member_info m, application_Detail a,view_appl_amounts vw"
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID"
							+ " and	m.mem_zne_id = a.mem_zne_id"
							+ " and	m.mem_brn_id = a.mem_brn_id"
							+ " and a.cgpan = vw.cgpan"
							+ " and trunc(a.APP_APPROVED_DATE_TIME) between  ? and ?"
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  20001 and 25000"
							+ " and m.MEM_STATUS = ?"
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID"
							+ " union"
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,5 o"
							+ " from member_info m, application_Detail a,view_appl_amounts vw"
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID"
							+ " and	m.mem_zne_id = a.mem_zne_id"
							+ " and	m.mem_brn_id = a.mem_brn_id"
							+ " and a.cgpan = vw.cgpan"
							+ " and trunc(a.APP_APPROVED_DATE_TIME) between  ? and ?"
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  25001 and 50000"
							+ " and m.MEM_STATUS = ?"
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID"
							+ " union"
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,6 o"
							+ " from member_info m, application_Detail a,view_appl_amounts vw"
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID"
							+ " and	m.mem_zne_id = a.mem_zne_id"
							+ " and	m.mem_brn_id = a.mem_brn_id"
							+ " and a.cgpan = vw.cgpan"
							+ " and trunc(a.APP_APPROVED_DATE_TIME) between  ? and ?"
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  50001 and 75000"
							+ " and m.MEM_STATUS = ?"
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID"
							+ " union"
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,7 o"
							+ " from member_info m, application_Detail a,view_appl_amounts vw"
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID"
							+ " and	m.mem_zne_id = a.mem_zne_id"
							+ " and	m.mem_brn_id = a.mem_brn_id"
							+ " and a.cgpan = vw.cgpan"
							+ " and trunc(a.APP_APPROVED_DATE_TIME) between  ? and ?"
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  75001 and 100000"
							+ " and m.MEM_STATUS = ?"
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID"
							+ " union"
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,8 o"
							+ " from member_info m, application_Detail a,view_appl_amounts vw"
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID"
							+ " and	m.mem_zne_id = a.mem_zne_id"
							+ " and	m.mem_brn_id = a.mem_brn_id"
							+ " and a.cgpan = vw.cgpan"
							+ " and trunc(a.APP_APPROVED_DATE_TIME) between  ? and ?"
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  100001 and 200000"
							+ " and m.MEM_STATUS = ?"
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID"
							+ " union"
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,9 o"
							+ " from member_info m, application_Detail a,view_appl_amounts vw"
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID"
							+ " and	m.mem_zne_id = a.mem_zne_id"
							+ " and	m.mem_brn_id = a.mem_brn_id"
							+ " and a.cgpan = vw.cgpan"
							+ " and trunc(a.APP_APPROVED_DATE_TIME) between  ? and ?"
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  200001 and 500000"
							+ " and m.MEM_STATUS = ?"
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID"
							+ " union"
							+ " select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ " SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,10 o"
							+ " from member_info m, application_Detail a,view_appl_amounts vw"
							+ " where m.MEM_BNK_ID = a.MEM_BNK_ID"
							+ " and	m.mem_zne_id = a.mem_zne_id"
							+ " and	m.mem_brn_id = a.mem_brn_id"
							+ " and a.cgpan = vw.cgpan"
							+ " and trunc(a.APP_APPROVED_DATE_TIME) between  ? and ? "
							+ " and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) >= 500001"
							+ " and m.MEM_STATUS = ?"
							+ " group by m.MEM_BANK_NAME,m.MEM_BNK_ID)order by x";
					sizeWiseStmt = connection.prepareStatement(query);
					sizeWiseStmt.setDate(1, startDate);
					sizeWiseStmt.setDate(2, endDate);
					sizeWiseStmt.setString(3, active);
					sizeWiseStmt.setDate(4, startDate);
					sizeWiseStmt.setDate(5, endDate);
					sizeWiseStmt.setString(6, active);
					sizeWiseStmt.setDate(7, startDate);
					sizeWiseStmt.setDate(8, endDate);
					sizeWiseStmt.setString(9, active);
					sizeWiseStmt.setDate(10, startDate);
					sizeWiseStmt.setDate(11, endDate);
					sizeWiseStmt.setString(12, active);
					sizeWiseStmt.setDate(13, startDate);
					sizeWiseStmt.setDate(14, endDate);
					sizeWiseStmt.setString(15, active);
					sizeWiseStmt.setDate(16, startDate);
					sizeWiseStmt.setDate(17, endDate);
					sizeWiseStmt.setString(18, active);
					sizeWiseStmt.setDate(19, startDate);
					sizeWiseStmt.setDate(20, endDate);
					sizeWiseStmt.setString(21, active);
					sizeWiseStmt.setDate(22, startDate);
					sizeWiseStmt.setDate(23, endDate);
					sizeWiseStmt.setString(24, active);
					sizeWiseStmt.setDate(25, startDate);
					sizeWiseStmt.setDate(26, endDate);
					sizeWiseStmt.setString(27, active);
					sizeWiseStmt.setDate(28, startDate);
					sizeWiseStmt.setDate(29, endDate);
					sizeWiseStmt.setString(30, active);
					sizeWiseStmt.setDate(31, startDate);
					sizeWiseStmt.setDate(32, endDate);
					sizeWiseStmt.setString(33, active);
					// System.out.println("the query is $$$$$$$$$$$$$$$$$$$$$"+query);

					sizeWiseResult = sizeWiseStmt.executeQuery();

					while (sizeWiseResult.next()) {
						// SizeWiseReport sizeWiseReport = new SizeWiseReport();
						String memberId = sizeWiseResult.getString(1);
						SizeWiseReport sizeWiseReport = (SizeWiseReport) sizeReport
								.get(memberId);
						int index = sizeWiseResult.getInt(5);

						if (sizeWiseReport == null) {
							sizeWiseReport = new SizeWiseReport();

							if (index == 0) {

								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange0(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount0(sizeWiseResult
										.getInt(4));
							} else if (index == 1) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange1(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount1(sizeWiseResult
										.getInt(4));
							} else if (index == 2) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange2(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount2(sizeWiseResult
										.getInt(4));
							} else if (index == 3) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange3(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount3(sizeWiseResult
										.getInt(4));
							} else if (index == 4) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange4(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount4(sizeWiseResult
										.getInt(4));
							} else if (index == 5) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange5(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount5(sizeWiseResult
										.getInt(4));
							} else if (index == 6) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange6(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount6(sizeWiseResult
										.getInt(4));
							} else if (index == 7) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange7(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount7(sizeWiseResult
										.getInt(4));
							} else if (index == 8) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange8(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount8(sizeWiseResult
										.getInt(4));
							} else if (index == 9) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange9(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount9(sizeWiseResult
										.getInt(4));
							} else if (index == 10) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange10(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount10(sizeWiseResult
										.getInt(4));
							}

							sizeReport.put(memberId, sizeWiseReport);

						} else {
							if (index == 0) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange0(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount0(sizeWiseResult
										.getInt(4));
							} else if (index == 1) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange1(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount1(sizeWiseResult
										.getInt(4));
							} else if (index == 2) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange2(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount2(sizeWiseResult
										.getInt(4));
							} else if (index == 3) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange3(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount3(sizeWiseResult
										.getInt(4));
							} else if (index == 4) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange4(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount4(sizeWiseResult
										.getInt(4));
							} else if (index == 5) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange5(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount5(sizeWiseResult
										.getInt(4));
							} else if (index == 6) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange6(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount6(sizeWiseResult
										.getInt(4));
							} else if (index == 7) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange7(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount7(sizeWiseResult
										.getInt(4));
							} else if (index == 8) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange8(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount8(sizeWiseResult
										.getInt(4));
							} else if (index == 9) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange9(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount9(sizeWiseResult
										.getInt(4));
							} else if (index == 10) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange10(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount10(sizeWiseResult
										.getInt(4));
							}

						}
					}

				} else if (startDate == null) { /*
												 * query
												 * modification@sudeep.dhiman to
												 * get resultset in sorted order
												 */
					String query = "SELECT w,x,y,z,o FROM(select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ "SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,0 o "
							+ "from member_info m, application_Detail a "
							+ "where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ "and	   m.mem_zne_id	= a.mem_zne_id "
							+ "and	   m.mem_brn_id = a.mem_brn_id "
							+ "and trunc(a.APP_APPROVED_DATE_TIME) <= ? "
							+ "and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  1 and 5000  "
							+ "and m.MEM_STATUS = ? "
							+ "group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ "union "
							+ "select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ "SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,1 o "
							+ "from member_info m, application_Detail a "
							+ "where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ "and	   m.mem_zne_id	= a.mem_zne_id "
							+ "and	   m.mem_brn_id = a.mem_brn_id "
							+ "and trunc(a.APP_APPROVED_DATE_TIME) <= ? "
							+ "and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  5001 and 10000  "
							+ "and m.MEM_STATUS = ? "
							+ "group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ "union "
							+ "select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ "SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,2 o "
							+ "from member_info m, application_Detail a "
							+ "where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ "and	   m.mem_zne_id	= a.mem_zne_id "
							+ "and	   m.mem_brn_id = a.mem_brn_id "
							+ "and trunc(a.APP_APPROVED_DATE_TIME) <= ?"
							+ "and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  10001   and 15000  "
							+ "and m.MEM_STATUS = ? "
							+ "group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ "union "
							+ "select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ "SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,3 o "
							+ "from member_info m, application_Detail a "
							+ "where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ "and	   m.mem_zne_id	= a.mem_zne_id "
							+ "and	   m.mem_brn_id = a.mem_brn_id "
							+ "and trunc(a.APP_APPROVED_DATE_TIME) <= ?"
							+ "and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  15001 and 20000  "
							+ "and m.MEM_STATUS = ? "
							+ "group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ "union "
							+ "select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ "SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,4 o "
							+ "from member_info m, application_Detail a "
							+ "where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ "and	   m.mem_zne_id	= a.mem_zne_id "
							+ "and	   m.mem_brn_id = a.mem_brn_id "
							+ "and trunc(a.APP_APPROVED_DATE_TIME) <= ?"
							+ "and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  20001 and 25000  "
							+ "and m.MEM_STATUS = ? "
							+ "group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ "union "
							+ "select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ "SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,5 o "
							+ "from member_info m, application_Detail a "
							+ "where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ "and	   m.mem_zne_id	= a.mem_zne_id "
							+ "and	   m.mem_brn_id = a.mem_brn_id "
							+ "and trunc(a.APP_APPROVED_DATE_TIME) <= ?"
							+ "and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  25001 and 50000  "
							+ "and m.MEM_STATUS = ? "
							+ "group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ "union "
							+ "select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ "SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,6 o "
							+ "from member_info m, application_Detail a "
							+ "where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ "and	   m.mem_zne_id	= a.mem_zne_id "
							+ "and	   m.mem_brn_id = a.mem_brn_id "
							+ "and trunc(a.APP_APPROVED_DATE_TIME) <= ? "
							+ "and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  50001 and 75000  "
							+ "and m.MEM_STATUS = ? "
							+ "group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ "union "
							+ "select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ "SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,7 o "
							+ "from member_info m, application_Detail a "
							+ "where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ "and	   m.mem_zne_id	= a.mem_zne_id "
							+ "and	   m.mem_brn_id = a.mem_brn_id "
							+ "and trunc(a.APP_APPROVED_DATE_TIME) <= ? "
							+ "and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  75001 and 100000  "
							+ "and m.MEM_STATUS = ? "
							+ "group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ "union "
							+ "select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ "SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,8 o "
							+ "from member_info m, application_Detail a "
							+ "where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ "and	   m.mem_zne_id	= a.mem_zne_id "
							+ "and	   m.mem_brn_id = a.mem_brn_id "
							+ "and trunc(a.APP_APPROVED_DATE_TIME) <= ? "
							+ "and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  100001 and 200000  "
							+ "and m.MEM_STATUS = ? "
							+ "group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ "union "
							+ "select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ "SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,9 o "
							+ "from member_info m, application_Detail a "
							+ "where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ "and	   m.mem_zne_id	= a.mem_zne_id "
							+ "and	   m.mem_brn_id = a.mem_brn_id "
							+ "and trunc(a.APP_APPROVED_DATE_TIME) <= ? "
							+ "and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) between  200001 and 500000  "
							+ "and m.MEM_STATUS = ? "
							+ "group by m.MEM_BANK_NAME,m.MEM_BNK_ID "
							+ "union "
							+ "select m.MEM_BNK_ID w ,m.MEM_BANK_NAME x ,"
							+ "SUM(decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount)) y ,count(*) z,10 o "
							+ "from member_info m, application_Detail a "
							+ "where m.MEM_BNK_ID = a.MEM_BNK_ID "
							+ "and	   m.mem_zne_id	= a.mem_zne_id "
							+ "and	   m.mem_brn_id = a.mem_brn_id "
							+ "and trunc(a.APP_APPROVED_DATE_TIME) <= ? "
							+ "and decode(a.app_reapprove_amount,null,a.app_approved_amount,a.app_reapprove_amount) >= 500001  "
							+ "and m.MEM_STATUS = ? "
							+ "group by m.MEM_BANK_NAME,m.MEM_BNK_ID ) order by x";
					sizeWiseStmt = connection.prepareStatement(query);
					sizeWiseStmt.setDate(1, endDate);
					sizeWiseStmt.setString(2, active);
					sizeWiseStmt.setDate(3, endDate);
					sizeWiseStmt.setString(4, active);
					sizeWiseStmt.setDate(5, endDate);
					sizeWiseStmt.setString(6, active);
					sizeWiseStmt.setDate(7, endDate);
					sizeWiseStmt.setString(8, active);
					sizeWiseStmt.setDate(9, endDate);
					sizeWiseStmt.setString(10, active);
					sizeWiseStmt.setDate(11, endDate);
					sizeWiseStmt.setString(12, active);
					sizeWiseStmt.setDate(13, endDate);
					sizeWiseStmt.setString(14, active);
					sizeWiseStmt.setDate(15, endDate);
					sizeWiseStmt.setString(16, active);
					sizeWiseStmt.setDate(17, endDate);
					sizeWiseStmt.setString(18, active);
					sizeWiseStmt.setDate(19, endDate);
					sizeWiseStmt.setString(20, active);
					sizeWiseStmt.setDate(21, endDate);
					sizeWiseStmt.setString(22, active);

					// System.out.println("the query is >>>>>>>>>>>>>>>>>>>>>>."+query);

					sizeWiseResult = sizeWiseStmt.executeQuery();

					while (sizeWiseResult.next()) {
						// SizeWiseReport sizeWiseReport = new SizeWiseReport();
						String memberId = sizeWiseResult.getString(1);
						SizeWiseReport sizeWiseReport = (SizeWiseReport) sizeReport
								.get(memberId);
						int index = sizeWiseResult.getInt(5);
						if (sizeWiseReport == null) {
							sizeWiseReport = new SizeWiseReport();

							if (index == 0) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange0(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount0(sizeWiseResult
										.getInt(4));
							} else if (index == 1) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange1(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount1(sizeWiseResult
										.getInt(4));
							} else if (index == 2) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange2(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount2(sizeWiseResult
										.getInt(4));
							} else if (index == 3) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange3(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount3(sizeWiseResult
										.getInt(4));
							} else if (index == 4) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange4(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount4(sizeWiseResult
										.getInt(4));
							} else if (index == 5) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange5(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount5(sizeWiseResult
										.getInt(4));
							} else if (index == 6) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange6(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount6(sizeWiseResult
										.getInt(4));
							} else if (index == 7) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange7(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount7(sizeWiseResult
										.getInt(4));
							} else if (index == 8) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange8(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount8(sizeWiseResult
										.getInt(4));
							} else if (index == 9) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange9(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount9(sizeWiseResult
										.getInt(4));
							} else if (index == 10) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange10(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount10(sizeWiseResult
										.getInt(4));
							}

							sizeReport.put(memberId, sizeWiseReport);

						} else {
							if (index == 0) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange0(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount0(sizeWiseResult
										.getInt(4));
							} else if (index == 1) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange1(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount1(sizeWiseResult
										.getInt(4));
							} else if (index == 2) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange2(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount2(sizeWiseResult
										.getInt(4));
							} else if (index == 3) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange3(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount3(sizeWiseResult
										.getInt(4));
							} else if (index == 4) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange4(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount4(sizeWiseResult
										.getInt(4));
							} else if (index == 5) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange5(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount5(sizeWiseResult
										.getInt(4));
							} else if (index == 6) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange6(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount6(sizeWiseResult
										.getInt(4));
							} else if (index == 7) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange7(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount7(sizeWiseResult
										.getInt(4));
							} else if (index == 8) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange8(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount8(sizeWiseResult
										.getInt(4));
							} else if (index == 9) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange9(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount9(sizeWiseResult
										.getInt(4));
							} else if (index == 10) {
								sizeWiseReport.setBank(sizeWiseResult
										.getString(2));
								sizeWiseReport.setRange10(sizeWiseResult
										.getDouble(3));
								sizeWiseReport.setCount10(sizeWiseResult
										.getInt(4));
							}

						}

					}

				}
				Set sizeReportSet = sizeReport.keySet();
				Iterator sizeReportIterator = sizeReportSet.iterator();

				while (sizeReportIterator.hasNext()) {
					SizeWiseReport sizeReportDetail = new SizeWiseReport();
					String sizeKey = (String) sizeReportIterator.next();
					sizeReportDetail = (SizeWiseReport) sizeReport.get(sizeKey);
					sizeReportDetail.setBankId(sizeKey);
					sizeReportDetails.add(sizeReportDetail);

				}
				sizeWiseResult.close();
				sizeWiseResult = null;
				sizeWiseStmt.close();
				sizeWiseStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "proposalSizeWise", "Exited");
		return sizeReportDetails;
	}

	/*
	 * ##########################################################################
	 * ##################3
	 */

	public ArrayList proposalSectorWise(java.sql.Date startDate,
			java.sql.Date endDate, String guarantee) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "proposalSectorWise", "Entered");
		PreparedStatement sectorWiseStmt = null;
		ResultSet sectorWiseResult;
		Connection connection = DBConnection.getConnection();
		ArrayList sectorWiseArray = new ArrayList();

		if (startDate != null) {
			if (guarantee.equals("yes")) {
				try {
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					String query =
					/**/"select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN), "
							+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
							+ " from ssi_detail ssi, application_detail app,"
							+ " view_appl_amounts vw where app.CGPAN = vw.CGPAN and"
							+ " ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
							+ " trunc(app.APP_APPROVED_DATE_TIME) between ? and ? group by ssi.SSI_INDUSTRY_SECTOR"
							+ " order by ssi.SSI_INDUSTRY_SECTOR";

					sectorWiseStmt = connection.prepareStatement(query);
					sectorWiseStmt.setDate(1, startDate); // Set startDate
															// parameter
					sectorWiseStmt.setDate(2, endDate); // Set endDate parameter
					sectorWiseResult = sectorWiseStmt.executeQuery();

					while (sectorWiseResult.next()) {
						GeneralReport sectorWiseReport = new GeneralReport();
						sectorWiseReport.setType(sectorWiseResult.getString(1));
						sectorWiseReport.setProposals(sectorWiseResult
								.getInt(2));
						sectorWiseReport.setAmount(sectorWiseResult
								.getDouble(3));
						sectorWiseArray.add(sectorWiseReport);
					}
					sectorWiseResult.close();
					sectorWiseResult = null;
					sectorWiseStmt.close();
					sectorWiseStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			} else if (guarantee.equals("no")) {
				try {
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN), "
							+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
							+ " from ssi_detail ssi, application_detail app,"
							+ " view_appl_amounts vw where app.CGPAN = vw.CGPAN and"
							+ " ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
							+ " trunc(app.APP_GUAR_START_DATE_TIME) between ? and ? "
							+ " group by ssi.SSI_INDUSTRY_SECTOR"
							+ " order by ssi.SSI_INDUSTRY_SECTOR";
					sectorWiseStmt = connection.prepareStatement(query);
					sectorWiseStmt.setDate(1, startDate); // Set startDate
															// parameter
					sectorWiseStmt.setDate(2, endDate); // Set endDate parameter
					sectorWiseResult = sectorWiseStmt.executeQuery();

					while (sectorWiseResult.next()) {
						// Instantiate a GeneralReport value object
						GeneralReport sectorWiseReport = new GeneralReport();
						sectorWiseReport.setType(sectorWiseResult.getString(1));
						sectorWiseReport.setProposals(sectorWiseResult
								.getInt(2));
						sectorWiseReport.setAmount(sectorWiseResult
								.getDouble(3));
						sectorWiseArray.add(sectorWiseReport);
					}
					sectorWiseResult.close();
					sectorWiseResult = null;
					sectorWiseStmt.close();
					sectorWiseStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}
		} else if (startDate == null) {
			if (guarantee.equals("yes")) {
				try { /*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN),"
							+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
							+ " from ssi_detail ssi, application_detail app,"
							+ " view_appl_amounts vw where app.CGPAN = vw.CGPAN and"
							+ " ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
							+ " trunc(app.APP_APPROVED_DATE_TIME) <= ? group by ssi.SSI_INDUSTRY_SECTOR"
							+ " order by ssi.SSI_INDUSTRY_SECTOR";
					sectorWiseStmt = connection.prepareStatement(query);
					sectorWiseStmt.setDate(1, endDate); // Set endDate parameter
					sectorWiseResult = sectorWiseStmt.executeQuery();

					while (sectorWiseResult.next()) {
						// Instantiate a GeneralReport value object
						GeneralReport sectorWiseReport = new GeneralReport();
						sectorWiseReport.setType(sectorWiseResult.getString(1));
						sectorWiseReport.setProposals(sectorWiseResult
								.getInt(2));
						sectorWiseReport.setAmount(sectorWiseResult
								.getDouble(3));

						sectorWiseArray.add(sectorWiseReport);
					}
					sectorWiseResult.close();
					sectorWiseResult = null;
					sectorWiseStmt.close();
					sectorWiseStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			} else if (guarantee.equals("no")) {
				try {
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					String query = "select ssi.SSI_INDUSTRY_SECTOR, count(vw.CGPAN), "
							+ " SUM(decode(app.APP_REAPPROVE_AMOUNT,null,app.APP_APPROVED_AMOUNT,app.APP_REAPPROVE_AMOUNT))"
							+ " from ssi_detail ssi, application_detail app,"
							+ " view_appl_amounts vw where app.CGPAN = vw.CGPAN and"
							+ " ssi.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER and"
							+ " trunc(app.APP_GUAR_START_DATE_TIME) <= ?"
							+ " group by ssi.SSI_INDUSTRY_SECTOR"
							+ " order by ssi.SSI_INDUSTRY_SECTOR";
					sectorWiseStmt = connection.prepareStatement(query);
					sectorWiseStmt.setDate(1, endDate); // Set endDate parameter
					sectorWiseResult = sectorWiseStmt.executeQuery();

					while (sectorWiseResult.next()) {
						// Instantiate a GeneralReport value object
						GeneralReport sectorWiseReport = new GeneralReport();
						sectorWiseReport.setType(sectorWiseResult.getString(1));
						sectorWiseReport.setProposals(sectorWiseResult
								.getInt(2));
						sectorWiseReport.setAmount(sectorWiseResult
								.getDouble(3));

						sectorWiseArray.add(sectorWiseReport);
					}
					sectorWiseResult.close();
					sectorWiseResult = null;
					sectorWiseStmt.close();
					sectorWiseStmt = null;

				} catch (Exception exception) {
					Log.logException(exception);
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		Log.log(Log.INFO, "ReportDAO", "proposalSectorWise", "Exited");
		return sectorWiseArray;
	}

	// Fix on 17.9.2004

	public ArrayList guaranteeCover(java.sql.Date startDate,
			java.sql.Date endDate, String bankId) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "guaranteeCover", "Entered");
		PreparedStatement guaranteeCoverStmt = null;
		// PreparedStatement loanStmt = null;
		ResultSet guaranteeCoverResult;
		Connection connection = DBConnection.getConnection();
		ArrayList guaranteeCoverArray = new ArrayList();
		// ArrayList loanArray = new ArrayList();
		// ArrayList danRaisedArrayFinal = new ArrayList();
		HashMap sizeReport = new HashMap();
		GuaranteeCoverIssued guaranteeIssued;
		ArrayList memberCgpans = null;
		// String name = "WORKING_CAPITAL_TENOR";

		if (startDate != null) {
			try {

				String query1 = " SELECT mi.MEM_ZNE_ID,mi.MEM_BRN_ID, mi.MEM_short_name,mi.MEM_ZONE_NAME,"
						+ " mi.MEM_BRANCH_NAME, V.CGPAN,S.SSI_UNIT_NAME,V.TC_SANCTIONED_AMT,"
						+ " V.WC_FB_LIMIT+V.WC_NFB_LIMIT, NVL(V.TC_SANCTIONED_AMT,0)+ NVL(V.WC_FB_LIMIT,0)+NVL(V.WC_NFB_LIMIT,0), "
						+ " V.TENURE, A.APP_APPROVED_DATE_TIME,A.APP_GUAR_START_DATE_TIME,"
						+ "  ROUND(trunc(A.APP_GUAR_START_DATE_TIME)-trunc(A.APP_APPROVED_DATE_TIME)), "
						+ "  T.TRM_AMOUNT_SANCTIONED_DT,ADD_MONTHS(T.TRM_AMOUNT_SANCTIONED_DT, V.TENURE),"
						+ "  SUM(DC.DCI_AMOUNT_RAISED),DC.DCI_APPROPRIATION_FLAG,"
						+ "  W.WCP_FB_LIMIT_SANCTIONED_DT, ADD_MONTHS(W.WCP_FB_LIMIT_SANCTIONED_DT, W.WCP_TENURE),"
						+ " ADD_MONTHS(A.APP_GUAR_START_DATE_TIME, W.WCP_TENURE) "
						+ "  FROM VIEW_APPL_AMOUNTS V, SSI_DETAIL S,APPLICATION_DETAIL A,"
						+ "  TERM_LOAN_DETAIL T, WORKING_CAPITAL_DETAIL W,DAN_CGPAN_INFO DC, MEMBER_INFO MI "
						+ " WHERE mi.MEM_BNK_ID=? and "
						+ "A.CGPAN in  (select a.CGPAN from application_detail a "
						+ " where trunc(a.APP_GUAR_START_DATE_TIME) between ? and  ? "
						+ " and  a.APP_GUAR_START_DATE_TIME is not null group by  a.APP_LOAN_TYPE,a.CGPAN)"
						+ "  AND trunc(a.APP_GUAR_START_DATE_TIME) between ? and  ? AND"
						+ "  V.CGPAN=A.CGPAN AND V.CGPAN=T.CGPAN(+) AND V.CGPAN=W.CGPAN(+) "
						+ " AND V.CGPAN = DC.CGPAN AND S.SSI_REFERENCE_NUMBER = "
						+ " A.SSI_REFERENCE_NUMBER and a.MEM_BNK_ID=mi.MEM_BNK_ID and"
						+ " a.MEM_ZNE_ID=mi.MEM_ZNE_ID and a.MEM_BRN_ID=mi.MEM_BRN_ID"
						+ " GROUP BY "
						+ " mi.MEM_ZNE_ID,mi.MEM_BRN_ID, mi.MEM_short_name,mi.MEM_ZONE_NAME,"
						+ " mi.MEM_BRANCH_NAME, DC.DCI_APPROPRIATION_FLAG,"
						+ " V.CGPAN,S.SSI_UNIT_NAME, V.TC_SANCTIONED_AMT, V.WC_FB_LIMIT+V.WC_NFB_LIMIT, "
						+ " NVL(V.TC_SANCTIONED_AMT,0)+ NVL(V.WC_FB_LIMIT,0)+NVL(V.WC_NFB_LIMIT,0), V.TENURE,"
						+ "  A.APP_APPROVED_DATE_TIME,A.APP_GUAR_START_DATE_TIME, "
						+ " T.TRM_AMOUNT_SANCTIONED_DT, W.WCP_FB_LIMIT_SANCTIONED_DT,W.WCP_TENURE  ";

				guaranteeCoverStmt = connection.prepareStatement(query1);

				guaranteeCoverStmt.setString(1, bankId);
				guaranteeCoverStmt.setDate(2, startDate);
				guaranteeCoverStmt.setDate(3, endDate);
				guaranteeCoverStmt.setDate(4, startDate);
				guaranteeCoverStmt.setDate(5, endDate);

				guaranteeCoverResult = guaranteeCoverStmt.executeQuery();

				while (guaranteeCoverResult.next()) {
					String member = bankId + guaranteeCoverResult.getString(1)
							+ guaranteeCoverResult.getString(2);
					String shortName = guaranteeCoverResult.getString(3);
					String zoneName = guaranteeCoverResult.getString(4);
					String branchName = guaranteeCoverResult.getString(5);

					String cgpan = guaranteeCoverResult.getString(6);
					int length = cgpan.length();
					String cgpanType = cgpan.substring(length - 2, length);
					GuaranteeCover guaranteeCover = new GuaranteeCover();
					guaranteeIssued = (GuaranteeCoverIssued) sizeReport
							.get(member);

					if (guaranteeIssued == null) {
						guaranteeIssued = new GuaranteeCoverIssued();
						memberCgpans = new ArrayList();
						guaranteeIssued.setMemberId(member);
						guaranteeIssued.setMemberShortName(shortName);
						guaranteeIssued.setMemberZoneName(zoneName);
						guaranteeIssued.setMemberCgpans(memberCgpans);
						sizeReport.put(member, guaranteeIssued);
					}

					guaranteeCover.setMemberShortName(shortName);
					guaranteeCover.setMemberZoneName(zoneName);
					guaranteeCover.setMemberId(member);
					guaranteeCover.setMemberBranchName(branchName);

					if (cgpanType.equals("TC") || cgpanType.equals("CC")) {
						String index = guaranteeCoverResult.getString(18);

						if (index.equals("Y")) {

							guaranteeCover.setCgpan(guaranteeCoverResult
									.getString(6));
							guaranteeCover.setSsiName(guaranteeCoverResult
									.getString(7));
							guaranteeCover.setTermCredit(guaranteeCoverResult
									.getDouble(8));
							guaranteeCover
									.setWorkingCapital(guaranteeCoverResult
											.getDouble(9));
							guaranteeCover.setTotal(guaranteeCoverResult
									.getDouble(10));
							guaranteeCover.setTenure(guaranteeCoverResult
									.getInt(11));
							guaranteeCover.setApprovalDate(guaranteeCoverResult
									.getDate(12));
							guaranteeCover.setIssueDate(guaranteeCoverResult
									.getDate(13));
							guaranteeCover.setTimeInterval(guaranteeCoverResult
									.getInt(14));
							guaranteeCover.setTcDate(guaranteeCoverResult
									.getDate(15));
							guaranteeCover.setTcEndDate(guaranteeCoverResult
									.getDate(16));
							double guaranteeFeePaid = guaranteeCoverResult
									.getDouble(17);
							guaranteeCover.setGuaranteeFee(guaranteeFeePaid);
							guaranteeCover.setFlag(guaranteeCoverResult
									.getString(18));
							guaranteeCover.setWcDate(guaranteeCoverResult
									.getDate(19));
							guaranteeCover.setWcEndDate(guaranteeCoverResult
									.getDate(20));

						} else if (index.equals("N")) {
							guaranteeCover.setCgpan(guaranteeCoverResult
									.getString(6));
							guaranteeCover.setSsiName(guaranteeCoverResult
									.getString(7));
							guaranteeCover.setTermCredit(guaranteeCoverResult
									.getDouble(8));
							guaranteeCover
									.setWorkingCapital(guaranteeCoverResult
											.getDouble(9));
							guaranteeCover.setTotal(guaranteeCoverResult
									.getDouble(10));
							guaranteeCover.setTenure(guaranteeCoverResult
									.getInt(11));
							guaranteeCover.setApprovalDate(guaranteeCoverResult
									.getDate(12));
							guaranteeCover.setIssueDate(guaranteeCoverResult
									.getDate(13));
							guaranteeCover.setTimeInterval(guaranteeCoverResult
									.getInt(14));
							guaranteeCover.setTcDate(guaranteeCoverResult
									.getDate(15));
							guaranteeCover.setTcEndDate(guaranteeCoverResult
									.getDate(16));
							guaranteeCover.setGuaranteeFee(0);
							guaranteeCover.setFlag(guaranteeCoverResult
									.getString(18));
							guaranteeCover.setWcDate(guaranteeCoverResult
									.getDate(19));
							guaranteeCover.setWcEndDate(guaranteeCoverResult
									.getDate(20));

						}

					}

					else {
						String index = guaranteeCoverResult.getString(18);

						if (index.equals("Y")) {

							guaranteeCover.setCgpan(guaranteeCoverResult
									.getString(6));
							guaranteeCover.setSsiName(guaranteeCoverResult
									.getString(7));
							guaranteeCover.setTermCredit(guaranteeCoverResult
									.getDouble(8));
							guaranteeCover
									.setWorkingCapital(guaranteeCoverResult
											.getDouble(9));
							guaranteeCover.setTotal(guaranteeCoverResult
									.getDouble(10));
							guaranteeCover.setTenure(guaranteeCoverResult
									.getInt(11));
							guaranteeCover.setApprovalDate(guaranteeCoverResult
									.getDate(12));
							guaranteeCover.setIssueDate(guaranteeCoverResult
									.getDate(13));
							guaranteeCover.setTimeInterval(guaranteeCoverResult
									.getInt(14));
							guaranteeCover.setTcDate(guaranteeCoverResult
									.getDate(15));
							guaranteeCover.setTcEndDate(guaranteeCoverResult
									.getDate(16));
							double guaranteeFeePaid = guaranteeCoverResult
									.getDouble(17);
							guaranteeCover.setGuaranteeFee(guaranteeFeePaid);
							guaranteeCover.setFlag(guaranteeCoverResult
									.getString(18));
							guaranteeCover.setWcDate(guaranteeCoverResult
									.getDate(19));
							guaranteeCover.setWcEndDate(guaranteeCoverResult
									.getDate(21));

						} else if (index.equals("N")) {
							guaranteeCover.setCgpan(guaranteeCoverResult
									.getString(6));
							guaranteeCover.setSsiName(guaranteeCoverResult
									.getString(7));
							guaranteeCover.setTermCredit(guaranteeCoverResult
									.getDouble(8));
							guaranteeCover
									.setWorkingCapital(guaranteeCoverResult
											.getDouble(9));
							guaranteeCover.setTotal(guaranteeCoverResult
									.getDouble(10));
							guaranteeCover.setTenure(guaranteeCoverResult
									.getInt(11));
							guaranteeCover.setApprovalDate(guaranteeCoverResult
									.getDate(12));
							guaranteeCover.setIssueDate(guaranteeCoverResult
									.getDate(13));
							guaranteeCover.setTimeInterval(guaranteeCoverResult
									.getInt(14));
							guaranteeCover.setTcDate(guaranteeCoverResult
									.getDate(15));
							guaranteeCover.setTcEndDate(guaranteeCoverResult
									.getDate(16));
							guaranteeCover.setGuaranteeFee(0);
							guaranteeCover.setFlag(guaranteeCoverResult
									.getString(18));
							guaranteeCover.setWcDate(guaranteeCoverResult
									.getDate(19));
							guaranteeCover.setWcEndDate(guaranteeCoverResult
									.getDate(21));

						}

						// sizeReport.put(member,guaranteeCover);

					}
					memberCgpans.add(guaranteeCover);
				}

				Set sizeReportSet = sizeReport.keySet();
				Iterator sizeReportIterator = sizeReportSet.iterator();

				while (sizeReportIterator.hasNext()) {
					// GuaranteeCover sizeReportDetail = new GuaranteeCover();
					String sizeKey = (String) sizeReportIterator.next();
					GuaranteeCoverIssued guaranteeIssuedTemp = (GuaranteeCoverIssued) sizeReport
							.get(sizeKey);
					// sizeReportDetail =
					// (GuaranteeCover)sizeReport.get(sizeKey);
					// sizeReportDetail.setCgpan(sizeKey);
					guaranteeCoverArray.add(guaranteeIssuedTemp);

				}
				guaranteeCoverResult.close();
				guaranteeCoverResult = null;
				guaranteeCoverStmt.close();
				guaranteeCoverStmt = null;

			}

			catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {
				String query1 = " SELECT mi.MEM_ZNE_ID,mi.MEM_BRN_ID, mi.MEM_short_name,mi.MEM_ZONE_NAME,"
						+ " mi.MEM_BRANCH_NAME, V.CGPAN,S.SSI_UNIT_NAME,V.TC_SANCTIONED_AMT,"
						+ " V.WC_FB_LIMIT+V.WC_NFB_LIMIT, NVL(V.TC_SANCTIONED_AMT,0)+ NVL(V.WC_FB_LIMIT,0)+NVL(V.WC_NFB_LIMIT,0), "
						+ " V.TENURE, A.APP_APPROVED_DATE_TIME,A.APP_GUAR_START_DATE_TIME,"
						+ "  ROUND(trunc(A.APP_GUAR_START_DATE_TIME)-trunc(A.APP_APPROVED_DATE_TIME)), "
						+ "  T.TRM_AMOUNT_SANCTIONED_DT,ADD_MONTHS(T.TRM_AMOUNT_SANCTIONED_DT, V.TENURE),"
						+ "  SUM(DC.DCI_AMOUNT_RAISED),DC.DCI_APPROPRIATION_FLAG,"
						+ "  W.WCP_FB_LIMIT_SANCTIONED_DT, ADD_MONTHS(W.WCP_FB_LIMIT_SANCTIONED_DT, W.WCP_TENURE),"
						+ " ADD_MONTHS(A.APP_GUAR_START_DATE_TIME, W.WCP_TENURE) "
						+ "  FROM VIEW_APPL_AMOUNTS V, SSI_DETAIL S,APPLICATION_DETAIL A,"
						+ "  TERM_LOAN_DETAIL T, WORKING_CAPITAL_DETAIL W,DAN_CGPAN_INFO DC, MEMBER_INFO MI "
						+ " WHERE mi.MEM_BNK_ID=? and "
						+ "A.CGPAN in  (select a.CGPAN from application_detail a "
						+ " where trunc(a.APP_GUAR_START_DATE_TIME)  <=  ? "
						+ " and  a.APP_GUAR_START_DATE_TIME is not null group by  a.APP_LOAN_TYPE,a.CGPAN)"
						+ "  AND trunc(a.APP_GUAR_START_DATE_TIME) <=  ? AND"
						+ "  V.CGPAN=A.CGPAN AND V.CGPAN=T.CGPAN(+) AND V.CGPAN=W.CGPAN(+) "
						+ " AND V.CGPAN = DC.CGPAN AND S.SSI_REFERENCE_NUMBER = "
						+ " A.SSI_REFERENCE_NUMBER and a.MEM_BNK_ID=mi.MEM_BNK_ID and"
						+ " a.MEM_ZNE_ID=mi.MEM_ZNE_ID and a.MEM_BRN_ID=mi.MEM_BRN_ID"
						+ " GROUP BY "
						+ " mi.MEM_ZNE_ID,mi.MEM_BRN_ID, mi.MEM_short_name,mi.MEM_ZONE_NAME,"
						+ " mi.MEM_BRANCH_NAME, DC.DCI_APPROPRIATION_FLAG,"
						+ " V.CGPAN,S.SSI_UNIT_NAME, V.TC_SANCTIONED_AMT, V.WC_FB_LIMIT+V.WC_NFB_LIMIT, "
						+ " NVL(V.TC_SANCTIONED_AMT,0)+ NVL(V.WC_FB_LIMIT,0)+NVL(V.WC_NFB_LIMIT,0), V.TENURE,"
						+ "  A.APP_APPROVED_DATE_TIME,A.APP_GUAR_START_DATE_TIME, "
						+ " T.TRM_AMOUNT_SANCTIONED_DT, W.WCP_FB_LIMIT_SANCTIONED_DT,W.WCP_TENURE  ";

				guaranteeCoverStmt = connection.prepareStatement(query1);

				guaranteeCoverStmt.setString(1, bankId);
				guaranteeCoverStmt.setDate(2, endDate);
				guaranteeCoverStmt.setDate(3, endDate);

				guaranteeCoverResult = guaranteeCoverStmt.executeQuery();

				while (guaranteeCoverResult.next()) {
					String member = bankId + guaranteeCoverResult.getString(1)
							+ guaranteeCoverResult.getString(2);
					String shortName = guaranteeCoverResult.getString(3);
					String zoneName = guaranteeCoverResult.getString(4);
					String branchName = guaranteeCoverResult.getString(5);

					String cgpan = guaranteeCoverResult.getString(6);
					int length = cgpan.length();
					String cgpanType = cgpan.substring(length - 2, length);
					GuaranteeCover guaranteeCover = new GuaranteeCover();
					guaranteeIssued = (GuaranteeCoverIssued) sizeReport
							.get(member);

					if (guaranteeIssued == null) {
						guaranteeIssued = new GuaranteeCoverIssued();
						memberCgpans = new ArrayList();
						guaranteeIssued.setMemberId(member);
						guaranteeIssued.setMemberShortName(shortName);
						guaranteeIssued.setMemberZoneName(zoneName);
						guaranteeIssued.setMemberCgpans(memberCgpans);
						sizeReport.put(member, guaranteeIssued);
					}

					guaranteeCover.setMemberShortName(shortName);
					guaranteeCover.setMemberZoneName(zoneName);
					guaranteeCover.setMemberId(member);
					guaranteeCover.setMemberBranchName(branchName);

					if (cgpanType.equals("TC") || cgpanType.equals("CC")) {
						String index = guaranteeCoverResult.getString(18);

						if (index.equals("Y")) {

							guaranteeCover.setCgpan(guaranteeCoverResult
									.getString(6));
							guaranteeCover.setSsiName(guaranteeCoverResult
									.getString(7));
							guaranteeCover.setTermCredit(guaranteeCoverResult
									.getDouble(8));
							guaranteeCover
									.setWorkingCapital(guaranteeCoverResult
											.getDouble(9));
							guaranteeCover.setTotal(guaranteeCoverResult
									.getDouble(10));
							guaranteeCover.setTenure(guaranteeCoverResult
									.getInt(11));
							guaranteeCover.setApprovalDate(guaranteeCoverResult
									.getDate(12));
							guaranteeCover.setIssueDate(guaranteeCoverResult
									.getDate(13));
							guaranteeCover.setTimeInterval(guaranteeCoverResult
									.getInt(14));
							guaranteeCover.setTcDate(guaranteeCoverResult
									.getDate(15));
							guaranteeCover.setTcEndDate(guaranteeCoverResult
									.getDate(16));
							double guaranteeFeePaid = guaranteeCoverResult
									.getDouble(17);
							guaranteeCover.setGuaranteeFee(guaranteeFeePaid);
							guaranteeCover.setFlag(guaranteeCoverResult
									.getString(18));
							guaranteeCover.setWcDate(guaranteeCoverResult
									.getDate(19));
							guaranteeCover.setWcEndDate(guaranteeCoverResult
									.getDate(20));

						} else if (index.equals("N")) {
							guaranteeCover.setCgpan(guaranteeCoverResult
									.getString(6));
							guaranteeCover.setSsiName(guaranteeCoverResult
									.getString(7));
							guaranteeCover.setTermCredit(guaranteeCoverResult
									.getDouble(8));
							guaranteeCover
									.setWorkingCapital(guaranteeCoverResult
											.getDouble(9));
							guaranteeCover.setTotal(guaranteeCoverResult
									.getDouble(10));
							guaranteeCover.setTenure(guaranteeCoverResult
									.getInt(11));
							guaranteeCover.setApprovalDate(guaranteeCoverResult
									.getDate(12));
							guaranteeCover.setIssueDate(guaranteeCoverResult
									.getDate(13));
							guaranteeCover.setTimeInterval(guaranteeCoverResult
									.getInt(14));
							guaranteeCover.setTcDate(guaranteeCoverResult
									.getDate(15));
							guaranteeCover.setTcEndDate(guaranteeCoverResult
									.getDate(16));
							guaranteeCover.setGuaranteeFee(0);
							guaranteeCover.setFlag(guaranteeCoverResult
									.getString(18));
							guaranteeCover.setWcDate(guaranteeCoverResult
									.getDate(19));
							guaranteeCover.setWcEndDate(guaranteeCoverResult
									.getDate(20));

						}

					}

					else {
						String index = guaranteeCoverResult.getString(18);

						if (index.equals("Y")) {

							guaranteeCover.setCgpan(guaranteeCoverResult
									.getString(6));
							guaranteeCover.setSsiName(guaranteeCoverResult
									.getString(7));
							guaranteeCover.setTermCredit(guaranteeCoverResult
									.getDouble(8));
							guaranteeCover
									.setWorkingCapital(guaranteeCoverResult
											.getDouble(9));
							guaranteeCover.setTotal(guaranteeCoverResult
									.getDouble(10));
							guaranteeCover.setTenure(guaranteeCoverResult
									.getInt(11));
							guaranteeCover.setApprovalDate(guaranteeCoverResult
									.getDate(12));
							guaranteeCover.setIssueDate(guaranteeCoverResult
									.getDate(13));
							guaranteeCover.setTimeInterval(guaranteeCoverResult
									.getInt(14));
							guaranteeCover.setTcDate(guaranteeCoverResult
									.getDate(15));
							guaranteeCover.setTcEndDate(guaranteeCoverResult
									.getDate(16));
							double guaranteeFeePaid = guaranteeCoverResult
									.getDouble(17);
							guaranteeCover.setGuaranteeFee(guaranteeFeePaid);
							guaranteeCover.setFlag(guaranteeCoverResult
									.getString(18));
							guaranteeCover.setWcDate(guaranteeCoverResult
									.getDate(19));
							guaranteeCover.setWcEndDate(guaranteeCoverResult
									.getDate(21));

						} else if (index.equals("N")) {
							guaranteeCover.setCgpan(guaranteeCoverResult
									.getString(6));
							guaranteeCover.setSsiName(guaranteeCoverResult
									.getString(7));
							guaranteeCover.setTermCredit(guaranteeCoverResult
									.getDouble(8));
							guaranteeCover
									.setWorkingCapital(guaranteeCoverResult
											.getDouble(9));
							guaranteeCover.setTotal(guaranteeCoverResult
									.getDouble(10));
							guaranteeCover.setTenure(guaranteeCoverResult
									.getInt(11));
							guaranteeCover.setApprovalDate(guaranteeCoverResult
									.getDate(12));
							guaranteeCover.setIssueDate(guaranteeCoverResult
									.getDate(13));
							guaranteeCover.setTimeInterval(guaranteeCoverResult
									.getInt(14));
							guaranteeCover.setTcDate(guaranteeCoverResult
									.getDate(15));
							guaranteeCover.setTcEndDate(guaranteeCoverResult
									.getDate(16));
							guaranteeCover.setGuaranteeFee(0);
							guaranteeCover.setFlag(guaranteeCoverResult
									.getString(18));
							guaranteeCover.setWcDate(guaranteeCoverResult
									.getDate(19));
							guaranteeCover.setWcEndDate(guaranteeCoverResult
									.getDate(21));

						}

						// sizeReport.put(member,guaranteeCover);
					}
					memberCgpans.add(guaranteeCover);
				}

				Set sizeReportSet = sizeReport.keySet();
				Iterator sizeReportIterator = sizeReportSet.iterator();

				while (sizeReportIterator.hasNext()) {
					// GuaranteeCover sizeReportDetail = new GuaranteeCover();
					String sizeKey = (String) sizeReportIterator.next();
					GuaranteeCoverIssued guaranteeIssuedTemp = (GuaranteeCoverIssued) sizeReport
							.get(sizeKey);
					// sizeReportDetail =
					// (GuaranteeCover)sizeReport.get(sizeKey);
					// sizeReportDetail.setCgpan(sizeKey);
					guaranteeCoverArray.add(guaranteeIssuedTemp);

				}
				guaranteeCoverResult.close();
				guaranteeCoverResult = null;
				guaranteeCoverStmt.close();
				guaranteeCoverStmt = null;

			}

			catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}

		Log.log(Log.INFO, "ReportDAO", "guaranteeCover", "Exited");
		return guaranteeCoverArray;
	}

	public ArrayList guaranteeCoverSsi(java.sql.Date startDate,
			java.sql.Date endDate, String bankId) throws DatabaseException

	{
		Log.log(Log.INFO, "ReportDAO", "guaranteeCoverSsi", "Entered");
		PreparedStatement guaranteeCoverStmt = null;
		// PreparedStatement loanStmt = null;
		ResultSet guaranteeCoverResult;
		Connection connection = DBConnection.getConnection();
		ArrayList guaranteeCoverArray = new ArrayList();
		// ArrayList loanArray = new ArrayList();
		// ArrayList danRaisedArrayFinal = new ArrayList();
		HashMap sizeReport = new HashMap();
		GuaranteeCoverIssued guaranteeIssued;
		ArrayList memberCgpans = null;
		// String name = "WORKING_CAPITAL_TENOR";

		if (startDate != null) {
			try {
				String query1 = " SELECT mi.MEM_ZNE_ID,mi.MEM_BRN_ID, mi.MEM_short_name,mi.MEM_ZONE_NAME,"
						+ " mi.MEM_BRANCH_NAME, V.CGPAN,S.SSI_UNIT_NAME,V.TC_SANCTIONED_AMT,"
						+ " V.WC_FB_LIMIT+V.WC_NFB_LIMIT, NVL(V.TC_SANCTIONED_AMT,0)+ NVL(V.WC_FB_LIMIT,0)+NVL(V.WC_NFB_LIMIT,0), "
						+ " V.TENURE, A.APP_APPROVED_DATE_TIME,A.APP_GUAR_START_DATE_TIME,"
						+ "  ROUND(trunc(A.APP_GUAR_START_DATE_TIME)-trunc(A.APP_APPROVED_DATE_TIME)), "
						+ "  T.TRM_AMOUNT_SANCTIONED_DT,ADD_MONTHS(T.TRM_AMOUNT_SANCTIONED_DT, V.TENURE),"
						+ "  SUM(DC.DCI_AMOUNT_RAISED),DC.DCI_APPROPRIATION_FLAG,"
						+ "  W.WCP_FB_LIMIT_SANCTIONED_DT, ADD_MONTHS(W.WCP_FB_LIMIT_SANCTIONED_DT,W.WCP_TENURE),"
						+ " ADD_MONTHS(A.APP_GUAR_START_DATE_TIME,W.WCP_TENURE) "
						+ "  FROM VIEW_APPL_AMOUNTS V, SSI_DETAIL S,APPLICATION_DETAIL A,"
						+ "  TERM_LOAN_DETAIL T, WORKING_CAPITAL_DETAIL W,DAN_CGPAN_INFO DC, MEMBER_INFO MI "
						+ " WHERE mi.MEM_BNK_ID=? and "
						+ "A.CGPAN in  (select a.CGPAN from application_detail a "
						+ " where trunc(a.APP_GUAR_START_DATE_TIME) between ? and  ? "
						+ " and  a.APP_GUAR_START_DATE_TIME is not null group by  a.APP_LOAN_TYPE,a.CGPAN)"
						+ "  AND trunc(a.APP_GUAR_START_DATE_TIME) between ? and  ? AND"
						+ "  V.CGPAN=A.CGPAN AND V.CGPAN=T.CGPAN(+) AND V.CGPAN=W.CGPAN(+) "
						+ " AND V.CGPAN = DC.CGPAN AND S.SSI_REFERENCE_NUMBER = "
						+ " A.SSI_REFERENCE_NUMBER and a.MEM_BNK_ID=mi.MEM_BNK_ID and"
						+ " a.MEM_ZNE_ID=mi.MEM_ZNE_ID and a.MEM_BRN_ID=mi.MEM_BRN_ID"
						+ " GROUP BY "
						+ " mi.MEM_ZNE_ID,mi.MEM_BRN_ID, mi.MEM_short_name,mi.MEM_ZONE_NAME,"
						+ " mi.MEM_BRANCH_NAME, DC.DCI_APPROPRIATION_FLAG,"
						+ " V.CGPAN,S.SSI_UNIT_NAME, V.TC_SANCTIONED_AMT, V.WC_FB_LIMIT+V.WC_NFB_LIMIT, "
						+ " NVL(V.TC_SANCTIONED_AMT,0)+ NVL(V.WC_FB_LIMIT,0)+NVL(V.WC_NFB_LIMIT,0), V.TENURE,"
						+ "  A.APP_APPROVED_DATE_TIME,A.APP_GUAR_START_DATE_TIME, "
						+ " T.TRM_AMOUNT_SANCTIONED_DT, W.WCP_FB_LIMIT_SANCTIONED_DT,W.WCP_TENURE ";

				guaranteeCoverStmt = connection.prepareStatement(query1);

				guaranteeCoverStmt.setString(1, bankId);
				guaranteeCoverStmt.setDate(2, startDate);
				guaranteeCoverStmt.setDate(3, endDate);
				guaranteeCoverStmt.setDate(4, startDate);
				guaranteeCoverStmt.setDate(5, endDate);

				guaranteeCoverResult = guaranteeCoverStmt.executeQuery();

				while (guaranteeCoverResult.next()) {
					String member = bankId + guaranteeCoverResult.getString(1)
							+ guaranteeCoverResult.getString(2);
					String shortName = guaranteeCoverResult.getString(3);
					String zoneName = guaranteeCoverResult.getString(4);
					String branchName = guaranteeCoverResult.getString(5);

					String cgpan = guaranteeCoverResult.getString(6);
					int length = cgpan.length();
					String cgpanType = cgpan.substring(length - 2, length);
					GuaranteeCover guaranteeCover = new GuaranteeCover();
					guaranteeIssued = (GuaranteeCoverIssued) sizeReport
							.get(member);

					if (guaranteeIssued == null) {
						guaranteeIssued = new GuaranteeCoverIssued();
						memberCgpans = new ArrayList();
						guaranteeIssued.setMemberId(member);
						guaranteeIssued.setMemberShortName(shortName);
						guaranteeIssued.setMemberZoneName(zoneName);
						guaranteeIssued.setMemberCgpans(memberCgpans);
						sizeReport.put(member, guaranteeIssued);
					}

					guaranteeCover.setMemberShortName(shortName);
					guaranteeCover.setMemberZoneName(zoneName);
					guaranteeCover.setMemberId(member);
					guaranteeCover.setMemberBranchName(branchName);

					if (cgpanType.equals("TC") || cgpanType.equals("CC")) {
						String index = guaranteeCoverResult.getString(18);

						if (index.equals("Y")) {

							guaranteeCover.setCgpan(guaranteeCoverResult
									.getString(6));
							guaranteeCover.setSsiName(guaranteeCoverResult
									.getString(7));
							guaranteeCover.setTermCredit(guaranteeCoverResult
									.getDouble(8));
							guaranteeCover
									.setWorkingCapital(guaranteeCoverResult
											.getDouble(9));
							guaranteeCover.setTotal(guaranteeCoverResult
									.getDouble(10));
							guaranteeCover.setTenure(guaranteeCoverResult
									.getInt(11));
							guaranteeCover.setApprovalDate(guaranteeCoverResult
									.getDate(12));
							guaranteeCover.setIssueDate(guaranteeCoverResult
									.getDate(13));
							guaranteeCover.setTimeInterval(guaranteeCoverResult
									.getInt(14));
							guaranteeCover.setTcDate(guaranteeCoverResult
									.getDate(15));
							guaranteeCover.setTcEndDate(guaranteeCoverResult
									.getDate(16));
							double guaranteeFeePaid = guaranteeCoverResult
									.getDouble(17);
							guaranteeCover.setGuaranteeFee(guaranteeFeePaid);
							guaranteeCover.setFlag(guaranteeCoverResult
									.getString(18));
							guaranteeCover.setWcDate(guaranteeCoverResult
									.getDate(19));
							guaranteeCover.setWcEndDate(guaranteeCoverResult
									.getDate(20));

						} else if (index.equals("N")) {
							guaranteeCover.setCgpan(guaranteeCoverResult
									.getString(6));
							guaranteeCover.setSsiName(guaranteeCoverResult
									.getString(7));
							guaranteeCover.setTermCredit(guaranteeCoverResult
									.getDouble(8));
							guaranteeCover
									.setWorkingCapital(guaranteeCoverResult
											.getDouble(9));
							guaranteeCover.setTotal(guaranteeCoverResult
									.getDouble(10));
							guaranteeCover.setTenure(guaranteeCoverResult
									.getInt(11));
							guaranteeCover.setApprovalDate(guaranteeCoverResult
									.getDate(12));
							guaranteeCover.setIssueDate(guaranteeCoverResult
									.getDate(13));
							guaranteeCover.setTimeInterval(guaranteeCoverResult
									.getInt(14));
							guaranteeCover.setTcDate(guaranteeCoverResult
									.getDate(15));
							guaranteeCover.setTcEndDate(guaranteeCoverResult
									.getDate(16));
							guaranteeCover.setGuaranteeFee(0);
							guaranteeCover.setFlag(guaranteeCoverResult
									.getString(18));
							guaranteeCover.setWcDate(guaranteeCoverResult
									.getDate(19));
							guaranteeCover.setWcEndDate(guaranteeCoverResult
									.getDate(20));

						}

					}

					else {
						String index = guaranteeCoverResult.getString(18);

						if (index.equals("Y")) {

							guaranteeCover.setCgpan(guaranteeCoverResult
									.getString(6));
							guaranteeCover.setSsiName(guaranteeCoverResult
									.getString(7));
							guaranteeCover.setTermCredit(guaranteeCoverResult
									.getDouble(8));
							guaranteeCover
									.setWorkingCapital(guaranteeCoverResult
											.getDouble(9));
							guaranteeCover.setTotal(guaranteeCoverResult
									.getDouble(10));
							guaranteeCover.setTenure(guaranteeCoverResult
									.getInt(11));
							guaranteeCover.setApprovalDate(guaranteeCoverResult
									.getDate(12));
							guaranteeCover.setIssueDate(guaranteeCoverResult
									.getDate(13));
							guaranteeCover.setTimeInterval(guaranteeCoverResult
									.getInt(14));
							guaranteeCover.setTcDate(guaranteeCoverResult
									.getDate(15));
							guaranteeCover.setTcEndDate(guaranteeCoverResult
									.getDate(16));
							double guaranteeFeePaid = guaranteeCoverResult
									.getDouble(17);
							guaranteeCover.setGuaranteeFee(guaranteeFeePaid);
							guaranteeCover.setFlag(guaranteeCoverResult
									.getString(18));
							guaranteeCover.setWcDate(guaranteeCoverResult
									.getDate(19));
							guaranteeCover.setWcEndDate(guaranteeCoverResult
									.getDate(21));

						} else if (index.equals("N")) {
							guaranteeCover.setCgpan(guaranteeCoverResult
									.getString(6));
							guaranteeCover.setSsiName(guaranteeCoverResult
									.getString(7));
							guaranteeCover.setTermCredit(guaranteeCoverResult
									.getDouble(8));
							guaranteeCover
									.setWorkingCapital(guaranteeCoverResult
											.getDouble(9));
							guaranteeCover.setTotal(guaranteeCoverResult
									.getDouble(10));
							guaranteeCover.setTenure(guaranteeCoverResult
									.getInt(11));
							guaranteeCover.setApprovalDate(guaranteeCoverResult
									.getDate(12));
							guaranteeCover.setIssueDate(guaranteeCoverResult
									.getDate(13));
							guaranteeCover.setTimeInterval(guaranteeCoverResult
									.getInt(14));
							guaranteeCover.setTcDate(guaranteeCoverResult
									.getDate(15));
							guaranteeCover.setTcEndDate(guaranteeCoverResult
									.getDate(16));
							guaranteeCover.setGuaranteeFee(0);
							guaranteeCover.setFlag(guaranteeCoverResult
									.getString(18));
							guaranteeCover.setWcDate(guaranteeCoverResult
									.getDate(19));
							guaranteeCover.setWcEndDate(guaranteeCoverResult
									.getDate(21));

						}

						// sizeReport.put(member,guaranteeCover);

					}
					memberCgpans.add(guaranteeCover);
				}

				Set sizeReportSet = sizeReport.keySet();
				Iterator sizeReportIterator = sizeReportSet.iterator();

				while (sizeReportIterator.hasNext()) {
					// GuaranteeCover sizeReportDetail = new GuaranteeCover();
					String sizeKey = (String) sizeReportIterator.next();
					GuaranteeCoverIssued guaranteeIssuedTemp = (GuaranteeCoverIssued) sizeReport
							.get(sizeKey);
					// sizeReportDetail =
					// (GuaranteeCover)sizeReport.get(sizeKey);
					// sizeReportDetail.setCgpan(sizeKey);
					guaranteeCoverArray.add(guaranteeIssuedTemp);

				}
				guaranteeCoverResult.close();
				guaranteeCoverResult = null;
				guaranteeCoverStmt.close();
				guaranteeCoverStmt = null;

			}

			catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {
				String query1 = " SELECT mi.MEM_ZNE_ID,mi.MEM_BRN_ID, mi.MEM_short_name,mi.MEM_ZONE_NAME,"
						+ " mi.MEM_BRANCH_NAME, V.CGPAN,S.SSI_UNIT_NAME,V.TC_SANCTIONED_AMT,"
						+ " V.WC_FB_LIMIT+V.WC_NFB_LIMIT, NVL(V.TC_SANCTIONED_AMT,0)+ NVL(V.WC_FB_LIMIT,0)+NVL(V.WC_NFB_LIMIT,0), "
						+ " V.TENURE, A.APP_APPROVED_DATE_TIME,A.APP_GUAR_START_DATE_TIME,"
						+ "  ROUND(trunc(A.APP_GUAR_START_DATE_TIME)-trunc(A.APP_APPROVED_DATE_TIME)), "
						+ "  T.TRM_AMOUNT_SANCTIONED_DT,ADD_MONTHS(T.TRM_AMOUNT_SANCTIONED_DT, V.TENURE),"
						+ "  SUM(DC.DCI_AMOUNT_RAISED),DC.DCI_APPROPRIATION_FLAG,"
						+ "  W.WCP_FB_LIMIT_SANCTIONED_DT, ADD_MONTHS(W.WCP_FB_LIMIT_SANCTIONED_DT,W.WCP_TENURE),"
						+ " ADD_MONTHS(A.APP_GUAR_START_DATE_TIME,W.WCP_TENURE) "
						+ "  FROM VIEW_APPL_AMOUNTS V, SSI_DETAIL S,APPLICATION_DETAIL A,"
						+ "  TERM_LOAN_DETAIL T, WORKING_CAPITAL_DETAIL W,DAN_CGPAN_INFO DC, MEMBER_INFO MI "
						+ " WHERE mi.MEM_BNK_ID=? and "
						+ "A.CGPAN in  (select a.CGPAN from application_detail a "
						+ " where trunc(a.APP_GUAR_START_DATE_TIME)  <=  ? "
						+ " and  a.APP_GUAR_START_DATE_TIME is not null group by  a.APP_LOAN_TYPE,a.CGPAN)"
						+ "  AND trunc(a.APP_GUAR_START_DATE_TIME) <=  ? AND"
						+ "  V.CGPAN=A.CGPAN AND V.CGPAN=T.CGPAN(+) AND V.CGPAN=W.CGPAN(+) "
						+ " AND V.CGPAN = DC.CGPAN AND S.SSI_REFERENCE_NUMBER = "
						+ " A.SSI_REFERENCE_NUMBER and a.MEM_BNK_ID=mi.MEM_BNK_ID and"
						+ " a.MEM_ZNE_ID=mi.MEM_ZNE_ID and a.MEM_BRN_ID=mi.MEM_BRN_ID"
						+ " GROUP BY "
						+ " mi.MEM_ZNE_ID,mi.MEM_BRN_ID, mi.MEM_short_name,mi.MEM_ZONE_NAME,"
						+ " mi.MEM_BRANCH_NAME, DC.DCI_APPROPRIATION_FLAG,"
						+ " V.CGPAN,S.SSI_UNIT_NAME, V.TC_SANCTIONED_AMT, V.WC_FB_LIMIT+V.WC_NFB_LIMIT, "
						+ " NVL(V.TC_SANCTIONED_AMT,0)+ NVL(V.WC_FB_LIMIT,0)+NVL(V.WC_NFB_LIMIT,0), V.TENURE,"
						+ "  A.APP_APPROVED_DATE_TIME,A.APP_GUAR_START_DATE_TIME, "
						+ " T.TRM_AMOUNT_SANCTIONED_DT, W.WCP_FB_LIMIT_SANCTIONED_DT,W.WCP_TENURE ";

				guaranteeCoverStmt = connection.prepareStatement(query1);

				guaranteeCoverStmt.setString(1, bankId);
				guaranteeCoverStmt.setDate(2, endDate);
				guaranteeCoverStmt.setDate(3, endDate);

				guaranteeCoverResult = guaranteeCoverStmt.executeQuery();

				while (guaranteeCoverResult.next()) {
					String member = bankId + guaranteeCoverResult.getString(1)
							+ guaranteeCoverResult.getString(2);
					String shortName = guaranteeCoverResult.getString(3);
					String zoneName = guaranteeCoverResult.getString(4);
					String branchName = guaranteeCoverResult.getString(5);

					String cgpan = guaranteeCoverResult.getString(6);
					int length = cgpan.length();
					String cgpanType = cgpan.substring(length - 2, length);
					GuaranteeCover guaranteeCover = new GuaranteeCover();
					guaranteeIssued = (GuaranteeCoverIssued) sizeReport
							.get(member);

					if (guaranteeIssued == null) {
						guaranteeIssued = new GuaranteeCoverIssued();
						memberCgpans = new ArrayList();
						guaranteeIssued.setMemberId(member);
						guaranteeIssued.setMemberShortName(shortName);
						guaranteeIssued.setMemberZoneName(zoneName);
						guaranteeIssued.setMemberCgpans(memberCgpans);
						sizeReport.put(member, guaranteeIssued);
					}

					guaranteeCover.setMemberShortName(shortName);
					guaranteeCover.setMemberZoneName(zoneName);
					guaranteeCover.setMemberId(member);
					guaranteeCover.setMemberBranchName(branchName);

					if (cgpanType.equals("TC") || cgpanType.equals("CC")) {
						String index = guaranteeCoverResult.getString(18);

						if (index.equals("Y")) {

							guaranteeCover.setCgpan(guaranteeCoverResult
									.getString(6));
							guaranteeCover.setSsiName(guaranteeCoverResult
									.getString(7));
							guaranteeCover.setTermCredit(guaranteeCoverResult
									.getDouble(8));
							guaranteeCover
									.setWorkingCapital(guaranteeCoverResult
											.getDouble(9));
							guaranteeCover.setTotal(guaranteeCoverResult
									.getDouble(10));
							guaranteeCover.setTenure(guaranteeCoverResult
									.getInt(11));
							guaranteeCover.setApprovalDate(guaranteeCoverResult
									.getDate(12));
							guaranteeCover.setIssueDate(guaranteeCoverResult
									.getDate(13));
							guaranteeCover.setTimeInterval(guaranteeCoverResult
									.getInt(14));
							guaranteeCover.setTcDate(guaranteeCoverResult
									.getDate(15));
							guaranteeCover.setTcEndDate(guaranteeCoverResult
									.getDate(16));
							double guaranteeFeePaid = guaranteeCoverResult
									.getDouble(17);
							guaranteeCover.setGuaranteeFee(guaranteeFeePaid);
							guaranteeCover.setFlag(guaranteeCoverResult
									.getString(18));
							guaranteeCover.setWcDate(guaranteeCoverResult
									.getDate(19));
							guaranteeCover.setWcEndDate(guaranteeCoverResult
									.getDate(20));

						} else if (index.equals("N")) {
							guaranteeCover.setCgpan(guaranteeCoverResult
									.getString(6));
							guaranteeCover.setSsiName(guaranteeCoverResult
									.getString(7));
							guaranteeCover.setTermCredit(guaranteeCoverResult
									.getDouble(8));
							guaranteeCover
									.setWorkingCapital(guaranteeCoverResult
											.getDouble(9));
							guaranteeCover.setTotal(guaranteeCoverResult
									.getDouble(10));
							guaranteeCover.setTenure(guaranteeCoverResult
									.getInt(11));
							guaranteeCover.setApprovalDate(guaranteeCoverResult
									.getDate(12));
							guaranteeCover.setIssueDate(guaranteeCoverResult
									.getDate(13));
							guaranteeCover.setTimeInterval(guaranteeCoverResult
									.getInt(14));
							guaranteeCover.setTcDate(guaranteeCoverResult
									.getDate(15));
							guaranteeCover.setTcEndDate(guaranteeCoverResult
									.getDate(16));
							guaranteeCover.setGuaranteeFee(0);
							guaranteeCover.setFlag(guaranteeCoverResult
									.getString(18));
							guaranteeCover.setWcDate(guaranteeCoverResult
									.getDate(19));
							guaranteeCover.setWcEndDate(guaranteeCoverResult
									.getDate(20));

						}

					}

					else {
						String index = guaranteeCoverResult.getString(18);

						if (index.equals("Y")) {

							guaranteeCover.setCgpan(guaranteeCoverResult
									.getString(6));
							guaranteeCover.setSsiName(guaranteeCoverResult
									.getString(7));
							guaranteeCover.setTermCredit(guaranteeCoverResult
									.getDouble(8));
							guaranteeCover
									.setWorkingCapital(guaranteeCoverResult
											.getDouble(9));
							guaranteeCover.setTotal(guaranteeCoverResult
									.getDouble(10));
							guaranteeCover.setTenure(guaranteeCoverResult
									.getInt(11));
							guaranteeCover.setApprovalDate(guaranteeCoverResult
									.getDate(12));
							guaranteeCover.setIssueDate(guaranteeCoverResult
									.getDate(13));
							guaranteeCover.setTimeInterval(guaranteeCoverResult
									.getInt(14));
							guaranteeCover.setTcDate(guaranteeCoverResult
									.getDate(15));
							guaranteeCover.setTcEndDate(guaranteeCoverResult
									.getDate(16));
							double guaranteeFeePaid = guaranteeCoverResult
									.getDouble(17);
							guaranteeCover.setGuaranteeFee(guaranteeFeePaid);
							guaranteeCover.setFlag(guaranteeCoverResult
									.getString(18));
							guaranteeCover.setWcDate(guaranteeCoverResult
									.getDate(19));
							guaranteeCover.setWcEndDate(guaranteeCoverResult
									.getDate(21));

						} else if (index.equals("N")) {
							guaranteeCover.setCgpan(guaranteeCoverResult
									.getString(6));
							guaranteeCover.setSsiName(guaranteeCoverResult
									.getString(7));
							guaranteeCover.setTermCredit(guaranteeCoverResult
									.getDouble(8));
							guaranteeCover
									.setWorkingCapital(guaranteeCoverResult
											.getDouble(9));
							guaranteeCover.setTotal(guaranteeCoverResult
									.getDouble(10));
							guaranteeCover.setTenure(guaranteeCoverResult
									.getInt(11));
							guaranteeCover.setApprovalDate(guaranteeCoverResult
									.getDate(12));
							guaranteeCover.setIssueDate(guaranteeCoverResult
									.getDate(13));
							guaranteeCover.setTimeInterval(guaranteeCoverResult
									.getInt(14));
							guaranteeCover.setTcDate(guaranteeCoverResult
									.getDate(15));
							guaranteeCover.setTcEndDate(guaranteeCoverResult
									.getDate(16));
							guaranteeCover.setGuaranteeFee(0);
							guaranteeCover.setFlag(guaranteeCoverResult
									.getString(18));
							guaranteeCover.setWcDate(guaranteeCoverResult
									.getDate(19));
							guaranteeCover.setWcEndDate(guaranteeCoverResult
									.getDate(21));

						}

						// sizeReport.put(member,guaranteeCover);

					}
					memberCgpans.add(guaranteeCover);
				}

				Set sizeReportSet = sizeReport.keySet();
				Iterator sizeReportIterator = sizeReportSet.iterator();

				while (sizeReportIterator.hasNext()) {
					// GuaranteeCover sizeReportDetail = new GuaranteeCover();
					String sizeKey = (String) sizeReportIterator.next();
					GuaranteeCoverIssued guaranteeIssuedTemp = (GuaranteeCoverIssued) sizeReport
							.get(sizeKey);
					// sizeReportDetail =
					// (GuaranteeCover)sizeReport.get(sizeKey);
					// sizeReportDetail.setCgpan(sizeKey);
					guaranteeCoverArray.add(guaranteeIssuedTemp);

				}
				guaranteeCoverResult.close();
				guaranteeCoverResult = null;
				guaranteeCoverStmt.close();
				guaranteeCoverStmt = null;

			}

			catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}

		}

		Log.log(Log.INFO, "ReportDAO", "guaranteeCoverSsi", "Exited");
		return guaranteeCoverArray;
	}

	// Fix Completed

	/*
	 * This method returns a vector of ClaimDetail objects.
	 */
	/*
	 * ##########################################################################
	 * ###################################3
	 */

	public Vector getListOfClaimRefNumbers(java.sql.Date fromDate,
			java.sql.Date toDate, String clmApplicationStatusFlag)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()", "Entered");
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"From Date :" + fromDate);
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"To Date :" + toDate);
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"clmApplicationStatusFlag :" + clmApplicationStatusFlag);
		Connection conn = null;
		PreparedStatement prepStatement = null;
		ResultSet rs = null;
		Vector clmRefNumbersList = new Vector();
		String query = null;

		try {
			conn = DBConnection.getConnection();
			if ((fromDate != null)
					&& (!(clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS)
							|| clmApplicationStatusFlag
									.equals(ClaimConstants.CLM_HOLD_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_FORWARD_STATUS)))) {
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_APPROVAL_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Approval");
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no, c.cgclan,S.SSI_UNIT_NAME,CLM_DATE "
							+ " from claim_detail c, member_info m,SSI_DETAIL S"
							+ " where c.clm_date between ? and ? AND C.BID=S.BID "
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no,"
							+ " c.cgclan,S.SSI_UNIT_NAME,CLM_DATE order by CLM_DATE,bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, fromDate);
					prepStatement.setDate(2, toDate);
					prepStatement.setString(3, clmApplicationStatusFlag);
					rs = (ResultSet) prepStatement.executeQuery();
				}
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_REJECT_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Reject");
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_noS.SSI_UNIT_NAME,CLM_DATE "
							+ " from claim_detail c, member_info m,SSI_DETAIL S"
							+ " where c.clm_date between ? and ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ? AND C.BID=S.BID"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no,S.SSI_UNIT_NAME,CLM_DATE order by CLM_DATE,bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, fromDate);
					prepStatement.setDate(2, toDate);
					prepStatement.setString(3, clmApplicationStatusFlag);
					rs = (ResultSet) prepStatement.executeQuery();
				}
			}
			if ((fromDate != null)
					&& ((clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS)
							|| clmApplicationStatusFlag
									.equals(ClaimConstants.CLM_HOLD_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_FORWARD_STATUS)))) {
				Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
						"From Date is NULL, Status is Pending or Forward or Hold");
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no,S.SSI_UNIT_NAME,CLM_DATE "
						+ " from claim_detail_temp@cginter c, member_info m,SSI_DETAIL S "
						+ " where c.clm_date between ? and ?"
						+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
						+ " and c.clm_status = ? AND C.BID=S.BID"
						+ " group by m.mem_bank_name,"
						+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
						+ " c.clm_ref_no,S.SSI_UNIT_NAME,CLM_DATE order by CLM_DATE,bnkname";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setDate(1, fromDate);
				prepStatement.setDate(2, toDate);
				prepStatement.setString(3, clmApplicationStatusFlag);
				rs = (ResultSet) prepStatement.executeQuery();
			}
			if ((fromDate == null)
					&& (!(clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS)
							|| clmApplicationStatusFlag
									.equals(ClaimConstants.CLM_HOLD_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_FORWARD_STATUS)))) {
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_APPROVAL_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Approval");
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no, c.cgclan,S.SSI_UNIT_NAME,CLM_DATE "
							+ " from claim_detail c, member_info m,SSI_DETAIL S "
							+ " where c.clm_date <= ? AND C.BID=S.BID "
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no,"
							+ " c.cgclan,S.SSI_UNIT_NAME,CLM_DATE order by CLM_DATE,bnkname";
					prepStatement = conn.prepareStatement(query);
					// prepStatement.setDate(1,fromDate);
					prepStatement.setDate(1, toDate);
					prepStatement.setString(2, clmApplicationStatusFlag);
					rs = (ResultSet) prepStatement.executeQuery();
				} else if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_REJECT_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Reject");
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no,S.SSI_UNIT_NAME,CLM_DATE "
							+ " from claim_detail c, member_info m,SSI_DETAIL S "
							+ " where c.clm_date <= ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ? AND C.BID=S.BID "
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no,S.SSI_UNIT_NAME,CLM_DATE order by CLM_DATE,bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, toDate);
					prepStatement.setString(2, clmApplicationStatusFlag);
					rs = (ResultSet) prepStatement.executeQuery();
				}
			}
			if ((fromDate == null)
					&& ((clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS)
							|| clmApplicationStatusFlag
									.equals(ClaimConstants.CLM_HOLD_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_FORWARD_STATUS)))) {
				Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
						"From Date is NULL, Status is Pending or Forward or Hold");
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no,S.SSI_UNIT_NAME,CLM_DATE "
						+ " from claim_detail_temp@cginter c, member_info m,SSI_DETAIL S"
						+ " where c.clm_date <= ? AND C.BID=S.BID "
						+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
						+ " and c.clm_status = ?"
						+ " group by m.mem_bank_name,"
						+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
						+ " c.clm_ref_no,S.SSI_UNIT_NAME,CLM_DATE order by CLM_DATE,bnkname";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setDate(1, toDate);
				prepStatement.setString(2, clmApplicationStatusFlag);
				rs = (ResultSet) prepStatement.executeQuery();
			}
			String memberBankName = null;
			String memberId = null;
			String clmRefNumber = null;
			String cgclan = "";
			ClaimDetail clmDtl = null;
			String unitName = "";
			java.util.Date submittedDt = null;

			if (clmApplicationStatusFlag
					.equals(ClaimConstants.CLM_APPROVAL_STATUS)) {
				while (rs.next()) {
					memberBankName = (String) rs.getString(1);
					memberId = (String) rs.getString(2);
					clmRefNumber = (String) rs.getString(3);
					cgclan = (String) rs.getString(4);
					unitName = (String) rs.getString(5);
					submittedDt = (Date) rs.getDate(6);
					clmDtl = new ClaimDetail();
					clmDtl.setMliName(memberBankName);
					clmDtl.setMliId(memberId);
					clmDtl.setClaimRefNum(clmRefNumber);
					clmDtl.setCGCLAN(cgclan);
					clmDtl.setSsiUnitName(unitName);
					clmDtl.setClmSubmittedDt(submittedDt);

					// Adding the ClaimDetail object to the vector
					clmRefNumbersList.addElement(clmDtl);
				}
				rs.close();
				rs = null;
			} else {
				while (rs.next()) {
					memberBankName = (String) rs.getString(1);
					memberId = (String) rs.getString(2);
					clmRefNumber = (String) rs.getString(3);
					unitName = (String) rs.getString(4);
					submittedDt = (Date) rs.getDate(5);

					clmDtl = new ClaimDetail();
					clmDtl.setMliName(memberBankName);
					clmDtl.setMliId(memberId);
					clmDtl.setClaimRefNum(clmRefNumber);
					clmDtl.setCGCLAN(cgclan);
					clmDtl.setSsiUnitName(unitName);
					clmDtl.setClmSubmittedDt(submittedDt);

					// Adding the ClaimDetail object to the vector
					clmRefNumbersList.addElement(clmDtl);
				}
				rs.close();
				rs = null;
			}
			prepStatement.close();
			prepStatement = null;
		} catch (SQLException sqlexception) {
			// sqlexception.printStackTrace();
			throw new DatabaseException(sqlexception.getMessage());
		} finally {
			DBConnection.freeConnection(conn);
		}
		return clmRefNumbersList;
	}

	/**
	 * 
	 * @param fromDate
	 * @param toDate
	 * @param clmApplicationStatusFlag
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public Vector getListOfClaimRefNumbersNew(java.sql.Date fromDate,
			java.sql.Date toDate, String clmApplicationStatusFlag)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbersNew()",
				"Entered");
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbersNew()",
				"From Date :" + fromDate);
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbersNew()",
				"To Date :" + toDate);
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbersNew()",
				"clmApplicationStatusFlag :" + clmApplicationStatusFlag);
		Connection conn = null;
		PreparedStatement prepStatement = null;
		ResultSet rs = null;
		Vector clmRefNumbersList = new Vector();
		String query = null;

		try {
			conn = DBConnection.getConnection();

			if ((fromDate != null)
					&& (!(clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_HOLD_STATUS)))) {
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_APPROVAL_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Approval");
					// " where c.clm_date between ? and ? AND C.BID=S.BID " +
					// code changed clm_date to clm_approved_dt by sukumar@path
					// on 11-09-2009
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no, c.cgclan,S.SSI_UNIT_NAME,TRUNC(C.CLM_APPROVED_DT),CLM_APPROVED_AMT "
							+ " from claim_detail c, member_info m,SSI_DETAIL S"
							+ " where TRUNC(c.clm_approved_dt) between ? and ? AND C.BID=S.BID "
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no,"
							+ " c.cgclan,S.SSI_UNIT_NAME,TRUNC(c.clm_approved_dt),CLM_APPROVED_AMT order by TRUNC(c.clm_approved_dt),bnkname";
					// System.out.println("Query:"+query);
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, fromDate);
					prepStatement.setDate(2, toDate);
					prepStatement.setString(3, clmApplicationStatusFlag);
					rs = (ResultSet) prepStatement.executeQuery();
				}
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_REJECT_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Reject");
					// code changed clm_date to clm_approved_dt by sukumar@path
					// on 11-09-2009
					// " where c.clm_date between ? and ?" +
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no,S.SSI_UNIT_NAME,TRUNC(CLM_CREATED_MODIFIED_DT) "
							+ " from claim_detail c, member_info m,SSI_DETAIL S"
							+ " where TRUNC(c.clm_approved_dt) between ? and ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ? AND C.BID=S.BID"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no,S.SSI_UNIT_NAME,TRUNC(CLM_CREATED_MODIFIED_DT) order by TRUNC(CLM_CREATED_MODIFIED_DT),bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, fromDate);
					prepStatement.setDate(2, toDate);
					prepStatement.setString(3, clmApplicationStatusFlag);
					rs = (ResultSet) prepStatement.executeQuery();
				}
				// ADDED FORWARD REPORT BY SUKUMAR@PATH ON 12-09-2009
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_FORWARD_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is  Forward");
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no,S.SSI_UNIT_NAME,TRUNC(CLM_CREATED_MODIFIED_DT) "
							+ " from claim_detail_temp c, member_info m,SSI_DETAIL S "
							+ " where TRUNC(CLM_CREATED_MODIFIED_DT) between ? and ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ? AND C.BID=S.BID"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no,S.SSI_UNIT_NAME,TRUNC(CLM_CREATED_MODIFIED_DT) order by TRUNC(CLM_CREATED_MODIFIED_DT),bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, fromDate);
					prepStatement.setDate(2, toDate);
					prepStatement.setString(3, clmApplicationStatusFlag);
					rs = (ResultSet) prepStatement.executeQuery();
				}
				/*
				 * ADDED BY SUKUMAR@PATH ON 20-FEB-2010 FOR DISPLAY TEMPORARY
				 * CLOSE & TEMPORARY REJECT APPLICATION
				 */
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_TEMPORARY_CLOSE)
						|| clmApplicationStatusFlag
								.equals(ClaimConstants.CLM_TEMPORARY_REJECT)
						|| clmApplicationStatusFlag
								.equals(ClaimConstants.CLM_WITHDRAWN)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is  TEMPORARY CLOSED");
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no,S.SSI_UNIT_NAME,TRUNC(CLM_CREATED_MODIFIED_DT) "
							+ " from claim_detail_temp c, member_info m,SSI_DETAIL S "
							+ " where TRUNC(CLM_CREATED_MODIFIED_DT) between ? and ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ? AND C.BID=S.BID"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no,S.SSI_UNIT_NAME,TRUNC(CLM_CREATED_MODIFIED_DT) order by TRUNC(CLM_CREATED_MODIFIED_DT),bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, fromDate);
					prepStatement.setDate(2, toDate);
					prepStatement.setString(3, clmApplicationStatusFlag);
					rs = (ResultSet) prepStatement.executeQuery();
				}
			}
			if
			// clmApplicationStatusFlag.equals(ClaimConstants.CLM_FORWARD_STATUS)
			((fromDate != null)
					&& ((clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_HOLD_STATUS)))) {
				Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
						"From Date is NULL, Status is Pending or Forward or Hold");
				query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no,S.SSI_UNIT_NAME,CLM_DATE "
						+ " from claim_detail_temp c, member_info m,SSI_DETAIL S "
						+ " where c.clm_date between ? and ?"
						+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
						+ " and c.clm_status = ? AND C.BID=S.BID"
						+ " group by m.mem_bank_name,"
						+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
						+ " c.clm_ref_no,S.SSI_UNIT_NAME,CLM_DATE order by CLM_DATE,bnkname";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setDate(1, fromDate);
				prepStatement.setDate(2, toDate);
				prepStatement.setString(3, clmApplicationStatusFlag);
				rs = (ResultSet) prepStatement.executeQuery();
			}
			if
			// clmApplicationStatusFlag.equals(ClaimConstants.CLM_FORWARD_STATUS)
			((fromDate == null)
					&& (!(clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_HOLD_STATUS)))) {
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_APPROVAL_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Approval");
					// code changed clm_date to clm_approved_dt by sukumar@path
					// on 11-09-2009
					// " where c.clm_date <= ? AND C.BID=S.BID " +
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no, c.cgclan,S.SSI_UNIT_NAME,TRUNC(CLM_APPROVED_DT),CLM_APPROVED_AMT "
							+ " from claim_detail c, member_info m,SSI_DETAIL S "
							+ " where TRUNC(c.clm_approved_dt) <= ? AND C.BID=S.BID "
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no,"
							+ " c.cgclan,S.SSI_UNIT_NAME,TRUNC(CLM_APPROVED_DT),CLM_APPROVED_AMT order by Trunc(c.clm_approved_dt),bnkname";
					prepStatement = conn.prepareStatement(query);
					// prepStatement.setDate(1,fromDate);
					prepStatement.setDate(1, toDate);
					prepStatement.setString(2, clmApplicationStatusFlag);
					rs = (ResultSet) prepStatement.executeQuery();
				} else if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_REJECT_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Reject");
					// condition changed clm_date to clm_approved_dt by
					// sukumar@path on 11-09-2009
					// " where c.clm_date <= ?" +
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no,S.SSI_UNIT_NAME,TRUNC(CLM_CREATED_MODIFIED_DT) "
							+ " from claim_detail c, member_info m,SSI_DETAIL S "
							+ " where TRUNC(c.clm_created_modified_dt) <= ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ? AND C.BID=S.BID "
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no,S.SSI_UNIT_NAME,TRUNC(CLM_CREATED_MODIFIED_DT) order by TRUNC(CLM_CREATED_MODIFIED_DT),bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, toDate);
					prepStatement.setString(2, clmApplicationStatusFlag);
					rs = (ResultSet) prepStatement.executeQuery();
				} else if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_FORWARD_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Forward");
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no,S.SSI_UNIT_NAME,TRUNC(CLM_CREATED_MODIFIED_DT) "
							+ " from claim_detail_temp c, member_info m,SSI_DETAIL S"
							+ " where TRUNC(C.CLM_CREATED_MODIFIED_DT) <= ? AND C.BID=S.BID "
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no,S.SSI_UNIT_NAME,TRUNC(CLM_CREATED_MODIFIED_DT) order by TRUNC(CLM_CREATED_MODIFIED_DT),bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, toDate);
					prepStatement.setString(2, clmApplicationStatusFlag);
					rs = (ResultSet) prepStatement.executeQuery();
				} else if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_TEMPORARY_CLOSE)
						|| clmApplicationStatusFlag
								.equals(ClaimConstants.CLM_TEMPORARY_REJECT)
						|| clmApplicationStatusFlag
								.equals(ClaimConstants.CLM_WITHDRAWN)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Forward");
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no,S.SSI_UNIT_NAME,TRUNC(CLM_CREATED_MODIFIED_DT) "
							+ " from claim_detail_temp c, member_info m,SSI_DETAIL S"
							+ " where TRUNC(C.CLM_CREATED_MODIFIED_DT) <= ? AND C.BID=S.BID "
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no,S.SSI_UNIT_NAME,TRUNC(CLM_CREATED_MODIFIED_DT) order by TRUNC(CLM_CREATED_MODIFIED_DT),bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, toDate);
					prepStatement.setString(2, clmApplicationStatusFlag);
					rs = (ResultSet) prepStatement.executeQuery();
				}
			}
			if
			// clmApplicationStatusFlag.equals(ClaimConstants.CLM_FORWARD_STATUS)
			((fromDate == null)
					&& ((clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_HOLD_STATUS)))) {
				Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
						"From Date is NULL, Status is Pending or Forward or Hold");
				query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no,S.SSI_UNIT_NAME,CLM_DATE "
						+ " from claim_detail_temp c, member_info m,SSI_DETAIL S"
						+ " where c.clm_date <= ? AND C.BID=S.BID "
						+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
						+ " and c.clm_status = ?"
						+ " group by m.mem_bank_name,"
						+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
						+ " c.clm_ref_no,S.SSI_UNIT_NAME,CLM_DATE order by CLM_DATE,bnkname";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setDate(1, toDate);
				prepStatement.setString(2, clmApplicationStatusFlag);
				rs = (ResultSet) prepStatement.executeQuery();
			}
			String memberBankName = null;
			String memberId = null;
			String clmRefNumber = null;
			String cgclan = "";
			ClaimDetail clmDtl = null;
			String unitName = "";
			java.util.Date submittedDt = null;
			double claimApprovedAmt = 0.0;

			if (clmApplicationStatusFlag
					.equals(ClaimConstants.CLM_APPROVAL_STATUS)) {
				while (rs.next()) {
					memberBankName = (String) rs.getString(1);
					memberId = (String) rs.getString(2);
					clmRefNumber = (String) rs.getString(3);
					cgclan = (String) rs.getString(4);
					unitName = (String) rs.getString(5);
					submittedDt = (Date) rs.getDate(6);
					claimApprovedAmt = (double) rs.getDouble(7);
					clmDtl = new ClaimDetail();
					clmDtl.setMliName(memberBankName);
					clmDtl.setMliId(memberId);
					clmDtl.setClaimRefNum(clmRefNumber);
					clmDtl.setCGCLAN(cgclan);
					clmDtl.setSsiUnitName(unitName);
					clmDtl.setClmSubmittedDt(submittedDt);
					clmDtl.setEligibleClaimAmt(claimApprovedAmt);

					// Adding the ClaimDetail object to the vector
					clmRefNumbersList.addElement(clmDtl);
				}
				rs.close();
				rs = null;
			} else {
				while (rs.next()) {
					memberBankName = (String) rs.getString(1);
					memberId = (String) rs.getString(2);
					clmRefNumber = (String) rs.getString(3);
					unitName = (String) rs.getString(4);
					submittedDt = (Date) rs.getDate(5);

					clmDtl = new ClaimDetail();
					clmDtl.setMliName(memberBankName);
					clmDtl.setMliId(memberId);
					clmDtl.setClaimRefNum(clmRefNumber);
					clmDtl.setCGCLAN(cgclan);
					clmDtl.setSsiUnitName(unitName);
					clmDtl.setClmSubmittedDt(submittedDt);

					// Adding the ClaimDetail object to the vector
					clmRefNumbersList.addElement(clmDtl);
				}
				rs.close();
				rs = null;
			}
			prepStatement.close();
			prepStatement = null;
		} catch (SQLException sqlexception) {
			// sqlexception.printStackTrace();
			throw new DatabaseException(sqlexception.getMessage());
		} finally {
			DBConnection.freeConnection(conn);
		}
		return clmRefNumbersList;
	}

	/*
	 * This method returns a vector of ClaimDetail objects when the user is a
	 * HO.
	 */
	/*
	 * ##########################################################################
	 * ##################################
	 */

	public Vector getListOfClaimRefNumbers(java.sql.Date fromDate,
			java.sql.Date toDate, String clmApplicationStatusFlag, String bankId)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()", "Entered");
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"From Date :" + fromDate);
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"To Date :" + toDate);
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"clmApplicationStatusFlag :" + clmApplicationStatusFlag);
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"Bank Id :" + bankId);
		Connection conn = null;
		PreparedStatement prepStatement = null;
		ResultSet rs = null;
		Vector clmRefNumbersList = new Vector();
		String query = null;
		try {
			conn = DBConnection.getConnection();
			if ((fromDate != null)
					&& (!(clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS)
							|| clmApplicationStatusFlag
									.equals(ClaimConstants.CLM_HOLD_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_FORWARD_STATUS)))) {
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_APPROVAL_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Approval");
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * capture borrower name and application submitted date by
					 * sukumar@path 0n 04-08-2009
					 */
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no, c.cgclan"
							+ " from claim_detail c, member_info m"
							+ " where c.clm_date between ? and ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " and c.mem_bnk_id = ?"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no," + " c.cgclan order by bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, fromDate);
					prepStatement.setDate(2, toDate);
					prepStatement.setString(3, clmApplicationStatusFlag);
					prepStatement.setString(4, bankId);
					rs = (ResultSet) prepStatement.executeQuery();
				}
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_REJECT_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Reject");
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * capture borrower name and application submitted date by
					 * sukumar@path 0n 04-08-2009
					 */
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no"
							+ " from claim_detail c, member_info m"
							+ " where c.clm_date between ? and ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " and c.mem_bnk_id = ?"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no order by bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, fromDate);
					prepStatement.setDate(2, toDate);
					prepStatement.setString(3, clmApplicationStatusFlag);
					prepStatement.setString(4, bankId);
					rs = (ResultSet) prepStatement.executeQuery();
				}
			}
			if ((fromDate != null)
					&& ((clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS)
							|| clmApplicationStatusFlag
									.equals(ClaimConstants.CLM_HOLD_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_FORWARD_STATUS)))) {
				Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
						"From Date is NULL, Status is Pending or Forward or Hold");
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * capture borrower name and application submitted date by
				 * sukumar@path 0n 04-08-2009
				 */
				query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no"
						+ " from claim_detail_temp c, member_info m"
						+ " where c.clm_date between ? and ?"
						+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
						+ " and c.clm_status = ?"
						+ " and c.mem_bnk_id = ?"
						+ " group by m.mem_bank_name,"
						+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
						+ " c.clm_ref_no order by bnkname";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setDate(1, fromDate);
				prepStatement.setDate(2, toDate);
				prepStatement.setString(3, clmApplicationStatusFlag);
				prepStatement.setString(4, bankId);
				rs = (ResultSet) prepStatement.executeQuery();
			}
			if ((fromDate == null)
					&& (!(clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS)
							|| clmApplicationStatusFlag
									.equals(ClaimConstants.CLM_HOLD_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_FORWARD_STATUS)))) {
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_APPROVAL_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Approval");
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * capture borrower name and application submitted date by
					 * sukumar@path 0n 04-08-2009
					 */
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no, c.cgclan"
							+ " from claim_detail c, member_info m"
							+ " where c.clm_date <= ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " and c.mem_bnk_id = ?"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no," + " c.cgclan order by bnkname";
					prepStatement = conn.prepareStatement(query);
					// prepStatement.setDate(1,fromDate);
					prepStatement.setDate(1, toDate);
					prepStatement.setString(2, clmApplicationStatusFlag);
					prepStatement.setString(3, bankId);
					rs = (ResultSet) prepStatement.executeQuery();
				} else if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_REJECT_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Reject");
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					/*
					 * capture borrower name and application submitted date by
					 * sukumar@path 0n 04-08-2009
					 */
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no"
							+ " from claim_detail c, member_info m"
							+ " where c.clm_date <= ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " and c.mem_bnk_id = ?"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no order by bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, toDate);
					prepStatement.setString(2, clmApplicationStatusFlag);
					prepStatement.setString(3, bankId);
					rs = (ResultSet) prepStatement.executeQuery();
				}
			}
			if ((fromDate == null)
					&& ((clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS)
							|| clmApplicationStatusFlag
									.equals(ClaimConstants.CLM_HOLD_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_FORWARD_STATUS)))) {
				Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
						"From Date is NULL, Status is Pending or Forward or Hold");
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				/*
				 * capture borrower name and application submitted date by
				 * sukumar@path 0n 04-08-2009
				 */
				query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no"
						+ " from claim_detail_temp c, member_info m"
						+ " where c.clm_date <= ?"
						+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
						+ " and c.clm_status = ?"
						+ " and c.mem_bnk_id = ?"
						+ " group by m.mem_bank_name,"
						+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
						+ " c.clm_ref_no order by bnkname";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setDate(1, toDate);
				prepStatement.setString(2, clmApplicationStatusFlag);
				prepStatement.setString(3, bankId);
				rs = (ResultSet) prepStatement.executeQuery();
			}
			String memberBankName = null;
			String memberId = null;
			String clmRefNumber = null;
			String cgclan = "";
			ClaimDetail clmDtl = null;

			if (clmApplicationStatusFlag
					.equals(ClaimConstants.CLM_APPROVAL_STATUS)) {
				while (rs.next()) {
					memberBankName = (String) rs.getString(1);
					memberId = (String) rs.getString(2);
					clmRefNumber = (String) rs.getString(3);
					cgclan = (String) rs.getString(4);

					clmDtl = new ClaimDetail();
					clmDtl.setMliName(memberBankName);
					clmDtl.setMliId(memberId);
					clmDtl.setClaimRefNum(clmRefNumber);
					clmDtl.setCGCLAN(cgclan);

					// Adding the ClaimDetail object to the vector
					clmRefNumbersList.addElement(clmDtl);
				}
				rs.close();
				rs = null;
			} else {
				while (rs.next()) {

					memberBankName = (String) rs.getString(1);
					memberId = (String) rs.getString(2);
					clmRefNumber = (String) rs.getString(3);

					clmDtl = new ClaimDetail();
					clmDtl.setMliName(memberBankName);
					clmDtl.setMliId(memberId);
					clmDtl.setClaimRefNum(clmRefNumber);
					clmDtl.setCGCLAN(cgclan);

					// Adding the ClaimDetail object to the vector
					clmRefNumbersList.addElement(clmDtl);
				}
				rs.close();
				rs = null;
			}
			prepStatement.close();
			prepStatement = null;
		} catch (SQLException sqlexception) {
			// sqlexception.printStackTrace();
			throw new DatabaseException(sqlexception.getMessage());
		} finally {
			DBConnection.freeConnection(conn);
		}
		return clmRefNumbersList;
	}

	/*
	 * This method returns a vector of ClaimDetail objects when the user is a
	 * Zonal User.
	 */
	/*
	 * ##########################################################################
	 * ######################
	 */

	public Vector getListOfClaimRefNumbers(java.sql.Date fromDate,
			java.sql.Date toDate, String clmApplicationStatusFlag,
			String bankId, String zoneId) throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()", "Entered");
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"From Date :" + fromDate);
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"To Date :" + toDate);
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"clmApplicationStatusFlag :" + clmApplicationStatusFlag);
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"Bank Id :" + bankId);
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"Zone Id :" + zoneId);
		Connection conn = null;
		PreparedStatement prepStatement = null;
		ResultSet rs = null;
		Vector clmRefNumbersList = new Vector();
		String query = null;

		try {
			conn = DBConnection.getConnection();
			if ((fromDate != null)
					&& (!(clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS)
							|| clmApplicationStatusFlag
									.equals(ClaimConstants.CLM_HOLD_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_FORWARD_STATUS)))) {
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_APPROVAL_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Approval");
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no, c.cgclan"
							+ " from claim_detail c, member_info m"
							+ " where c.clm_date between ? and ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " and m.mem_bnk_id = ?"
							+ " and (m.mem_reporting_zone_id = ? or m.mem_zne_id = ?) "
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no," + " c.cgclan order by bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, fromDate);
					prepStatement.setDate(2, toDate);
					prepStatement.setString(3, clmApplicationStatusFlag);
					prepStatement.setString(4, bankId);
					prepStatement.setString(5, zoneId);
					prepStatement.setString(6, zoneId);
					rs = (ResultSet) prepStatement.executeQuery();
				}
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_REJECT_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Reject");
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no"
							+ " from claim_detail c, member_info m"
							+ " where c.clm_date between ? and ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " and m.mem_bnk_id = ?"
							+ " and (m.mem_reporting_zone_id = ? or m.mem_zne_id = ?) "
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no order by bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, fromDate);
					prepStatement.setDate(2, toDate);
					prepStatement.setString(3, clmApplicationStatusFlag);
					prepStatement.setString(4, bankId);
					prepStatement.setString(5, zoneId);
					prepStatement.setString(6, zoneId);
					rs = (ResultSet) prepStatement.executeQuery();
				}
			}
			if ((fromDate != null)
					&& ((clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS)
							|| clmApplicationStatusFlag
									.equals(ClaimConstants.CLM_HOLD_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_FORWARD_STATUS)))) {
				Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
						"From Date is NULL, Status is Pending or Forward or Hold");
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no"
						+ " from claim_detail_temp c, member_info m"
						+ " where c.clm_date between ? and ?"
						+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
						+ " and c.clm_status = ?"
						+ " and m.mem_bnk_id = ?"
						+ " and (m.mem_reporting_zone_id = ? or m.mem_zne_id = ?) "
						+ " group by m.mem_bank_name,"
						+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
						+ " c.clm_ref_no order by bnkname";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setDate(1, fromDate);
				prepStatement.setDate(2, toDate);
				prepStatement.setString(3, clmApplicationStatusFlag);
				prepStatement.setString(4, bankId);
				prepStatement.setString(5, zoneId);
				prepStatement.setString(6, zoneId);
				rs = (ResultSet) prepStatement.executeQuery();
			}
			if ((fromDate == null)
					&& (!(clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS)
							|| clmApplicationStatusFlag
									.equals(ClaimConstants.CLM_HOLD_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_FORWARD_STATUS)))) {
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_APPROVAL_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Approval");
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no, c.cgclan"
							+ " from claim_detail c, member_info m"
							+ " where c.clm_date <= ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " and m.mem_bnk_id = ?"
							+ " and (m.mem_reporting_zone_id = ? or m.mem_zne_id = ?) "
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no," + " c.cgclan order by bnkname";
					prepStatement = conn.prepareStatement(query);
					// prepStatement.setDate(1,fromDate);
					prepStatement.setDate(1, toDate);
					prepStatement.setString(2, clmApplicationStatusFlag);
					prepStatement.setString(3, bankId);
					prepStatement.setString(4, zoneId);
					prepStatement.setString(5, zoneId);
					rs = (ResultSet) prepStatement.executeQuery();
				} else if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_REJECT_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Reject");
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no"
							+ " from claim_detail c, member_info m"
							+ " where c.clm_date <= ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " and m.mem_bnk_id = ?"
							+ " and (m.mem_reporting_zone_id = ? or m.mem_zne_id = ?) "
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no order by bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, toDate);
					prepStatement.setString(2, clmApplicationStatusFlag);
					prepStatement.setString(3, bankId);
					prepStatement.setString(4, zoneId);
					prepStatement.setString(5, zoneId);
					rs = (ResultSet) prepStatement.executeQuery();
				}
			}
			if ((fromDate == null)
					&& ((clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS)
							|| clmApplicationStatusFlag
									.equals(ClaimConstants.CLM_HOLD_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_FORWARD_STATUS)))) {
				Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
						"From Date is NULL, Status is Pending or Forward or Hold");
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no"
						+ " from claim_detail_temp c, member_info m"
						+ " where c.clm_date <= ?"
						+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
						+ " and c.clm_status = ?"
						+ " and m.mem_bnk_id = ?"
						+ " and (m.mem_reporting_zone_id = ? or m.mem_zne_id = ?) "
						+ " group by m.mem_bank_name,"
						+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
						+ " c.clm_ref_no order by bnkname";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setDate(1, toDate);
				prepStatement.setString(2, clmApplicationStatusFlag);
				prepStatement.setString(3, bankId);
				prepStatement.setString(4, zoneId);
				prepStatement.setString(5, zoneId);
				rs = (ResultSet) prepStatement.executeQuery();
			}
			String memberBankName = null;
			String memberId = null;
			String clmRefNumber = null;
			String cgclan = "";
			ClaimDetail clmDtl = null;

			if (clmApplicationStatusFlag
					.equals(ClaimConstants.CLM_APPROVAL_STATUS)) {
				while (rs.next()) {
					memberBankName = (String) rs.getString(1);
					memberId = (String) rs.getString(2);
					clmRefNumber = (String) rs.getString(3);
					cgclan = (String) rs.getString(4);
					clmDtl = new ClaimDetail();
					clmDtl.setMliName(memberBankName);
					clmDtl.setMliId(memberId);
					clmDtl.setClaimRefNum(clmRefNumber);
					clmDtl.setCGCLAN(cgclan);
					// Adding the ClaimDetail object to the vector
					clmRefNumbersList.addElement(clmDtl);
				}
				rs.close();
				rs = null;
			} else {
				while (rs.next()) {
					memberBankName = (String) rs.getString(1);
					memberId = (String) rs.getString(2);
					clmRefNumber = (String) rs.getString(3);
					clmDtl = new ClaimDetail();
					clmDtl.setMliName(memberBankName);
					clmDtl.setMliId(memberId);
					clmDtl.setClaimRefNum(clmRefNumber);
					clmDtl.setCGCLAN(cgclan);
					// Adding the ClaimDetail object to the vector
					clmRefNumbersList.addElement(clmDtl);
				}
				rs.close();
				rs = null;
			}
			prepStatement.close();
			prepStatement = null;
		} catch (SQLException sqlexception) {
			throw new DatabaseException(sqlexception.getMessage());
		} finally {
			DBConnection.freeConnection(conn);
		}
		return clmRefNumbersList;
	}

	/*
	 * This method returns a vector of ClaimDetail objects when the user is a
	 * Branch User.
	 */
	/*
	 * ##########################################################################
	 * #######################
	 */

	public Vector getListOfClaimRefNumbers(java.sql.Date fromDate,
			java.sql.Date toDate, String clmApplicationStatusFlag,
			String bankId, String zoneId, String brnId)
			throws DatabaseException {

		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()", "Entered");
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"From Date :" + fromDate);
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"To Date :" + toDate);
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"clmApplicationStatusFlag :" + clmApplicationStatusFlag);
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"Bank Id :" + bankId);
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"Zone Id :" + zoneId);
		Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
				"Branch Id :" + brnId);
		Connection conn = null;
		PreparedStatement prepStatement = null;
		ResultSet rs = null;
		Vector clmRefNumbersList = new Vector();
		String query = null;

		try {
			conn = DBConnection.getConnection();
			if ((fromDate != null)
					&& (!(clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS)
							|| clmApplicationStatusFlag
									.equals(ClaimConstants.CLM_HOLD_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_FORWARD_STATUS)))) {
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_APPROVAL_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Approval");
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no, c.cgclan"
							+ " from claim_detail c, member_info m"
							+ " where c.clm_date between ? and ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " and c.mem_bnk_id = ?"
							+ " and c.mem_zne_id = ?"
							+ " and c.mem_brn_id = ?"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no," + " c.cgclan order by bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, fromDate);
					prepStatement.setDate(2, toDate);
					prepStatement.setString(3, clmApplicationStatusFlag);
					prepStatement.setString(4, bankId);
					prepStatement.setString(5, zoneId);
					prepStatement.setString(6, brnId);
					rs = (ResultSet) prepStatement.executeQuery();
				}
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_REJECT_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Reject");
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no"
							+ " from claim_detail c, member_info m"
							+ " where c.clm_date between ? and ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " and c.mem_bnk_id = ?"
							+ " and c.mem_zne_id = ?"
							+ " and c.mem_brn_id = ?"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no order by bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, fromDate);
					prepStatement.setDate(2, toDate);
					prepStatement.setString(3, clmApplicationStatusFlag);
					prepStatement.setString(4, bankId);
					prepStatement.setString(5, zoneId);
					prepStatement.setString(6, brnId);
					rs = (ResultSet) prepStatement.executeQuery();
				}
			}
			if ((fromDate != null)
					&& ((clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS)
							|| clmApplicationStatusFlag
									.equals(ClaimConstants.CLM_HOLD_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_FORWARD_STATUS)))) {
				Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
						"From Date is NULL, Status is Pending or Forward or Hold");
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no"
						+ " from claim_detail_temp c, member_info m"
						+ " where c.clm_date between ? and ?"
						+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
						+ " and c.clm_status = ?"
						+ " and c.mem_bnk_id = ?"
						+ " and c.mem_zne_id = ?"
						+ " and c.mem_brn_id = ?"
						+ " group by m.mem_bank_name,"
						+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
						+ " c.clm_ref_no order by bnkname";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setDate(1, fromDate);
				prepStatement.setDate(2, toDate);
				prepStatement.setString(3, clmApplicationStatusFlag);
				prepStatement.setString(4, bankId);
				prepStatement.setString(5, zoneId);
				prepStatement.setString(6, brnId);
				rs = (ResultSet) prepStatement.executeQuery();
			}
			if ((fromDate == null)
					&& (!(clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS)
							|| clmApplicationStatusFlag
									.equals(ClaimConstants.CLM_HOLD_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_FORWARD_STATUS)))) {
				if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_APPROVAL_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Approval");
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no, c.cgclan"
							+ " from claim_detail c, member_info m"
							+ " where c.clm_date <= ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " and c.mem_bnk_id = ?"
							+ " and c.mem_zne_id = ?"
							+ " and c.mem_brn_id = ?"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no," + " c.cgclan order by bnkname";
					prepStatement = conn.prepareStatement(query);
					// prepStatement.setDate(1,fromDate);
					prepStatement.setDate(1, toDate);
					prepStatement.setString(2, clmApplicationStatusFlag);
					prepStatement.setString(3, bankId);
					prepStatement.setString(4, zoneId);
					prepStatement.setString(5, brnId);
					rs = (ResultSet) prepStatement.executeQuery();
				} else if (clmApplicationStatusFlag
						.equals(ClaimConstants.CLM_REJECT_STATUS)) {
					Log.log(Log.INFO, "ReportDAO",
							"getListOfClaimRefNumbers()",
							"From Date is NULL, Status is Reject");
					/*
					 * query modification@sudeep.dhiman to get resultset in
					 * sorted order
					 */
					query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no"
							+ " from claim_detail c, member_info m"
							+ " where c.clm_date <= ?"
							+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
							+ " and c.clm_status = ?"
							+ " and c.mem_bnk_id = ?"
							+ " and c.mem_zne_id = ?"
							+ " and c.mem_brn_id = ?"
							+ " group by m.mem_bank_name,"
							+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
							+ " c.clm_ref_no order by bnkname";
					prepStatement = conn.prepareStatement(query);
					prepStatement.setDate(1, toDate);
					prepStatement.setString(2, clmApplicationStatusFlag);
					prepStatement.setString(3, bankId);
					prepStatement.setString(4, zoneId);
					prepStatement.setString(5, brnId);
					rs = (ResultSet) prepStatement.executeQuery();
				}
			}
			if ((fromDate == null)
					&& ((clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_PENDING_STATUS)
							|| clmApplicationStatusFlag
									.equals(ClaimConstants.CLM_HOLD_STATUS) || clmApplicationStatusFlag
							.equals(ClaimConstants.CLM_FORWARD_STATUS)))) {
				Log.log(Log.INFO, "ReportDAO", "getListOfClaimRefNumbers()",
						"From Date is NULL, Status is Pending or Forward or Hold");
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				query = "select m.mem_bank_name bnkname, m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id, c.clm_ref_no"
						+ " from claim_detail_temp c, member_info m"
						+ " where c.clm_date <= ?"
						+ " and LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id))) "
						+ " and c.clm_status = ?"
						+ " and c.mem_bnk_id = ?"
						+ " and c.mem_zne_id = ?"
						+ " and c.mem_brn_id = ?"
						+ " group by m.mem_bank_name,"
						+ " m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id,"
						+ " c.clm_ref_no order by bnkname";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setDate(1, toDate);
				prepStatement.setString(2, clmApplicationStatusFlag);
				prepStatement.setString(3, bankId);
				prepStatement.setString(4, zoneId);
				prepStatement.setString(5, brnId);
				rs = (ResultSet) prepStatement.executeQuery();
			}
			String memberBankName = null;
			String memberId = null;
			String clmRefNumber = null;
			String cgclan = "";
			ClaimDetail clmDtl = null;

			if (clmApplicationStatusFlag
					.equals(ClaimConstants.CLM_APPROVAL_STATUS)) {
				while (rs.next()) {
					memberBankName = (String) rs.getString(1);
					memberId = (String) rs.getString(2);
					clmRefNumber = (String) rs.getString(3);
					cgclan = (String) rs.getString(4);
					clmDtl = new ClaimDetail();
					clmDtl.setMliName(memberBankName);
					clmDtl.setMliId(memberId);
					clmDtl.setClaimRefNum(clmRefNumber);
					clmDtl.setCGCLAN(cgclan);

					// Adding the ClaimDetail object to the vector
					clmRefNumbersList.addElement(clmDtl);
				}
				rs.close();
				rs = null;
			} else {
				while (rs.next()) {
					memberBankName = (String) rs.getString(1);
					memberId = (String) rs.getString(2);
					clmRefNumber = (String) rs.getString(3);
					clmDtl = new ClaimDetail();
					clmDtl.setMliName(memberBankName);
					clmDtl.setMliId(memberId);
					clmDtl.setClaimRefNum(clmRefNumber);
					clmDtl.setCGCLAN(cgclan);
					// Adding the ClaimDetail object to the vector
					clmRefNumbersList.addElement(clmDtl);
				}
				rs.close();
				rs = null;
			}
			prepStatement.close();
			prepStatement = null;
		} catch (SQLException sqlexception) {
			sqlexception.printStackTrace();
			throw new DatabaseException(sqlexception.getMessage());
		} finally {
			DBConnection.freeConnection(conn);
		}
		return clmRefNumbersList;
	}

	/*
	 * This method returns a ClaimApplication object for the given Claim
	 * Reference Number.
	 */

	public ClaimApplication displayClmRefNumberDtl(String claimRefNumber,
			String memId) throws DatabaseException {
		// System.out.println("Control 1");
		CPDAO cpdao = new CPDAO();
		ClaimApplication claimapplication = new ClaimApplication();
		PreparedStatement prepStatement = null;
		Connection conn = null;
		ResultSet rs = null;
		String query = null;
		String memberId = null;
		String borrowerId = null;
		String installmentFlag = null;
		String cgclan = null;
		java.util.Date clmApprvdDt = null;

		String bankId = memId.substring(0, 4);
		// String zoneId = memId.substring(4,8);
		// String branchId = memId.substring(8,12);
		DecimalFormat decimalFormat = new DecimalFormat("##########.00##");
		try {
			conn = DBConnection.getConnection();
			if (bankId.equals("0000")) {
				query = "select c.bid, c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id, c.clm_installment_flag, c.cgclan, c.clm_approved_dt"
						+ " from claim_detail c"
						+ " where LTRIM(RTRIM(UPPER(c.clm_ref_no))) = ?"
						+ " group by c.bid,"
						+ " c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id,"
						+ " c.clm_installment_flag,"
						+ " c.cgclan,"
						+ " c.clm_approved_dt";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select c.bid, c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id, c.clm_installment_flag, c.cgclan, c.clm_approved_dt"
						+ " from claim_detail c"
						+ " where LTRIM(RTRIM(UPPER(c.clm_ref_no))) = ?"
						+ " group by c.bid,"
						+ " c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id,"
						+ " c.clm_installment_flag,"
						+ " c.cgclan,"
						+ " c.clm_approved_dt";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();
			// Retrieving the Member Id and Borrower Id
			while (rs.next()) {
				borrowerId = (String) rs.getString(1);
				memberId = (String) rs.getString(2);
				installmentFlag = (String) rs.getString(3);
				cgclan = (String) rs.getString(4);
				clmApprvdDt = (java.util.Date) rs.getDate(5);

			}
			rs.close();
			rs = null;

			claimapplication.setBorrowerId(borrowerId);
			if (installmentFlag != null) {
				if (installmentFlag.equals(ClaimConstants.FIRST_INSTALLMENT)) {
					claimapplication.setClaimRefNumber(claimRefNumber);
					claimapplication.setFirstInstallment(true);
				} else if (installmentFlag
						.equals(ClaimConstants.SECOND_INSTALLMENT)) {
					claimapplication.setClaimApprovedDt(clmApprvdDt);
					claimapplication.setSecondInstallment(true);
					claimapplication.setCgclan(cgclan);
					claimapplication.setClaimRefNumber(claimRefNumber);
				}
			}
			// query = null;
			// rs = null;
			// prepStatement = null;
			// System.out.println("Control 2");
			// Getting Member Details
			String bankId1 = memberId.substring(0, 4);
			String zoneId1 = memberId.substring(4, 8);
			String branchId1 = memberId.substring(8, 12);

			MemberInfo memberdetails = cpdao.getMemberInfoDetails(bankId1,
					zoneId1, branchId1);

			BorrowerInfo borrowerdetails = cpdao.getBorrowerDetails(borrowerId);
			// Getting NPA Details
			java.util.Date npaclassifieddt = null;
			java.util.Date cgtsireportingdt = null;
			String reasonfornpa = null;
			String whetherBidIsWillfulDefaulter = null;
			String whetherNPAWrittenOff = null;
			java.util.Date npaWrittenOffDt = null;
			// System.out.println("RDAO cpdao.isNPADetailsAvailable start");
			HashMap npadetails = cpdao.isNPADetailsAvailable(borrowerId);
			// System.out.println("RDAO cpdao.isNPADetailsAvailable end");
			// String willfulDefaulter = null;
			// boolean npaDtlsAvl = false;

			HashMap npadtlMainTable = (HashMap) npadetails
					.get(ClaimConstants.CLM_MAIN_TABLE);
			if (npadtlMainTable != null) {
				if (npadtlMainTable.size() > 0) {
					npaclassifieddt = (java.util.Date) npadtlMainTable
							.get(ClaimConstants.NPA_CLASSIFIED_DT);
					cgtsireportingdt = (java.util.Date) npadtlMainTable
							.get(ClaimConstants.NPA_REPORTING_DT);
					reasonfornpa = (String) npadtlMainTable
							.get(ClaimConstants.REASONS_FOR_TURNING_NPA);
					whetherBidIsWillfulDefaulter = (String) npadtlMainTable
							.get(ClaimConstants.WILLFUL_DEFAULTER);
					whetherNPAWrittenOff = (String) npadtlMainTable
							.get(ClaimConstants.WHETHER_NPA_WRITTEN_OFF);
					npaWrittenOffDt = (java.util.Date) npadtlMainTable
							.get(ClaimConstants.NPA_WRITTEN_OFF_DATE);
				}
			}

			HashMap npadtltemptable = (HashMap) npadetails
					.get(ClaimConstants.CLM_TEMP_TABLE);
			if (npadtltemptable != null) {
				if (npadtltemptable.size() > 0) {
					npaclassifieddt = (java.util.Date) npadtltemptable
							.get(ClaimConstants.NPA_CLASSIFIED_DT);
					cgtsireportingdt = (java.util.Date) npadtltemptable
							.get(ClaimConstants.NPA_REPORTING_DT);
					reasonfornpa = (String) npadtltemptable
							.get(ClaimConstants.REASONS_FOR_TURNING_NPA);
					whetherBidIsWillfulDefaulter = (String) npadtltemptable
							.get(ClaimConstants.WILLFUL_DEFAULTER);
					whetherNPAWrittenOff = (String) npadtltemptable
							.get(ClaimConstants.WHETHER_NPA_WRITTEN_OFF);
					npaWrittenOffDt = (java.util.Date) npadtltemptable
							.get(ClaimConstants.NPA_WRITTEN_OFF_DATE);
				}
			}

			// Getting the Legal Proceedings Detail
			LegalProceedingsDetail legalproceedingdetail = cpdao
					.isLegalProceedingsDetailAvl(borrowerId);

			/*
			 * Query for getting the Term Loan/ Composite Loan Details for the
			 * Claim Ref Number
			 */
			Vector termloandetails = new Vector();
			if (bankId.equals("0000")) {
				query = "select ctd.cgpan," + " ctd.ctd_last_disbursement_dt,"
						+ " ctd.ctd_principal_repay_amt,"
						+ " ctd.ctd_interest_repay_amt,"
						+ " ctd.ctd_npa_outstanding_amt,"
						+ " ctd.ctd_legal_outstanding_amt,"
						+ " ctd.ctd_first_clm_dt_outstand_amt,"
						+ " ctd.ctd_second_clm_dt_outstand_amt"
						+ " ,ctd.ctd_disb_amt,ctd.ctd_clm_applied_flag "
						+ " from claim_tc_detail ctd"
						+ " where LTRIM(RTRIM(UPPER(ctd.clm_ref_no))) = ?"
						+ " group by ctd.cgpan,"
						+ " ctd.ctd_last_disbursement_dt,"
						+ " ctd.ctd_principal_repay_amt,"
						+ " ctd.ctd_interest_repay_amt,"
						+ " ctd.ctd_npa_outstanding_amt,"
						+ " ctd.ctd_legal_outstanding_amt,"
						+ " ctd.ctd_first_clm_dt_outstand_amt,"
						+ " ctd.ctd_second_clm_dt_outstand_amt"
						+ " ,ctd.ctd_disb_amt,ctd.ctd_clm_applied_flag ";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select ctd.cgpan," + " ctd.ctd_last_disbursement_dt,"
						+ " ctd.ctd_principal_repay_amt,"
						+ " ctd.ctd_interest_repay_amt,"
						+ " ctd.ctd_npa_outstanding_amt,"
						+ " ctd.ctd_legal_outstanding_amt,"
						+ " ctd.ctd_first_clm_dt_outstand_amt,"
						+ " ctd.ctd_second_clm_dt_outstand_amt"
						+ " ,ctd.ctd_disb_amt,ctd.ctd_clm_applied_flag "
						+ " from claim_tc_detail ctd"
						+ " where LTRIM(RTRIM(UPPER(ctd.clm_ref_no))) = ?"
						+ " group by ctd.cgpan,"
						+ " ctd.ctd_last_disbursement_dt,"
						+ " ctd.ctd_principal_repay_amt,"
						+ " ctd.ctd_interest_repay_amt,"
						+ " ctd.ctd_npa_outstanding_amt,"
						+ " ctd.ctd_legal_outstanding_amt,"
						+ " ctd.ctd_first_clm_dt_outstand_amt,"
						+ " ctd.ctd_second_clm_dt_outstand_amt"
						+ " ,ctd.ctd_disb_amt,ctd.ctd_clm_applied_flag ";
				// executing the query
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();
			// System.out.println("Control 3");
			// Retrieving the values from the resultset
			TermLoanCapitalLoanDetail tldetail = null;
			String cgpan = null;
			java.util.Date lastDisbursementDt = null;
			double principalRepayAmnt = 0.0;
			double interestRepayAmnt = 0.0;
			double npaOSAmnt = 0.0;
			double legalOSAmnt = 0.0;
			double firstClmOSAmnt = 0.0;
			double secondClmOSAmnt = 0.0;
			double disbAmnt = 0.0;
			String tcClaimFlag = "";
			String wcClaimFlag = "";
			SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
			// Retrieving the values from the resultset
			while (rs.next()) {
				cgpan = (String) rs.getString(1);
				lastDisbursementDt = (java.util.Date) rs.getDate(2);
				principalRepayAmnt = (double) rs.getDouble(3);
				interestRepayAmnt = (double) rs.getDouble(4);
				npaOSAmnt = (double) rs.getDouble(5);
				legalOSAmnt = (double) rs.getDouble(6);
				firstClmOSAmnt = (double) rs.getDouble(7);
				secondClmOSAmnt = (double) rs.getDouble(8);

				// Setting the values in TermLoanCapitalLoanDetail object
				tldetail = new TermLoanCapitalLoanDetail();
				tldetail.setCgpan(cgpan);
				tldetail.setLastDisbursementDate(lastDisbursementDt);
				tldetail.setPrincipalRepayment(principalRepayAmnt);
				tldetail.setInterestAndOtherCharges(interestRepayAmnt);
				tldetail.setOutstandingAsOnDateOfNPA(Double
						.parseDouble(decimalFormat.format(npaOSAmnt)));
				// System.out.println("npaOSAmnt:"+npaOSAmnt);
				tldetail.setOutstandingStatedInCivilSuit(Double
						.parseDouble(decimalFormat.format(legalOSAmnt)));
				// System.out.println("legalOSAmnt:"+legalOSAmnt);
				tldetail.setOutstandingAsOnDateOfLodgement(Double
						.parseDouble(decimalFormat.format(firstClmOSAmnt)));
				// System.out.println("firstClmOSAmnt:"+firstClmOSAmnt);
				tldetail.setOsAsOnDateOfLodgementOfClmForSecInstllmnt(secondClmOSAmnt);

				disbAmnt = (double) rs.getDouble(9);
				tldetail.setTotaDisbAmnt(disbAmnt);
				tcClaimFlag = (String) rs.getString(10);
				tldetail.setTcClaimFlag(tcClaimFlag);
				// adding the object into the vector
				termloandetails.addElement(tldetail);
			}
			rs.close();
			rs = null;

			// System.out.println("Control 4");
			// query = null;
			// rs.close();
			// prepStatement.close();

			// Getting the Working Capital Details
			if (bankId.equals("0000")) {
				query = " select cgpan,"
						+ " cwd_npa_outstanding_amt,"
						+ " cwd_legal_outstanding_amt,"
						+ " cwd_first_clm_dt_outstand_amt,"
						+ " cwd_second_clm_dt_outstand_amt"
						+ " ,cwd_clm_applied_flag "
						+ " from claim_wc_detail"
						+ " where LTRIM(RTRIM(UPPER(clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by cgpan," + " cwd_npa_outstanding_amt,"
						+ " cwd_legal_outstanding_amt,"
						+ " cwd_first_clm_dt_outstand_amt,"
						+ " cwd_second_clm_dt_outstand_amt"
						+ " ,cwd_clm_applied_flag";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = " select cwd.cgpan,"
						+ " cwd.cwd_npa_outstanding_amt,"
						+ " cwd.cwd_legal_outstanding_amt,"
						+ " cwd.cwd_first_clm_dt_outstand_amt,"
						+ " cwd.cwd_second_clm_dt_outstand_amt"
						+ " ,cwd_clm_applied_flag "
						+ " from claim_wc_detail cwd"
						+ " where LTRIM(RTRIM(UPPER(cwd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by cwd.cgpan,"
						+ " cwd.cwd_npa_outstanding_amt,"
						+ " cwd.cwd_legal_outstanding_amt,"
						+ " cwd.cwd_first_clm_dt_outstand_amt,"
						+ " cwd.cwd_second_clm_dt_outstand_amt"
						+ " ,cwd_clm_applied_flag";
				// Executing the query
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();

			// Retrieving the values from the resultset
			ArrayList workingCapitalDtls = new ArrayList();
			Vector workingCapitalDtlsVector = new Vector();
			WorkingCapitalDetail wcdetail = null;
			while (rs.next()) {
				cgpan = (String) rs.getString(1);
				npaOSAmnt = (double) rs.getDouble(2);
				legalOSAmnt = (double) rs.getDouble(3);
				firstClmOSAmnt = (double) rs.getDouble(4);
				secondClmOSAmnt = (double) rs.getDouble(5);

				// Setting the values in WorkingCapitalDetail object
				wcdetail = new WorkingCapitalDetail();
				wcdetail.setCgpan(cgpan);
				wcdetail.setOutstandingAsOnDateOfNPA(Double
						.parseDouble(decimalFormat.format(npaOSAmnt)));
				// System.out.println("WC-npaOSAmnt:"+npaOSAmnt);
				wcdetail.setOutstandingStatedInCivilSuit(Double
						.parseDouble(decimalFormat.format(legalOSAmnt)));
				// System.out.println("WC-legalOSAmnt:"+legalOSAmnt);
				wcdetail.setOutstandingAsOnDateOfLodgement(Double
						.parseDouble(decimalFormat.format(firstClmOSAmnt)));

				// System.out.println("firstClmOSAmnt:"+firstClmOSAmnt);
				wcdetail.setOsAsOnDateOfLodgementOfClmForSecInstllmnt(secondClmOSAmnt);

				wcClaimFlag = (String) rs.getString(6);
				wcdetail.setWcClaimFlag(wcClaimFlag);
				// Adding the WorkingCapitalDetail object in the ArrayList
				workingCapitalDtls.add(wcdetail);
			}
			rs.close();
			rs = null;

			// System.out.println("Control 5");
			// query = null;
			// rs = null;
			// prepStatement = null;
			if (bankId.equals("0000")) {
				query = "select csd_id,"
						+ " csd_particulars_flag,"
						+ " csd_guarantor_networth,"
						+ " csd_worth_reduction_reason,"
						+ " csd_amt_thro_per_guar"
						+ " from claim_security_detail "
						+ " where LTRIM(RTRIM(UPPER(clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by csd_id," + " csd_particulars_flag,"
						+ " csd_guarantor_networth,"
						+ " csd_worth_reduction_reason,"
						+ " csd_amt_thro_per_guar";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select csd.csd_id,"
						+ " csd.csd_particulars_flag,"
						+ " csd.csd_guarantor_networth,"
						+ " csd.csd_worth_reduction_reason,"
						+ " csd.csd_amt_thro_per_guar"
						+ " from claim_security_detail csd "
						+ " where LTRIM(RTRIM(UPPER(csd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by csd.csd_id,"
						+ " csd.csd_particulars_flag,"
						+ " csd.csd_guarantor_networth,"
						+ " csd.csd_worth_reduction_reason,"
						+ " csd.csd_amt_thro_per_guar";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();

			// retrieving the values from resultset
			String securityid = null;
			String particularsFlag = null;
			String reasonforreduction = null;
			double guarantorNetWorth = 0.0;
			double amntthruperguarantee = 0.0;
			HashMap temp = new HashMap();
			DtlsAsOnDateOfSanction dtlsAsOnSanction = new DtlsAsOnDateOfSanction();
			DtlsAsOnDateOfNPA dtlsAsOnNPA = new DtlsAsOnDateOfNPA();
			DtlsAsOnLogdementOfClaim dtslAsOnLodgement = new DtlsAsOnLogdementOfClaim();
			DtlsAsOnLogdementOfSecondClaim dtslAsOnSecClmLodgement = new DtlsAsOnLogdementOfSecondClaim();
			while (rs.next()) {
				securityid = (String) rs.getString(1);
				particularsFlag = (String) rs.getString(2);
				guarantorNetWorth = (double) rs.getDouble(3);
				reasonforreduction = (String) rs.getString(4);
				amntthruperguarantee = (double) rs.getDouble(5);

				if (particularsFlag
						.equals(ClaimConstants.CLM_SAPGD_AS_ON_SANCTION_CODE)) {
					dtlsAsOnSanction.setNetworthOfGuarantors(guarantorNetWorth);
					dtlsAsOnSanction.setReasonsForReduction(reasonforreduction);
					temp.put(ClaimConstants.CLM_SAPGD_AS_ON_SANCTION_CODE,
							securityid);
				} else if (particularsFlag
						.equals(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE)) {
					dtlsAsOnNPA.setNetworthOfGuarantors(guarantorNetWorth);
					dtlsAsOnNPA.setReasonsForReduction(reasonforreduction);
					temp.put(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE,
							securityid);
				} else if (particularsFlag
						.equals(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM)) {
					dtslAsOnLodgement
							.setNetworthOfGuarantors(guarantorNetWorth);
					dtslAsOnLodgement
							.setReasonsForReduction(reasonforreduction);
					temp.put(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM,
							securityid);
				} else if (particularsFlag
						.equals(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_SEC_CLM)) {
					dtslAsOnSecClmLodgement
							.setNetworthOfGuarantors(guarantorNetWorth);
					// dtslAsOnSecClmLodgement.setReasonsForReduction(reasonforreduction);
					dtslAsOnSecClmLodgement
							.setAmtRealisedPersonalGuarantee(amntthruperguarantee);
					temp.put(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM,
							securityid);
				}
			}
			rs.close();
			rs = null;

			// System.out.println("Control 6");
			// query = null;
			// rs = null;
			// prepStatement = null;

			// Retrieving the Security Particulars
			// for (int i = 0; i < temp.size(); i++) {
			String particular = null;
			double value = 0.0;

			if (temp.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_SANCTION_CODE)) {
				securityid = (String) temp
						.get(ClaimConstants.CLM_SAPGD_AS_ON_SANCTION_CODE);
				if (bankId.equals("0000")) {
					query = "select csp_particular,"
							+ " csp_value, "
							+ " csp_amt_thro_security,"
							+ " csp_reason_for_reduction"
							+ " from claim_security_particular "
							+ " where LTRIM(RTRIM(UPPER(csd_id))) = LTRIM(RTRIM(UPPER(?)))"
							+ " group by csp_particular," + " csp_value, "
							+ " csp_amt_thro_security,"
							+ " csp_reason_for_reduction";
				}
				if (!bankId.equals("0000")) {
					query = "select csp_particular,"
							+ " csp_value, "
							+ " csp_amt_thro_security,"
							+ " csp_reason_for_reduction"
							+ " from claim_security_particular"
							+ " where LTRIM(RTRIM(UPPER(csd_id))) = LTRIM(RTRIM(UPPER(?)))"
							+ " group by csp_particular," + " csp_value, "
							+ " csp_amt_thro_security,"
							+ " csp_reason_for_reduction";
				}
				// Executing the Query
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, securityid);
				rs = (ResultSet) prepStatement.executeQuery();

				// Retrieving the values from the resultset
				while (rs.next()) {
					particular = (String) rs.getString(1);
					value = (double) rs.getDouble(2);
					if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_LAND)) {
						dtlsAsOnSanction.setValueOfLand(value);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_BLDG)) {
						dtlsAsOnSanction.setValueOfBuilding(value);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_MC)) {
						dtlsAsOnSanction.setValueOfMachine(value);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHER_FIXED_MOV_ASSETS)) {
						dtlsAsOnSanction
								.setValueOfOtherFixedMovableAssets(value);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_CUR_ASSETS)) {
						dtlsAsOnSanction.setValueOfCurrentAssets(value);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHERS)) {
						dtlsAsOnSanction.setValueOfOthers(value);
					}
				}
				rs.close();
				rs = null;

				// query = null;
				// rs = null;
				// prepStatement = null;
			}
			if (temp.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE)) {
				securityid = (String) temp
						.get(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE);
				if (bankId.equals("0000")) {
					query = "select csp_particular,"
							+ " csp_value, "
							+ " csp_amt_thro_security,"
							+ " csp_reason_for_reduction"
							+ " from claim_security_particular "
							+ " where LTRIM(RTRIM(UPPER(csd_id))) = LTRIM(RTRIM(UPPER(?)))"
							+ " group by csp_particular," + " csp_value, "
							+ " csp_amt_thro_security,"
							+ " csp_reason_for_reduction";
				}
				if (!bankId.equals("0000")) {
					query = "select csp_particular,"
							+ " csp_value, "
							+ " csp_amt_thro_security,"
							+ " csp_reason_for_reduction"
							+ " from claim_security_particular"
							+ " where LTRIM(RTRIM(UPPER(csd_id))) = LTRIM(RTRIM(UPPER(?)))"
							+ " group by csp_particular," + " csp_value, "
							+ " csp_amt_thro_security,"
							+ " csp_reason_for_reduction";
				}
				// Executing the Query
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, securityid);
				rs = (ResultSet) prepStatement.executeQuery();

				// Retrieving the values from the resultset
				while (rs.next()) {
					particular = (String) rs.getString(1);
					value = (double) rs.getDouble(2);
					if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_LAND)) {
						dtlsAsOnNPA.setValueOfLand(value);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_BLDG)) {
						dtlsAsOnNPA.setValueOfBuilding(value);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_MC)) {
						dtlsAsOnNPA.setValueOfMachine(value);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHER_FIXED_MOV_ASSETS)) {
						dtlsAsOnNPA.setValueOfOtherFixedMovableAssets(value);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_CUR_ASSETS)) {
						dtlsAsOnNPA.setValueOfCurrentAssets(value);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHERS)) {
						dtlsAsOnNPA.setValueOfOthers(value);
					}
				}
				rs.close();
				rs = null;

				// query = null;
				// rs = null;
				// prepStatement = null;
			}
			if (temp.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM)) {
				securityid = (String) temp
						.get(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM);
				if (bankId.equals("0000")) {
					query = "select csp_particular,"
							+ " csp_value, "
							+ " csp_amt_thro_security,"
							+ " csp_reason_for_reduction"
							+ " from claim_security_particular "
							+ " where LTRIM(RTRIM(UPPER(csd_id))) = LTRIM(RTRIM(UPPER(?)))"
							+ " group by csp_particular," + " csp_value, "
							+ " csp_amt_thro_security,"
							+ " csp_reason_for_reduction";
				}
				if (!bankId.equals("0000")) {
					query = "select csp_particular,"
							+ " csp_value, "
							+ " csp_amt_thro_security,"
							+ " csp_reason_for_reduction"
							+ " from claim_security_particular "
							+ " where LTRIM(RTRIM(UPPER(csd_id))) = LTRIM(RTRIM(UPPER(?)))"
							+ " group by csp_particular," + " csp_value, "
							+ " csp_amt_thro_security,"
							+ " csp_reason_for_reduction";
				}
				// Executing the Query
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, securityid);
				rs = (ResultSet) prepStatement.executeQuery();
				// System.out.println("Control 6");
				// Retrieving the values from the resultset
				while (rs.next()) {
					particular = (String) rs.getString(1);
					value = (double) rs.getDouble(2);
					if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_LAND)) {
						dtslAsOnLodgement.setValueOfLand(value);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_BLDG)) {
						dtslAsOnLodgement.setValueOfBuilding(value);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_MC)) {
						dtslAsOnLodgement.setValueOfMachine(value);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHER_FIXED_MOV_ASSETS)) {
						dtslAsOnLodgement
								.setValueOfOtherFixedMovableAssets(value);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_CUR_ASSETS)) {
						dtslAsOnLodgement.setValueOfCurrentAssets(value);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHERS)) {
						dtslAsOnLodgement.setValueOfOthers(value);
					}
				}
				rs.close();
				rs = null;

				// query = null;
				// rs = null;
				// prepStatement = null;
			}
			if (temp.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_SEC_CLM)) {
				securityid = (String) temp
						.get(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_SEC_CLM);
				if (bankId.equals("0000")) {
					query = "select csp_particular,"
							+ " csp_value, "
							+ " csp_amt_thro_security,"
							+ " csp_reason_for_reduction"
							+ " from claim_security_particular "
							+ " where LTRIM(RTRIM(UPPER(csd_id))) = LTRIM(RTRIM(UPPER(?)))"
							+ " group by csp_particular," + " csp_value, "
							+ " csp_amt_thro_security,"
							+ " csp_reason_for_reduction";
				}
				if (!bankId.equals("0000")) {
					query = "select csp_particular,"
							+ " csp_value, "
							+ " csp_amt_thro_security,"
							+ " csp_reason_for_reduction"
							+ " from claim_security_particular "
							+ " where LTRIM(RTRIM(UPPER(csd_id))) = LTRIM(RTRIM(UPPER(?)))"
							+ " group by csp_particular," + " csp_value, "
							+ " csp_amt_thro_security,"
							+ " csp_reason_for_reduction";
				}
				// Executing the Query
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, securityid);
				rs = (ResultSet) prepStatement.executeQuery();
				double amntthrudisposalofsecurity = 0.0;
				String specificRsnForReduction = null;

				// Retrieving the values from the resultset
				while (rs.next()) {
					particular = (String) rs.getString(1);
					value = (double) rs.getDouble(2);
					amntthrudisposalofsecurity = (double) rs.getDouble(3);
					specificRsnForReduction = (String) rs.getString(4);
					if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_LAND)) {
						dtslAsOnSecClmLodgement.setValueOfLand(value);
						dtslAsOnSecClmLodgement
								.setAmtRealisedLand(amntthrudisposalofsecurity);
						dtslAsOnSecClmLodgement
								.setReasonsForReductionLand(specificRsnForReduction);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_BLDG)) {
						dtslAsOnSecClmLodgement.setValueOfBuilding(value);
						dtslAsOnSecClmLodgement
								.setAmtRealisedBuilding(amntthrudisposalofsecurity);
						dtslAsOnSecClmLodgement
								.setReasonsForReductionBuilding(specificRsnForReduction);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_MC)) {
						dtslAsOnSecClmLodgement.setValueOfMachine(value);
						dtslAsOnSecClmLodgement
								.setAmtRealisedMachine(amntthrudisposalofsecurity);
						dtslAsOnSecClmLodgement
								.setReasonsForReductionMachine(specificRsnForReduction);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHER_FIXED_MOV_ASSETS)) {
						dtslAsOnSecClmLodgement
								.setValueOfOtherFixedMovableAssets(value);
						dtslAsOnSecClmLodgement
								.setAmtRealisedFixed(amntthrudisposalofsecurity);
						dtslAsOnSecClmLodgement
								.setReasonsForReductionFixed(specificRsnForReduction);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_CUR_ASSETS)) {
						dtslAsOnSecClmLodgement.setValueOfCurrentAssets(value);
						dtslAsOnSecClmLodgement
								.setAmtRealisedCurrent(amntthrudisposalofsecurity);
						dtslAsOnSecClmLodgement
								.setReasonsForReductionCurrent(specificRsnForReduction);
					} else if (particular
							.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHERS)) {
						dtslAsOnSecClmLodgement.setValueOfOthers(value);
						dtslAsOnSecClmLodgement
								.setAmtRealisedOthers(amntthrudisposalofsecurity);
						dtslAsOnSecClmLodgement
								.setReasonsForReductionOthers(specificRsnForReduction);
					}
				}
				rs.close();
				rs = null;

				// query = null;
				// rs = null;
				// prepStatement = null;
			}
			// }

			SecurityAndPersonalGuaranteeDtls sapgdtls = new SecurityAndPersonalGuaranteeDtls();
			sapgdtls.setDetailsAsOnDateOfSanction(dtlsAsOnSanction);
			sapgdtls.setDetailsAsOnDateOfNPA(dtlsAsOnNPA);
			sapgdtls.setDetailsAsOnDateOfLodgementOfClaim(dtslAsOnLodgement);
			sapgdtls.setDetailsAsOnDateOfLodgementOfSecondClaim(dtslAsOnSecClmLodgement);

			// Retrieving the Recovery Details
			Vector recoveryDtls = new Vector();
			if (bankId.equals("0000")) {
				query = " select crd.cgpan,"
						+ " rmm.rmd_description,"
						+ " crd.crd_tc_principal_amt,"
						+ " crd.crd_tc_interest_amt,"
						+ " crd.crd_wc_amt,"
						+ " crd_wc_other_amt"
						+ " from claim_recovery_detail crd,"
						+ " recovery_mode_master rmm "
						+ " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and crd.rmd_id = rmm.rmd_id"
						+ " group by crd.cgpan," + " rmm.rmd_description,"
						+ " crd.crd_tc_principal_amt,"
						+ " crd.crd_tc_interest_amt," + " crd.crd_wc_amt,"
						+ " crd_wc_other_amt";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = " select crd.cgpan,"
						+ " rmm.rmd_description,"
						+ " crd.crd_tc_principal_amt,"
						+ " crd.crd_tc_interest_amt,"
						+ " crd.crd_wc_amt,"
						+ " crd_wc_other_amt"
						+ " from claim_recovery_detail crd,"
						+ " recovery_mode_master rmm "
						+ " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) "
						+ " and crd.rmd_id = rmm.rmd_id"
						+ " group by crd.cgpan," + " rmm.rmd_description,"
						+ " crd.crd_tc_principal_amt,"
						+ " crd.crd_tc_interest_amt," + " crd.crd_wc_amt,"
						+ " crd_wc_other_amt";
				// Executing the query
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();

			String modeOfRecovery = null;
			double tcPrincipal = 0.0;
			double tcInterestAndOtherCharges = 0.0;
			double wcAmount = 0.0;
			double wcOtherCharges = 0.0;
			RecoveryDetails recDtl = null;

			// Getting the values from the ResultSet
			while (rs.next()) {
				cgpan = (String) rs.getString(1);
				modeOfRecovery = (String) rs.getString(2);
				tcPrincipal = (double) rs.getDouble(3);
				tcInterestAndOtherCharges = (double) rs.getDouble(4);
				wcAmount = (double) rs.getDouble(5);
				wcOtherCharges = (double) rs.getDouble(6);

				// Setting the values in the RecoveryDetails object
				recDtl = new RecoveryDetails();
				recDtl.setCgpan(cgpan);
				recDtl.setModeOfRecovery(modeOfRecovery);
				recDtl.setTcPrincipal(tcPrincipal);
				recDtl.setTcInterestAndOtherCharges(tcInterestAndOtherCharges);
				recDtl.setWcAmount(wcAmount);
				recDtl.setWcOtherCharges(wcOtherCharges);

				// Adding the Recovery Details object to the vector
				recoveryDtls.addElement(recDtl);
			}
			rs.close();
			rs = null;

			if (bankId.equals("0000")) {
				query = "select caa.cgpan,"
						+ " caa.caa_applied_amount,decode(app_reapprove_amount,null,app_approved_amount,app_reapprove_amount) "
						+ " from claim_application_amount caa,application_detail a"
						+ " where LTRIM(RTRIM(UPPER(caa.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) and a.cgpan=caa.cgpan "
						+ " group by caa.cgpan,"
						+ " caa.caa_applied_amount,decode(app_reapprove_amount,null,app_approved_amount,app_reapprove_amount) ";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select caa.cgpan,"
						+ " caa.caa_applied_amount,decode(app_reapprove_amount,null,app_approved_amount,app_reapprove_amount) "
						+ " from claim_application_amount caa,application_detail a"
						+ " where LTRIM(RTRIM(UPPER(caa.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) and a.cgpan=caa.cgpan"
						+ " group by caa.cgpan,"
						+ " caa.caa_applied_amount,decode(app_reapprove_amount,null,app_approved_amount,app_reapprove_amount) ";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}

			rs = (ResultSet) prepStatement.executeQuery();
			ArrayList clmSummaryDtls = new ArrayList();

			// Getting the values from the ResultSet
			double clmAppliedAmount = 0.0;
			double appApprovedAmount = 0.0;
			ClaimSummaryDtls clmSummaryDtl = null;
			while (rs.next()) {
				cgpan = (String) rs.getString(1);
				clmAppliedAmount = (double) rs.getDouble(2);
				appApprovedAmount = (double) rs.getDouble(3);
				// Setting the values in the
				clmSummaryDtl = new ClaimSummaryDtls();
				clmSummaryDtl.setCgpan(cgpan);
				clmSummaryDtl.setAmount(clmAppliedAmount);
				clmSummaryDtl.setLimitCoveredUnderCGFSI(String
						.valueOf(appApprovedAmount));

				// Adding the clmSummaryDtl object in the ArrayList
				clmSummaryDtls.add(clmSummaryDtl);
			}
			rs.close();
			rs = null;

			// query = null;
			// rs = null;
			// prepStatement = null;

			// Retrieving the remaining information
			if (bankId.equals("0000")) {
				query = "select clm_participating_bank_name,"
						+ " clm_recall_notice_dt,"
						+ " clm_filing_dt,"
						+ " clm_wc_release_dt,"
						+ " clm_official_name,"
						+ " clm_official_designation,"
						+ " clm_mli_name,"
						+ " clm_place,"
						+ " clm_date,CLM_SUBSIDY_CREDIT_DT,CLM_SUBSIDY_AMT,CLM_IS_MICRO_FLAG "
						+ " ,clm_dealing_officer,clm_is_wilful_defaulter_flag,clm_is_fraud_flag,clm_is_ext_int_enq_concluded "
						+ " ,clm_is_staff_involved_flag,clm_reason_for_recall_bef_npa,clm_reason_for_suit_bef_npa,clm_dt_of_poss_sarfaesi,clm_incl_unappr_recpts "
						+ " ,clm_conf_corr_value,clm_subsidy_involved,clm_subsidy_after_npa,clm_subsidy_adjusted,clm_mli_comm_fin_pos "
						+ " ,clm_fin_ass_min_def,clm_mli_prop_oth_proj,clm_det_oth_fac_to_borr,clm_watch_list,clm_mli_remarks,clm_return_remarks "
						+ " from claim_detail"
						+ " where LTRIM(RTRIM(UPPER(clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by clm_participating_bank_name,"
						+ " clm_recall_notice_dt,"
						+ " clm_filing_dt,"
						+ " clm_wc_release_dt,"
						+ " clm_official_name,"
						+ " clm_official_designation,"
						+ " clm_mli_name,"
						+ " clm_place,"
						+ " clm_date,CLM_SUBSIDY_CREDIT_DT,CLM_SUBSIDY_AMT,CLM_IS_MICRO_FLAG "
						+ " ,clm_dealing_officer,clm_is_wilful_defaulter_flag,clm_is_fraud_flag,clm_is_ext_int_enq_concluded "
						+ " ,clm_is_staff_involved_flag,clm_reason_for_recall_bef_npa,clm_reason_for_suit_bef_npa,clm_dt_of_poss_sarfaesi,clm_incl_unappr_recpts "
						+ " ,clm_conf_corr_value,clm_subsidy_involved,clm_subsidy_after_npa,clm_subsidy_adjusted,clm_mli_comm_fin_pos "
						+ " ,clm_fin_ass_min_def,clm_mli_prop_oth_proj,clm_det_oth_fac_to_borr,clm_watch_list,clm_mli_remarks,clm_return_remarks ";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select clm_participating_bank_name,"
						+ " clm_recall_notice_dt,"
						+ " clm_filing_dt,"
						+ " clm_wc_release_dt,"
						+ " clm_official_name,"
						+ " clm_official_designation,"
						+ " clm_mli_name,"
						+ " clm_place,"
						+ " clm_date,CLM_SUBSIDY_CREDIT_DT,CLM_SUBSIDY_AMT,CLM_IS_MICRO_FLAG"
						+ " ,clm_dealing_officer,clm_is_wilful_defaulter_flag,clm_is_fraud_flag,clm_is_ext_int_enq_concluded "
						+ " ,clm_is_staff_involved_flag,clm_reason_for_recall_bef_npa,clm_reason_for_suit_bef_npa,clm_dt_of_poss_sarfaesi,clm_incl_unappr_recpts "
						+ " ,clm_conf_corr_value,clm_subsidy_involved,clm_subsidy_after_npa,clm_subsidy_adjusted,clm_mli_comm_fin_pos "
						+ " ,clm_fin_ass_min_def,clm_mli_prop_oth_proj,clm_det_oth_fac_to_borr,clm_watch_list,clm_mli_remarks,clm_return_remarks "
						+ " from claim_detail "
						+ " where LTRIM(RTRIM(UPPER(clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by clm_participating_bank_name,"
						+ " clm_recall_notice_dt,"
						+ " clm_filing_dt,"
						+ " clm_wc_release_dt,"
						+ " clm_official_name,"
						+ " clm_official_designation,"
						+ " clm_mli_name,"
						+ " clm_place,"
						+ " clm_date,CLM_SUBSIDY_CREDIT_DT,CLM_SUBSIDY_AMT,CLM_IS_MICRO_FLAG "
						+ " ,clm_dealing_officer,clm_is_wilful_defaulter_flag,clm_is_fraud_flag,clm_is_ext_int_enq_concluded "
						+ " ,clm_is_staff_involved_flag,clm_reason_for_recall_bef_npa,clm_reason_for_suit_bef_npa,clm_dt_of_poss_sarfaesi,clm_incl_unappr_recpts "
						+ " ,clm_conf_corr_value,clm_subsidy_involved,clm_subsidy_after_npa,clm_subsidy_adjusted,clm_mli_comm_fin_pos "
						+ " ,clm_fin_ass_min_def,clm_mli_prop_oth_proj,clm_det_oth_fac_to_borr,clm_watch_list,clm_mli_remarks,clm_return_remarks ";
				// Executing.query
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();

			// Retrieving the values
			String participatingBank = null;
			java.util.Date recallNoticeDt = null;
			java.util.Date wcReleaseDt = null;
			String officialName = null;
			String officialDesignation = null;
			String mliName = null;
			String place = null;
			java.util.Date claimSubmittedDate = null;
			java.util.Date subsidyDt = null;
			double subsidyAmt = 0.0;
			String microFlag = null;
			String dealingOfficer = null;
			String wilfulDefaulter = null;
			String isFraudFlag = null;
			String isEnqConcFlag = null;
			String isStaffInvolved = null;
			String reasonForRecall = null;
			String reasonForSuitFiling = null;
			Date assetPossesionDt = null;
			String unApprRecptsFlag = null;
			String confRecFlag = null;
			String subsidyFlag = null;
			String subsidyRcvdFlag = null;
			String subsidyAdjustedFlag = null;
			String mliComment = null;
			String finAsst = null;
			String creditSupportFlag = null;
			String otherFacility = null;
			String watchListFlag = null;
			String mliRemarks = null;
			String returnRemarks = null;
			while (rs.next()) {
				participatingBank = (String) rs.getString(1);
				recallNoticeDt = (java.util.Date) rs.getDate(2);
				wcReleaseDt = (java.util.Date) rs.getDate(4);
				officialName = (String) rs.getString(5);
				officialDesignation = (String) rs.getString(6);
				mliName = (String) rs.getString(7);
				place = (String) rs.getString(8);
				claimSubmittedDate = (java.util.Date) rs.getDate(9);
				subsidyDt = (java.util.Date) rs.getDate(10);
				subsidyAmt = (double) rs.getDouble(11);
				microFlag = (String) rs.getString(12);

				dealingOfficer = (String) rs.getString(13);
				wilfulDefaulter = (String) rs.getString(14);
				isFraudFlag = (String) rs.getString(15);
				isEnqConcFlag = (String) rs.getString(16);
				isStaffInvolved = (String) rs.getString(17);
				reasonForRecall = (String) rs.getString(18);
				reasonForSuitFiling = (String) rs.getString(19);
				assetPossesionDt = (java.util.Date) rs.getDate(20);
				unApprRecptsFlag = (String) rs.getString(21);
				confRecFlag = (String) rs.getString(22);
				subsidyFlag = (String) rs.getString(23);
				subsidyRcvdFlag = (String) rs.getString(24);
				subsidyAdjustedFlag = (String) rs.getString(25);
				mliComment = (String) rs.getString(26);
				finAsst = (String) rs.getString(27);
				creditSupportFlag = (String) rs.getString(28);
				otherFacility = (String) rs.getString(29);
				watchListFlag = (String) rs.getString(30);
				mliRemarks = (String) rs.getString(31);
				returnRemarks = (String) rs.getString(32);
			}
			rs.close();
			rs = null;

			// query = null;
			// rs = null;
			// prepStatement = null;

			// legalproceedingdetail.setDateOfConclusionOfRecoveryProceedings(recConclusionDt);
			claimapplication.setMemberDetails(memberdetails);
			claimapplication.setBorrowerDetails(borrowerdetails);
			claimapplication
					.setDateOnWhichAccountClassifiedNPA(npaclassifieddt);
			claimapplication.setDateOfReportingNpaToCgtsi(cgtsireportingdt);
			claimapplication.setReasonsForAccountTurningNPA(reasonfornpa);
			if (wilfulDefaulter != null || wilfulDefaulter != "") {
				claimapplication
						.setWhetherBorrowerIsWilfulDefaulter(wilfulDefaulter);
			} else {
				claimapplication
						.setWhetherBorrowerIsWilfulDefaulter(whetherBidIsWillfulDefaulter);
			}
			claimapplication.setLegalProceedingsDetails(legalproceedingdetail);
			claimapplication
					.setWhetherAccntWrittenOffFromBooksOfMLI(whetherNPAWrittenOff);
			claimapplication.setDtOnWhichAccntWrittenOff(npaWrittenOffDt);
			claimapplication.setTermCapitalDtls(termloandetails);
			claimapplication.setWorkingCapitalDtls(workingCapitalDtls);
			claimapplication.setSecurityAndPersonalGuaranteeDtls(sapgdtls);
			claimapplication.setRecoveryDetails(recoveryDtls);
			claimapplication.setClaimSummaryDtls(clmSummaryDtls);
			claimapplication.setParticipatingBank(participatingBank);
			claimapplication.setDateOfIssueOfRecallNotice(recallNoticeDt);
			claimapplication.setDateOfReleaseOfWC(wcReleaseDt);
			claimapplication.setNameOfOfficial(officialName);
			claimapplication.setDesignationOfOfficial(officialDesignation);
			claimapplication.setPlace(place);
			claimapplication.setClaimSubmittedDate(claimSubmittedDate);
			claimapplication.setSubsidyDate(subsidyDt);
			claimapplication.setSubsidyAmt(subsidyAmt);
			claimapplication.setMicroCategory(microFlag);

			claimapplication.setDealingOfficerName(dealingOfficer);
			claimapplication.setFraudFlag(isFraudFlag);
			claimapplication.setEnquiryFlag(isEnqConcFlag);
			claimapplication.setMliInvolvementFlag(isStaffInvolved);
			claimapplication.setReasonForRecall(reasonForRecall);
			claimapplication.setReasonForFilingSuit(reasonForSuitFiling);
			claimapplication.setAssetPossessionDt(assetPossesionDt);
			claimapplication.setInclusionOfReceipt(unApprRecptsFlag);
			claimapplication.setConfirmRecoveryFlag(confRecFlag);
			claimapplication.setSubsidyFlag(subsidyFlag);
			claimapplication.setIsSubsidyRcvdAfterNpa(subsidyRcvdFlag);
			claimapplication.setIsSubsidyAdjustedOnDues(subsidyAdjustedFlag);
			claimapplication.setMliCommentOnFinPosition(mliComment);
			claimapplication.setDetailsOfFinAssistance(finAsst);
			claimapplication.setCreditSupport(creditSupportFlag);
			claimapplication.setBankFacilityDetail(otherFacility);
			claimapplication.setPlaceUnderWatchList(watchListFlag);
			claimapplication.setRemarksOnNpa(mliRemarks);
			claimapplication.setReturnRemarks(returnRemarks);
			claimapplication
					.setWorkingCapitalDtlsVector(workingCapitalDtlsVector);
		} catch (Exception sqlexception) {
			sqlexception.printStackTrace();
			throw new DatabaseException(sqlexception.getMessage());
		} finally {
			DBConnection.freeConnection(conn);
		}
		// return reportDao.displayClmRefNumberDtl(claimRefNumber);
		return claimapplication;
	}

	/*
	 * This method returns a ClaimApplication object for the given Claim
	 * Reference Number if the Claim Application is New or put on Hold or
	 * Forwarded
	 */

	public ClaimApplication displayClmRefNumberDtl(String claimRefNumber,
			String flag, String memId) throws DatabaseException {
		CPDAO cpdao = new CPDAO();
		ClaimApplication claimapplication = new ClaimApplication();
		PreparedStatement prepStatement = null;
		Connection conn = null;
		ResultSet rs = null;
		String query = null;
		String memberId = null;
		String borrowerId = null;
		String installmentFlag = null;
		String cgclan = null;
		java.util.Date clmApprvdDt = null;

		String bankId = memId.substring(0, 4);
		// String zoneId = memId.substring(4,8);
		// String branchId = memId.substring(8,12);

		try {
			conn = DBConnection.getConnection();
			if (bankId.equals("0000")) {
				query = "select c.bid, c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id, c.clm_installment_flag, c.cgclan, c.clm_approved_dt"
						+ " from claim_detail_temp c"
						+ " where LTRIM(RTRIM(UPPER(c.clm_ref_no))) = ?"
						+ " group by c.bid,"
						+ " c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id,"
						+ " c.clm_installment_flag,"
						+ " c.cgclan,"
						+ " c.clm_approved_dt";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select c.bid, c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id, c.clm_installment_flag, c.cgclan, c.clm_approved_dt"
						+ " from claim_detail_temp c"
						+ " where LTRIM(RTRIM(UPPER(c.clm_ref_no))) = ?"
						+ " group by c.bid,"
						+ " c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id,"
						+ " c.clm_installment_flag,"
						+ " c.cgclan,"
						+ " c.clm_approved_dt";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();
			// Retrieving the Member Id and Borrower Id
			while (rs.next()) {
				borrowerId = (String) rs.getString(1);
				memberId = (String) rs.getString(2);
				installmentFlag = (String) rs.getString(3);
				cgclan = (String) rs.getString(4);
				clmApprvdDt = (java.util.Date) rs.getDate(5);

			}
			rs.close();
			rs = null;

			claimapplication.setBorrowerId(borrowerId);
			if (installmentFlag != null) {
				if (installmentFlag.equals(ClaimConstants.FIRST_INSTALLMENT)) {
					claimapplication.setClaimRefNumber(claimRefNumber);
					claimapplication.setFirstInstallment(true);
				} else if (installmentFlag
						.equals(ClaimConstants.SECOND_INSTALLMENT)) {
					claimapplication.setClaimApprovedDt(clmApprvdDt);
					claimapplication.setSecondInstallment(true);
					claimapplication.setCgclan(cgclan);
					claimapplication.setClaimRefNumber(claimRefNumber);
				}
			}
			// query = null;
			// rs = null;
			// prepStatement = null;
			// System.out.println("Control 2");
			// Getting Member Details
			String bankId1 = memberId.substring(0, 4);
			System.out.println("bankId1=="+bankId1);
			String zoneId1 = memberId.substring(4, 8);
			String branchId1 = memberId.substring(8, 12);
			MemberInfo memberdetails = cpdao.getMemberInfoDetails(bankId1,zoneId1,branchId1);

			// Getting Borrower Details
			BorrowerInfo borrowerdetails = cpdao.getBorrowerDetails(borrowerId);

			// Getting NPA Details
			java.util.Date npaclassifieddt = null;
			java.util.Date cgtsireportingdt = null;
			String reasonfornpa = null;
			String whetherBidIsWillfulDefaulter = null;
			String whetherNPAWrittenOff = null;
			java.util.Date npaWrittenOffDt = null;
			java.util.Date recConclusionDt = null;

			HashMap npadetails = cpdao.isNPADetailsAvailable(borrowerId);
			// String willfulDefaulter = null;
			// boolean npaDtlsAvl = false;

			HashMap npadtlMainTable = (HashMap) npadetails
					.get(ClaimConstants.CLM_MAIN_TABLE);
			if (npadtlMainTable != null) {
				if (npadtlMainTable.size() > 0) {
					npaclassifieddt = (java.util.Date) npadtlMainTable
							.get(ClaimConstants.NPA_CLASSIFIED_DT);
					cgtsireportingdt = (java.util.Date) npadtlMainTable
							.get(ClaimConstants.NPA_REPORTING_DT);
					reasonfornpa = (String) npadtlMainTable
							.get(ClaimConstants.REASONS_FOR_TURNING_NPA);
					whetherBidIsWillfulDefaulter = (String) npadtlMainTable
							.get(ClaimConstants.WILLFUL_DEFAULTER);
					whetherNPAWrittenOff = (String) npadtlMainTable
							.get(ClaimConstants.WHETHER_NPA_WRITTEN_OFF);
					npaWrittenOffDt = (java.util.Date) npadtlMainTable
							.get(ClaimConstants.NPA_WRITTEN_OFF_DATE);
					recConclusionDt = (java.util.Date) npadtlMainTable
							.get(ClaimConstants.NPA_REC_CONCLUSION_DT);
				}
			}

			HashMap npadtltemptable = (HashMap) npadetails
					.get(ClaimConstants.CLM_TEMP_TABLE);
			if (npadtltemptable != null) {
				if (npadtltemptable.size() > 0) {
					npaclassifieddt = (java.util.Date) npadtltemptable
							.get(ClaimConstants.NPA_CLASSIFIED_DT);
					cgtsireportingdt = (java.util.Date) npadtltemptable
							.get(ClaimConstants.NPA_REPORTING_DT);
					reasonfornpa = (String) npadtltemptable
							.get(ClaimConstants.REASONS_FOR_TURNING_NPA);
					whetherBidIsWillfulDefaulter = (String) npadtltemptable
							.get(ClaimConstants.WILLFUL_DEFAULTER);
					whetherNPAWrittenOff = (String) npadtltemptable
							.get(ClaimConstants.WHETHER_NPA_WRITTEN_OFF);
					npaWrittenOffDt = (java.util.Date) npadtltemptable
							.get(ClaimConstants.NPA_WRITTEN_OFF_DATE);
					recConclusionDt = (java.util.Date) npadtltemptable
							.get(ClaimConstants.NPA_REC_CONCLUSION_DT);
				}
			}

			// Getting the Legal Proceedings Detail
			LegalProceedingsDetail legalproceedingdetail = cpdao
					.isLegalProceedingsDetailAvl(borrowerId);
			/*
			 * Query for getting the Term Loan/ Composite Loan Details for the
			 * Claim Ref Number
			 */
			Vector termloandetails = new Vector();
			if (bankId.equals("0000")) {
				/*
				 * query = "select ctd.cgpan," +
				 * " ctd.ctd_last_disbursement_dt," +
				 * " ctd.ctd_principal_repay_amt," +
				 * " ctd.ctd_interest_repay_amt," +
				 * " ctd.ctd_npa_outstanding_amt," +
				 * " ctd.ctd_legal_outstanding_amt," +
				 * " ctd.ctd_first_clm_dt_outstand_amt," +
				 * " ctd.ctd_second_clm_dt_outstand_amt" +
				 * " from claim_tc_detail_temp@cginter ctd" +
				 * " where LTRIM(RTRIM(UPPER(ctd.clm_ref_no))) = ?" +
				 * " group by ctd.cgpan," + " ctd.ctd_last_disbursement_dt," +
				 * " ctd.ctd_principal_repay_amt," +
				 * " ctd.ctd_interest_repay_amt," +
				 * " ctd.ctd_npa_outstanding_amt," +
				 * " ctd.ctd_legal_outstanding_amt," +
				 * " ctd.ctd_first_clm_dt_outstand_amt," +
				 * " ctd.ctd_second_clm_dt_outstand_amt";
				 */
				query = "select ctd.cgpan,ctd.ctd_last_disbursement_dt, "
						+ " nvl(ctd.ctd_principal_repay_amt,0),"
						+ " nvl(ctd.ctd_interest_repay_amt,0), "
						+ " decode(nvl(ctd.ctd_npa_outstanding_amt_revise,0),0,ctd.ctd_npa_outstanding_amt,ctd.ctd_npa_outstanding_amt_revise), "
						+ " ctd.ctd_legal_outstanding_amt, "
						+ " ctd.ctd_first_clm_dt_outstand_amt,ctd.ctd_second_clm_dt_outstand_amt "
						+ " ,ctd.ctd_disb_amt,ctd.ctd_clm_applied_flag "
						+ " from claim_tc_detail_temp ctd  "
						+ " where LTRIM(RTRIM(UPPER(ctd.clm_ref_no))) = ? "
						+ " group by ctd.cgpan,ctd.ctd_last_disbursement_dt, "
						+ " ctd.ctd_principal_repay_amt,ctd.ctd_npa_recovered_revise,ctd.ctd_interest_repay_amt, "
						+ " ctd.ctd_npa_outstanding_amt,ctd.ctd_npa_outstanding_amt_revise,ctd.ctd_legal_outstanding_amt, "
						+ " ctd.ctd_first_clm_dt_outstand_amt,ctd.ctd_second_clm_dt_outstand_amt "
						+ " ,ctd.ctd_disb_amt,ctd.ctd_clm_applied_flag ";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				/*
				 * query = "select ctd.cgpan," +
				 * " ctd.ctd_last_disbursement_dt," +
				 * " ctd.ctd_principal_repay_amt," +
				 * " ctd.ctd_interest_repay_amt," +
				 * " ctd.ctd_npa_outstanding_amt," +
				 * " ctd.ctd_legal_outstanding_amt," +
				 * " ctd.ctd_first_clm_dt_outstand_amt," +
				 * " ctd.ctd_second_clm_dt_outstand_amt" +
				 * " from  claim_tc_detail_temp ctd" +
				 * " where LTRIM(RTRIM(UPPER(ctd.clm_ref_no))) = ?" +
				 * " group by ctd.cgpan," + " ctd.ctd_last_disbursement_dt," +
				 * " ctd.ctd_principal_repay_amt," +
				 * " ctd.ctd_interest_repay_amt," +
				 * " ctd.ctd_npa_outstanding_amt," +
				 * " ctd.ctd_legal_outstanding_amt," +
				 * " ctd.ctd_first_clm_dt_outstand_amt," +
				 * " ctd.ctd_second_clm_dt_outstand_amt";
				 */
				query = "select ctd.cgpan,ctd.ctd_last_disbursement_dt, "
						+ " nvl(ctd.ctd_principal_repay_amt,0),"
						+ " nvl(ctd.ctd_interest_repay_amt,0), "
						+ " decode(nvl(ctd.ctd_npa_outstanding_amt_revise,0),0,ctd.ctd_npa_outstanding_amt,ctd.ctd_npa_outstanding_amt_revise), "
						+ " ctd.ctd_legal_outstanding_amt, "
						+ " ctd.ctd_first_clm_dt_outstand_amt,ctd.ctd_second_clm_dt_outstand_amt "
						+ " ,ctd.ctd_disb_amt,ctd.ctd_clm_applied_flag "
						+ " from claim_tc_detail_temp ctd  "
						+ " where LTRIM(RTRIM(UPPER(ctd.clm_ref_no))) = ? "
						+ " group by ctd.cgpan,ctd.ctd_last_disbursement_dt, "
						+ " ctd.ctd_principal_repay_amt,ctd.ctd_npa_recovered_revise,ctd.ctd_interest_repay_amt, "
						+ " ctd.ctd_npa_outstanding_amt,ctd.ctd_npa_outstanding_amt_revise,ctd.ctd_legal_outstanding_amt, "
						+ " ctd.ctd_first_clm_dt_outstand_amt,ctd.ctd_second_clm_dt_outstand_amt "
						+ " ,ctd.ctd_disb_amt,ctd.ctd_clm_applied_flag ";
				// executing the query
				// System.out.println("Line number 43640:query:"+query);
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();
			// System.out.println("Control 3");
			// Retrieving the values from the resultset
			TermLoanCapitalLoanDetail tldetail = null;
			String cgpan = null;
			java.util.Date lastDisbursementDt = null;
			double principalRepayAmnt = 0.0;
			double interestRepayAmnt = 0.0;
			double npaOSAmnt = 0.0;
			double legalOSAmnt = 0.0;
			double firstClmOSAmnt = 0.0;
			double secondClmOSAmnt = 0.0;
			double disbAmnt = 0.0;
			String tcClaimFlag = "";
			String wcClaimFlag = "";
			SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
			// Retrieving the values from the resultset
			while (rs.next()) {
				cgpan = (String) rs.getString(1);
				lastDisbursementDt = (java.util.Date) rs.getDate(2);
				principalRepayAmnt = (double) rs.getDouble(3);
				interestRepayAmnt = (double) rs.getDouble(4);
				npaOSAmnt = (double) rs.getDouble(5);
				legalOSAmnt = (double) rs.getDouble(6);
				firstClmOSAmnt = (double) rs.getDouble(7);
				secondClmOSAmnt = (double) rs.getDouble(8);

				// Setting the values in TermLoanCapitalLoanDetail object
				tldetail = new TermLoanCapitalLoanDetail();
				tldetail.setCgpan(cgpan);
				tldetail.setLastDisbursementDate(lastDisbursementDt);
				tldetail.setPrincipalRepayment(principalRepayAmnt);
				tldetail.setInterestAndOtherCharges(interestRepayAmnt);
				tldetail.setOutstandingAsOnDateOfNPA(npaOSAmnt);
				tldetail.setOutstandingStatedInCivilSuit(legalOSAmnt);
				tldetail.setOutstandingAsOnDateOfLodgement(firstClmOSAmnt);
				tldetail.setOsAsOnDateOfLodgementOfClmForSecInstllmnt(secondClmOSAmnt);

				disbAmnt = (double) rs.getDouble(9);
				tldetail.setTotaDisbAmnt(disbAmnt);
				tcClaimFlag = (String) rs.getString(10);
				tldetail.setTcClaimFlag(tcClaimFlag);

				// adding the object into the vector
				termloandetails.addElement(tldetail);
			}
			rs.close();
			rs = null;

			// System.out.println("Control 4");
			// query = null;
			// rs.close();
			// prepStatement.close();

			// Getting the Working Capital Details
			if (bankId.equals("0000")) {
				/*
				 * query = " select cgpan," + " cwd_npa_outstanding_amt," +
				 * " cwd_legal_outstanding_amt," +
				 * " cwd_first_clm_dt_outstand_amt," +
				 * " cwd_second_clm_dt_outstand_amt" +
				 * " from claim_wc_detail_temp@cginter cwd" +
				 * " where LTRIM(RTRIM(UPPER(cwd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " group by cgpan," + " cwd_npa_outstanding_amt," +
				 * " cwd_legal_outstanding_amt," +
				 * " cwd_first_clm_dt_outstand_amt," +
				 * " cwd_second_clm_dt_outstand_amt";
				 */
				query = "select cgpan, "
						+ " decode(nvl(cwd.cwd_npa_outstanding_amt_revise,0),0,cwd_npa_outstanding_amt,cwd.cwd_npa_outstanding_amt_revise), "
						+ " cwd_legal_outstanding_amt, cwd_first_clm_dt_outstand_amt,  "
						+ " cwd_second_clm_dt_outstand_amt  "
						+ " ,cwd_clm_applied_flag "
						+ " from claim_wc_detail_temp cwd "
						+ " where LTRIM(RTRIM(UPPER(cwd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) "
						+ " group by cgpan, cwd_npa_outstanding_amt, cwd.cwd_npa_outstanding_amt_revise,cwd_legal_outstanding_amt, "
						+ " cwd_first_clm_dt_outstand_amt, cwd_second_clm_dt_outstand_amt "
						+ " ,cwd_clm_applied_flag";
				// Executing the query
				// System.out.println("Line number 43709:query:"+query);
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				/*
				 * query = " select cgpan," + " cwd_npa_outstanding_amt," +
				 * " cwd_legal_outstanding_amt," +
				 * " cwd_first_clm_dt_outstand_amt," +
				 * " cwd_second_clm_dt_outstand_amt" +
				 * " from claim_wc_detail_temp cwd" +
				 * " where LTRIM(RTRIM(UPPER(cwd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " group by cgpan," + " cwd_npa_outstanding_amt," +
				 * " cwd_legal_outstanding_amt," +
				 * " cwd_first_clm_dt_outstand_amt," +
				 * " cwd_second_clm_dt_outstand_amt";
				 */
				query = "select cgpan, "
						+ " decode(nvl(cwd.cwd_npa_outstanding_amt_revise,0),0,cwd_npa_outstanding_amt,cwd.cwd_npa_outstanding_amt_revise), "
						+ " cwd_legal_outstanding_amt, cwd_first_clm_dt_outstand_amt,  "
						+ " cwd_second_clm_dt_outstand_amt  "
						+ " ,cwd_clm_applied_flag "
						+ " from claim_wc_detail_temp cwd "
						+ " where LTRIM(RTRIM(UPPER(cwd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) "
						+ " group by cgpan, cwd_npa_outstanding_amt, cwd.cwd_npa_outstanding_amt_revise,cwd_legal_outstanding_amt, "
						+ " cwd_first_clm_dt_outstand_amt, cwd_second_clm_dt_outstand_amt "
						+ " ,cwd_clm_applied_flag";
				// Executing the query
				// System.out.println("Line number 43728:query:"+query);
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();

			// Retrieving the values from the resultset
			ArrayList workingCapitalDtls = new ArrayList();
			Vector workingCapitalDtlsVector = new Vector();
			WorkingCapitalDetail wcdetail = null;
			while (rs.next()) {
				cgpan = (String) rs.getString(1);
				npaOSAmnt = (double) rs.getDouble(2);
				legalOSAmnt = (double) rs.getDouble(3);
				firstClmOSAmnt = (double) rs.getDouble(4);
				secondClmOSAmnt = (double) rs.getDouble(5);

				// Setting the values in WorkingCapitalDetail object
				wcdetail = new WorkingCapitalDetail();
				wcdetail.setCgpan(cgpan);
				wcdetail.setOutstandingAsOnDateOfNPA(npaOSAmnt);
				wcdetail.setOutstandingStatedInCivilSuit(legalOSAmnt);
				wcdetail.setOutstandingAsOnDateOfLodgement(firstClmOSAmnt);
				wcdetail.setOsAsOnDateOfLodgementOfClmForSecInstllmnt(secondClmOSAmnt);

				wcClaimFlag = (String) rs.getString(6);
				wcdetail.setWcClaimFlag(wcClaimFlag);

				// Adding the WorkingCapitalDetail object in the ArrayList
				workingCapitalDtls.add(wcdetail);
				workingCapitalDtlsVector.add(wcdetail);

			}
			rs.close();
			rs = null;

			// System.out.println("Control 5");
			// query = null;
			// rs = null;
			// prepStatement = null;
			if (bankId.equals("0000")) {
				query = "select csd_id,"
						+ " csd_particulars_flag,"
						+ " csd_guarantor_networth,"
						+ " csd_worth_reduction_reason,"
						+ " csd_amt_thro_per_guar"
						+ " from claim_security_detail_temp csd "
						+ " where LTRIM(RTRIM(UPPER(csd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by csd_id," + " csd_particulars_flag,"
						+ " csd_guarantor_networth,"
						+ " csd_worth_reduction_reason,"
						+ " csd_amt_thro_per_guar";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select csd_id,"
						+ " csd_particulars_flag,"
						+ " csd_guarantor_networth,"
						+ " csd_worth_reduction_reason,"
						+ " csd_amt_thro_per_guar"
						+ " from claim_security_detail_temp csd "
						+ " where LTRIM(RTRIM(UPPER(csd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by csd_id," + " csd_particulars_flag,"
						+ " csd_guarantor_networth,"
						+ " csd_worth_reduction_reason,"
						+ " csd_amt_thro_per_guar";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();

			// retrieving the values from resultset
			String securityid = null;
			String particularsFlag = null;
			String reasonforreduction = null;
			double guarantorNetWorth = 0.0;
			double amntthruperguarantee = 0.0;
			HashMap temp = new HashMap();
			DtlsAsOnDateOfSanction dtlsAsOnSanction = new DtlsAsOnDateOfSanction();
			DtlsAsOnDateOfNPA dtlsAsOnNPA = new DtlsAsOnDateOfNPA();
			DtlsAsOnLogdementOfClaim dtslAsOnLodgement = new DtlsAsOnLogdementOfClaim();
			DtlsAsOnLogdementOfSecondClaim dtslAsOnSecClmLodgement = new DtlsAsOnLogdementOfSecondClaim();
			while (rs.next()) {
				securityid = (String) rs.getString(1);
				particularsFlag = (String) rs.getString(2);
				guarantorNetWorth = (double) rs.getDouble(3);
				reasonforreduction = (String) rs.getString(4);
				amntthruperguarantee = (double) rs.getDouble(5);

				if (particularsFlag
						.equals(ClaimConstants.CLM_SAPGD_AS_ON_SANCTION_CODE)) {
					dtlsAsOnSanction.setNetworthOfGuarantors(guarantorNetWorth);
					dtlsAsOnSanction.setReasonsForReduction(reasonforreduction);
					temp.put(ClaimConstants.CLM_SAPGD_AS_ON_SANCTION_CODE,
							securityid);
				} else if (particularsFlag
						.equals(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE)) {
					dtlsAsOnNPA.setNetworthOfGuarantors(guarantorNetWorth);
					dtlsAsOnNPA.setReasonsForReduction(reasonforreduction);
					temp.put(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE,
							securityid);
				} else if (particularsFlag
						.equals(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM)) {
					dtslAsOnLodgement
							.setNetworthOfGuarantors(guarantorNetWorth);
					dtslAsOnLodgement
							.setReasonsForReduction(reasonforreduction);
					temp.put(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM,
							securityid);
				} else if (particularsFlag
						.equals(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_SEC_CLM)) {
					dtslAsOnSecClmLodgement
							.setNetworthOfGuarantors(guarantorNetWorth);
					// dtslAsOnSecClmLodgement.setReasonsForReduction(reasonforreduction);
					dtslAsOnSecClmLodgement
							.setAmtRealisedPersonalGuarantee(amntthruperguarantee);
					temp.put(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM,
							securityid);
				}
			}
			rs.close();
			rs = null;

			// System.out.println("Control 6");
			// query = null;
			// rs = null;
			// prepStatement = null;

			// Retrieving the Security Particulars
			for (int i = 0; i < temp.size(); i++) {
				String particular = null;
				double value = 0.0;

				if (temp.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_SANCTION_CODE)) {
					securityid = (String) temp
							.get(ClaimConstants.CLM_SAPGD_AS_ON_SANCTION_CODE);
					// System.out.println("As on Date of Sanction of Credit-Security Id:"+securityid);
					if (bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					if (!bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}

					// Executing the Query
					prepStatement = conn.prepareStatement(query);
					prepStatement.setString(1, securityid);
					rs = (ResultSet) prepStatement.executeQuery();

					// Retrieving the values from the resultset
					while (rs.next()) {
						particular = (String) rs.getString(1);
						value = (double) rs.getDouble(2);
						if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_LAND)) {
							dtlsAsOnSanction.setValueOfLand(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_BLDG)) {
							dtlsAsOnSanction.setValueOfBuilding(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_MC)) {
							dtlsAsOnSanction.setValueOfMachine(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHER_FIXED_MOV_ASSETS)) {
							dtlsAsOnSanction
									.setValueOfOtherFixedMovableAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_CUR_ASSETS)) {
							dtlsAsOnSanction.setValueOfCurrentAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHERS)) {
							dtlsAsOnSanction.setValueOfOthers(value);
						}
					}
					rs.close();
					rs = null;

					// query = null;
					// rs = null;
					// prepStatement = null;
				}
				// commented by sukumar@path on 28-Jan-2010
				// else
				// if(temp.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE))
				if (temp.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE)) {
					securityid = (String) temp
							.get(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE);
					// System.out.println("As on Date of NPA-Security Id:"+securityid);
					if (bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					if (!bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					// Executing the Query
					prepStatement = conn.prepareStatement(query);
					prepStatement.setString(1, securityid);
					rs = (ResultSet) prepStatement.executeQuery();

					// Retrieving the values from the resultset
					while (rs.next()) {
						particular = (String) rs.getString(1);
						value = (double) rs.getDouble(2);
						if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_LAND)) {
							dtlsAsOnNPA.setValueOfLand(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_BLDG)) {
							dtlsAsOnNPA.setValueOfBuilding(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_MC)) {
							dtlsAsOnNPA.setValueOfMachine(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHER_FIXED_MOV_ASSETS)) {
							dtlsAsOnNPA
									.setValueOfOtherFixedMovableAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_CUR_ASSETS)) {
							dtlsAsOnNPA.setValueOfCurrentAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHERS)) {
							dtlsAsOnNPA.setValueOfOthers(value);
						}
					}
					rs.close();
					rs = null;

					// query = null;
					// rs = null;
					// prepStatement = null;
				}
				// commented by sukumar@path on 28-Jan-2010
				// else
				// if(temp.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM))
				if (temp.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM)) {
					securityid = (String) temp
							.get(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM);
					// System.out.println("As on Date of Preferrment of Claim-Security Id:"+securityid);
					if (bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					if (!bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					// Executing the Query
					prepStatement = conn.prepareStatement(query);
					prepStatement.setString(1, securityid);
					rs = (ResultSet) prepStatement.executeQuery();
					// System.out.println("Control 6");
					// Retrieving the values from the resultset
					while (rs.next()) {
						particular = (String) rs.getString(1);
						value = (double) rs.getDouble(2);
						if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_LAND)) {
							dtslAsOnLodgement.setValueOfLand(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_BLDG)) {
							dtslAsOnLodgement.setValueOfBuilding(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_MC)) {
							dtslAsOnLodgement.setValueOfMachine(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHER_FIXED_MOV_ASSETS)) {
							dtslAsOnLodgement
									.setValueOfOtherFixedMovableAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_CUR_ASSETS)) {
							dtslAsOnLodgement.setValueOfCurrentAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHERS)) {
							dtslAsOnLodgement.setValueOfOthers(value);
						}
					}
					rs.close();
					rs = null;

					// query = null;
					// rs = null;
					// prepStatement = null;
				} else if (temp
						.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_SEC_CLM)) {
					securityid = (String) temp
							.get(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_SEC_CLM);
					if (bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					if (!bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}

					// Executing the Query
					prepStatement = conn.prepareStatement(query);
					prepStatement.setString(1, securityid);
					rs = (ResultSet) prepStatement.executeQuery();
					double amntthrudisposalofsecurity = 0.0;
					String specificRsnForReduction = null;

					// Retrieving the values from the resultset
					while (rs.next()) {
						particular = (String) rs.getString(1);
						value = (double) rs.getDouble(2);
						amntthrudisposalofsecurity = (double) rs.getDouble(3);
						specificRsnForReduction = (String) rs.getString(4);
						if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_LAND)) {
							dtslAsOnSecClmLodgement.setValueOfLand(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedLand(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionLand(specificRsnForReduction);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_BLDG)) {
							dtslAsOnSecClmLodgement.setValueOfBuilding(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedBuilding(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionBuilding(specificRsnForReduction);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_MC)) {
							dtslAsOnSecClmLodgement.setValueOfMachine(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedMachine(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionMachine(specificRsnForReduction);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHER_FIXED_MOV_ASSETS)) {
							dtslAsOnSecClmLodgement
									.setValueOfOtherFixedMovableAssets(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedFixed(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionFixed(specificRsnForReduction);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_CUR_ASSETS)) {
							dtslAsOnSecClmLodgement
									.setValueOfCurrentAssets(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedCurrent(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionCurrent(specificRsnForReduction);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHERS)) {
							dtslAsOnSecClmLodgement.setValueOfOthers(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedOthers(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionOthers(specificRsnForReduction);
						}
					}
					rs.close();
					rs = null;
					// query = null;
					// rs = null;
					// prepStatement = null;
				}
			}

			SecurityAndPersonalGuaranteeDtls sapgdtls = new SecurityAndPersonalGuaranteeDtls();
			sapgdtls.setDetailsAsOnDateOfSanction(dtlsAsOnSanction);
			sapgdtls.setDetailsAsOnDateOfNPA(dtlsAsOnNPA);
			sapgdtls.setDetailsAsOnDateOfLodgementOfClaim(dtslAsOnLodgement);
			sapgdtls.setDetailsAsOnDateOfLodgementOfSecondClaim(dtslAsOnSecClmLodgement);

			// Retrieving the Recovery Details
			Vector recoveryDtls = new Vector();
			if (bankId.equals("0000")) {
				/*
				 * query = " select crd.cgpan," + " rmm.rmd_description," +
				 * " crd.crd_tc_principal_amt," + " crd.crd_tc_interest_amt," +
				 * " crd.crd_wc_amt," + " crd_wc_other_amt" +
				 * " from claim_recovery_detail_temp@cginter crd," +
				 * " recovery_mode_master rmm " +
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) "
				 * + " and crd.rmd_id = rmm.rmd_id" + " group by crd.cgpan," +
				 * " rmm.rmd_description," + " crd.crd_tc_principal_amt," +
				 * " crd.crd_tc_interest_amt," + " crd.crd_wc_amt," +
				 * " crd_wc_other_amt";
				 */

				/*
				 * query = " select cgp,descr, "+
				 * " decode(nvl(ntcp,0),0,sum(tcp),sum(ntcp)),  "+
				 * " decode(nvl(ntcp,0),0,sum(tci),0),  "+
				 * " decode(nvl(nwcp,0),0,sum(wcp),sum(nwcp)),  "+
				 * " decode(nvl(nwcp,0),0,sum(wci),0)  "+ " from (  "+
				 * "  select crd.cgpan cgp,rmm.rmd_description descr,crd.crd_tc_principal_amt tcp,  "
				 * +
				 * " crd.crd_tc_interest_amt tci,crd.crd_wc_amt wcp,crd_wc_other_amt wci,0 ntcp,0 nwcp  "
				 * + " from claim_recovery_detail_temp@cginter crd,  "+
				 * " recovery_mode_master rmm   "+
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
				 * + " and crd.rmd_id = rmm.rmd_id  "+
				 * " group by crd.cgpan,rmm.rmd_description,crd.crd_tc_principal_amt,crd.crd_tc_interest_amt,   "
				 * + " crd.crd_wc_amt,crd_wc_other_amt  "+ " union all  "+
				 * " select cgpan,null descr,0 tcp,0 tci,0 wcp,0 wci,ctd_npa_recovered_revise ntcp,0 nwcp  "
				 * + " from claim_tc_detail_temp@CGINTER crd  "+
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
				 * + " union all  "+
				 * " select cgpan,null descr,0 tcp,0 tci,0 wcp,0 wci,0 ntcp,cwd_npa_recovered_revise nwcp  "
				 * + " from claim_wc_detail_temp@CGINTER crd  "+
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
				 * + " )  "+ " group by cgp,descr,ntcp,nwcp ";
				 */
				/*
				 * " UNION ALL "+
				 * " SELECT crd.cgpan, rmd_description descr, 0 tcp, 0 tci, "+
				 * " 0 wcp, 0 wci, ctd_npa_recovered_revise ntcp, "+ " 0 nwcp "+
				 * " FROM claim_tc_detail_temp ctd, "+
				 * " claim_recovery_detail_temp crd, "+
				 * " recovery_mode_master rmm "+
				 * " WHERE LTRIM (RTRIM (UPPER (crd.clm_ref_no))) = "+
				 * " LTRIM (RTRIM (UPPER (?))) "+ " AND crd.cgpan = ctd.cgpan "+
				 * " AND crd.rmd_id = rmm.rmd_id "+ " UNION ALL "+
				 * " SELECT crd.cgpan, rmd_description descr, 0 tcp, 0 tci, "+
				 * " 0 wcp, 0 wci, 0 ntcp, "+ " cwd_npa_recovered_revise nwcp "+
				 * " FROM claim_wc_detail_temp cwd, "+
				 * " claim_recovery_detail_temp crd, "+
				 * " recovery_mode_master rmm "+
				 * " WHERE LTRIM (RTRIM (UPPER (crd.clm_ref_no))) = "+
				 * " LTRIM (RTRIM (UPPER (?))) "+ " AND crd.cgpan = cwd.cgpan "+
				 * " AND crd.rmd_id = rmm.rmd_id "+
				 */
				query = " SELECT   cgp, descr, SUM (tcp), SUM (tci), SUM (wcp), SUM (wci) "
						+ " FROM (SELECT  distinct  cgp, descr, "
						+ " DECODE (NVL (ntcp, 0), 0, SUM (tcp), SUM (ntcp)) tcp, "
						+ " DECODE (NVL (ntcp, 0), 0, SUM (tci), 0) tci, "
						+ " DECODE (NVL (nwcp, 0), 0, SUM (wcp), SUM (nwcp)) wcp, "
						+ " DECODE (NVL (nwcp, 0), 0, SUM (wci), 0) wci "
						+ " FROM (SELECT   crd.cgpan cgp, rmm.rmd_description descr, "
						+ " crd.crd_tc_principal_amt tcp, "
						+ " crd.crd_tc_interest_amt tci, crd.crd_wc_amt wcp, "
						+ " crd_wc_other_amt wci, 0 ntcp, 0 nwcp "
						+ " FROM claim_recovery_detail_temp crd, "
						+ " recovery_mode_master rmm "
						+ " WHERE LTRIM (RTRIM (UPPER (crd.clm_ref_no))) = "
						+ " LTRIM (RTRIM (UPPER (?))) "
						+ " AND crd.rmd_id = rmm.rmd_id "
						+ " GROUP BY crd.cgpan, "
						+ " rmm.rmd_description, "
						+ " crd.crd_tc_principal_amt, "
						+ " crd.crd_tc_interest_amt, "
						+ " crd.crd_wc_amt, "
						+ " crd_wc_other_amt "
						+ " ) GROUP BY cgp, descr, ntcp, nwcp) "
						+ " GROUP BY cgp, descr ";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,claimRefNumber);
				// prepStatement.setString(3,claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				/*
				 * query = " select crd.cgpan," + " rmm.rmd_description," +
				 * " crd.crd_tc_principal_amt," + " crd.crd_tc_interest_amt," +
				 * " crd.crd_wc_amt," + " crd_wc_other_amt" +
				 * " from claim_detail_temp c," +
				 * " claim_recovery_detail_temp crd," +
				 * " recovery_mode_master rmm " +
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) "
				 * + " and crd.rmd_id = rmm.rmd_id" + " group by crd.cgpan," +
				 * " rmm.rmd_description," + " crd.crd_tc_principal_amt," +
				 * " crd.crd_tc_interest_amt," + " crd.crd_wc_amt," +
				 * " crd_wc_other_amt";
				 */

				/*
				 * query = " select cgp,descr, "+
				 * " decode(nvl(ntcp,0),0,sum(tcp),sum(ntcp)),  "+
				 * " decode(nvl(ntcp,0),0,sum(tci),0),  "+
				 * " decode(nvl(nwcp,0),0,sum(wcp),sum(nwcp)),  "+
				 * " decode(nvl(nwcp,0),0,sum(wci),0)  "+ " from (  "+
				 * "  select crd.cgpan cgp,rmm.rmd_description descr,crd.crd_tc_principal_amt tcp,  "
				 * +
				 * " crd.crd_tc_interest_amt tci,crd.crd_wc_amt wcp,crd_wc_other_amt wci,0 ntcp,0 nwcp  "
				 * + " from claim_recovery_detail_temp@cginter crd,  "+
				 * " recovery_mode_master rmm   "+
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
				 * + " and crd.rmd_id = rmm.rmd_id  "+
				 * " group by crd.cgpan,rmm.rmd_description,crd.crd_tc_principal_amt,crd.crd_tc_interest_amt,   "
				 * + " crd.crd_wc_amt,crd_wc_other_amt  "+ " union all  "+
				 * " select cgpan,null descr,0 tcp,0 tci,0 wcp,0 wci,ctd_npa_recovered_revise ntcp,0 nwcp  "
				 * + " from claim_tc_detail_temp@CGINTER crd  "+
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
				 * + " union all  "+
				 * " select cgpan,null descr,0 tcp,0 tci,0 wcp,0 wci,0 ntcp,cwd_npa_recovered_revise nwcp  "
				 * + " from claim_wc_detail_temp@CGINTER crd  "+
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
				 * + " )  "+ " group by cgp,descr,ntcp,nwcp ";
				 */
				/*
				 * " UNION ALL "+
				 * " SELECT crd.cgpan, rmd_description descr, 0 tcp, 0 tci, "+
				 * " 0 wcp, 0 wci, ctd_npa_recovered_revise ntcp, "+ " 0 nwcp "+
				 * " FROM claim_tc_detail_temp ctd, "+
				 * " claim_recovery_detail_temp crd, "+
				 * " recovery_mode_master rmm "+
				 * " WHERE LTRIM (RTRIM (UPPER (crd.clm_ref_no))) = "+
				 * " LTRIM (RTRIM (UPPER (?))) "+ " AND crd.cgpan = ctd.cgpan "+
				 * " AND crd.rmd_id = rmm.rmd_id "+ " UNION ALL "+
				 * " SELECT crd.cgpan, rmd_description descr, 0 tcp, 0 tci, "+
				 * " 0 wcp, 0 wci, 0 ntcp, "+ " cwd_npa_recovered_revise nwcp "+
				 * " FROM claim_wc_detail_temp cwd, "+
				 * " claim_recovery_detail_temp crd, "+
				 * " recovery_mode_master rmm "+
				 * " WHERE LTRIM (RTRIM (UPPER (crd.clm_ref_no))) = "+
				 * " LTRIM (RTRIM (UPPER (?))) "+ " AND crd.cgpan = cwd.cgpan "+
				 * " AND crd.rmd_id = rmm.rmd_id "+
				 */
				query = " SELECT   cgp, descr, SUM (tcp), SUM (tci), SUM (wcp), SUM (wci) "
						+ " FROM (SELECT  distinct cgp, descr, "
						+ " DECODE (NVL (ntcp, 0), 0, SUM (tcp), SUM (ntcp)) tcp, "
						+ " DECODE (NVL (ntcp, 0), 0, SUM (tci), 0) tci, "
						+ " DECODE (NVL (nwcp, 0), 0, SUM (wcp), SUM (nwcp)) wcp, "
						+ " DECODE (NVL (nwcp, 0), 0, SUM (wci), 0) wci "
						+ " FROM (SELECT   crd.cgpan cgp, rmm.rmd_description descr, "
						+ " crd.crd_tc_principal_amt tcp, "
						+ " crd.crd_tc_interest_amt tci, crd.crd_wc_amt wcp, "
						+ " crd_wc_other_amt wci, 0 ntcp, 0 nwcp "
						+ " FROM claim_recovery_detail_temp crd, "
						+ " recovery_mode_master rmm "
						+ " WHERE LTRIM (RTRIM (UPPER (crd.clm_ref_no))) = "
						+ " LTRIM (RTRIM (UPPER (?))) "
						+ " AND crd.rmd_id = rmm.rmd_id "
						+ " GROUP BY crd.cgpan, "
						+ " rmm.rmd_description, "
						+ " crd.crd_tc_principal_amt, "
						+ " crd.crd_tc_interest_amt, "
						+ " crd.crd_wc_amt, "
						+ " crd_wc_other_amt "
						+ " ) GROUP BY cgp, descr, ntcp, nwcp) "
						+ " GROUP BY cgp, descr ";
				// Executing the query

				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,claimRefNumber);
				// prepStatement.setString(3,claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			// System.out.println("Query:"+query);
			rs = (ResultSet) prepStatement.executeQuery();

			String modeOfRecovery = null;
			double tcPrincipal = 0.0;
			double tcInterestAndOtherCharges = 0.0;
			double wcAmount = 0.0;
			double wcOtherCharges = 0.0;
			RecoveryDetails recDtl = null;

			// Getting the values from the ResultSet
			while (rs.next()) {
				cgpan = (String) rs.getString(1);
				modeOfRecovery = (String) rs.getString(2);
				tcPrincipal = (double) rs.getDouble(3);
				tcInterestAndOtherCharges = (double) rs.getDouble(4);
				wcAmount = (double) rs.getDouble(5);
				wcOtherCharges = (double) rs.getDouble(6);

				// Setting the values in the RecoveryDetails object
				recDtl = new RecoveryDetails();
				recDtl.setCgpan(cgpan);
				recDtl.setModeOfRecovery(modeOfRecovery);
				recDtl.setTcPrincipal(tcPrincipal);
				recDtl.setTcInterestAndOtherCharges(tcInterestAndOtherCharges);
				recDtl.setWcAmount(wcAmount);
				recDtl.setWcOtherCharges(wcOtherCharges);

				// Adding the Recovery Details object to the vector
				recoveryDtls.addElement(recDtl);
			}
			rs.close();
			rs = null;

			// query = null;
			// rs = null;
			// prepStatement = null;

			// Getting Claim Summary Details
			if (bankId.equals("0000")) {
				query = "select caa.cgpan,"
						+ " caa.caa_applied_amount,decode(app_reapprove_amount,null,app_approved_amount,app_reapprove_amount) "
						+ " from claim_application_amount_temp caa,application_detail a"
						+ " where LTRIM(RTRIM(UPPER(caa.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) and a.cgpan=caa.cgpan "
						+ " group by caa.cgpan,"
						+ " caa.caa_applied_amount,decode(app_reapprove_amount,null,app_approved_amount,app_reapprove_amount) ";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select caa.cgpan,"
						+ " caa.caa_applied_amount,decode(app_reapprove_amount,null,app_approved_amount,app_reapprove_amount) "
						+ " from claim_detail_temp c,"
						+ " claim_application_amount_temp caa,application_detail a"
						+ " where LTRIM(RTRIM(UPPER(caa.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) and a.cgpan=caa.cgpan"
						+ " group by caa.cgpan,"
						+ " caa.caa_applied_amount,decode(app_reapprove_amount,null,app_approved_amount,app_reapprove_amount) ";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}

			// Executing the Query
			ArrayList clmSummaryDtls = new ArrayList();
			rs = (ResultSet) prepStatement.executeQuery();

			// Getting the values from the ResultSet
			double clmAppliedAmount = 0.0;
			double approvedAmount = 0.0;
			// ClaimSummaryDtls clmSummaryDtl = null;
			// System.out.println("size:"+clmSummaryDtls.size());
			while (rs.next()) {
				cgpan = (String) rs.getString(1);
				clmAppliedAmount = (double) rs.getDouble(2);
				approvedAmount = (double) rs.getDouble(3);
				ClaimSummaryDtls clmSummaryDtl = new ClaimSummaryDtls();
				clmSummaryDtl.setCgpan(cgpan);
				clmSummaryDtl.setAmount(clmAppliedAmount);
				clmSummaryDtl.setLimitCoveredUnderCGFSI(String
						.valueOf(approvedAmount));
				// Adding the clmSummaryDtl object in the ArrayList
				clmSummaryDtls.add(clmSummaryDtl);
			}
			rs.close();
			rs = null;

			// query = null;
			// rs = null;
			// prepStatement = null;

			// Retrieving the remaining information
			if (bankId.equals("0000")) {
				query = "select clm_participating_bank_name,"
						+ " clm_recall_notice_dt,"
						+ " clm_filing_dt,"
						+ " clm_wc_release_dt,"
						+ " clm_official_name,"
						+ " clm_official_designation,"
						+ " clm_mli_name,"
						+ " clm_place,"
						+ " clm_date,CLM_SUBSIDY_CREDIT_DT,CLM_SUBSIDY_AMT,CLM_IS_MICRO_FLAG "
						+ " ,clm_dealing_officer,clm_is_wilful_defaulter_flag,clm_is_fraud_flag,clm_is_ext_int_enq_concluded "
						+ " ,clm_is_staff_involved_flag,clm_reason_for_recall_bef_npa,clm_reason_for_suit_bef_npa,clm_dt_of_poss_sarfaesi,clm_incl_unappr_recpts "
						+ " ,clm_conf_corr_value,clm_subsidy_involved,clm_subsidy_after_npa,clm_subsidy_adjusted,clm_mli_comm_fin_pos "
						+ " ,clm_fin_ass_min_def,clm_mli_prop_oth_proj,clm_det_oth_fac_to_borr,clm_watch_list,clm_mli_remarks,clm_return_remarks "
						+ " from claim_detail_temp c "
						+ " where LTRIM(RTRIM(UPPER(c.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by clm_participating_bank_name,"
						+ " clm_recall_notice_dt,"
						+ " clm_filing_dt,"
						+ " clm_wc_release_dt,"
						+ " clm_official_name,"
						+ " clm_official_designation,"
						+ " clm_mli_name,"
						+ " clm_place,"
						+ " clm_date,CLM_SUBSIDY_CREDIT_DT,CLM_SUBSIDY_AMT,CLM_IS_MICRO_FLAG "
						+ " ,clm_dealing_officer,clm_is_wilful_defaulter_flag,clm_is_fraud_flag,clm_is_ext_int_enq_concluded "
						+ " ,clm_is_staff_involved_flag,clm_reason_for_recall_bef_npa,clm_reason_for_suit_bef_npa,clm_dt_of_poss_sarfaesi,clm_incl_unappr_recpts "
						+ " ,clm_conf_corr_value,clm_subsidy_involved,clm_subsidy_after_npa,clm_subsidy_adjusted,clm_mli_comm_fin_pos "
						+ " ,clm_fin_ass_min_def,clm_mli_prop_oth_proj,clm_det_oth_fac_to_borr,clm_watch_list,clm_mli_remarks,clm_return_remarks ";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select clm_participating_bank_name,"
						+ " clm_recall_notice_dt,"
						+ " clm_filing_dt,"
						+ " clm_wc_release_dt,"
						+ " clm_official_name,"
						+ " clm_official_designation,"
						+ " clm_mli_name,"
						+ " clm_place,"
						+ " clm_date,CLM_SUBSIDY_CREDIT_DT,CLM_SUBSIDY_AMT,CLM_IS_MICRO_FLAG "
						+ " ,clm_dealing_officer,clm_is_wilful_defaulter_flag,clm_is_fraud_flag,clm_is_ext_int_enq_concluded "
						+ " ,clm_is_staff_involved_flag,clm_reason_for_recall_bef_npa,clm_reason_for_suit_bef_npa,clm_dt_of_poss_sarfaesi,clm_incl_unappr_recpts "
						+ " ,clm_conf_corr_value,clm_subsidy_involved,clm_subsidy_after_npa,clm_subsidy_adjusted,clm_mli_comm_fin_pos "
						+ " ,clm_fin_ass_min_def,clm_mli_prop_oth_proj,clm_det_oth_fac_to_borr,clm_watch_list,clm_mli_remarks,clm_return_remarks "
						+ " from claim_detail_temp c "
						+ " where LTRIM(RTRIM(UPPER(c.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by clm_participating_bank_name,"
						+ " clm_recall_notice_dt,"
						+ " clm_filing_dt,"
						+ " clm_wc_release_dt,"
						+ " clm_official_name,"
						+ " clm_official_designation,"
						+ " clm_mli_name,"
						+ " clm_place,"
						+ " clm_date,CLM_SUBSIDY_CREDIT_DT,CLM_SUBSIDY_AMT,CLM_IS_MICRO_FLAG "
						+ " ,clm_dealing_officer,clm_is_wilful_defaulter_flag,clm_is_fraud_flag,clm_is_ext_int_enq_concluded "
						+ " ,clm_is_staff_involved_flag,clm_reason_for_recall_bef_npa,clm_reason_for_suit_bef_npa,clm_dt_of_poss_sarfaesi,clm_incl_unappr_recpts "
						+ " ,clm_conf_corr_value,clm_subsidy_involved,clm_subsidy_after_npa,clm_subsidy_adjusted,clm_mli_comm_fin_pos "
						+ " ,clm_fin_ass_min_def,clm_mli_prop_oth_proj,clm_det_oth_fac_to_borr,clm_watch_list,clm_mli_remarks,clm_return_remarks ";
				// System.out.println("Query:"+query);
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// System.out.println("Query was executed in line number 44372");
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}

			// Executing.query
			rs = (ResultSet) prepStatement.executeQuery();

			// Retrieving the values
			String participatingBank = null;
			java.util.Date recallNoticeDt = null;
			java.util.Date wcReleaseDt = null;
			String officialName = null;
			String officialDesignation = null;
			String mliName = null;
			String place = null;
			java.util.Date claimSubmittedDate = null;
			java.util.Date subsidyDt = null;
			double subsidyAmt = 0.0;
			String microFlag = null;

			String dealingOfficer = null;
			String wilfulDefaulter = null;
			String isFraudFlag = null;
			String isEnqConcFlag = null;
			String isStaffInvolved = null;
			String reasonForRecall = null;
			String reasonForSuitFiling = null;
			Date assetPossesionDt = null;
			String unApprRecptsFlag = null;
			String confRecFlag = null;
			String subsidyFlag = null;
			String subsidyRcvdFlag = null;
			String subsidyAdjustedFlag = null;
			String mliComment = null;
			String finAsst = null;
			String creditSupportFlag = null;
			String otherFacility = null;
			String watchListFlag = null;
			String mliRemarks = null;
			String returnRemarks = null;
			while (rs.next()) {
				participatingBank = (String) rs.getString(1);
				recallNoticeDt = (java.util.Date) rs.getDate(2);
				wcReleaseDt = (java.util.Date) rs.getDate(4);
				officialName = (String) rs.getString(5);
				officialDesignation = (String) rs.getString(6);
				mliName = (String) rs.getString(7);
				place = (String) rs.getString(8);
				claimSubmittedDate = (java.util.Date) rs.getDate(9);
				subsidyDt = (java.util.Date) rs.getDate(10);
				subsidyAmt = (double) rs.getDouble(11);
				microFlag = (String) rs.getString(12);

				dealingOfficer = (String) rs.getString(13);
				wilfulDefaulter = (String) rs.getString(14);
				isFraudFlag = (String) rs.getString(15);
				isEnqConcFlag = (String) rs.getString(16);
				isStaffInvolved = (String) rs.getString(17);
				reasonForRecall = (String) rs.getString(18);
				reasonForSuitFiling = (String) rs.getString(19);
				assetPossesionDt = (java.util.Date) rs.getDate(20);
				unApprRecptsFlag = (String) rs.getString(21);
				confRecFlag = (String) rs.getString(22);
				subsidyFlag = (String) rs.getString(23);
				subsidyRcvdFlag = (String) rs.getString(24);
				subsidyAdjustedFlag = (String) rs.getString(25);
				mliComment = (String) rs.getString(26);

				finAsst = (String) rs.getString(27);
				creditSupportFlag = (String) rs.getString(28);
				otherFacility = (String) rs.getString(29);
				watchListFlag = (String) rs.getString(30);
				mliRemarks = (String) rs.getString(31);
				returnRemarks = (String) rs.getString(32);
			}
			rs.close();
			rs = null;

			// query = null;
			// rs = null;
			// prepStatement = null;

			claimapplication.setMemberDetails(memberdetails);
			claimapplication.setBorrowerDetails(borrowerdetails);
			claimapplication
					.setDateOnWhichAccountClassifiedNPA(npaclassifieddt);

			// claimapplication.setDateOfIssueOfRecallNoticeStr();

			claimapplication.setDateOfReportingNpaToCgtsi(cgtsireportingdt);
			claimapplication.setReasonsForAccountTurningNPA(reasonfornpa);
			if (wilfulDefaulter != null || wilfulDefaulter != "") {
				claimapplication
						.setWhetherBorrowerIsWilfulDefaulter(wilfulDefaulter);
			} else {
				claimapplication
						.setWhetherBorrowerIsWilfulDefaulter(whetherBidIsWillfulDefaulter);
			}
			legalproceedingdetail
					.setDateOfConclusionOfRecoveryProceedings(recConclusionDt);
			claimapplication.setLegalProceedingsDetails(legalproceedingdetail);
			claimapplication
					.setWhetherAccntWrittenOffFromBooksOfMLI(whetherNPAWrittenOff);
			claimapplication.setDtOnWhichAccntWrittenOff(npaWrittenOffDt);
			claimapplication.setTermCapitalDtls(termloandetails);
			claimapplication.setWorkingCapitalDtls(workingCapitalDtls);
			claimapplication.setSecurityAndPersonalGuaranteeDtls(sapgdtls);
			claimapplication.setRecoveryDetails(recoveryDtls);
			claimapplication.setClaimSummaryDtls(clmSummaryDtls);
			claimapplication.setParticipatingBank(participatingBank);
			claimapplication.setDateOfIssueOfRecallNotice(recallNoticeDt);
			claimapplication.setDateOfReleaseOfWC(wcReleaseDt);
			claimapplication.setNameOfOfficial(officialName);
			claimapplication.setDesignationOfOfficial(officialDesignation);
			claimapplication.setPlace(place);
			claimapplication.setClaimSubmittedDate(claimSubmittedDate);
			claimapplication.setSubsidyDate(subsidyDt);
			claimapplication.setSubsidyAmt(subsidyAmt);
			claimapplication.setMicroCategory(microFlag);

			claimapplication.setDealingOfficerName(dealingOfficer);
			claimapplication.setFraudFlag(isFraudFlag);
			claimapplication.setEnquiryFlag(isEnqConcFlag);
			claimapplication.setMliInvolvementFlag(isStaffInvolved);
			claimapplication.setReasonForRecall(reasonForRecall);
			claimapplication.setReasonForFilingSuit(reasonForSuitFiling);
			claimapplication.setAssetPossessionDt(assetPossesionDt);
			claimapplication.setInclusionOfReceipt(unApprRecptsFlag);
			claimapplication.setConfirmRecoveryFlag(confRecFlag);
			claimapplication.setSubsidyFlag(subsidyFlag);
			claimapplication.setIsSubsidyRcvdAfterNpa(subsidyRcvdFlag);
			claimapplication.setIsSubsidyAdjustedOnDues(subsidyAdjustedFlag);
			claimapplication.setMliCommentOnFinPosition(mliComment);
			claimapplication.setDetailsOfFinAssistance(finAsst);
			claimapplication.setCreditSupport(creditSupportFlag);
			claimapplication.setBankFacilityDetail(otherFacility);
			claimapplication.setPlaceUnderWatchList(watchListFlag);
			claimapplication.setRemarksOnNpa(mliRemarks);
			claimapplication.setReturnRemarks(returnRemarks);
			claimapplication
					.setWorkingCapitalDtlsVector(workingCapitalDtlsVector);

			prepStatement.close();
			prepStatement = null;
			// claimapplication.setDateOfConclusionOfRecoveryProceedings(recConclusionDt);
			String tcRemarks = "";
			if (flag.equals("TC")) {
				CallableStatement stmt = conn
						.prepareCall("{? = call funcgetquerylist(?,?,?)}");
				stmt.registerOutParameter(1, Types.INTEGER);
				stmt.setString(2, claimRefNumber);
				stmt.registerOutParameter(3, Constants.CURSOR);
				stmt.registerOutParameter(4, Types.VARCHAR);
				stmt.execute();
				int status = stmt.getInt(1);
				String error = stmt.getString(4);
				if (status == Constants.FUNCTION_FAILURE) {
					stmt.close();
					throw new DatabaseException(error);
				}
				rs = (ResultSet) stmt.getObject(3);
				while (rs.next()) {
					tcRemarks = tcRemarks + rs.getString(1) + "#";
				}
				claimapplication.setReturnRemarks(tcRemarks);
				rs.close();
				rs = null;
				stmt.close();
				stmt = null;
			}
		} catch (Exception sqlexception) {
			sqlexception.printStackTrace();
			throw new DatabaseException(sqlexception.getMessage());
		} finally {
			DBConnection.freeConnection(conn);
		}
		// return reportDao.displayClmRefNumberDtl(claimRefNumber);
		return claimapplication;
	}

	/*
	 * ##########################################################################
	 * ########################3
	 */

	public Vector displayMemberSettlementDtls(java.sql.Date fromDate,
			java.sql.Date toDate) throws DatabaseException {

		Connection conn = null;
		PreparedStatement prepStatement = null;
		ResultSet rs = null;
		Vector settlementDetails = new Vector();
		HashMap settDtl = null;
		double totalSettlementAmt = 0.0;
		String memberId = null;
		String memberName = null;
		String query = null;

		try {
			conn = DBConnection.getConnection();
			if (fromDate != null) { /*
									 * query modification@sudeep.dhiman to get
									 * resultset in sorted order
									 */
				query = "select c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id,"
						+ " c.clm_mli_name mliname,"
						+ " sd.set_tier1"
						+ " from claim_detail c,"
						+ " settlement_detail sd"
						+ " where LTRIM(RTRIM(UPPER(c.cgclan))) = LTRIM(RTRIM(UPPER(sd.cgclan)))"
						+ " and c.clm_installment_flag = 'F'"
						+ " and sd.set_tier1_dt between ? and ? order by mliname";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setDate(1, fromDate);
				prepStatement.setDate(2, toDate);
				rs = (ResultSet) prepStatement.executeQuery();

				// Retrieving the values from the ResultSet
				while (rs.next()) {
					boolean mapAdded = false;
					memberId = (String) rs.getString(1);
					memberName = (String) rs.getString(2);
					totalSettlementAmt = (double) rs.getDouble(3);

					if (memberId == null)
						continue;

					// Setting the values in SettlementDetail object
					settDtl = new HashMap();
					settDtl.put(ClaimConstants.CLM_MEMBER_ID, memberId);
					settDtl.put(ClaimConstants.CLM_MEMBER_NAME, memberName);
					settDtl.put(ClaimConstants.CLM_TOTAL_SETTLMNT_AMNT,
							new Double(totalSettlementAmt));

					// Adding the SettlementDetail object to the vector
					for (int i = 0; i < settlementDetails.size(); i++) {
						HashMap map = (HashMap) settlementDetails.elementAt(i);

						if (map == null)
							continue;

						String memId = (String) map
								.get(ClaimConstants.CLM_MEMBER_ID);
						if (memberId.equals(memId)) {
							map = (HashMap) settlementDetails.remove(i);
							double amount = ((Double) map
									.get(ClaimConstants.CLM_TOTAL_SETTLMNT_AMNT))
									.doubleValue();
							amount = amount + totalSettlementAmt;
							map.put(ClaimConstants.CLM_TOTAL_SETTLMNT_AMNT,
									new Double(amount));
							settlementDetails.add(i, map);
							mapAdded = true;
						}
					}
					if (!mapAdded) {
						if (!settlementDetails.contains(settDtl))
							settlementDetails.addElement(settDtl);
						mapAdded = true;
					}
				}

				query = null;
				rs.close();
				rs = null;
				prepStatement = null;
				// mapAdded = false;
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				query = "select c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id,"
						+ " c.clm_mli_name mliname,"
						+ " sd.set_tier2"
						+ " from claim_detail c,"
						+ " settlement_detail sd"
						+ " where LTRIM(RTRIM(UPPER(c.cgclan))) = LTRIM(RTRIM(UPPER(sd.cgclan)))"
						+ " and c.clm_installment_flag = 'S'"
						+ " and sd.set_tier2_dt between ? and ? "
						+ " order by mliname";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setDate(1, fromDate);
				prepStatement.setDate(2, toDate);
				rs = (ResultSet) prepStatement.executeQuery();

				// Retrieving the values from the ResultSet
				while (rs.next()) {
					boolean mapAdded = false;
					memberId = (String) rs.getString(1);
					memberName = (String) rs.getString(2);
					totalSettlementAmt = (double) rs.getDouble(3);

					if (memberId == null)
						continue;

					// Setting the values in SettlementDetail object
					settDtl = new HashMap();
					settDtl.put(ClaimConstants.CLM_MEMBER_ID, memberId);
					settDtl.put(ClaimConstants.CLM_MEMBER_NAME, memberName);
					settDtl.put(ClaimConstants.CLM_TOTAL_SETTLMNT_AMNT,
							new Double(totalSettlementAmt));

					// Adding the SettlementDetail object to the vector
					for (int i = 0; i < settlementDetails.size(); i++) {
						HashMap map = (HashMap) settlementDetails.elementAt(i);
						if (map == null) {
							continue;
						}
						String memId = (String) map
								.get(ClaimConstants.CLM_MEMBER_ID);
						if (memberId.equals(memId)) {
							map = (HashMap) settlementDetails.remove(i);
							double amount = ((Double) map
									.get(ClaimConstants.CLM_TOTAL_SETTLMNT_AMNT))
									.doubleValue();
							amount = amount + totalSettlementAmt;
							map.put(ClaimConstants.CLM_TOTAL_SETTLMNT_AMNT,
									new Double(amount));
							settlementDetails.add(i, map);
							mapAdded = true;
						}
					}
					if (!mapAdded) {
						if (!settlementDetails.contains(settDtl))
							settlementDetails.addElement(settDtl);
						mapAdded = true;
					}
				}

				query = null;
				rs.close();
				rs = null;
				prepStatement = null;
			} else if (fromDate == null) {
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				query = "select c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id,"
						+ " c.clm_mli_name mliname,"
						+ " sd.set_tier1"
						+ " from claim_detail c,"
						+ " settlement_detail sd"
						+ " where LTRIM(RTRIM(UPPER(c.cgclan))) = LTRIM(RTRIM(UPPER(sd.cgclan)))"
						+ " and c.clm_installment_flag = 'F'"
						+ " and sd.set_tier1_dt <= ? order by mliname";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setDate(1, toDate);
				rs = (ResultSet) prepStatement.executeQuery();

				// Retrieving the values from the ResultSet
				while (rs.next()) {
					boolean mapAdded = false;
					memberId = (String) rs.getString(1);
					memberName = (String) rs.getString(2);
					totalSettlementAmt = (double) rs.getDouble(3);

					if (memberId == null)
						continue;

					// Setting the values in SettlementDetail object
					settDtl = new HashMap();
					settDtl.put(ClaimConstants.CLM_MEMBER_ID, memberId);
					settDtl.put(ClaimConstants.CLM_MEMBER_NAME, memberName);
					settDtl.put(ClaimConstants.CLM_TOTAL_SETTLMNT_AMNT,
							new Double(totalSettlementAmt));

					// Adding the SettlementDetail object to the vector
					for (int i = 0; i < settlementDetails.size(); i++) {
						HashMap map = (HashMap) settlementDetails.elementAt(i);

						if (map == null)
							continue;

						String memId = (String) map
								.get(ClaimConstants.CLM_MEMBER_ID);
						if (memberId.equals(memId)) {
							map = (HashMap) settlementDetails.remove(i);
							double amount = ((Double) map
									.get(ClaimConstants.CLM_TOTAL_SETTLMNT_AMNT))
									.doubleValue();
							amount = amount + totalSettlementAmt;
							map.put(ClaimConstants.CLM_TOTAL_SETTLMNT_AMNT,
									new Double(amount));
							settlementDetails.add(i, map);
							mapAdded = true;
						}
					}
					if (!mapAdded) {
						if (!settlementDetails.contains(settDtl))
							settlementDetails.addElement(settDtl);
						mapAdded = true;
					}
				}

				query = null;
				rs.close();
				rs = null;
				prepStatement = null;
				// mapAdded = false;
				/*
				 * query modification@sudeep.dhiman to get resultset in sorted
				 * order
				 */
				query = "select c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id,"
						+ " c.clm_mli_name mliname,"
						+ " sd.set_tier2"
						+ " from claim_detail c,"
						+ " settlement_detail sd"
						+ " where LTRIM(RTRIM(UPPER(c.cgclan))) = LTRIM(RTRIM(UPPER(sd.cgclan)))"
						+ " and   c.clm_installment_flag = 'S'"
						+ " and   sd.set_tier2_dt <= ?" + " order by mliname";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setDate(1, toDate);
				rs = (ResultSet) prepStatement.executeQuery();

				// Retrieving the values from the ResultSet
				while (rs.next()) {
					boolean mapAdded = false;
					memberId = (String) rs.getString(1);
					memberName = (String) rs.getString(2);
					totalSettlementAmt = (double) rs.getDouble(3);

					if (memberId == null) {
						continue;
					}

					// Setting the values in SettlementDetail object
					settDtl = new HashMap();
					settDtl.put(ClaimConstants.CLM_MEMBER_ID, memberId);
					settDtl.put(ClaimConstants.CLM_MEMBER_NAME, memberName);
					settDtl.put(ClaimConstants.CLM_TOTAL_SETTLMNT_AMNT,
							new Double(totalSettlementAmt));

					// Adding the SettlementDetail object to the vector
					for (int i = 0; i < settlementDetails.size(); i++) {
						HashMap map = (HashMap) settlementDetails.elementAt(i);
						if (map == null) {
							continue;
						}
						String memId = (String) map
								.get(ClaimConstants.CLM_MEMBER_ID);
						if (memberId.equals(memId)) {
							map = (HashMap) settlementDetails.remove(i);
							double amount = ((Double) map
									.get(ClaimConstants.CLM_TOTAL_SETTLMNT_AMNT))
									.doubleValue();
							amount = amount + totalSettlementAmt;
							map.put(ClaimConstants.CLM_TOTAL_SETTLMNT_AMNT,
									new Double(amount));
							settlementDetails.add(i, map);
							mapAdded = true;
						}
					}
					if (!mapAdded) {
						if (!settlementDetails.contains(settDtl)) {
							settlementDetails.addElement(settDtl);
						}
						mapAdded = true;
					}
				}

				query = null;
				rs.close();
				rs = null;
				prepStatement = null;
			}
		} catch (Exception sqlexception) {
			sqlexception.printStackTrace();
			throw new DatabaseException(sqlexception.getMessage());
		} finally {
			DBConnection.freeConnection(conn);
		}
		return settlementDetails;
	}

	/*
	 * This method returns Vector of Settlement Details of Claim First and
	 * Second Installments
	 */

	public Vector getSettlementDetails(java.sql.Date fromDate,
			java.sql.Date toDate, String memberId, String flag)
			throws DatabaseException {
		Connection conn = null;
		PreparedStatement prepStatement = null;
		ResultSet rs = null;
		Vector settlementDetails = new Vector();

		String query = null;
		SettlementDetail settlementDtl = null;

		String borrowerId = null;
		String cgclan = null;
		// String voucherId = null;
		double firstSettlementTier = 0.0;
		java.util.Date firstSettlementDt = null;
		double secondSettlementTier = 0.0;
		java.util.Date secondSettlementDt = null;

		try {
			conn = DBConnection.getConnection();
			if ((fromDate != null)
					&& (flag.equals(ClaimConstants.FIRST_INSTALLMENT))) {

				query = "select c.bid,"
						+ "c.cgclan,"
						+ "nvl(sd.set_tier1,0),"
						+ "nvl(sd.set_tier1_dt,NULL)"
						+ " from claim_detail c,"
						+ "settlement_detail sd"
						+ " where LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and   LTRIM(RTRIM(UPPER(c.clm_installment_flag))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and   LTRIM(RTRIM(UPPER(c.cgclan))) = LTRIM(RTRIM(UPPER(sd.cgclan)))"
						+ " and   sd.set_tier1_dt between ? and ? "
						+ " group by c.bid," + "c.cgclan,"
						+ "nvl(sd.set_tier1,0)," + "nvl(sd.set_tier1_dt,NULL)";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, memberId);
				prepStatement.setString(2, flag);
				prepStatement.setDate(3, fromDate);
				prepStatement.setDate(4, toDate);
				rs = (ResultSet) prepStatement.executeQuery();

				// Retrieving the values from the ResultSet
				while (rs.next()) {
					borrowerId = (String) rs.getString(1);
					cgclan = (String) rs.getString(2);
					// voucherId = (String)rs.getString(3);
					firstSettlementTier = (double) rs.getDouble(3);
					firstSettlementDt = (java.util.Date) rs.getDate(4);

					// Setting the values in SettlementDetail object
					settlementDtl = new SettlementDetail();
					settlementDtl.setCgbid(borrowerId);
					settlementDtl.setCgclan(cgclan);
					// settlementDtl.setVoucherId(voucherId);
					settlementDtl.setTierOneSettlement(firstSettlementTier);
					settlementDtl.setTierOneSettlementDt(firstSettlementDt);

					// Adding the SettlementDetail object to the vector
					if (!settlementDetails.contains(settlementDtl)) {
						settlementDetails.addElement(settlementDtl);
					}
				}

				query = null;
				rs.close();
				rs = null;
				prepStatement = null;
			} else if ((fromDate != null)
					&& (flag.equals(ClaimConstants.SECOND_INSTALLMENT))) {
				query = "select c.bid,"
						+ "c.cgclan,"
						+ "nvl(sd.set_tier1,0),"
						+ "nvl(sd.set_tier1_dt,NULL),"
						+ "nvl(sd.set_tier2,0),"
						+ "nvl(sd.set_tier2_dt,NULL)"
						+ " from claim_detail c,"
						+ "settlement_detail sd"
						+ " where LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and   LTRIM(RTRIM(UPPER(c.clm_installment_flag))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and   LTRIM(RTRIM(UPPER(c.cgclan))) = LTRIM(RTRIM(UPPER(sd.cgclan)))"
						+ " and   sd.set_tier2_dt between ? and ? "
						+ " group by c.bid," + "c.cgclan,"
						+ "nvl(sd.set_tier1,0)," + "nvl(sd.set_tier1_dt,NULL),"
						+ "nvl(sd.set_tier2,0)," + "nvl(sd.set_tier2_dt,NULL)";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, memberId);
				prepStatement.setString(2, flag);
				prepStatement.setDate(3, fromDate);
				prepStatement.setDate(4, toDate);
				rs = (ResultSet) prepStatement.executeQuery();

				// Retrieving the values from the ResultSet
				while (rs.next()) {
					borrowerId = (String) rs.getString(1);
					cgclan = (String) rs.getString(2);
					// voucherId = (String)rs.getString(3);
					firstSettlementTier = (double) rs.getDouble(3);
					firstSettlementDt = (java.util.Date) rs.getDate(4);
					secondSettlementTier = (double) rs.getDouble(5);
					secondSettlementDt = (java.util.Date) rs.getDate(6);

					// Setting the values in SettlementDetail object
					settlementDtl = new SettlementDetail();
					settlementDtl.setCgbid(borrowerId);
					settlementDtl.setCgclan(cgclan);
					// settlementDtl.setVoucherId(voucherId);
					settlementDtl.setTierOneSettlement(firstSettlementTier);
					settlementDtl.setTierOneSettlementDt(firstSettlementDt);
					settlementDtl.setTierTwoSettlement(secondSettlementTier);
					settlementDtl.setTierTwoSettlementDt(secondSettlementDt);

					// Adding the SettlementDetail object to the vector
					if (!settlementDetails.contains(settlementDtl)) {
						settlementDetails.addElement(settlementDtl);
					}
				}

				query = null;
				rs.close();
				rs = null;
				prepStatement = null;
			} else if ((fromDate == null)
					&& (flag.equals(ClaimConstants.FIRST_INSTALLMENT))) {

				query = "select c.bid,"
						+ "c.cgclan,"
						+ "nvl(sd.set_tier1,0),"
						+ "nvl(sd.set_tier1_dt,NULL)"
						+ " from claim_detail c,"
						+ "settlement_detail sd"
						+ " where LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and   LTRIM(RTRIM(UPPER(c.clm_installment_flag))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and   LTRIM(RTRIM(UPPER(c.cgclan))) = LTRIM(RTRIM(UPPER(sd.cgclan)))"
						+ " and   sd.set_tier1_dt <= ? " + " group by c.bid,"
						+ "c.cgclan," + "nvl(sd.set_tier1,0),"
						+ "nvl(sd.set_tier1_dt,NULL)";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, memberId);
				prepStatement.setString(2, flag);
				prepStatement.setDate(3, toDate);
				rs = (ResultSet) prepStatement.executeQuery();

				// Retrieving the values from the ResultSet
				while (rs.next()) {
					borrowerId = (String) rs.getString(1);
					cgclan = (String) rs.getString(2);
					// voucherId = (String)rs.getString(3);
					firstSettlementTier = (double) rs.getDouble(3);
					firstSettlementDt = (java.util.Date) rs.getDate(4);

					// Setting the values in SettlementDetail object
					settlementDtl = new SettlementDetail();
					settlementDtl.setCgbid(borrowerId);
					settlementDtl.setCgclan(cgclan);
					// settlementDtl.setVoucherId(voucherId);
					settlementDtl.setTierOneSettlement(firstSettlementTier);
					settlementDtl.setTierOneSettlementDt(firstSettlementDt);

					// Adding the SettlementDetail object to the vector
					if (!settlementDetails.contains(settlementDtl)) {
						settlementDetails.addElement(settlementDtl);
					}
				}

				query = null;
				rs.close();
				rs = null;
				prepStatement = null;
			} else if ((fromDate == null)
					&& (flag.equals(ClaimConstants.SECOND_INSTALLMENT))) {
				query = "select c.bid,"
						+ "c.cgclan,"
						+ "nvl(sd.set_tier1,0),"
						+ "nvl(sd.set_tier1_dt,NULL),"
						+ "nvl(sd.set_tier2,0),"
						+ "nvl(sd.set_tier2_dt,NULL)"
						+ " from claim_detail c,"
						+ "settlement_detail sd"
						+ " where LTRIM(RTRIM(UPPER(c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and   LTRIM(RTRIM(UPPER(c.clm_installment_flag))) = LTRIM(RTRIM(UPPER(?)))"
						+ " and   LTRIM(RTRIM(UPPER(c.cgclan))) = LTRIM(RTRIM(UPPER(sd.cgclan)))"
						+ " and   sd.set_tier2_dt <= ? " + " group by c.bid,"
						+ "c.cgclan," + "nvl(sd.set_tier1,0),"
						+ "nvl(sd.set_tier1_dt,NULL)," + "nvl(sd.set_tier2,0),"
						+ "nvl(sd.set_tier2_dt,NULL)";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, memberId);
				prepStatement.setString(2, flag);
				prepStatement.setDate(3, toDate);
				rs = (ResultSet) prepStatement.executeQuery();

				// Retrieving the values from the ResultSet
				while (rs.next()) {
					borrowerId = (String) rs.getString(1);
					cgclan = (String) rs.getString(2);
					// voucherId = (String)rs.getString(3);
					firstSettlementTier = (double) rs.getDouble(3);
					firstSettlementDt = (java.util.Date) rs.getDate(4);
					secondSettlementTier = (double) rs.getDouble(5);
					secondSettlementDt = (java.util.Date) rs.getDate(6);

					// Setting the values in SettlementDetail object
					settlementDtl = new SettlementDetail();
					settlementDtl.setCgbid(borrowerId);
					settlementDtl.setCgclan(cgclan);
					// settlementDtl.setVoucherId(voucherId);
					settlementDtl.setTierOneSettlement(firstSettlementTier);
					settlementDtl.setTierOneSettlementDt(firstSettlementDt);
					settlementDtl.setTierTwoSettlement(secondSettlementTier);
					settlementDtl.setTierTwoSettlementDt(secondSettlementDt);

					// Adding the SettlementDetail object to the vector
					if (!settlementDetails.contains(settlementDtl)) {
						settlementDetails.addElement(settlementDtl);
					}
				}

				query = null;
				rs.close();
				rs = null;
				prepStatement = null;
			}
		} catch (Exception sqlexception) {
			// sqlexception.printStackTrace();
			throw new DatabaseException(sqlexception.getMessage());
		} finally {
			DBConnection.freeConnection(conn);
		}
		return settlementDetails;
	}

	public ArrayList getQueryReport(String[] values) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getQueryReport", "Entered");
		PreparedStatement queryStmt = null;
		String query = values[0];
		ArrayList queryReport = null;
		ResultSet res = null;
		int counter = 1;
		QueryReport qReport = null;
		Connection connection = DBConnection.getConnection();
		try {
			queryStmt = connection.prepareStatement(query);
			StringTokenizer stk = null;
			String dataType = null;
			String value = null;
			SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
			while (values[counter] != null) {
				stk = new StringTokenizer(values[counter], "|");
				dataType = stk.nextToken();
				value = stk.nextToken();
				if (dataType.equalsIgnoreCase("string")) {
					queryStmt.setString(counter, value);
				}
				if (dataType.equalsIgnoreCase("date")) {
					java.util.Date dt = new java.util.Date();
					SimpleDateFormat formatter = new SimpleDateFormat(
							"dd/MM/yyyy");
					dt = formatter.parse(value);
					queryStmt.setDate(counter, new java.sql.Date(dt.getTime()));
					dt = null;
					formatter = null;
				}
				if (dataType.equalsIgnoreCase("number")) {
					queryStmt.setDouble(counter,
							new Double(value).doubleValue());
				}
				counter++;
			}
			dataType = null;
			value = null;
			res = queryStmt.executeQuery();

			query = query.substring(0, query.indexOf("from"));
			Log.log(Log.INFO, "ReportDAO", "getQueryReport", "Partial Query : "
					+ query);

			queryReport = new ArrayList();
			String name = "";
			Date dt = null;
			while (res.next()) {
				counter = 1;
				qReport = new QueryReport();
				// stk = new StringTokenizer(query,",");
				// String token = null;
				// while(stk.hasMoreTokens())
				{
					// token = stk.nextToken();
					// Log.log(Log.INFO,"ReportDAO","getQueryReport","token : "+
					// token);
					if (query.indexOf("application_detail.APP_REF_NO") != -1) {
						qReport.setApplnRefNo(res.getString(counter));
						counter++;
					}
					if (query.indexOf("application_detail.CGPAN") != -1) {
						qReport.setCgpan(res.getString(counter));
						counter++;
					}
					if (query.indexOf("application_detail.app_bank_app_ref_no") != -1) {
						qReport.setBankApplnRefNumber(res.getString(counter));
						counter++;
					}

					if (query.indexOf("application_detail.app_submitted_dt") != -1) {
						dt = res.getDate(counter);
						if (dt != null) {
							qReport.setApplSubmittedDate(sdf.format(dt));
						}
						dt = null;
						counter++;
					}
					if (query.indexOf("term_loan_detail.trm_plr") != -1) {
						qReport.setTermLoanPLR(res.getFloat(counter));
						counter++;
					}
					if (query.indexOf("working_capital_detail.wcp_plr") != -1) {
						qReport.setWorkingCapitalPLR(res.getFloat(counter));
						counter++;
					}
					if (query.indexOf("promoter_detail.pmr_chief_title") != -1) {
						if (res.getString(counter) != null) {
							name = res.getString(counter);
						}
						if (res.getString(counter + 1) != null) {
							name = name + " " + res.getString(counter + 1);
						}
						if (res.getString(counter + 2) != null) {
							name = name + " " + res.getString(counter + 2);
						}
						if (res.getString(counter + 3) != null) {
							name = name + " " + res.getString(counter + 3);
						}
						qReport.setChiefPromoterName(name.trim());
						name = "";
						counter += 4;
						Log.log(Log.INFO,
								"ReportDAO",
								"getQueryReport",
								"chief promoter : "
										+ qReport.getChiefPromoterName());
					}
					if (query.indexOf("ssi_detail.ssi_it_pan") != -1) {
						qReport.setITPanNo(res.getString(counter));
						counter++;
					}
					if (query.indexOf("ssi_detail.ssi_unit_name") != -1) {
						qReport.setSsiName(res.getString(counter));
						counter++;
					}
					if (query.indexOf("ssi_detail.ssi_address") != -1) {
						qReport.setSsiAddress(res.getString(counter));
						counter++;
					}
					if (query.indexOf("ssi_detail.ssi_city") != -1) {
						qReport.setCity(res.getString(counter));
						counter++;
					}
					if (query.indexOf("ssi_detail.ssi_state_name") != -1) {
						qReport.setState(res.getString(counter));
						counter++;
					}
					if (query.indexOf("ssi_detail.ssi_district_name") != -1) {
						qReport.setDistrict(res.getString(counter));
						counter++;
					}
					if (query.indexOf("ssi_detail.ssi_pincode") != -1) {
						qReport.setPin(res.getString(counter));
						counter++;
					}
					if (query.indexOf("ssi_detail.ssi_constitution") != -1) {
						qReport.setUnitType(res.getString(counter));
						counter++;
					}
					if (query.indexOf("term_loan_detail.trm_amount_sanctioned") != -1) {
						qReport.setTermCreditSanctioned(res.getDouble(counter));
						counter++;
					}
					if (query.indexOf("term_loan_detail.trm_interest_rate") != -1) {
						qReport.setTermLoanIntRate(res.getFloat(counter));
						counter++;
					}
					if (query.indexOf("term_loan_detail.trm_tenure") != -1) {
						qReport.setTermLoanTenure(res.getInt(counter));
						counter++;
					}
					if (query
							.indexOf("working_capital_detail.wcp_fb_limit_sanctioned") != -1) {
						qReport.setWorkingCapitalSanctioned(res
								.getDouble(counter));
						counter++;
					}
					if (query.indexOf("application_detail.app_project_outlay") != -1) {
						qReport.setProjectOutlay(res.getDouble(counter));
						counter++;
					}
					if (query
							.indexOf("application_detail.app_approved_date_time") != -1) {
						dt = res.getDate(counter);
						if (dt != null) {
							qReport.setApprovedDate(sdf.format(dt));
						}
						dt = null;
						counter++;
					}
					if (query.indexOf("application_detail.app_approved_amount") != -1) {
						qReport.setApprovedAmount(res.getDouble(counter));
						counter++;
					}
					if (query.indexOf("application_detail.app_guarantee_fee") != -1) {
						qReport.setGuaranteeFee(res.getDouble(counter));
						counter++;
					}
					if (query
							.indexOf("application_detail.app_guar_start_date_time") != -1) {
						dt = res.getDate(counter);
						if (dt != null) {
							qReport.setGuaranteeFeeDate(sdf.format(dt));
						}
						dt = null;
						counter++;
					}

				}
				queryReport.add(qReport);
			}
			sdf = null;
		} catch (Exception exception) {
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
			try {
				qReport = null;
				if (queryStmt != null) {
					queryStmt.close();
					queryStmt = null;
				}
				if (res != null) {
					res.close();
					res = null;
				}
			} catch (SQLException sql) {
				throw new DatabaseException(sql.getMessage());
			}

		}
		Log.log(Log.INFO, "ReportDAO", "getQueryReport", "exited");
		return queryReport;
	}

	public ArrayList defaulterReport(DefaulterInputFields defFields)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "defaulterReport", "Entered");
		Log.log(Log.INFO, "ReportsManager", "getDefaulterReport",
				"***********************************");
		Log.log(Log.INFO, "ReportsManager", "getDefaulterReport",
				"defFields.getBorrUnitName().trim() :"
						+ defFields.getBorrUnitName().trim());
		Log.log(Log.INFO, "ReportsManager", "getDefaulterReport",
				"defFields.getItpanOfTheUnit().trim() :"
						+ defFields.getItpanOfTheUnit().trim());
		Log.log(Log.INFO, "ReportsManager", "getDefaulterReport",
				"defFields.getChiefPromoterName().trim() :"
						+ defFields.getChiefPromoterName().trim());
		Log.log(Log.INFO,
				"ReportsManager",
				"getDefaulterReport",
				"defFields.getChiefPromoterDOB() :"
						+ defFields.getChiefPromoterDOB());
		Log.log(Log.INFO, "ReportsManager", "getDefaulterReport",
				"defFields.getItpanOfTheChiefPromoter().trim() :"
						+ defFields.getItpanOfTheChiefPromoter().trim());
		Log.log(Log.INFO, "ReportsManager", "getDefaulterReport",
				"defFields.getLegalIDOfTheChiefPromoter().trim() :"
						+ defFields.getLegalIDOfTheChiefPromoter().trim());
		Log.log(Log.INFO,
				"ReportsManager",
				"getDefaulterReport",
				"defFields.getBorrUnitNameBoolean() :"
						+ defFields.getBorrUnitNameBoolean());
		Log.log(Log.INFO,
				"ReportsManager",
				"getDefaulterReport",
				"defFields.getBorrUnitNameBoolean() :"
						+ defFields.getBorrUnitNameBoolean());
		Log.log(Log.INFO,
				"ReportsManager",
				"getDefaulterReport",
				"defFields.getItpanOfTheUnitBoolean() :"
						+ defFields.getItpanOfTheUnitBoolean());
		Log.log(Log.INFO,
				"ReportsManager",
				"getDefaulterReport",
				"defFields.getChiefPromoterNameBoolean() :"
						+ defFields.getChiefPromoterNameBoolean());
		Log.log(Log.INFO,
				"ReportsManager",
				"getDefaulterReport",
				"defFields.getChiefPromoterDOBBoolean() :"
						+ defFields.getChiefPromoterDOBBoolean());
		Log.log(Log.INFO,
				"ReportsManager",
				"getDefaulterReport",
				"defFields.getItpanOfTheChiefPromoterBoolean() :"
						+ defFields.getItpanOfTheChiefPromoterBoolean());
		Log.log(Log.INFO, "ReportsManager", "getDefaulterReport",
				"***********************************");
		// System.out.println("Entered in the defaulter report ");
		PreparedStatement defstmt = null;
		;
		ResultSet defResult;
		Connection conn = DBConnection.getConnection();
		ArrayList defArray = new ArrayList();
		// ArrayList report;
		DefaulterInputFields defaulterFieldsFromDB = null;

		boolean borrowerUnitNameToBeAdded = false;
		boolean itpanOfUnitToBeAdded = false;
		boolean chiefPromoterNameToBeAdded = false;
		boolean chiefPromoterDtOfBirthToBeAdded = false;
		boolean itpanOfChiefPromoterToBeAdded = false;
		boolean legalIdOfChiefPromoterToBeAdded = false;

		int borrowerUnitNameIndex = 0;
		int itpanOfUnitIndex = 0;
		int chiefPromoterNameIndex = 0;
		int chiefPromoterDtOfBirthIndex = 0;
		int itpanOfChiefPromoterIndex = 0;
		int legalIdOfChiefPromoterIndex = 0;

		int counter = 0;

		if (defFields != null) {
			try {
				String query = "select distinct (app.MEM_BNK_ID|| app.MEM_ZNE_ID||app.MEM_BRN_ID), "
						+ " s.SSI_UNIT_NAME, s.SSI_IT_PAN, s.SSI_ADDRESS, "
						+ " p.PMR_CHIEF_FIRST_NAME ||' ' ||p.PMR_CHIEF_MIDDLE_NAME ||' ' ||p.PMR_CHIEF_LAST_NAME, "
						+ " p.PMR_FIRST_NAME, p.PMR_SECOND_NAME, p.PMR_THIRD_NAME, "
						+ " p.PMR_CHIEF_DOB, p.PMR_FIRST_DOB, p.PMR_SECOND_DOB, p.PMR_THIRD_DOB, "
						+ " p.PMR_CHIEF_IT_PAN, p.PMR_CHIEF_LEGAL_ID, "
						+ " m.MEM_BANK_NAME, m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID ||  m.MEM_CITY "
						+ " from ssi_detail s, promoter_detail p, member_info m, application_detail app, npa_detail n "
						+ " where s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER "
						+ " and s.SSI_REFERENCE_NUMBER = app.SSI_REFERENCE_NUMBER "
						+ " and s.bid = n.bid "
						+ " and app.MEM_BNK_ID||app.MEM_ZNE_ID||app.MEM_BRN_ID=m.MEM_BNK_ID||m.MEM_ZNE_ID||m.MEM_BRN_ID "
						+ " and n.npa_place_under_watchlist_flag = 'Y'";

				String nonEmptyField = null;
				boolean onlyOneFieldNonEmpty = false;

				if ((defFields.getBorrUnitName().trim().trim() != null && (!defFields
						.getBorrUnitName().trim().equals("")))
						&& (defFields.getItpanOfTheUnit().trim() != null && (defFields
								.getItpanOfTheUnit().trim().equals("")))
						&& (defFields.getChiefPromoterName().trim() != null && defFields
								.getChiefPromoterName().trim().equals(""))
						&& (defFields.getChiefPromoterDOB() != null && defFields
								.getChiefPromoterDOB().toString().trim()
								.equals(""))
						&& (defFields.getItpanOfTheChiefPromoter().trim() != null && defFields
								.getItpanOfTheChiefPromoter().trim().equals(""))
						&& (defFields.getLegalIDOfTheChiefPromoter().trim() != null && defFields
								.getLegalIDOfTheChiefPromoter().trim()
								.equals(""))) {
					nonEmptyField = defFields.getBorrUnitName().trim();
					nonEmptyField = "%" + nonEmptyField + "%";
					onlyOneFieldNonEmpty = true;
					query = query + " and ( ";
					query = query + " UPPER(s.SSI_UNIT_NAME) LIKE  UPPER(?)";
					query = query + ")";
					defstmt = conn.prepareStatement(query);
					defstmt.setString(1, nonEmptyField);
				}
				if ((defFields.getBorrUnitName().trim() != null && (defFields
						.getBorrUnitName().trim().equals("")))
						&& (defFields.getItpanOfTheUnit().trim() != null && (!defFields
								.getItpanOfTheUnit().trim().equals("")))
						&& (defFields.getChiefPromoterName().trim() != null && defFields
								.getChiefPromoterName().trim().equals(""))
						&& (defFields.getChiefPromoterDOB() != null && defFields
								.getChiefPromoterDOB().toString().trim()
								.equals(""))
						&& (defFields.getItpanOfTheChiefPromoter().trim() != null && defFields
								.getItpanOfTheChiefPromoter().trim().equals(""))
						&& (defFields.getLegalIDOfTheChiefPromoter().trim() != null && defFields
								.getLegalIDOfTheChiefPromoter().trim()
								.equals(""))) {
					nonEmptyField = defFields.getItpanOfTheUnit().trim();
					nonEmptyField = "%" + nonEmptyField + "%";
					onlyOneFieldNonEmpty = true;
					query = query + " and ( ";
					query = query + " UPPER(s.SSI_IT_PAN) LIKE  UPPER(?)";
					query = query + ")";
					defstmt = conn.prepareStatement(query);
					defstmt.setString(1, nonEmptyField);
				}
				if ((defFields.getBorrUnitName().trim() != null && (defFields
						.getBorrUnitName().trim().equals("")))
						&& (defFields.getItpanOfTheUnit().trim() != null && (defFields
								.getItpanOfTheUnit().trim().equals("")))
						&& (defFields.getChiefPromoterName().trim() != null && !defFields
								.getChiefPromoterName().trim().equals(""))
						&& (defFields.getChiefPromoterDOB() != null && defFields
								.getChiefPromoterDOB().toString().trim()
								.equals(""))
						&& (defFields.getItpanOfTheChiefPromoter().trim() != null && defFields
								.getItpanOfTheChiefPromoter().trim().equals(""))
						&& (defFields.getLegalIDOfTheChiefPromoter().trim() != null && defFields
								.getLegalIDOfTheChiefPromoter().trim()
								.equals(""))) {
					nonEmptyField = defFields.getChiefPromoterName().trim();
					nonEmptyField = "%" + nonEmptyField + "%";
					onlyOneFieldNonEmpty = true;
					query = query + " and ( ";
					query = query
							+ " LTRIM(RTRIM(UPPER(p.PMR_CHIEF_FIRST_NAME || p.PMR_CHIEF_MIDDLE_NAME || p.PMR_CHIEF_LAST_NAME))) LIKE UPPER(?)";
					query = query + ")";
					defstmt = conn.prepareStatement(query);
					defstmt.setString(1, nonEmptyField);
				}
				if ((defFields.getBorrUnitName().trim() != null && (defFields
						.getBorrUnitName().trim().equals("")))
						&& (defFields.getItpanOfTheUnit().trim() != null && (defFields
								.getItpanOfTheUnit().trim().equals("")))
						&& (defFields.getChiefPromoterName().trim() != null && defFields
								.getChiefPromoterName().trim().equals(""))
						&& (defFields.getChiefPromoterDOB() != null && !defFields
								.getChiefPromoterDOB().toString().trim()
								.equals(""))
						&& (defFields.getItpanOfTheChiefPromoter().trim() != null && defFields
								.getItpanOfTheChiefPromoter().trim().equals(""))
						&& (defFields.getLegalIDOfTheChiefPromoter().trim() != null && defFields
								.getLegalIDOfTheChiefPromoter().trim()
								.equals(""))) {
					nonEmptyField = defFields.getChiefPromoterDOB().toString()
							.trim();
					onlyOneFieldNonEmpty = true;
					query = query + " and ( ";
					query = query + " p.PMR_CHIEF_DOB = ?";
					query = query + ")";
					defstmt = conn.prepareStatement(query);
					defstmt.setDate(1, new java.sql.Date(defFields
							.getChiefPromoterDOB().getTime()));
				}
				if ((defFields.getBorrUnitName().trim() != null && (defFields
						.getBorrUnitName().trim().equals("")))
						&& (defFields.getItpanOfTheUnit().trim() != null && (defFields
								.getItpanOfTheUnit().trim().equals("")))
						&& (defFields.getChiefPromoterName().trim() != null && defFields
								.getChiefPromoterName().trim().equals(""))
						&& (defFields.getChiefPromoterDOB() != null && defFields
								.getChiefPromoterDOB().toString().trim()
								.equals(""))
						&& (defFields.getItpanOfTheChiefPromoter().trim() != null && !defFields
								.getItpanOfTheChiefPromoter().trim().equals(""))
						&& (defFields.getLegalIDOfTheChiefPromoter().trim() != null && defFields
								.getLegalIDOfTheChiefPromoter().trim()
								.equals(""))) {
					nonEmptyField = defFields.getItpanOfTheChiefPromoter()
							.trim();
					nonEmptyField = "%" + nonEmptyField + "%";
					onlyOneFieldNonEmpty = true;
					query = query + " and ( ";
					query = query + " UPPER(p.PMR_CHIEF_IT_PAN) LIKE  UPPER(?)";
					query = query + ")";
					defstmt = conn.prepareStatement(query);
					defstmt.setString(1, nonEmptyField);
				}
				if ((defFields.getBorrUnitName().trim() != null && (defFields
						.getBorrUnitName().trim().equals("")))
						&& (defFields.getItpanOfTheUnit().trim() != null && (defFields
								.getItpanOfTheUnit().trim().equals("")))
						&& (defFields.getChiefPromoterName().trim() != null && defFields
								.getChiefPromoterName().trim().equals(""))
						&& (defFields.getChiefPromoterDOB() != null && defFields
								.getChiefPromoterDOB().toString().trim()
								.equals(""))
						&& (defFields.getItpanOfTheChiefPromoter().trim() != null && defFields
								.getItpanOfTheChiefPromoter().trim().equals(""))
						&& (defFields.getLegalIDOfTheChiefPromoter().trim() != null && !defFields
								.getLegalIDOfTheChiefPromoter().trim()
								.equals(""))) {
					nonEmptyField = defFields.getLegalIDOfTheChiefPromoter()
							.trim();
					nonEmptyField = "%" + nonEmptyField + "%";
					onlyOneFieldNonEmpty = true;
					query = query + " and ( ";
					query = query
							+ " UPPER(p.PMR_CHIEF_LEGAL_ID) LIKE  UPPER(?)";
					query = query + ")";
					defstmt = conn.prepareStatement(query);
					defstmt.setString(1, nonEmptyField);
				}

				if (!onlyOneFieldNonEmpty) {
					// boolean firstBoolToBeAdded = true;

					query = query + " and ( )";

					if ((defFields.getBorrUnitName().trim() != null && (!defFields
							.getBorrUnitName().trim().equals("")))
							&& (defFields.getBorrUnitNameBoolean() != null && (defFields
									.getBorrUnitNameBoolean()).equals("or"))) {
						// Log.log(Log.DEBUG,"ReportDAO","defaulterReport","index, unit name "
						// + index + ", " + defFields.getBorrUnitName().trim());
						String borrUnitName = defFields.getBorrUnitName()
								.trim();
						borrUnitName = "%" + borrUnitName + "%";
						// String booleanStr =
						// defFields.getBorrUnitNameBoolean();
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Field -> Borrower Name :" + borrUnitName
										+ "Boolean Operator :OR");

						// if(!firstBoolToBeAdded)
						// {
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Control 1");
						query = query.substring(0, query.length() - 1);
						query = query
								+ " UPPER(s.SSI_UNIT_NAME) LIKE  UPPER(?) or ";
						// firstBoolToBeAdded = true;
						query = query + ")";
						// defstmt = conn.prepareStatement(query);
						// defstmt.setString(1,booleanStr);
						// defstmt.setString(2,borrUnitName);
						borrowerUnitNameToBeAdded = true;
						// }
						/*
						 * if(firstBoolToBeAdded) {
						 * Log.log(Log.DEBUG,"ReportDAO"
						 * ,"defaulterReport","Control 2"); query =
						 * query.substring(0,query.length() - 1); query = query
						 * + " UPPER(s.SSI_UNIT_NAME) LIKE  UPPER(?) or";
						 * firstBoolToBeAdded = false; //
						 * defstmt.setString(1,booleanStr); query = query + ")";
						 * // defstmt = conn.prepareStatement(query); //
						 * defstmt.setString(1,borrUnitName);
						 * borrowerUnitNameToBeAdded = true; }
						 */
						counter++;
						borrowerUnitNameIndex = counter;
					}
					if ((defFields.getBorrUnitName().trim() != null && (!defFields
							.getBorrUnitName().trim().equals("")))
							&& (defFields.getBorrUnitNameBoolean() != null && (defFields
									.getBorrUnitNameBoolean()).equals("and"))) {
						// Log.log(Log.DEBUG,"ReportDAO","defaulterReport","index, unit name "
						// + index + ", " + defFields.getBorrUnitName().trim());
						String borrUnitName = defFields.getBorrUnitName()
								.trim();
						borrUnitName = "%" + borrUnitName + "%";
						// String booleanStr =
						// defFields.getBorrUnitNameBoolean();
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Field -> Borrower Name :" + borrUnitName
										+ "Boolean Operator :AND");

						// if(!firstBoolToBeAdded)
						// {
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Control 3");
						query = query.substring(0, query.length() - 1);
						query = query
								+ " UPPER(s.SSI_UNIT_NAME) LIKE  UPPER(?) and ";
						// firstBoolToBeAdded = true;
						query = query + ")";
						// defstmt = conn.prepareStatement(query);
						// defstmt.setString(1,booleanStr);
						// defstmt.setString(2,borrUnitName);
						borrowerUnitNameToBeAdded = true;
						// }
						/*
						 * if(firstBoolToBeAdded) {
						 * Log.log(Log.DEBUG,"ReportDAO"
						 * ,"defaulterReport","Control 4"); query =
						 * query.substring(0,query.length() - 1); query = query
						 * + " UPPER(s.SSI_UNIT_NAME) LIKE  UPPER(?)";
						 * firstBoolToBeAdded = false; //
						 * defstmt.setString(1,booleanStr); query = query + ")";
						 * // defstmt = conn.prepareStatement(query); //
						 * defstmt.setString(1,borrUnitName);
						 * borrowerUnitNameToBeAdded = true; }
						 */
						counter++;
						borrowerUnitNameIndex = counter;
					}
					if ((defFields.getItpanOfTheUnit().trim() != null && (!defFields
							.getItpanOfTheUnit().trim().equals("")))
							&& ((defFields.getItpanOfTheUnitBoolean() != null) && ((defFields
									.getItpanOfTheUnitBoolean()).equals("or")))) {
						String itpanOfTheUnit = defFields.getItpanOfTheUnit()
								.trim();
						itpanOfTheUnit = "%" + itpanOfTheUnit + "%";
						// String booleanStr =
						// defFields.getItpanOfTheUnitBoolean();
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Field -> ITPAN of the Unit :" + itpanOfTheUnit
										+ "Boolean Operator :OR");

						// if(!firstBoolToBeAdded)
						// {
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Control 5");
						query = query.substring(0, query.length() - 1);
						query = query
								+ " UPPER(s.SSI_IT_PAN) LIKE  UPPER(?) or ";
						// firstBoolToBeAdded = true;
						query = query + ")";
						// defstmt = conn.prepareStatement(query);
						// defstmt.setString(1,booleanStr);
						// defstmt.setString(2,itpanOfTheUnit);
						itpanOfUnitToBeAdded = true;
						// }
						/*
						 * if(firstBoolToBeAdded) {
						 * Log.log(Log.DEBUG,"ReportDAO"
						 * ,"defaulterReport","Control 6"); query =
						 * query.substring(0,query.length() - 1); query = query
						 * + " UPPER(s.SSI_IT_PAN) LIKE  UPPER(?)";
						 * firstBoolToBeAdded = false; //
						 * defstmt.setString(1,booleanStr); query = query + ")";
						 * // defstmt = conn.prepareStatement(query); //
						 * defstmt.setString(1,itpanOfTheUnit);
						 * itpanOfUnitToBeAdded = true; }
						 */
						counter++;
						itpanOfUnitIndex = counter;
					}
					if ((defFields.getItpanOfTheUnit().trim() != null && (!defFields
							.getItpanOfTheUnit().trim().equals("")))
							&& ((defFields.getItpanOfTheUnitBoolean() != null) && ((defFields
									.getItpanOfTheUnitBoolean()).equals("and")))) {
						String itpanOfTheUnit = defFields.getItpanOfTheUnit()
								.trim();
						itpanOfTheUnit = "%" + itpanOfTheUnit + "%";
						// String booleanStr =
						// defFields.getItpanOfTheUnitBoolean();
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Field -> ITPAN of the Unit :" + itpanOfTheUnit
										+ "Boolean Operator :AND");

						// if(!firstBoolToBeAdded)
						// {
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Control 7");
						query = query.substring(0, query.length() - 1);
						query = query
								+ " UPPER(s.SSI_IT_PAN) LIKE  UPPER(?) and ";
						// firstBoolToBeAdded = true;
						query = query + ")";
						// defstmt = conn.prepareStatement(query);
						// defstmt.setString(1,booleanStr);
						// defstmt.setString(2,itpanOfTheUnit);
						itpanOfUnitToBeAdded = true;
						// }
						/*
						 * if(firstBoolToBeAdded) {
						 * Log.log(Log.DEBUG,"ReportDAO"
						 * ,"defaulterReport","Control 8"); query =
						 * query.substring(0,query.length() - 1); query = query
						 * + " UPPER(s.SSI_IT_PAN) LIKE  UPPER(?)";
						 * firstBoolToBeAdded = false; //
						 * defstmt.setString(1,booleanStr); query = query + ")";
						 * // defstmt = conn.prepareStatement(query); //
						 * defstmt.setString(1,itpanOfTheUnit);
						 * itpanOfUnitToBeAdded = true; }
						 */
						counter++;
						itpanOfUnitIndex = counter;
					}
					if ((defFields.getChiefPromoterName().trim() != null && !defFields
							.getChiefPromoterName().trim().equals(""))
							&& ((defFields.getChiefPromoterNameBoolean() != null) && ((defFields
									.getChiefPromoterNameBoolean())
									.equals("or")))) {
						String chiefPromoterName = defFields
								.getChiefPromoterName().trim();
						// String chiefPromoterName1 =
						// "%"+chiefPromoterName+"%";
						chiefPromoterName = "%" + chiefPromoterName + "%";
						// String booleanStr =
						// defFields.getChiefPromoterNameBoolean();
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Field -> Chief Promoter Name :"
										+ chiefPromoterName
										+ "Boolean Operator :OR");

						// if(!firstBoolToBeAdded)
						// {
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Control 9");
						query = query.substring(0, query.length() - 1);
						query = query
								+ " LTRIM(RTRIM(UPPER(p.PMR_CHIEF_FIRST_NAME || p.PMR_CHIEF_MIDDLE_NAME || p.PMR_CHIEF_LAST_NAME))) LIKE  LTRIM(RTRIM(UPPER(?))) or ";
						// firstBoolToBeAdded = true;
						query = query + ")";
						// defstmt = conn.prepareStatement(query);
						// defstmt.setString(1,booleanStr);
						// defstmt.setString(2,chiefPromoterName);
						chiefPromoterNameToBeAdded = true;
						// }
						/*
						 * if(firstBoolToBeAdded) {
						 * Log.log(Log.DEBUG,"ReportDAO"
						 * ,"defaulterReport","Control 10"); query =
						 * query.substring(0,query.length() - 1); query = query
						 * +
						 * " LTRIM(RTRIM(UPPER(p.PMR_CHIEF_FIRST_NAME || p.PMR_CHIEF_MIDDLE_NAME || p.PMR_CHIEF_LAST_NAME))) LIKE  LTRIM(RTRIM(UPPER(?)))"
						 * ; firstBoolToBeAdded = false; //
						 * defstmt.setString(1,booleanStr); query = query + ")";
						 * // defstmt = conn.prepareStatement(query); //
						 * defstmt.setString(1,chiefPromoterName);
						 * chiefPromoterNameToBeAdded = true; }
						 */
						counter++;
						chiefPromoterNameIndex = counter;
					}
					if ((defFields.getChiefPromoterName().trim() != null && !defFields
							.getChiefPromoterName().trim().equals(""))
							&& ((defFields.getChiefPromoterNameBoolean() != null) && ((defFields
									.getChiefPromoterNameBoolean())
									.equals("and")))) {
						String chiefPromoterName = defFields
								.getChiefPromoterName().trim();
						// String chiefPromoterName1 =
						// "%"+chiefPromoterName+"%";
						chiefPromoterName = "%" + chiefPromoterName + "%";
						// String booleanStr =
						// defFields.getChiefPromoterNameBoolean();
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Field -> Chief Promoter Name :"
										+ chiefPromoterName
										+ "Boolean Operator :AND");

						// if(!firstBoolToBeAdded)
						// {
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Control 11");
						query = query.substring(0, query.length() - 1);
						query = query
								+ " LTRIM(RTRIM(UPPER(p.PMR_CHIEF_FIRST_NAME || p.PMR_CHIEF_MIDDLE_NAME || p.PMR_CHIEF_LAST_NAME))) LIKE  LTRIM(RTRIM(UPPER(?))) and ";
						// firstBoolToBeAdded = true;
						query = query + ")";
						// defstmt = conn.prepareStatement(query);
						// defstmt.setString(1,booleanStr);
						// defstmt.setString(2,chiefPromoterName);
						chiefPromoterNameToBeAdded = true;
						// }
						/*
						 * if(firstBoolToBeAdded) {
						 * Log.log(Log.DEBUG,"ReportDAO"
						 * ,"defaulterReport","Control 12"); query =
						 * query.substring(0,query.length() - 1); query = query
						 * +
						 * " LTRIM(RTRIM(UPPER(p.PMR_CHIEF_FIRST_NAME || p.PMR_CHIEF_MIDDLE_NAME || p.PMR_CHIEF_LAST_NAME))) LIKE  LTRIM(RTRIM(UPPER(?)))"
						 * ; firstBoolToBeAdded = false; //
						 * defstmt.setString(1,booleanStr); query = query + ")";
						 * // defstmt = conn.prepareStatement(query); //
						 * defstmt.setString(1,chiefPromoterName);
						 * chiefPromoterNameToBeAdded = true; }
						 */
						counter++;
						chiefPromoterNameIndex = counter;
					}
					if ((defFields.getChiefPromoterDOB() != null && !defFields
							.getChiefPromoterDOB().toString().trim().equals(""))
							&& ((defFields.getChiefPromoterDOBBoolean() != null) && ((defFields
									.getChiefPromoterDOBBoolean()).equals("or")))) {
						// String booleanStr =
						// defFields.getChiefPromoterDOBBoolean();
						java.util.Date dob = (java.util.Date) defFields
								.getChiefPromoterDOB();
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Field -> Chief Promoter DOB :" + dob
										+ "Boolean Operator :OR");
						// index++;

						// defstmt.setDate(index, new
						// java.sql.Date(defFields.getChiefPromoterDOB().getTime()));
						// index++;

						// if(!firstBoolToBeAdded)
						// {
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Control 13");
						query = query.substring(0, query.length() - 1);
						query = query + " p.PMR_CHIEF_DOB = ? or ";
						// firstBoolToBeAdded = true;
						query = query + ")";
						// defstmt = conn.prepareStatement(query);
						// defstmt.setString(1,booleanStr);
						// defstmt.setDate(2,new java.sql.Date(dob.getTime()));
						chiefPromoterDtOfBirthToBeAdded = true;
						// }
						/*
						 * if(firstBoolToBeAdded) {
						 * Log.log(Log.DEBUG,"ReportDAO"
						 * ,"defaulterReport","Control 14"); query =
						 * query.substring(0,query.length() - 1); query = query
						 * + " p.PMR_CHIEF_DOB = ?"; firstBoolToBeAdded = false;
						 * // defstmt.setString(1,booleanStr); query = query +
						 * ")"; // defstmt = conn.prepareStatement(query); //
						 * defstmt.setDate(1,new java.sql.Date(dob.getTime()));
						 * chiefPromoterDtOfBirthToBeAdded = true; }
						 */
						counter++;
						chiefPromoterDtOfBirthIndex = counter;
					}
					if ((defFields.getChiefPromoterDOB() != null && !defFields
							.getChiefPromoterDOB().toString().trim().equals(""))
							&& ((defFields.getChiefPromoterDOBBoolean() != null) && ((defFields
									.getChiefPromoterDOBBoolean())
									.equals("and")))) {
						// String booleanStr =
						// defFields.getChiefPromoterDOBBoolean();
						java.util.Date dob = (java.util.Date) defFields
								.getChiefPromoterDOB();
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Field -> Chief Promoter DOB :" + dob
										+ "Boolean Operator :AND");

						// if(!firstBoolToBeAdded)
						// {
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Control 15");
						query = query.substring(0, query.length() - 1);
						query = query + " p.PMR_CHIEF_DOB = ? and ";
						// firstBoolToBeAdded = true;
						query = query + ")";
						// defstmt = conn.prepareStatement(query);
						// defstmt.setString(1,booleanStr);
						// defstmt.setDate(2,new java.sql.Date(dob.getTime()));
						chiefPromoterDtOfBirthToBeAdded = true;
						// }
						/*
						 * if(firstBoolToBeAdded) {
						 * Log.log(Log.DEBUG,"ReportDAO"
						 * ,"defaulterReport","Control 16"); query =
						 * query.substring(0,query.length() - 1); query = query
						 * + " p.PMR_CHIEF_DOB = ?"; firstBoolToBeAdded = false;
						 * // defstmt.setString(1,booleanStr); query = query +
						 * ")"; // defstmt = conn.prepareStatement(query); //
						 * defstmt.setDate(1,new java.sql.Date(dob.getTime()));
						 * chiefPromoterDtOfBirthToBeAdded = true; }
						 */
						counter++;
						chiefPromoterDtOfBirthIndex = counter;
					}
					if ((defFields.getItpanOfTheChiefPromoter().trim() != null && !defFields
							.getItpanOfTheChiefPromoter().trim().equals(""))
							&& ((defFields.getItpanOfTheChiefPromoterBoolean() != null) && ((defFields
									.getItpanOfTheChiefPromoterBoolean())
									.equals("or")))) {
						String itpanOfTheChiefPromoter = defFields
								.getItpanOfTheChiefPromoter().trim();
						itpanOfTheChiefPromoter = "%" + itpanOfTheChiefPromoter
								+ "%";
						// String booleanStr =
						// defFields.getItpanOfTheChiefPromoterBoolean();
						// String itpanOfTheChiefPromoter1 =
						// "%"+itpanOfTheChiefPromoter+"%";
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Field -> ITPAN of Chief Promoter DOB :"
										+ itpanOfTheChiefPromoter
										+ "Boolean Operator :OR");

						// if(!firstBoolToBeAdded)
						// {
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Control 17");
						query = query.substring(0, query.length() - 1);
						query = query
								+ " UPPER(p.PMR_CHIEF_IT_PAN) LIKE  UPPER(?) or ";
						// firstBoolToBeAdded = true;
						query = query + ")";
						// defstmt = conn.prepareStatement(query);
						// defstmt.setString(1,booleanStr);
						// defstmt.setString(2,itpanOfTheChiefPromoter);
						itpanOfChiefPromoterToBeAdded = true;
						// }
						/*
						 * if(firstBoolToBeAdded) {
						 * Log.log(Log.DEBUG,"ReportDAO"
						 * ,"defaulterReport","Control 18"); query =
						 * query.substring(0,query.length() - 1); query = query
						 * + " UPPER(p.PMR_CHIEF_IT_PAN) LIKE  UPPER(?)";
						 * firstBoolToBeAdded = false; //
						 * defstmt.setString(1,booleanStr); query = query + ")";
						 * // defstmt = conn.prepareStatement(query); //
						 * defstmt.setString(1,itpanOfTheChiefPromoter);
						 * itpanOfChiefPromoterToBeAdded = true; }
						 */
						counter++;
						itpanOfChiefPromoterIndex = counter;
					}
					if ((defFields.getItpanOfTheChiefPromoter().trim() != null && !defFields
							.getItpanOfTheChiefPromoter().trim().equals(""))
							&& ((defFields.getItpanOfTheChiefPromoterBoolean() != null) && ((defFields
									.getItpanOfTheChiefPromoterBoolean())
									.equals("and")))) {
						String itpanOfTheChiefPromoter = defFields
								.getItpanOfTheChiefPromoter().trim();
						itpanOfTheChiefPromoter = "%" + itpanOfTheChiefPromoter
								+ "%";
						// String booleanStr =
						// defFields.getItpanOfTheChiefPromoterBoolean();
						// String itpanOfTheChiefPromoter1 =
						// "%"+itpanOfTheChiefPromoter+"%";
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Field -> ITPAN of Chief Promoter DOB :"
										+ itpanOfTheChiefPromoter
										+ "Boolean Operator :AND");

						// if(!firstBoolToBeAdded)
						// {
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"Control 19");
						query = query.substring(0, query.length() - 1);
						query = query
								+ " UPPER(p.PMR_CHIEF_IT_PAN) LIKE  UPPER(?) and ";
						// firstBoolToBeAdded = true;
						query = query + ")";
						// defstmt = conn.prepareStatement(query);
						// defstmt.setString(1,booleanStr);
						// defstmt.setString(2,itpanOfTheChiefPromoter);
						itpanOfChiefPromoterToBeAdded = true;
						// }
						/*
						 * if(firstBoolToBeAdded) {
						 * Log.log(Log.DEBUG,"ReportDAO"
						 * ,"defaulterReport","Control 20"); query =
						 * query.substring(0,query.length() - 1); query = query
						 * + " UPPER(p.PMR_CHIEF_IT_PAN) LIKE  UPPER(?)";
						 * firstBoolToBeAdded = false; //
						 * defstmt.setString(1,booleanStr); query = query + ")";
						 * // defstmt = conn.prepareStatement(query); //
						 * defstmt.setString(1,itpanOfTheChiefPromoter);
						 * itpanOfChiefPromoterToBeAdded = true; }
						 */
						counter++;
						itpanOfChiefPromoterIndex = counter;
					}
					if ((defFields.getLegalIDOfTheChiefPromoter().trim() != null && !defFields
							.getLegalIDOfTheChiefPromoter().trim().equals(""))) {
						String legalIDOfTheChiefPromoter = defFields
								.getLegalIDOfTheChiefPromoter().trim();
						legalIDOfTheChiefPromoter = "%"
								+ legalIDOfTheChiefPromoter + "%";
						query = query.substring(0, query.length() - 1);
						query = query
								+ " UPPER(p.PMR_CHIEF_LEGAL_ID) LIKE  UPPER(?) and ";
						query = query + ")";
						counter++;
						legalIdOfChiefPromoterToBeAdded = true;
						legalIdOfChiefPromoterIndex = counter;
					}
					Log.log(Log.DEBUG, "1 -> ReportDAO", "defaulterReport",
							"Printing the Query :" + query);
					int indexOfLastAnd = query.lastIndexOf("and".trim());
					int indexOfLastOr = query.lastIndexOf("or".trim());

					Log.log(Log.DEBUG, "1 -> ReportDAO", "defaulterReport",
							"indexOfLastAnd :" + indexOfLastAnd);
					boolean truncatedTheQuery = false;
					if (indexOfLastOr > indexOfLastAnd) {
						if ((indexOfLastOr != -1) && (!truncatedTheQuery)) {
							String firstPartOfQuery = query.substring(0,
									indexOfLastOr);
							String secPartOfQuery = query.substring(
									indexOfLastOr + 3, query.length());
							query = firstPartOfQuery + secPartOfQuery;
							truncatedTheQuery = true;
						}
					} else {
						if ((indexOfLastAnd != -1) && (!truncatedTheQuery)) {
							String firstPartOfQuery = query.substring(0,
									indexOfLastAnd);
							String secPartOfQuery = query.substring(
									indexOfLastAnd + 3, query.length());
							query = firstPartOfQuery + secPartOfQuery;
							truncatedTheQuery = true;
						}
					}

					Log.log(Log.DEBUG, "1 -> ReportDAO", "defaulterReport",
							"indexOfLastOr :" + indexOfLastOr);

					defstmt = conn.prepareStatement(query);
					String borrUnitName = defFields.getBorrUnitName().trim();
					borrUnitName = "%" + borrUnitName + "%";
					String itpanOfTheUnit = defFields.getItpanOfTheUnit()
							.trim();
					itpanOfTheUnit = "%" + itpanOfTheUnit + "%";
					String chiefPromoterName = defFields.getChiefPromoterName()
							.trim();
					// String chiefPromoterName1 = "%"+chiefPromoterName+"%";
					chiefPromoterName = "%" + chiefPromoterName + "%";
					java.util.Date dob = (java.util.Date) defFields
							.getChiefPromoterDOB();
					String itpanOfTheChiefPromoter = defFields
							.getItpanOfTheChiefPromoter().trim();
					itpanOfTheChiefPromoter = "%" + itpanOfTheChiefPromoter
							+ "%";
					String legalIDOfTheChiefPromoter = defFields
							.getLegalIDOfTheChiefPromoter().trim();
					legalIDOfTheChiefPromoter = "%" + legalIDOfTheChiefPromoter
							+ "%";

					if (borrowerUnitNameToBeAdded) {
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"borrowerUnitNameIndex "
										+ borrowerUnitNameIndex);
						defstmt.setString(borrowerUnitNameIndex, borrUnitName);
					}
					if (itpanOfUnitToBeAdded) {
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"itpanOfUnitIndex " + itpanOfUnitIndex);
						defstmt.setString(itpanOfUnitIndex, itpanOfTheUnit);
					}
					if (chiefPromoterNameToBeAdded) {
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"chiefPromoterNameIndex "
										+ chiefPromoterNameIndex);
						defstmt.setString(chiefPromoterNameIndex,
								chiefPromoterName);
					}
					if (chiefPromoterDtOfBirthToBeAdded) {
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"chiefPromoterDtOfBirthIndex "
										+ chiefPromoterDtOfBirthIndex);
						defstmt.setDate(chiefPromoterDtOfBirthIndex,
								new java.sql.Date(dob.getTime()));
					}
					if (itpanOfChiefPromoterToBeAdded) {
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"itpanOfChiefPromoterIndex "
										+ itpanOfChiefPromoterIndex);
						defstmt.setString(itpanOfChiefPromoterIndex,
								itpanOfTheChiefPromoter);
					}
					if (legalIdOfChiefPromoterToBeAdded) {
						Log.log(Log.DEBUG, "ReportDAO", "defaulterReport",
								"legalIdOfChiefPromoterIndex "
										+ legalIdOfChiefPromoterIndex);
						defstmt.setString(legalIdOfChiefPromoterIndex,
								legalIDOfTheChiefPromoter);
					}
				}

				// Log.log(Log.DEBUG,"ReportDAO","defaulterReport","query after setting "
				// + defstmt.toString());
				Log.log(Log.DEBUG, "2 -> ReportDAO", "defaulterReport",
						"Printing the Query :" + query);

				defResult = defstmt.executeQuery();

				// System.out.println("Executed query ");

				while (defResult.next()) {
					defaulterFieldsFromDB = new DefaulterInputFields();

					// System.out.println("Entered in the result set ");
					defaulterFieldsFromDB.setBorrUnitName(defResult
							.getString(2));
					Log.log(Log.INFO, "ReportsManager", "getDefaulterReport",
							"defaulterFieldsFromDB.setBorrUnitName() :"
									+ defaulterFieldsFromDB.getBorrUnitName());

					defaulterFieldsFromDB.setItpanOfTheUnit(defResult
							.getString(3));
					Log.log(Log.INFO, "ReportsManager", "getDefaulterReport",
							"defaulterFieldsFromDB.setItpanOfTheUnit() :"
									+ defaulterFieldsFromDB.getItpanOfTheUnit());

					defaulterFieldsFromDB.setChiefPromoterName(defResult
							.getString(5));
					Log.log(Log.INFO,
							"ReportsManager",
							"getDefaulterReport",
							"defaulterFieldsFromDB.setChiefPromoterName() :"
									+ defaulterFieldsFromDB
											.getChiefPromoterName());

					defaulterFieldsFromDB.setChiefPromoterDOB(defResult
							.getDate(9));
					Log.log(Log.INFO,
							"ReportsManager",
							"getDefaulterReport",
							"defaulterFieldsFromDB.setChiefPromoterDOB() :"
									+ defaulterFieldsFromDB
											.getChiefPromoterDOB());

					defaulterFieldsFromDB.setItpanOfTheChiefPromoter(defResult
							.getString(13));
					Log.log(Log.INFO,
							"ReportsManager",
							"getDefaulterReport",
							"defaulterFieldsFromDB.setItpanOfTheChiefPromoter() :"
									+ defaulterFieldsFromDB
											.getItpanOfTheChiefPromoter());

					defaulterFieldsFromDB
							.setLegalIDOfTheChiefPromoter(defResult
									.getString(14));
					Log.log(Log.INFO,
							"ReportsManager",
							"getDefaulterReport",
							"defaulterFieldsFromDB.setLegalIDOfTheChiefPromoter() :"
									+ defaulterFieldsFromDB
											.getLegalIDOfTheChiefPromoter());

					defaulterFieldsFromDB.setAddress(defResult.getString(4));
					Log.log(Log.INFO, "ReportsManager", "getDefaulterReport",
							"defaulterFieldsFromDB.setAddress() :"
									+ defaulterFieldsFromDB.getAddress());

					defaulterFieldsFromDB.setFirstPromoterName(defResult
							.getString(6));
					Log.log(Log.INFO,
							"ReportsManager",
							"getDefaulterReport",
							"defaulterFieldsFromDB.setFirstPromoterName() :"
									+ defaulterFieldsFromDB
											.getFirstPromoterName());

					defaulterFieldsFromDB.setSecondPromoterName(defResult
							.getString(7));
					Log.log(Log.INFO,
							"ReportsManager",
							"getDefaulterReport",
							"defaulterFieldsFromDB.setSecondPromoterName() :"
									+ defaulterFieldsFromDB
											.getSecondPromoterName());

					defaulterFieldsFromDB.setThirdPromoterName(defResult
							.getString(8));
					Log.log(Log.INFO,
							"ReportsManager",
							"getDefaulterReport",
							"defaulterFieldsFromDB.setThirdPromoterName() :"
									+ defaulterFieldsFromDB
											.getThirdPromoterName());

					defaulterFieldsFromDB.setFrPromoterDOB(defResult
							.getDate(10));
					Log.log(Log.INFO, "ReportsManager", "getDefaulterReport",
							"defaulterFieldsFromDB.setFrPromoterDOB() :"
									+ defaulterFieldsFromDB.getFrPromoterDOB());

					defaulterFieldsFromDB.setScPromoterDOB(defResult
							.getDate(11));
					Log.log(Log.INFO, "ReportsManager", "getDefaulterReport",
							"defaulterFieldsFromDB.setScPromoterDOB() :"
									+ defaulterFieldsFromDB.getScPromoterDOB());

					defaulterFieldsFromDB.setTdPromoterDOB(defResult
							.getDate(12));
					Log.log(Log.INFO, "ReportsManager", "getDefaulterReport",
							"defaulterFieldsFromDB.setTdPromoterDOB() :"
									+ defaulterFieldsFromDB.getTdPromoterDOB());

					defaulterFieldsFromDB.setOperatingOffName(defResult
							.getString(15));
					Log.log(Log.INFO,
							"ReportsManager",
							"getDefaulterReport",
							"defaulterFieldsFromDB.setOperatingOffName() :"
									+ defaulterFieldsFromDB
											.getOperatingOffName());

					defaulterFieldsFromDB.setMli(defResult.getString(16));
					Log.log(Log.INFO, "ReportsManager", "getDefaulterReport",
							"defaulterFieldsFromDB.setMli() :"
									+ defaulterFieldsFromDB.getMli());
					Log.log(Log.INFO, "ReportsManager", "getDefaulterReport",
							"************************************************************");

					defArray.add(defaulterFieldsFromDB);
				}

				defResult.close();
				defResult = null;
				defstmt.close();
				defstmt = null;
			} catch (Exception e) {
				// System.out.println("Entered in the catch block ");
				e.printStackTrace();
				throw new DatabaseException(e.getMessage());
			}

			finally {
				DBConnection.freeConnection(conn);
				// System.out.println("Removed the connection ");
			}
		}

		Log.log(Log.INFO, "ReportsDAO", "defaulterReport", "Exited");
		// System.out.println("Exited from the defaulter report ");
		return defArray;
	}

	/**
	 * 
	 * @param claimRefNumber
	 * @param status
	 * @param internetUser
	 * @return
	 * @throws com.cgtsi.common.DatabaseException
	 */
	public Map getClaimAttachments(String claimRefNumber, String status,
			boolean internetUser) throws DatabaseException {

		Log.log(Log.INFO, "ReportsDAO", "getClaimAttachments", "Entered");

		Map attachments = new HashMap();

		Connection connection = DBConnection.getConnection(false);
		try {
			Log.log(Log.DEBUG, "ReportsDAO", "getClaimAttachments",
					"claimRefNumber,status,internetUser " + claimRefNumber
							+ "," + status + ", " + internetUser);

			Statement statement = connection.createStatement();
			ResultSet results = null;
			CallableStatement callable = null;

			if (status.equalsIgnoreCase(ClaimConstants.CLM_APPROVAL_STATUS)
					|| status
							.equalsIgnoreCase(ClaimConstants.CLM_REJECT_STATUS)) {
				/*
				 * Approved and Rejected claim applications will be available in
				 * intranet and repusers. Since table name is same in both the
				 * places, the following code will work irrespective of users.
				 * (internet/intranet)
				 */
				results = statement
						.executeQuery("SELECT CFT_RECALL_NOTICE_FILE,CFT_RECALL_FILE_NAME,CFT_LEGAL_PROCEED_FILE,CFT_LEGAL_FILE_NAME FROM CLAIM_FILES where CLM_REF_NO= '"
								+ claimRefNumber + "'");
			} else {
				/*
				 * For New, Hold and Forward status, attachment files will be
				 * available only in Temp. If internet user logs in, table name
				 * will be temp. Whereas, for intranet users, it is throw a
				 * GLOBAL temp table.
				 */
				if (internetUser) {
					results = statement
							.executeQuery("SELECT CFT_RECALL_NOTICE_FILE,CFT_RECALL_FILE_NAME,CFT_LEGAL_PROCEED_FILE,CFT_LEGAL_FILE_NAME FROM CLAIM_FILES_TEMP where CLM_REF_NO= '"
									+ claimRefNumber + "'");
				} else {
					callable = connection
							.prepareCall("{?=call packGetClmfiles.funcGetClmfiles(?,?,?)}");

					callable.registerOutParameter(1, Types.INTEGER);
					callable.registerOutParameter(3, Constants.CURSOR);
					callable.registerOutParameter(4, Types.VARCHAR);

					callable.setString(2, claimRefNumber);

					callable.execute();

					int errorCode = callable.getInt(1);
					String error = callable.getString(4);

					Log.log(Log.DEBUG, "ReportsDAO", "getClaimAttachments",
							"Intranet user..New/Hold/Forward statuses: error,errorCode "
									+ error + "," + errorCode);

					if (errorCode == Constants.FUNCTION_FAILURE) {
						callable.close();
						callable = null;
						Log.log(Log.ERROR, "ReportsDAO", "getClaimAttachments",
								"Intranet user..New/Hold/Forward statuses: error "
										+ error);

						throw new DatabaseException(
								"Unable to get Attachments ");
					}

					results = (ResultSet) callable.getObject(3);
				}
			}

			byte[] bytesArray = null;
			while (results.next()) {
				// get the Recall notice attachment
				Blob blob = results.getBlob(1);
				BufferedInputStream inputStream = null;
				if (blob != null) {
					inputStream = new BufferedInputStream(
							blob.getBinaryStream());

					// gets the bytes array from the input stream
					bytesArray = readBytes(inputStream);
				}

				Log.log(Log.DEBUG, "ReportsDAO", "getClaimAttachments",
						"Recall Notice: bytesArray " + bytesArray);
				// If any file is attached, Add it to the Map
				if (bytesArray != null && bytesArray.length != 0) {
					Log.log(Log.DEBUG, "ReportsDAO", "getClaimAttachments",
							"Recall Notice: bytesArray Length "
									+ bytesArray.length);

					UploadFileProperties uploadFile = new UploadFileProperties();
					uploadFile.setFileSize(bytesArray);
					uploadFile.setFileName(results.getString(2));
					attachments.put("recallNotice", uploadFile);
				}
				if (inputStream != null) {
					inputStream.close();
				}

				blob = null;

				// get the Legal Details attachment
				bytesArray = null;
				blob = results.getBlob(3);
				if (blob != null) {
					inputStream = new BufferedInputStream(
							blob.getBinaryStream());
					// gets the bytes array from the input stream
					bytesArray = readBytes(inputStream);

				}

				Log.log(Log.DEBUG, "ReportsDAO", "getClaimAttachments",
						"Legal Details: bytesArray " + bytesArray);
				// If any file is attached, Add it to the Map
				if (bytesArray != null && bytesArray.length != 0) {
					Log.log(Log.DEBUG, "ReportsDAO", "getClaimAttachments",
							"Legal Details: bytesArray length "
									+ bytesArray.length);

					UploadFileProperties uploadFile = new UploadFileProperties();
					uploadFile.setFileSize(bytesArray);
					uploadFile.setFileName(results.getString(4));
					attachments.put("legalDetails", uploadFile);
				}
				if (inputStream != null) {
					inputStream.close();
				}
				bytesArray = null;
				blob = null;
			}

			results.close();
			results = null;
			statement.close();
			statement = null;
			connection.commit();
			if (callable != null) {
				callable.close();
				callable = null;
			}
		} catch (SQLException e) {
			Log.log(Log.ERROR, "ReportsDAO", "getClaimAttachments", "Error "
					+ e.getMessage());
			Log.logException(e);
		} catch (FileNotFoundException e) {
			Log.log(Log.ERROR, "ReportsDAO", "getClaimAttachments", "Error "
					+ e.getMessage());
			Log.logException(e);
		} catch (IOException e) {
			Log.log(Log.ERROR, "ReportsDAO", "getClaimAttachments", "Error "
					+ e.getMessage());
			Log.logException(e);
		} finally {
			DBConnection.freeConnection(connection);
		}

		Log.log(Log.INFO, "ReportsDAO", "getClaimAttachments", "Exited");

		return attachments;
	}

	private byte[] readBytes(InputStream inputStream) {
		Log.log(Log.DEBUG, "ReportsDAO", "readBytes", "Entered");

		ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
		byte[] byteArray = null;
		try {
			byte[] readBlocks = new byte[1024];

			while (inputStream.read(readBlocks) != -1) {
				byteOut.write(readBlocks, 0, readBlocks.length);
			}
			byteArray = byteOut.toByteArray();
			byteOut.close();

		} catch (IOException e) {
			// ioException.printStackTrace();
			Log.log(Log.ERROR, "ReportsDAO", "readBytes",
					"Error is " + e.getMessage());
			Log.logException(e);
		}

		Log.log(Log.DEBUG, "ReportsDAO", "readBytes", "Exited");

		return byteArray;
	}

	/*
	 * Sukant PathInfotech This method returns a ClaimApplication object for the
	 * given Claim Reference Number if the Claim Application is New or put on
	 * Hold or Forwarded
	 */

	public ClaimApplication displayClmRefNumberDetail(String claimRefNumber,
			String flag, String memId) throws DatabaseException {
		CPDAO cpdao = new CPDAO();
		ClaimApplication claimapplication = new ClaimApplication();
		PreparedStatement prepStatement = null;
		Connection conn = null;
		ResultSet rs = null;
		String query = null;
		String memberId = null;
		String borrowerId = null;
		String installmentFlag = null;
		String cgclan = null;
		java.util.Date clmApprvdDt = null;

		String bankId = memId.substring(0, 4);
		// String zoneId = memId.substring(4,8);
		// String branchId = memId.substring(8,12);

		try {
			conn = DBConnection.getConnection();
			if (bankId.equals("0000")) {
				query = "select c.bid, c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id, c.clm_installment_flag, c.cgclan, c.clm_approved_dt"
						+ " from claim_detail c"
						+ " where LTRIM(RTRIM(UPPER(c.clm_ref_no))) = ?"
						+ " group by c.bid,"
						+ " c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id,"
						+ " c.clm_installment_flag,"
						+ " c.cgclan,"
						+ " c.clm_approved_dt";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select c.bid, c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id, c.clm_installment_flag, c.cgclan, c.clm_approved_dt"
						+ " from claim_detail c"
						+ " where LTRIM(RTRIM(UPPER(c.clm_ref_no))) = ?"
						+ " group by c.bid,"
						+ " c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id,"
						+ " c.clm_installment_flag,"
						+ " c.cgclan,"
						+ " c.clm_approved_dt";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();
			// Retrieving the Member Id and Borrower Id
			while (rs.next()) {
				borrowerId = (String) rs.getString(1);
				memberId = (String) rs.getString(2);
				installmentFlag = (String) rs.getString(3);
				cgclan = (String) rs.getString(4);
				clmApprvdDt = (java.util.Date) rs.getDate(5);

			}
			rs.close();
			rs = null;

			claimapplication.setBorrowerId(borrowerId);
			if (installmentFlag != null) {
				if (installmentFlag.equals(ClaimConstants.FIRST_INSTALLMENT)) {
					claimapplication.setClaimRefNumber(claimRefNumber);
					claimapplication.setFirstInstallment(true);
				} else if (installmentFlag
						.equals(ClaimConstants.SECOND_INSTALLMENT)) {
					claimapplication.setClaimApprovedDt(clmApprvdDt);
					claimapplication.setSecondInstallment(true);
					claimapplication.setCgclan(cgclan);
					claimapplication.setClaimRefNumber(claimRefNumber);
				}
			}
			// query = null;
			// rs = null;
			// prepStatement = null;
			// System.out.println("Control 2");
			// Getting Member Details
			String bankId1 = memberId.substring(0, 4);
			String zoneId1 = memberId.substring(4, 8);
			String branchId1 = memberId.substring(8, 12);
			MemberInfo memberdetails = cpdao.getMemberInfoDetails(bankId1,
					zoneId1, branchId1);

			// Getting Borrower Details
			BorrowerInfo borrowerdetails = cpdao.getBorrowerDetails(borrowerId);

			// Getting NPA Details
			java.util.Date npaclassifieddt = null;
			java.util.Date cgtsireportingdt = null;
			String reasonfornpa = null;
			String whetherBidIsWillfulDefaulter = null;
			String whetherNPAWrittenOff = null;
			java.util.Date npaWrittenOffDt = null;
			java.util.Date recConclusionDt = null;

			HashMap npadetails = cpdao.isNPADetailsAvailable(borrowerId);
			// String willfulDefaulter = null;
			// boolean npaDtlsAvl = false;

			HashMap npadtlMainTable = (HashMap) npadetails
					.get(ClaimConstants.CLM_MAIN_TABLE);
			if (npadtlMainTable != null) {
				if (npadtlMainTable.size() > 0) {
					npaclassifieddt = (java.util.Date) npadtlMainTable
							.get(ClaimConstants.NPA_CLASSIFIED_DT);
					cgtsireportingdt = (java.util.Date) npadtlMainTable
							.get(ClaimConstants.NPA_REPORTING_DT);
					reasonfornpa = (String) npadtlMainTable
							.get(ClaimConstants.REASONS_FOR_TURNING_NPA);
					whetherBidIsWillfulDefaulter = (String) npadtlMainTable
							.get(ClaimConstants.WILLFUL_DEFAULTER);
					whetherNPAWrittenOff = (String) npadtlMainTable
							.get(ClaimConstants.WHETHER_NPA_WRITTEN_OFF);
					npaWrittenOffDt = (java.util.Date) npadtlMainTable
							.get(ClaimConstants.NPA_WRITTEN_OFF_DATE);
					recConclusionDt = (java.util.Date) npadtlMainTable
							.get(ClaimConstants.NPA_REC_CONCLUSION_DT);
				}
			}

			HashMap npadtltemptable = (HashMap) npadetails
					.get(ClaimConstants.CLM_TEMP_TABLE);
			if (npadtltemptable != null) {
				if (npadtltemptable.size() > 0) {
					npaclassifieddt = (java.util.Date) npadtltemptable
							.get(ClaimConstants.NPA_CLASSIFIED_DT);
					cgtsireportingdt = (java.util.Date) npadtltemptable
							.get(ClaimConstants.NPA_REPORTING_DT);
					reasonfornpa = (String) npadtltemptable
							.get(ClaimConstants.REASONS_FOR_TURNING_NPA);
					whetherBidIsWillfulDefaulter = (String) npadtltemptable
							.get(ClaimConstants.WILLFUL_DEFAULTER);
					whetherNPAWrittenOff = (String) npadtltemptable
							.get(ClaimConstants.WHETHER_NPA_WRITTEN_OFF);
					npaWrittenOffDt = (java.util.Date) npadtltemptable
							.get(ClaimConstants.NPA_WRITTEN_OFF_DATE);
					recConclusionDt = (java.util.Date) npadtltemptable
							.get(ClaimConstants.NPA_REC_CONCLUSION_DT);
				}
			}

			// Getting the Legal Proceedings Detail
			LegalProceedingsDetail legalproceedingdetail = cpdao
					.isLegalProceedingsDetailAvl(borrowerId);

			/*
			 * Query for getting the Term Loan/ Composite Loan Details for the
			 * Claim Ref Number
			 */
			Vector termloandetails = new Vector();
			if (bankId.equals("0000")) {
				query = "select ctd.cgpan," + " ctd.ctd_last_disbursement_dt,"
						+ " ctd.ctd_principal_repay_amt,"
						+ " ctd.ctd_interest_repay_amt,"
						+ " ctd.ctd_npa_outstanding_amt,"
						+ " ctd.ctd_legal_outstanding_amt,"
						+ " ctd.ctd_first_clm_dt_outstand_amt,"
						+ " ctd.ctd_second_clm_dt_outstand_amt"
						+ " from claim_tc_detail_temp@cginter ctd"
						+ " where LTRIM(RTRIM(UPPER(ctd.clm_ref_no))) = ?"
						+ " group by ctd.cgpan,"
						+ " ctd.ctd_last_disbursement_dt,"
						+ " ctd.ctd_principal_repay_amt,"
						+ " ctd.ctd_interest_repay_amt,"
						+ " ctd.ctd_npa_outstanding_amt,"
						+ " ctd.ctd_legal_outstanding_amt,"
						+ " ctd.ctd_first_clm_dt_outstand_amt,"
						+ " ctd.ctd_second_clm_dt_outstand_amt";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select ctd.cgpan," + " ctd.ctd_last_disbursement_dt,"
						+ " ctd.ctd_principal_repay_amt,"
						+ " ctd.ctd_interest_repay_amt,"
						+ " ctd.ctd_npa_outstanding_amt,"
						+ " ctd.ctd_legal_outstanding_amt,"
						+ " ctd.ctd_first_clm_dt_outstand_amt,"
						+ " ctd.ctd_second_clm_dt_outstand_amt"
						+ " from  claim_tc_detail_temp ctd"
						+ " where LTRIM(RTRIM(UPPER(ctd.clm_ref_no))) = ?"
						+ " group by ctd.cgpan,"
						+ " ctd.ctd_last_disbursement_dt,"
						+ " ctd.ctd_principal_repay_amt,"
						+ " ctd.ctd_interest_repay_amt,"
						+ " ctd.ctd_npa_outstanding_amt,"
						+ " ctd.ctd_legal_outstanding_amt,"
						+ " ctd.ctd_first_clm_dt_outstand_amt,"
						+ " ctd.ctd_second_clm_dt_outstand_amt";
				// executing the query
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();
			// System.out.println("Control 3");
			// Retrieving the values from the resultset
			TermLoanCapitalLoanDetail tldetail = null;
			String cgpan = null;
			java.util.Date lastDisbursementDt = null;
			double principalRepayAmnt = 0.0;
			double interestRepayAmnt = 0.0;
			double npaOSAmnt = 0.0;
			double legalOSAmnt = 0.0;
			double firstClmOSAmnt = 0.0;
			double secondClmOSAmnt = 0.0;

			// Retrieving the values from the resultset
			while (rs.next()) {
				cgpan = (String) rs.getString(1);
				lastDisbursementDt = (java.util.Date) rs.getDate(2);
				principalRepayAmnt = (double) rs.getDouble(3);
				interestRepayAmnt = (double) rs.getDouble(4);
				npaOSAmnt = (double) rs.getDouble(5);
				legalOSAmnt = (double) rs.getDouble(6);
				firstClmOSAmnt = (double) rs.getDouble(7);
				secondClmOSAmnt = (double) rs.getDouble(8);

				// Setting the values in TermLoanCapitalLoanDetail object
				tldetail = new TermLoanCapitalLoanDetail();
				tldetail.setCgpan(cgpan);
				tldetail.setLastDisbursementDate(lastDisbursementDt);
				tldetail.setPrincipalRepayment(principalRepayAmnt);
				tldetail.setInterestAndOtherCharges(interestRepayAmnt);
				tldetail.setOutstandingAsOnDateOfNPA(npaOSAmnt);
				tldetail.setOutstandingStatedInCivilSuit(legalOSAmnt);
				tldetail.setOutstandingAsOnDateOfLodgement(firstClmOSAmnt);
				tldetail.setOsAsOnDateOfLodgementOfClmForSecInstllmnt(secondClmOSAmnt);

				// adding the object into the vector
				termloandetails.addElement(tldetail);
			}
			rs.close();
			rs = null;

			// System.out.println("Control 4");
			// query = null;
			// rs.close();
			// prepStatement.close();

			// Getting the Working Capital Details
			if (bankId.equals("0000")) {
				query = " select cgpan,"
						+ " cwd_npa_outstanding_amt,"
						+ " cwd_legal_outstanding_amt,"
						+ " cwd_first_clm_dt_outstand_amt,"
						+ " cwd_second_clm_dt_outstand_amt"
						+ " from claim_wc_detail_temp@cginter cwd"
						+ " where LTRIM(RTRIM(UPPER(cwd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by cgpan," + " cwd_npa_outstanding_amt,"
						+ " cwd_legal_outstanding_amt,"
						+ " cwd_first_clm_dt_outstand_amt,"
						+ " cwd_second_clm_dt_outstand_amt";
				// Executing the query
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = " select cgpan,"
						+ " cwd_npa_outstanding_amt,"
						+ " cwd_legal_outstanding_amt,"
						+ " cwd_first_clm_dt_outstand_amt,"
						+ " cwd_second_clm_dt_outstand_amt"
						+ " from claim_wc_detail_temp cwd"
						+ " where LTRIM(RTRIM(UPPER(cwd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by cgpan," + " cwd_npa_outstanding_amt,"
						+ " cwd_legal_outstanding_amt,"
						+ " cwd_first_clm_dt_outstand_amt,"
						+ " cwd_second_clm_dt_outstand_amt";
				// Executing the query
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();

			// Retrieving the values from the resultset
			ArrayList workingCapitalDtls = new ArrayList();
			WorkingCapitalDetail wcdetail = null;
			while (rs.next()) {
				cgpan = (String) rs.getString(1);
				npaOSAmnt = (double) rs.getDouble(2);
				legalOSAmnt = (double) rs.getDouble(3);
				firstClmOSAmnt = (double) rs.getDouble(4);
				secondClmOSAmnt = (double) rs.getDouble(5);

				// Setting the values in WorkingCapitalDetail object
				wcdetail = new WorkingCapitalDetail();
				wcdetail.setCgpan(cgpan);
				wcdetail.setOutstandingAsOnDateOfNPA(npaOSAmnt);
				wcdetail.setOutstandingStatedInCivilSuit(legalOSAmnt);
				wcdetail.setOutstandingAsOnDateOfLodgement(firstClmOSAmnt);
				wcdetail.setOsAsOnDateOfLodgementOfClmForSecInstllmnt(secondClmOSAmnt);

				// Adding the WorkingCapitalDetail object in the ArrayList
				workingCapitalDtls.add(wcdetail);
			}
			rs.close();
			rs = null;

			// System.out.println("Control 5");
			// query = null;
			// rs = null;
			// prepStatement = null;
			if (bankId.equals("0000")) {
				query = "select csd_id,"
						+ " csd_particulars_flag,"
						+ " csd_guarantor_networth,"
						+ " csd_worth_reduction_reason,"
						+ " csd_amt_thro_per_guar"
						+ " from claim_security_detail_temp@cginter csd "
						+ " where LTRIM(RTRIM(UPPER(csd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by csd_id," + " csd_particulars_flag,"
						+ " csd_guarantor_networth,"
						+ " csd_worth_reduction_reason,"
						+ " csd_amt_thro_per_guar";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select csd_id,"
						+ " csd_particulars_flag,"
						+ " csd_guarantor_networth,"
						+ " csd_worth_reduction_reason,"
						+ " csd_amt_thro_per_guar"
						+ " from claim_security_detail_temp csd "
						+ " where LTRIM(RTRIM(UPPER(csd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by csd_id," + " csd_particulars_flag,"
						+ " csd_guarantor_networth,"
						+ " csd_worth_reduction_reason,"
						+ " csd_amt_thro_per_guar";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();

			// retrieving the values from resultset
			String securityid = null;
			String particularsFlag = null;
			String reasonforreduction = null;
			double guarantorNetWorth = 0.0;
			double amntthruperguarantee = 0.0;
			HashMap temp = new HashMap();
			DtlsAsOnDateOfSanction dtlsAsOnSanction = new DtlsAsOnDateOfSanction();
			DtlsAsOnDateOfNPA dtlsAsOnNPA = new DtlsAsOnDateOfNPA();
			DtlsAsOnLogdementOfClaim dtslAsOnLodgement = new DtlsAsOnLogdementOfClaim();
			DtlsAsOnLogdementOfSecondClaim dtslAsOnSecClmLodgement = new DtlsAsOnLogdementOfSecondClaim();
			while (rs.next()) {
				securityid = (String) rs.getString(1);
				particularsFlag = (String) rs.getString(2);
				guarantorNetWorth = (double) rs.getDouble(3);
				reasonforreduction = (String) rs.getString(4);
				amntthruperguarantee = (double) rs.getDouble(5);

				if (particularsFlag
						.equals(ClaimConstants.CLM_SAPGD_AS_ON_SANCTION_CODE)) {
					dtlsAsOnSanction.setNetworthOfGuarantors(guarantorNetWorth);
					dtlsAsOnSanction.setReasonsForReduction(reasonforreduction);
					temp.put(ClaimConstants.CLM_SAPGD_AS_ON_SANCTION_CODE,
							securityid);
				} else if (particularsFlag
						.equals(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE)) {
					dtlsAsOnNPA.setNetworthOfGuarantors(guarantorNetWorth);
					dtlsAsOnNPA.setReasonsForReduction(reasonforreduction);
					temp.put(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE,
							securityid);
				} else if (particularsFlag
						.equals(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM)) {
					dtslAsOnLodgement
							.setNetworthOfGuarantors(guarantorNetWorth);
					dtslAsOnLodgement
							.setReasonsForReduction(reasonforreduction);
					temp.put(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM,
							securityid);
				} else if (particularsFlag
						.equals(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_SEC_CLM)) {
					dtslAsOnSecClmLodgement
							.setNetworthOfGuarantors(guarantorNetWorth);
					// dtslAsOnSecClmLodgement.setReasonsForReduction(reasonforreduction);
					dtslAsOnSecClmLodgement
							.setAmtRealisedPersonalGuarantee(amntthruperguarantee);
					temp.put(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM,
							securityid);
				}
			}
			rs.close();
			rs = null;

			// System.out.println("Control 6");
			// query = null;
			// rs = null;
			// prepStatement = null;

			// Retrieving the Security Particulars
			for (int i = 0; i < temp.size(); i++) {
				String particular = null;
				double value = 0.0;

				if (temp.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_SANCTION_CODE)) {
					securityid = (String) temp
							.get(ClaimConstants.CLM_SAPGD_AS_ON_SANCTION_CODE);
					if (bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp@cginter csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					if (!bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}

					// Executing the Query
					prepStatement = conn.prepareStatement(query);
					prepStatement.setString(1, securityid);
					rs = (ResultSet) prepStatement.executeQuery();

					// Retrieving the values from the resultset
					while (rs.next()) {
						particular = (String) rs.getString(1);
						value = (double) rs.getDouble(2);
						if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_LAND)) {
							dtlsAsOnSanction.setValueOfLand(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_BLDG)) {
							dtlsAsOnSanction.setValueOfBuilding(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_MC)) {
							dtlsAsOnSanction.setValueOfMachine(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHER_FIXED_MOV_ASSETS)) {
							dtlsAsOnSanction
									.setValueOfOtherFixedMovableAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_CUR_ASSETS)) {
							dtlsAsOnSanction.setValueOfCurrentAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHERS)) {
							dtlsAsOnSanction.setValueOfOthers(value);
						}
					}
					rs.close();
					rs = null;

					// query = null;
					// rs = null;
					// prepStatement = null;
				} else if (temp
						.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE)) {
					securityid = (String) temp
							.get(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE);
					if (bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp@cginter csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					if (!bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					// Executing the Query
					prepStatement = conn.prepareStatement(query);
					prepStatement.setString(1, securityid);
					rs = (ResultSet) prepStatement.executeQuery();

					// Retrieving the values from the resultset
					while (rs.next()) {
						particular = (String) rs.getString(1);
						value = (double) rs.getDouble(2);
						if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_LAND)) {
							dtlsAsOnNPA.setValueOfLand(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_BLDG)) {
							dtlsAsOnNPA.setValueOfBuilding(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_MC)) {
							dtlsAsOnNPA.setValueOfMachine(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHER_FIXED_MOV_ASSETS)) {
							dtlsAsOnNPA
									.setValueOfOtherFixedMovableAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_CUR_ASSETS)) {
							dtlsAsOnNPA.setValueOfCurrentAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHERS)) {
							dtlsAsOnNPA.setValueOfOthers(value);
						}
					}
					rs.close();
					rs = null;

					// query = null;
					// rs = null;
					// prepStatement = null;
				} else if (temp
						.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM)) {
					securityid = (String) temp
							.get(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM);
					if (bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp@cginter csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					if (!bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}

					// Executing the Query
					prepStatement = conn.prepareStatement(query);
					prepStatement.setString(1, securityid);
					rs = (ResultSet) prepStatement.executeQuery();
					// System.out.println("Control 6");
					// Retrieving the values from the resultset
					while (rs.next()) {
						particular = (String) rs.getString(1);
						value = (double) rs.getDouble(2);
						if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_LAND)) {
							dtslAsOnLodgement.setValueOfLand(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_BLDG)) {
							dtslAsOnLodgement.setValueOfBuilding(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_MC)) {
							dtslAsOnLodgement.setValueOfMachine(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHER_FIXED_MOV_ASSETS)) {
							dtslAsOnLodgement
									.setValueOfOtherFixedMovableAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_CUR_ASSETS)) {
							dtslAsOnLodgement.setValueOfCurrentAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHERS)) {
							dtslAsOnLodgement.setValueOfOthers(value);
						}
					}
					rs.close();
					rs = null;

					// query = null;
					// rs = null;
					// prepStatement = null;
				} else if (temp
						.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_SEC_CLM)) {
					securityid = (String) temp
							.get(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_SEC_CLM);
					if (bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp@cginter csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					if (!bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}

					// Executing the Query
					prepStatement = conn.prepareStatement(query);
					prepStatement.setString(1, securityid);
					rs = (ResultSet) prepStatement.executeQuery();
					double amntthrudisposalofsecurity = 0.0;
					String specificRsnForReduction = null;

					// Retrieving the values from the resultset
					while (rs.next()) {
						particular = (String) rs.getString(1);
						value = (double) rs.getDouble(2);
						amntthrudisposalofsecurity = (double) rs.getDouble(3);
						specificRsnForReduction = (String) rs.getString(4);
						if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_LAND)) {
							dtslAsOnSecClmLodgement.setValueOfLand(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedLand(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionLand(specificRsnForReduction);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_BLDG)) {
							dtslAsOnSecClmLodgement.setValueOfBuilding(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedBuilding(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionBuilding(specificRsnForReduction);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_MC)) {
							dtslAsOnSecClmLodgement.setValueOfMachine(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedMachine(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionMachine(specificRsnForReduction);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHER_FIXED_MOV_ASSETS)) {
							dtslAsOnSecClmLodgement
									.setValueOfOtherFixedMovableAssets(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedFixed(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionFixed(specificRsnForReduction);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_CUR_ASSETS)) {
							dtslAsOnSecClmLodgement
									.setValueOfCurrentAssets(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedCurrent(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionCurrent(specificRsnForReduction);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHERS)) {
							dtslAsOnSecClmLodgement.setValueOfOthers(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedOthers(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionOthers(specificRsnForReduction);
						}
					}
					rs.close();
					rs = null;

					// query = null;
					// rs = null;
					// prepStatement = null;
				}
			}

			SecurityAndPersonalGuaranteeDtls sapgdtls = new SecurityAndPersonalGuaranteeDtls();
			sapgdtls.setDetailsAsOnDateOfSanction(dtlsAsOnSanction);
			sapgdtls.setDetailsAsOnDateOfNPA(dtlsAsOnNPA);
			sapgdtls.setDetailsAsOnDateOfLodgementOfClaim(dtslAsOnLodgement);
			sapgdtls.setDetailsAsOnDateOfLodgementOfSecondClaim(dtslAsOnSecClmLodgement);

			// Retrieving the Recovery Details
			Vector recoveryDtls = new Vector();
			if (bankId.equals("0000")) {
				/*
				 * query = " select crd.cgpan," + " rmm.rmd_description," +
				 * " crd.crd_tc_principal_amt," + " crd.crd_tc_interest_amt," +
				 * " crd.crd_wc_amt," + " crd_wc_other_amt" +
				 * " from claim_recovery_detail_temp@cginter crd," +
				 * " recovery_mode_master rmm " +
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) "
				 * + " and crd.rmd_id = rmm.rmd_id" + " group by crd.cgpan," +
				 * " rmm.rmd_description," + " crd.crd_tc_principal_amt," +
				 * " crd.crd_tc_interest_amt," + " crd.crd_wc_amt," +
				 * " crd_wc_other_amt";
				 */
				query = " select cgp,descr, "
						+ " decode(nvl(ntcp,0),0,sum(tcp),sum(ntcp)),  "
						+ " decode(nvl(ntcp,0),0,sum(tci),0),  "
						+ " decode(nvl(nwcp,0),0,sum(wcp),sum(nwcp)),  "
						+ " decode(nvl(nwcp,0),0,sum(wci),0)  "
						+ " from (  "
						+ "  select crd.cgpan cgp,rmm.rmd_description descr,crd.crd_tc_principal_amt tcp,  "
						+ " crd.crd_tc_interest_amt tci,crd.crd_wc_amt wcp,crd_wc_other_amt wci,0 ntcp,0 nwcp  "
						+ " from claim_recovery_detail_temp@cginter crd,  "
						+ " recovery_mode_master rmm   "
						+ " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
						+ " and crd.rmd_id = rmm.rmd_id  "
						+ " group by crd.cgpan,rmm.rmd_description,crd.crd_tc_principal_amt,crd.crd_tc_interest_amt,   "
						+ " crd.crd_wc_amt,crd_wc_other_amt  "
						+ " union all  "
						+ " select cgpan,null descr,0 tcp,0 tci,0 wcp,0 wci,ctd_npa_recovered_revise ntcp,0 nwcp  "
						+ " from claim_tc_detail_temp@CGINTER crd  "
						+ " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
						+ " union all  "
						+ " select cgpan,null descr,0 tcp,0 tci,0 wcp,0 wci,0 ntcp,cwd_npa_recovered_revise nwcp  "
						+ " from claim_wc_detail_temp@CGINTER crd  "
						+ " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
						+ " )  " + " group by cgp,descr,ntcp,nwcp ";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				prepStatement.setString(2, claimRefNumber);
				prepStatement.setString(3, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				/*
				 * query = " select crd.cgpan," + " rmm.rmd_description," +
				 * " crd.crd_tc_principal_amt," + " crd.crd_tc_interest_amt," +
				 * " crd.crd_wc_amt," + " crd_wc_other_amt" +
				 * " from claim_detail c," + " claim_recovery_detail_temp crd,"
				 * + " recovery_mode_master rmm " +
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) "
				 * + " and crd.rmd_id = rmm.rmd_id" + " group by crd.cgpan," +
				 * " rmm.rmd_description," + " crd.crd_tc_principal_amt," +
				 * " crd.crd_tc_interest_amt," + " crd.crd_wc_amt," +
				 * " crd_wc_other_amt";
				 */
				query = " select cgp,descr, "
						+ " decode(nvl(ntcp,0),0,sum(tcp),sum(ntcp)),  "
						+ " decode(nvl(ntcp,0),0,sum(tci),0),  "
						+ " decode(nvl(nwcp,0),0,sum(wcp),sum(nwcp)),  "
						+ " decode(nvl(nwcp,0),0,sum(wci),0)  "
						+ " from (  "
						+ "  select crd.cgpan cgp,rmm.rmd_description descr,crd.crd_tc_principal_amt tcp,  "
						+ " crd.crd_tc_interest_amt tci,crd.crd_wc_amt wcp,crd_wc_other_amt wci,0 ntcp,0 nwcp  "
						+ " from claim_recovery_detail_temp@cginter crd,  "
						+ " recovery_mode_master rmm   "
						+ " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
						+ " and crd.rmd_id = rmm.rmd_id  "
						+ " group by crd.cgpan,rmm.rmd_description,crd.crd_tc_principal_amt,crd.crd_tc_interest_amt,   "
						+ " crd.crd_wc_amt,crd_wc_other_amt  "
						+ " union all  "
						+ " select cgpan,null descr,0 tcp,0 tci,0 wcp,0 wci,ctd_npa_recovered_revise ntcp,0 nwcp  "
						+ " from claim_tc_detail_temp@CGINTER crd  "
						+ " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
						+ " union all  "
						+ " select cgpan,null descr,0 tcp,0 tci,0 wcp,0 wci,0 ntcp,cwd_npa_recovered_revise nwcp  "
						+ " from claim_wc_detail_temp@CGINTER crd  "
						+ " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
						+ " )  " + " group by cgp,descr,ntcp,nwcp ";
				// Executing the query

				// System.out.println("Query1:"+query);
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				prepStatement.setString(2, claimRefNumber);
				prepStatement.setString(3, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();

			String modeOfRecovery = null;
			double tcPrincipal = 0.0;
			double tcInterestAndOtherCharges = 0.0;
			double wcAmount = 0.0;
			double wcOtherCharges = 0.0;
			RecoveryDetails recDtl = null;

			// Getting the values from the ResultSet
			while (rs.next()) {
				cgpan = (String) rs.getString(1);
				modeOfRecovery = (String) rs.getString(2);
				tcPrincipal = (double) rs.getDouble(3);
				tcInterestAndOtherCharges = (double) rs.getDouble(4);
				wcAmount = (double) rs.getDouble(5);
				wcOtherCharges = (double) rs.getDouble(6);

				// Setting the values in the RecoveryDetails object
				recDtl = new RecoveryDetails();
				recDtl.setCgpan(cgpan);
				recDtl.setModeOfRecovery(modeOfRecovery);
				recDtl.setTcPrincipal(tcPrincipal);
				recDtl.setTcInterestAndOtherCharges(tcInterestAndOtherCharges);
				recDtl.setWcAmount(wcAmount);
				recDtl.setWcOtherCharges(wcOtherCharges);

				// Adding the Recovery Details object to the vector
				recoveryDtls.addElement(recDtl);
			}
			rs.close();
			rs = null;

			// query = null;
			// rs = null;
			// prepStatement = null;

			// Getting Claim Summary Details
			if (bankId.equals("0000")) {
				query = "select caa.cgpan,"
						+ " caa.caa_applied_amount "
						+ " from claim_application_amount_temp@cginter caa"
						+ " where LTRIM(RTRIM(UPPER(caa.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by caa.cgpan," + " caa.caa_applied_amount ";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select caa.cgpan,"
						+ " caa.caa_applied_amount "
						+ " from claim_detail c,"
						+ " claim_application_amount_temp caa"
						+ " where LTRIM(RTRIM(UPPER(caa.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by caa.cgpan," + " caa.caa_applied_amount ";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}

			// Executing the Query
			ArrayList clmSummaryDtls = new ArrayList();
			rs = (ResultSet) prepStatement.executeQuery();

			// Getting the values from the ResultSet
			double clmAppliedAmount = 0.0;
			ClaimSummaryDtls clmSummaryDtl = null;
			while (rs.next()) {
				cgpan = (String) rs.getString(1);
				clmAppliedAmount = (double) rs.getDouble(2);

				// Setting the values in the
				clmSummaryDtl = new ClaimSummaryDtls();
				clmSummaryDtl.setCgpan(cgpan);
				clmSummaryDtl.setAmount(clmAppliedAmount);

				// Adding the clmSummaryDtl object in the ArrayList
				clmSummaryDtls.add(clmSummaryDtl);
			}
			rs.close();
			rs = null;

			// query = null;
			// rs = null;
			// prepStatement = null;

			// Retrieving the remaining information
			if (bankId.equals("0000")) {
				query = "select clm_participating_bank_name,"
						+ " clm_recall_notice_dt,"
						+ " clm_filing_dt,"
						+ " clm_wc_release_dt,"
						+ " clm_official_name,"
						+ " clm_official_designation,"
						+ " clm_mli_name,"
						+ " clm_place,"
						+ " clm_date"
						+ " from claim_detail c "
						+ " where LTRIM(RTRIM(UPPER(c.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by clm_participating_bank_name,"
						+ " clm_recall_notice_dt," + " clm_filing_dt,"
						+ " clm_wc_release_dt," + " clm_official_name,"
						+ " clm_official_designation," + " clm_mli_name,"
						+ " clm_place," + " clm_date";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select clm_participating_bank_name,"
						+ " clm_recall_notice_dt,"
						+ " clm_filing_dt,"
						+ " clm_wc_release_dt,"
						+ " clm_official_name,"
						+ " clm_official_designation,"
						+ " clm_mli_name,"
						+ " clm_place,"
						+ " clm_date"
						+ " from claim_detail c "
						+ " where LTRIM(RTRIM(UPPER(c.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by clm_participating_bank_name,"
						+ " clm_recall_notice_dt," + " clm_filing_dt,"
						+ " clm_wc_release_dt," + " clm_official_name,"
						+ " clm_official_designation," + " clm_mli_name,"
						+ " clm_place," + " clm_date";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}

			// Executing.query
			rs = (ResultSet) prepStatement.executeQuery();

			// Retrieving the values
			String participatingBank = null;
			java.util.Date recallNoticeDt = null;
			java.util.Date wcReleaseDt = null;
			String officialName = null;
			String officialDesignation = null;
			String mliName = null;
			String place = null;
			java.util.Date claimSubmittedDate = null;

			while (rs.next()) {
				participatingBank = (String) rs.getString(1);
				recallNoticeDt = (java.util.Date) rs.getDate(2);
				wcReleaseDt = (java.util.Date) rs.getDate(4);
				officialName = (String) rs.getString(5);
				officialDesignation = (String) rs.getString(6);
				mliName = (String) rs.getString(7);
				place = (String) rs.getString(8);
				claimSubmittedDate = (java.util.Date) rs.getDate(9);
			}
			rs.close();
			rs = null;

			// query = null;
			// rs = null;
			// prepStatement = null;

			claimapplication.setMemberDetails(memberdetails);
			claimapplication.setBorrowerDetails(borrowerdetails);
			claimapplication
					.setDateOnWhichAccountClassifiedNPA(npaclassifieddt);
			claimapplication.setDateOfReportingNpaToCgtsi(cgtsireportingdt);
			claimapplication.setReasonsForAccountTurningNPA(reasonfornpa);
			claimapplication
					.setWhetherBorrowerIsWilfulDefaulter(whetherBidIsWillfulDefaulter);
			legalproceedingdetail
					.setDateOfConclusionOfRecoveryProceedings(recConclusionDt);
			claimapplication.setLegalProceedingsDetails(legalproceedingdetail);
			claimapplication
					.setWhetherAccntWrittenOffFromBooksOfMLI(whetherNPAWrittenOff);
			claimapplication.setDtOnWhichAccntWrittenOff(npaWrittenOffDt);
			claimapplication.setTermCapitalDtls(termloandetails);
			claimapplication.setWorkingCapitalDtls(workingCapitalDtls);
			claimapplication.setSecurityAndPersonalGuaranteeDtls(sapgdtls);
			claimapplication.setRecoveryDetails(recoveryDtls);
			claimapplication.setClaimSummaryDtls(clmSummaryDtls);
			claimapplication.setParticipatingBank(participatingBank);
			claimapplication.setDateOfIssueOfRecallNotice(recallNoticeDt);
			claimapplication.setDateOfReleaseOfWC(wcReleaseDt);
			claimapplication.setNameOfOfficial(officialName);
			claimapplication.setDesignationOfOfficial(officialDesignation);
			claimapplication.setPlace(place);
			claimapplication.setClaimSubmittedDate(claimSubmittedDate);
			// claimapplication.setDateOfConclusionOfRecoveryProceedings(recConclusionDt);
		} catch (Exception sqlexception) {
			sqlexception.printStackTrace();
			throw new DatabaseException(sqlexception.getMessage());
		} finally {
			DBConnection.freeConnection(conn);
		}
		// return reportDao.displayClmRefNumberDtl(claimRefNumber);
		return claimapplication;
	}

	// added by upchar@path on 27-05-2013

	public ArrayList inwardReportDetailsNew(java.sql.Date startDate,
			java.sql.Date endDate, String dateForReport)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "inwardReportDetails", "Entered");
		PreparedStatement danRaisedStmt = null;
		ArrayList inwardRaisedArray = new ArrayList();
		ResultSet danRaisedResult = null;
		Connection connection = DBConnection.getConnection();

		if (startDate != null) {
			try {

				String query = " SELECT INW_DT,INW_ID,INWARD_SEC,BANK_NAME,  "
						+ " PLACE,LTR_REF_NO,LTR_DT,SUBJECT,INSTRUMENT_NO,  "
						+ "  INSTRUMENT_DT,INSTRUMENT_AMT,DRAWN_ON_BANK,OUTWARD_ID,OUTWARD_DT,ASSIGNED_USER FROM INWARD_NEW  "
						+ " WHERE trunc(" + dateForReport
						+ ")  between ? and ? ORDER BY 1,2,3,INW_SEQ ";

				// System.out.println(" WHERE trunc(" + dateForReport);

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, startDate);
				danRaisedStmt.setDate(2, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {
					GeneralReport generalReport = new GeneralReport();
					generalReport.setDateOfTheDocument1(danRaisedResult
							.getDate(1));
					generalReport.setInwardNum(danRaisedResult.getInt(2));
					generalReport
							.setInwardSection(danRaisedResult.getString(3));
					generalReport.setBankName(danRaisedResult.getString(4));
					generalReport.setPlace(danRaisedResult.getString(5));
					generalReport.setLtrRefNo(danRaisedResult.getString(6));
					generalReport.setDateOfTheDocument10(danRaisedResult
							.getDate(7));
					generalReport.setSubject(danRaisedResult.getString(8));
					generalReport.setInstrumentNum(danRaisedResult.getInt(9));
					generalReport.setDateOfTheDocument11(danRaisedResult
							.getDate(10));
					generalReport.setInstrumentAmt(danRaisedResult
							.getDouble(11));
					generalReport.setDrawnonBank(danRaisedResult.getString(12));
					generalReport.setAppRefNo(danRaisedResult.getString(13));
					generalReport.setDateOfTheDocument12(danRaisedResult
							.getDate(14));
					generalReport.setName(danRaisedResult.getString(15));

					inwardRaisedArray.add(generalReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				Log.logException(exception);
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		else if (startDate == null) {
			try {

				String query = " SELECT INW_DT,INW_ID,INWARD_SEC,BANK_NAME,  "
						+ "  PLACE,LTR_REF_NO,LTR_DT,SUBJECT,INSTRUMENT_NO,  "
						+ " INSTRUMENT_DT,INSTRUMENT_AMT,DRAWN_ON_BANK,OUTWARD_ID,OUTWARD_DT,ASSIGNED_USER FROM INWARD_NEW "
						+ " WHERE trunc(" + dateForReport
						+ ")  <= ? ORDER BY 1,2,3,INW_SEQ ";

				// System.out.println(" WHERE trunc(" + dateForReport);

				danRaisedStmt = connection.prepareStatement(query);
				danRaisedStmt.setDate(1, endDate);
				danRaisedResult = danRaisedStmt.executeQuery();

				while (danRaisedResult.next()) {

					GeneralReport generalReport = new GeneralReport();
					generalReport.setDateOfTheDocument1(danRaisedResult
							.getDate(1));
					generalReport.setInwardNum(danRaisedResult.getInt(2));
					generalReport
							.setInwardSection(danRaisedResult.getString(3));
					generalReport.setBankName(danRaisedResult.getString(4));
					generalReport.setPlace(danRaisedResult.getString(5));
					generalReport.setLtrRefNo(danRaisedResult.getString(6));
					generalReport.setDateOfTheDocument10(danRaisedResult
							.getDate(7));
					generalReport.setSubject(danRaisedResult.getString(8));
					generalReport.setInstrumentNum(danRaisedResult.getInt(9));
					generalReport.setDateOfTheDocument11(danRaisedResult
							.getDate(10));
					generalReport.setInstrumentAmt(danRaisedResult
							.getDouble(11));
					generalReport.setDrawnonBank(danRaisedResult.getString(12));
					generalReport.setAppRefNo(danRaisedResult.getString(13));
					generalReport.setDateOfTheDocument12(danRaisedResult
							.getDate(14));
					generalReport.setName(danRaisedResult.getString(15));
					inwardRaisedArray.add(generalReport);
				}
				danRaisedResult.close();
				danRaisedResult = null;
				danRaisedStmt.close();
				danRaisedStmt = null;

			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(Log.INFO, "ReportDAO", "inwardReportDetails", "Exited");
		return inwardRaisedArray;
	}

	public ArrayList getdailyPaymentReportforRSF(java.sql.Date startDate,
			java.sql.Date endDate, String id) throws DatabaseException {
		Connection connection;
		ArrayList paymentArray;
		Log.log(4, "ReportDAO", "getdailyPaymentReport", "Entered");
		connection = DBConnection.getConnection();
		paymentArray = new ArrayList();
		if (startDate == null || id == null || id.equals("")){
			// break MISSING_BLOCK_LABEL_390;
			//if (id != null && !id.equals("")){
				// break MISSING_BLOCK_LABEL_211;
				try {
					String query = "select trunc(P.PAY_REALISATION_DT),SUM(DCI_AMOUNT_RAISED) FROM DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI WHERE D.DAN_ID = DAI.DAN_ID AND D.PAY_ID = P.PAY_ID AND DAI.dan_type in ('SF','AF') and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.DCI_APPROPRIATION_FLAG = 'Y' and trunc(p.PAY_REALISATION_DT) between ? and ? GROUP BY trunc(P.PAY_REALISATION_DT) ORDER BY 1";
					System.out.println("query1==="+query);
					PreparedStatement paymentStmt = connection
							.prepareStatement(query);
					paymentStmt.setDate(1, startDate);
					paymentStmt.setDate(2, endDate);
					ResultSet paymentResult;
					PaymentReport paymentReport;
					for (paymentResult = paymentStmt.executeQuery(); paymentResult
							.next(); paymentArray.add(paymentReport)) {
						paymentReport = new PaymentReport();
						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(id);
					}

					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;
				//} 
		//	}
		}
				catch (Exception exception) {
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
		}
		//}
		if (id == null){
			// break MISSING_BLOCK_LABEL_732;
			try {
				String query = "select trunc(P.PAY_REALISATION_DT),SUM(DCI_AMOUNT_RAISED) FROM DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI WHERE D.DAN_ID = DAI.DAN_ID AND D.PAY_ID = P.PAY_ID AND DAI.dan_type in ('SF','AF') and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.DCI_APPROPRIATION_FLAG = 'Y' and trunc(p.PAY_REALISATION_DT) between ? and ? and   LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID || dai.MEM_ZNE_ID || dai.MEM_BRN_ID))) = LTRIM(RTRIM(UPPER(?)))GROUP BY trunc(P.PAY_REALISATION_DT) ORDER BY 1";
				PreparedStatement paymentStmt = connection
						.prepareStatement(query);
				paymentStmt.setDate(1, startDate);
				paymentStmt.setDate(2, endDate);
				paymentStmt.setString(3, id);
				ResultSet paymentResult;
				PaymentReport paymentReport;
				for (paymentResult = paymentStmt.executeQuery(); paymentResult
						.next(); paymentArray.add(paymentReport)) {
					paymentReport = new PaymentReport();
					paymentReport.setRealisedDate(paymentResult.getDate(1));
					paymentReport.setRealisedAmount(paymentResult.getDouble(2));
					paymentReport.setMemberId(id);
				}

				paymentResult.close();
				paymentResult = null;
				paymentStmt.close();
				paymentStmt = null;
			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		if (startDate != null){
			// break MISSING_BLOCK_LABEL_732;
			if (id != null && !id.equals("")){
				// break MISSING_BLOCK_LABEL_565;
				try {
					String query = "select trunc(P.PAY_REALISATION_DT),SUM(DCI_AMOUNT_RAISED) FROM DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' and trunc(p.PAY_REALISATION_DT) <= ?  GROUP BY trunc(P.PAY_REALISATION_DT) ORDER BY 1";
					PreparedStatement paymentStmt = connection
							.prepareStatement(query);
					paymentStmt.setDate(1, endDate);
					ResultSet paymentResult;
					PaymentReport paymentReport;
					for (paymentResult = paymentStmt.executeQuery(); paymentResult
							.next(); paymentArray.add(paymentReport)) {
						paymentReport = new PaymentReport();
						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(id);
					}

					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;
				} catch (Exception exception) {
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
			}
		}
		if (id == "" ){
			// break MISSING_BLOCK_LABEL_732;
			try {
				String query = "select trunc(P.PAY_REALISATION_DT),SUM(DCI_AMOUNT_RAISED) FROM DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI WHERE D.DAN_ID = DAI.DAN_ID AND D.PAY_ID = P.PAY_ID AND DAI.dan_type in ('SF','AF') and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.DCI_APPROPRIATION_FLAG = 'Y' and trunc(p.PAY_REALISATION_DT) <= ? and   LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID || dai.MEM_ZNE_ID || dai.MEM_BRN_ID))) = LTRIM(RTRIM(UPPER(?)))GROUP BY trunc(P.PAY_REALISATION_DT) ORDER BY 1";
				PreparedStatement paymentStmt = connection
						.prepareStatement(query);
				paymentStmt.setDate(1, endDate);
				paymentStmt.setString(2, id);
				ResultSet paymentResult;
				PaymentReport paymentReport;
				for (paymentResult = paymentStmt.executeQuery(); paymentResult
						.next(); paymentArray.add(paymentReport)) {
					paymentReport = new PaymentReport();
					paymentReport.setRealisedDate(paymentResult.getDate(1));
					paymentReport.setRealisedAmount(paymentResult.getDouble(2));
					paymentReport.setMemberId(id);
				}

				paymentResult.close();
				paymentResult = null;
				paymentStmt.close();
				paymentStmt = null;
			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}
		Log.log(4, "ReportDAO", "getdailyPaymentReport", "Exited");
		return paymentArray;
	}

	public ArrayList getdailyPaymentReportForBranchforRSF(
			java.sql.Date startDate, java.sql.Date endDate, String id)
			throws DatabaseException {
		Connection connection;
		ArrayList paymentArray;
		Log.log(4, "ReportDAO", "getdailyPaymentReportForBranch", "Entered");
		connection = DBConnection.getConnection();
		paymentArray = new ArrayList();
		if (startDate == null)
			// break MISSING_BLOCK_LABEL_390;
			if (id != null && !id.equals(""))
				// break MISSING_BLOCK_LABEL_211;
				try {
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI WHERE D.DAN_ID = DAI.DAN_ID AND D.PAY_ID = P.PAY_ID AND DAI.dan_type in ('SF','AF') and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.DCI_APPROPRIATION_FLAG = 'Y' and trunc(p.PAY_REALISATION_DT) between ? and ?  GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					PreparedStatement paymentStmt = connection
							.prepareStatement(query);
					paymentStmt.setDate(1, startDate);
					paymentStmt.setDate(2, endDate);
					ResultSet paymentResult;
					PaymentReport paymentReport;
					for (paymentResult = paymentStmt.executeQuery(); paymentResult
							.next(); paymentArray.add(paymentReport)) {
						paymentReport = new PaymentReport();
						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(id);
					}

					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;
				} catch (Exception exception) {
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
		if (id == null)
			// break MISSING_BLOCK_LABEL_732;
			try {
				String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' and trunc(p.PAY_REALISATION_DT) between ? and ? and   LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID || dai.MEM_ZNE_ID || dai.MEM_BRN_ID))) = LTRIM(RTRIM(UPPER(?)))GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
				PreparedStatement paymentStmt = connection
						.prepareStatement(query);
				paymentStmt.setDate(1, startDate);
				paymentStmt.setDate(2, endDate);
				paymentStmt.setString(3, id);
				ResultSet paymentResult;
				PaymentReport paymentReport;
				for (paymentResult = paymentStmt.executeQuery(); paymentResult
						.next(); paymentArray.add(paymentReport)) {
					paymentReport = new PaymentReport();
					paymentReport.setRealisedDate(paymentResult.getDate(1));
					paymentReport.setRealisedAmount(paymentResult.getDouble(2));
					paymentReport.setMemberId(id);
				}

				paymentResult.close();
				paymentResult = null;
				paymentStmt.close();
				paymentStmt = null;
			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		if (startDate != null)
			// break MISSING_BLOCK_LABEL_732;
			if (id != null && !id.equals(""))
				// break MISSING_BLOCK_LABEL_565;
				try {
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' and trunc(p.PAY_REALISATION_DT) <= ?  GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					PreparedStatement paymentStmt = connection
							.prepareStatement(query);
					paymentStmt.setDate(1, endDate);
					ResultSet paymentResult;
					PaymentReport paymentReport;
					for (paymentResult = paymentStmt.executeQuery(); paymentResult
							.next(); paymentArray.add(paymentReport)) {
						paymentReport = new PaymentReport();
						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(id);
					}

					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;
				} catch (Exception exception) {
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
		if (id == null)
			// break MISSING_BLOCK_LABEL_732;
			try {
				String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' and trunc(p.PAY_REALISATION_DT) <= ? and   LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID || dai.MEM_ZNE_ID || dai.MEM_BRN_ID))) = LTRIM(RTRIM(UPPER(?)))GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
				PreparedStatement paymentStmt = connection
						.prepareStatement(query);
				paymentStmt.setDate(1, endDate);
				paymentStmt.setString(2, id);
				ResultSet paymentResult;
				PaymentReport paymentReport;
				for (paymentResult = paymentStmt.executeQuery(); paymentResult
						.next(); paymentArray.add(paymentReport)) {
					paymentReport = new PaymentReport();
					paymentReport.setRealisedDate(paymentResult.getDate(1));
					paymentReport.setRealisedAmount(paymentResult.getDouble(2));
					paymentReport.setMemberId(id);
				}

				paymentResult.close();
				paymentResult = null;
				paymentStmt.close();
				paymentStmt = null;
			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		Log.log(4, "ReportDAO", "getdailyPaymentReportForBranch", "Exited");
		return paymentArray;
	}

	public ArrayList getdailyPaymentReportForZoneforRSF(
			java.sql.Date startDate, java.sql.Date endDate, String id,
			String zoneId) throws DatabaseException {
		Connection connection;
		ArrayList paymentArray;
		String tempId;
		Log.log(4, "ReportDAO", "getdailyPaymentReportForZone", "Entered");
		connection = DBConnection.getConnection();
		paymentArray = new ArrayList();
		tempId = (new StringBuilder()).append(id).append(zoneId).append("0000")
				.toString();
		if (startDate == null)
			// break MISSING_BLOCK_LABEL_438;
			if (id != null && !id.equals(""))
				// break MISSING_BLOCK_LABEL_238;
				try {
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' and trunc(p.PAY_REALISATION_DT) between ? and ?  GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					PreparedStatement paymentStmt = connection
							.prepareStatement(query);
					paymentStmt.setDate(1, startDate);
					paymentStmt.setDate(2, endDate);
					ResultSet paymentResult;
					PaymentReport paymentReport;
					for (paymentResult = paymentStmt.executeQuery(); paymentResult
							.next(); paymentArray.add(paymentReport)) {
						paymentReport = new PaymentReport();
						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId);
					}

					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;
				} catch (Exception exception) {
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
		if (id == null)
			// break MISSING_BLOCK_LABEL_802;
			try {
				String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI,MEMBER_INFO M WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' AND DAI.MEM_BNK_ID=M.MEM_BNK_ID AND DAI.MEM_ZNE_ID=M.MEM_ZNE_ID AND DAI.MEM_BRN_ID = M.MEM_BRN_ID and trunc(p.PAY_REALISATION_DT) between ? and ? and   LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?)))  and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
				PreparedStatement paymentStmt = connection
						.prepareStatement(query);
				paymentStmt.setDate(1, startDate);
				paymentStmt.setDate(2, endDate);
				paymentStmt.setString(3, id);
				paymentStmt.setString(4, zoneId);
				paymentStmt.setString(5, zoneId);
				ResultSet paymentResult;
				PaymentReport paymentReport;
				for (paymentResult = paymentStmt.executeQuery(); paymentResult
						.next(); paymentArray.add(paymentReport)) {
					paymentReport = new PaymentReport();
					paymentReport.setRealisedDate(paymentResult.getDate(1));
					paymentReport.setRealisedAmount(paymentResult.getDouble(2));
					paymentReport.setMemberId(tempId);
				}

				paymentResult.close();
				paymentResult = null;
				paymentStmt.close();
				paymentStmt = null;
			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		if (startDate != null)
			// break MISSING_BLOCK_LABEL_802;
			if (id != null && !id.equals(""))
				// break MISSING_BLOCK_LABEL_614;
				try {
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' and trunc(p.PAY_REALISATION_DT) <= ?  GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					PreparedStatement paymentStmt = connection
							.prepareStatement(query);
					paymentStmt.setDate(1, endDate);
					ResultSet paymentResult;
					PaymentReport paymentReport;
					for (paymentResult = paymentStmt.executeQuery(); paymentResult
							.next(); paymentArray.add(paymentReport)) {
						paymentReport = new PaymentReport();
						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId);
					}

					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;
				} catch (Exception exception) {
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
		if (id == null)
			// break MISSING_BLOCK_LABEL_802;
			try {
				String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI,MEMBER_INFO M WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' AND DAI.MEM_BNK_ID=M.MEM_BNK_ID AND DAI.MEM_ZNE_ID=M.MEM_ZNE_ID ANDDAI.MEM_BRN_ID = M.MEM_BRN_ID and trunc(p.PAY_REALISATION_DT) between ? and ? and   LTRIM(RTRIM(UPPER(m.MEM_BNK_ID))) =  LTRIM(RTRIM(UPPER(?)))  and (m.MEM_REPORTING_ZONE_ID = ? or m.MEM_ZNE_ID = ?) GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
				PreparedStatement paymentStmt = connection
						.prepareStatement(query);
				paymentStmt.setDate(1, endDate);
				paymentStmt.setString(2, id);
				paymentStmt.setString(3, zoneId);
				paymentStmt.setString(4, zoneId);
				ResultSet paymentResult;
				PaymentReport paymentReport;
				for (paymentResult = paymentStmt.executeQuery(); paymentResult
						.next(); paymentArray.add(paymentReport)) {
					paymentReport = new PaymentReport();
					paymentReport.setRealisedDate(paymentResult.getDate(1));
					paymentReport.setRealisedAmount(paymentResult.getDouble(2));
					paymentReport.setMemberId(tempId);
				}

				paymentResult.close();
				paymentResult = null;
				paymentStmt.close();
				paymentStmt = null;
			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		Log.log(4, "ReportDAO", "getdailyPaymentReportForZone", "Exited");
		return paymentArray;
	}

	public ArrayList getdailyPaymentReportForBankforRSF(
			java.sql.Date startDate, java.sql.Date endDate, String id)
			throws DatabaseException {
		Connection connection;
		ArrayList paymentArray;
		String tempId1;
		Log.log(4, "ReportDAO", "getdailyPaymentReportForBank", "Entered");
		connection = DBConnection.getConnection();
		paymentArray = new ArrayList();
		tempId1 = (new StringBuilder()).append(id).append("0000")
				.append("0000").toString();
		if (startDate == null)
			// break MISSING_BLOCK_LABEL_418;
			if (id != null && !id.equals(""))
				// break MISSING_BLOCK_LABEL_238;
				try {
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' and trunc(p.PAY_REALISATION_DT) between ? and ? GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					PreparedStatement paymentStmt = connection
							.prepareStatement(query);
					paymentStmt.setDate(1, startDate);
					paymentStmt.setDate(2, endDate);
					ResultSet paymentResult;
					PaymentReport paymentReport;
					for (paymentResult = paymentStmt.executeQuery(); paymentResult
							.next(); paymentArray.add(paymentReport)) {
						paymentReport = new PaymentReport();
						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId1);
					}

					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;
				} catch (Exception exception) {
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
		if (id == null)
			// break MISSING_BLOCK_LABEL_762;
			try {
				String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' and trunc(p.PAY_REALISATION_DT) between ? and ? AND  LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
				PreparedStatement paymentStmt = connection
						.prepareStatement(query);
				paymentStmt.setDate(1, startDate);
				paymentStmt.setDate(2, endDate);
				paymentStmt.setString(3, id);
				ResultSet paymentResult;
				PaymentReport paymentReport;
				for (paymentResult = paymentStmt.executeQuery(); paymentResult
						.next(); paymentArray.add(paymentReport)) {
					paymentReport = new PaymentReport();
					paymentReport.setRealisedDate(paymentResult.getDate(1));
					paymentReport.setRealisedAmount(paymentResult.getDouble(2));
					paymentReport.setMemberId(tempId1);
				}

				paymentResult.close();
				paymentResult = null;
				paymentStmt.close();
				paymentStmt = null;
			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		if (startDate != null)
			// break MISSING_BLOCK_LABEL_762;
			if (id != null && !id.equals(""))
				// break MISSING_BLOCK_LABEL_594;
				try {
					String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' and trunc(p.PAY_REALISATION_DT) <= ? GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
					PreparedStatement paymentStmt = connection
							.prepareStatement(query);
					paymentStmt.setDate(1, endDate);
					ResultSet paymentResult;
					PaymentReport paymentReport;
					for (paymentResult = paymentStmt.executeQuery(); paymentResult
							.next(); paymentArray.add(paymentReport)) {
						paymentReport = new PaymentReport();
						paymentReport.setRealisedDate(paymentResult.getDate(1));
						paymentReport.setRealisedAmount(paymentResult
								.getDouble(2));
						paymentReport.setMemberId(tempId1);
					}

					paymentResult.close();
					paymentResult = null;
					paymentStmt.close();
					paymentStmt = null;
				} catch (Exception exception) {
					throw new DatabaseException(exception.getMessage());
				} finally {
					DBConnection.freeConnection(connection);
				}
		if (id == null)
			// break MISSING_BLOCK_LABEL_762;
			try {
				String query = "select P.PAY_REALISATION_DT,SUM(DCI_AMOUNT_RAISED) FROM DAN_CGPAN_INFO D,PAYMENT_DETAIL P,DEMAND_ADVICE_INFO DAI WHERE D.DAN_ID = DAI.DAN_ID and (dci_amount_raised-nvl(dci_amount_cancelled,0))>0 AND D.PAY_ID = P.PAY_ID AND DAI.dan_type in ('SF','AF') AND D.DCI_APPROPRIATION_FLAG = 'Y' and trunc(p.PAY_REALISATION_DT) <= ? AND  LTRIM(RTRIM(UPPER(dai.MEM_BNK_ID))) = LTRIM(RTRIM(UPPER(?)))GROUP BY P.PAY_REALISATION_DT ORDER BY 1";
				PreparedStatement paymentStmt = connection
						.prepareStatement(query);
				paymentStmt.setDate(1, endDate);
				paymentStmt.setString(2, id);
				ResultSet paymentResult;
				PaymentReport paymentReport;
				for (paymentResult = paymentStmt.executeQuery(); paymentResult
						.next(); paymentArray.add(paymentReport)) {
					paymentReport = new PaymentReport();
					paymentReport.setRealisedDate(paymentResult.getDate(1));
					paymentReport.setRealisedAmount(paymentResult.getDouble(2));
					paymentReport.setMemberId(tempId1);
				}

				paymentResult.close();
				paymentResult = null;
				paymentStmt.close();
				paymentStmt = null;
			} catch (Exception exception) {
				throw new DatabaseException(exception.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		Log.log(4, "ReportDAO", "getdailyPaymentReportForBank", "Exited");
		return paymentArray;
	}

	public HashMap getClaimAppListMliWiseForNewCases()
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "ClmListMliWise", "Entered");
		
		HashMap<String,ArrayList> datamap  = new HashMap<String,ArrayList>();
		
		ArrayList mliArray = new ArrayList();
		ArrayList CntBlwGrt10LArray = new ArrayList();
		Connection connection = DBConnection.getConnection();
		GeneralReport mliList = null;
		String status = "A";

		try {
			CallableStatement pendingApps = connection
					.prepareCall("{?=call packGetclmforappprocess.funcGetAllneclmcount(?,?,?)}");
			pendingApps.registerOutParameter(1, Types.INTEGER);
			pendingApps.registerOutParameter(2, Constants.CURSOR);
			pendingApps.registerOutParameter(3, Constants.CURSOR);
			pendingApps.registerOutParameter(4, Types.VARCHAR);
			
			pendingApps.execute();
			int functionReturnValues = pendingApps.getInt(1);
			if (functionReturnValues == Constants.FUNCTION_FAILURE) {
				String error = pendingApps.getString(3);
				pendingApps.close();
				pendingApps = null;
				connection.rollback();
				throw new DatabaseException(error);
			} else {
				ResultSet pendingAppsResults = (ResultSet) pendingApps.getObject(2);
				ResultSet totNoBlwGrt10LResults =  (ResultSet)pendingApps.getObject(3);
				while (pendingAppsResults.next()) {
					mliList = new GeneralReport();
					mliList.setType(pendingAppsResults.getString(1));
					mliList.setProposals(pendingAppsResults.getInt(2));
					mliList.setProposals1(pendingAppsResults.getInt(3));
					mliList.setProposals2(pendingAppsResults.getInt(4));
					mliList.setProposals3(pendingAppsResults.getInt(5));
					mliArray.add(mliList);
				}
				 while (totNoBlwGrt10LResults.next()) {	                
	                	CntBlwGrt10LArray.add(totNoBlwGrt10LResults.getString(2));
	                }
				pendingAppsResults.close();
				pendingAppsResults = null;
				totNoBlwGrt10LResults.close();
				totNoBlwGrt10LResults=null;
				
				datamap.put("AppList", mliArray);
                datamap.put("TotCntList", CntBlwGrt10LArray);
				
			}
		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "ClmListMliWise", "Exited");
		return datamap;
	}

	// added by koteshwar
	public ClaimApplication displayClmRefNumberDtlNew(String claimRefNumber,
			String flag, String memId) throws DatabaseException {
		CPDAO cpdao = new CPDAO();
		ClaimApplication claimapplication = new ClaimApplication();
		PreparedStatement prepStatement = null;
		Connection conn = null;
		ResultSet rs = null;
		String query = null;
		String memberId = null;
		String borrowerId = null;
		String installmentFlag = null;
		String cgclan = null;
		java.util.Date clmApprvdDt = null;
		String bankId = memId.substring(0, 4);
		// String zoneId = memId.substring(4,8);
		// String branchId = memId.substring(8,12);

		try {
			conn = DBConnection.getConnection();
			if (bankId.equals("0000")) {
				query = "select c.bid, c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id, c.clm_installment_flag, c.cgclan, c.clm_approved_dt"
						+ " from claim_detail_temp c"
						+ " where LTRIM(RTRIM(UPPER(c.clm_ref_no))) = ?"
						+ " group by c.bid,"
						+ " c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id,"
						+ " c.clm_installment_flag,"
						+ " c.cgclan,"
						+ " c.clm_approved_dt";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select c.bid, c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id, c.clm_installment_flag, c.cgclan, c.clm_approved_dt"
						+ " from claim_detail_temp c"
						+ " where LTRIM(RTRIM(UPPER(c.clm_ref_no))) = ?"
						+ " group by c.bid,"
						+ " c.mem_bnk_id || c.mem_zne_id || c.mem_brn_id,"
						+ " c.clm_installment_flag,"
						+ " c.cgclan,"
						+ " c.clm_approved_dt";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();
			// Retrieving the Member Id and Borrower Id
			while (rs.next()) {
				borrowerId = (String) rs.getString(1);
				memberId = (String) rs.getString(2);
				installmentFlag = (String) rs.getString(3);
				cgclan = (String) rs.getString(4);
				clmApprvdDt = (java.util.Date) rs.getDate(5);

			}
			rs.close();
			rs = null;

			claimapplication.setBorrowerId(borrowerId);
			if (installmentFlag != null) {
				if (installmentFlag.equals(ClaimConstants.FIRST_INSTALLMENT)) {
					claimapplication.setClaimRefNumber(claimRefNumber);
					claimapplication.setFirstInstallment(true);
				} else if (installmentFlag
						.equals(ClaimConstants.SECOND_INSTALLMENT)) {
					claimapplication.setClaimApprovedDt(clmApprvdDt);
					claimapplication.setSecondInstallment(true);
					claimapplication.setCgclan(cgclan);
					claimapplication.setClaimRefNumber(claimRefNumber);
				}
			}
			// query = null;
			// rs = null;
			// prepStatement = null;
			// System.out.println("Control 2");
			// Getting Member Details
			String bankId1 = memberId.substring(0, 4);
			String zoneId1 = memberId.substring(4, 8);
			String branchId1 = memberId.substring(8, 12);
			MemberInfo memberdetails = cpdao.getMemberInfoDetails(bankId1,
					zoneId1, branchId1);

			// Getting Borrower Details
			BorrowerInfo borrowerdetails = cpdao.getBorrowerDetails(borrowerId);

			// Getting NPA Details
			java.util.Date npaclassifieddt = null;
			java.util.Date cgtsireportingdt = null;
			String reasonfornpa = null;
			String whetherBidIsWillfulDefaulter = null;
			String whetherNPAWrittenOff = null;
			java.util.Date npaWrittenOffDt = null;
			java.util.Date recConclusionDt = null;

			HashMap npadetails = cpdao.isNPADetailsAvailable(borrowerId);
			// String willfulDefaulter = null;
			// boolean npaDtlsAvl = false;

			HashMap npadtlMainTable = (HashMap) npadetails
					.get(ClaimConstants.CLM_MAIN_TABLE);
			if (npadtlMainTable != null) {
				if (npadtlMainTable.size() > 0) {
					npaclassifieddt = (java.util.Date) npadtlMainTable
							.get(ClaimConstants.NPA_CLASSIFIED_DT);
					cgtsireportingdt = (java.util.Date) npadtlMainTable
							.get(ClaimConstants.NPA_REPORTING_DT);
					reasonfornpa = (String) npadtlMainTable
							.get(ClaimConstants.REASONS_FOR_TURNING_NPA);
					whetherBidIsWillfulDefaulter = (String) npadtlMainTable
							.get(ClaimConstants.WILLFUL_DEFAULTER);
					whetherNPAWrittenOff = (String) npadtlMainTable
							.get(ClaimConstants.WHETHER_NPA_WRITTEN_OFF);
					npaWrittenOffDt = (java.util.Date) npadtlMainTable
							.get(ClaimConstants.NPA_WRITTEN_OFF_DATE);
					recConclusionDt = (java.util.Date) npadtlMainTable
							.get(ClaimConstants.NPA_REC_CONCLUSION_DT);
				}
			}

			HashMap npadtltemptable = (HashMap) npadetails
					.get(ClaimConstants.CLM_TEMP_TABLE);
			if (npadtltemptable != null) {
				if (npadtltemptable.size() > 0) {
					npaclassifieddt = (java.util.Date) npadtltemptable
							.get(ClaimConstants.NPA_CLASSIFIED_DT);
					cgtsireportingdt = (java.util.Date) npadtltemptable
							.get(ClaimConstants.NPA_REPORTING_DT);
					reasonfornpa = (String) npadtltemptable
							.get(ClaimConstants.REASONS_FOR_TURNING_NPA);
					whetherBidIsWillfulDefaulter = (String) npadtltemptable
							.get(ClaimConstants.WILLFUL_DEFAULTER);
					whetherNPAWrittenOff = (String) npadtltemptable
							.get(ClaimConstants.WHETHER_NPA_WRITTEN_OFF);
					npaWrittenOffDt = (java.util.Date) npadtltemptable
							.get(ClaimConstants.NPA_WRITTEN_OFF_DATE);
					recConclusionDt = (java.util.Date) npadtltemptable
							.get(ClaimConstants.NPA_REC_CONCLUSION_DT);
				}
			}

			// Getting the Legal Proceedings Detail
			LegalProceedingsDetail legalproceedingdetail = cpdao
					.isLegalProceedingsDetailAvl(borrowerId);

			/*
			 * Query for getting the Term Loan/ Composite Loan Details for the
			 * Claim Ref Number
			 */
			Vector termloandetails = new Vector();
			if (bankId.equals("0000")) {
				/*
				 * query = "select ctd.cgpan," +
				 * " ctd.ctd_last_disbursement_dt," +
				 * " ctd.ctd_principal_repay_amt," +
				 * " ctd.ctd_interest_repay_amt," +
				 * " ctd.ctd_npa_outstanding_amt," +
				 * " ctd.ctd_legal_outstanding_amt," +
				 * " ctd.ctd_first_clm_dt_outstand_amt," +
				 * " ctd.ctd_second_clm_dt_outstand_amt" +
				 * " from claim_tc_detail_temp@cginter ctd" +
				 * " where LTRIM(RTRIM(UPPER(ctd.clm_ref_no))) = ?" +
				 * " group by ctd.cgpan," + " ctd.ctd_last_disbursement_dt," +
				 * " ctd.ctd_principal_repay_amt," +
				 * " ctd.ctd_interest_repay_amt," +
				 * " ctd.ctd_npa_outstanding_amt," +
				 * " ctd.ctd_legal_outstanding_amt," +
				 * " ctd.ctd_first_clm_dt_outstand_amt," +
				 * " ctd.ctd_second_clm_dt_outstand_amt";
				 */
				/*
				 * query = "select ctd.cgpan,ctd.ctd_last_disbursement_dt, " +
				 * " nvl(ctd.ctd_principal_repay_amt,0)," +
				 * " nvl(ctd.ctd_interest_repay_amt,0), " +
				 * " decode(nvl(ctd.ctd_npa_outstanding_amt_revise,0),0,ctd.ctd_npa_outstanding_amt,ctd.ctd_npa_outstanding_amt_revise), "
				 * + " ctd.ctd_legal_outstanding_amt, " +
				 * " ctd.ctd_first_clm_dt_outstand_amt,ctd.ctd_second_clm_dt_outstand_amt "
				 * + " ,ctd.ctd_disb_amt,ctd.ctd_clm_applied_flag " +
				 * " from claim_tc_detail_temp ctd  " +
				 * " where LTRIM(RTRIM(UPPER(ctd.clm_ref_no))) = ? " +
				 * " group by ctd.cgpan,ctd.ctd_last_disbursement_dt, " +
				 * " ctd.ctd_principal_repay_amt,ctd.ctd_npa_recovered_revise,ctd.ctd_interest_repay_amt, "
				 * +
				 * " ctd.ctd_npa_outstanding_amt,ctd.ctd_npa_outstanding_amt_revise,ctd.ctd_legal_outstanding_amt, "
				 * +
				 * " ctd.ctd_first_clm_dt_outstand_amt,ctd.ctd_second_clm_dt_outstand_amt "
				 * + " ,ctd.ctd_disb_amt,ctd.ctd_clm_applied_flag ";
				 */

				query = " select    ctd.cgpan,    ctd.ctd_last_disbursement_dt,       \n"
						+ "    ctd.ctd_principal_repay_amt,    \n"
						+ "    ctd.ctd_interest_repay_amt,       \n"
						+ "   -- ctd.ctd_npa_outstanding_amt, \n"
						+ "          ntd_npa_principal_os_amt,\n"
						+ "          ntd_npa_interest_os_amt,\n"
						+ "    ctd.ctd_legal_outstanding_amt,          \n"
						+ "    ctd.ctd_first_clm_dt_outstand_amt,         \n"
						+ "    ctd.ctd_second_clm_dt_outstand_amt           \n"
						+ "    ,ctd.ctd_disb_amt,ctd.ctd_clm_applied_flag,\n"
						+ "        npa.NPAISRESTRUCTUREDFLAG       \n"
						+ "    from    claim_tc_detail_temp    ctd , npa_tc_detail_temp npdtc,npa_detail_Temp   npa       \n"
						+ "    where    LTRIM(RTRIM(UPPER(ctd.clm_ref_no)))= ? and     npdtc.cgpan= ctd.cgpan   and  npdtc.npa_id= npa.npa_id\n"
						+ "    group    by    ctd.cgpan,           \n"
						+ "    ctd.ctd_last_disbursement_dt,          \n"
						+ "    ctd.ctd_principal_repay_amt,           \n"
						+ "    ctd.ctd_interest_repay_amt,           \n"
						+ "    ctd.ctd_npa_outstanding_amt,         \n"
						+ "    ctd.ctd_legal_outstanding_amt,           \n"
						+ "    ctd.ctd_first_clm_dt_outstand_amt,         \n"
						+ "    ctd.ctd_second_clm_dt_outstand_amt           \n"
						+ "    ,ctd.ctd_disb_amt,ctd.ctd_clm_applied_flag, ntd_npa_principal_os_amt,\n"
						+ "          ntd_npa_interest_os_amt,NPAISRESTRUCTUREDFLAG";

				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				/*
				 * query = "select ctd.cgpan," +
				 * " ctd.ctd_last_disbursement_dt," +
				 * " ctd.ctd_principal_repay_amt," +
				 * " ctd.ctd_interest_repay_amt," +
				 * " ctd.ctd_npa_outstanding_amt," +
				 * " ctd.ctd_legal_outstanding_amt," +
				 * " ctd.ctd_first_clm_dt_outstand_amt," +
				 * " ctd.ctd_second_clm_dt_outstand_amt" +
				 * " from  claim_tc_detail_temp ctd" +
				 * " where LTRIM(RTRIM(UPPER(ctd.clm_ref_no))) = ?" +
				 * " group by ctd.cgpan," + " ctd.ctd_last_disbursement_dt," +
				 * " ctd.ctd_principal_repay_amt," +
				 * " ctd.ctd_interest_repay_amt," +
				 * " ctd.ctd_npa_outstanding_amt," +
				 * " ctd.ctd_legal_outstanding_amt," +
				 * " ctd.ctd_first_clm_dt_outstand_amt," +
				 * " ctd.ctd_second_clm_dt_outstand_amt";
				 */
				query = " select    ctd.cgpan,    ctd.ctd_last_disbursement_dt,       \n"
						+ "    ctd.ctd_principal_repay_amt,    \n"
						+ "    ctd.ctd_interest_repay_amt,       \n"
						+ "   -- ctd.ctd_npa_outstanding_amt, \n"
						+ "          ntd_npa_principal_os_amt,\n"
						+ "          ntd_npa_interest_os_amt,\n"
						+ "    ctd.ctd_legal_outstanding_amt,          \n"
						+ "    ctd.ctd_first_clm_dt_outstand_amt,         \n"
						+ "    ctd.ctd_second_clm_dt_outstand_amt           \n"
						+ "    ,ctd.ctd_disb_amt,ctd.ctd_clm_applied_flag,\n"
						+ "        npa.NPAISRESTRUCTUREDFLAG       \n"
						+ "    from    claim_tc_detail_temp    ctd , npa_tc_detail_temp npdtc,npa_detail_Temp   npa       \n"
						+ "    where    LTRIM(RTRIM(UPPER(ctd.clm_ref_no)))= ? and     npdtc.cgpan= ctd.cgpan   and  npdtc.npa_id= npa.npa_id\n"
						+ "    group    by    ctd.cgpan,           \n"
						+ "    ctd.ctd_last_disbursement_dt,          \n"
						+ "    ctd.ctd_principal_repay_amt,           \n"
						+ "    ctd.ctd_interest_repay_amt,           \n"
						+ "    ctd.ctd_npa_outstanding_amt,         \n"
						+ "    ctd.ctd_legal_outstanding_amt,           \n"
						+ "    ctd.ctd_first_clm_dt_outstand_amt,         \n"
						+ "    ctd.ctd_second_clm_dt_outstand_amt           \n"
						+ "    ,ctd.ctd_disb_amt,ctd.ctd_clm_applied_flag, ntd_npa_principal_os_amt,\n"
						+ "          ntd_npa_interest_os_amt,NPAISRESTRUCTUREDFLAG";
				/*
				 * query = "select ctd.cgpan,ctd.ctd_last_disbursement_dt, " +
				 * " nvl(ctd.ctd_principal_repay_amt,0)," +
				 * " nvl(ctd.ctd_interest_repay_amt,0), " +
				 * " decode(nvl(ctd.ctd_npa_outstanding_amt_revise,0),0,ctd.ctd_npa_outstanding_amt,ctd.ctd_npa_outstanding_amt_revise), "
				 * + " ctd.ctd_legal_outstanding_amt, " +
				 * " ctd.ctd_first_clm_dt_outstand_amt,ctd.ctd_second_clm_dt_outstand_amt "
				 * + " ,ctd.ctd_disb_amt,ctd.ctd_clm_applied_flag " +
				 * " from claim_tc_detail_temp ctd  " +
				 * " where LTRIM(RTRIM(UPPER(ctd.clm_ref_no))) = ? " +
				 * " group by ctd.cgpan,ctd.ctd_last_disbursement_dt, " +
				 * " ctd.ctd_principal_repay_amt,ctd.ctd_npa_recovered_revise,ctd.ctd_interest_repay_amt, "
				 * +
				 * " ctd.ctd_npa_outstanding_amt,ctd.ctd_npa_outstanding_amt_revise,ctd.ctd_legal_outstanding_amt, "
				 * +
				 * " ctd.ctd_first_clm_dt_outstand_amt,ctd.ctd_second_clm_dt_outstand_amt "
				 * + " ,ctd.ctd_disb_amt,ctd.ctd_clm_applied_flag ";
				 */

				// executing the query
				// System.out.println("Line number 43640:query:"+query);
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();
			// System.out.println("Control 3");
			// Retrieving the values from the resultset
			TermLoanCapitalLoanDetail tldetail = null;
			String cgpan = null;
			java.util.Date lastDisbursementDt = null;
			double principalRepayAmnt = 0.0;
			double interestRepayAmnt = 0.0;
			double npaOSAmnt = 0.0;
			double legalOSAmnt = 0.0;
			double firstClmOSAmnt = 0.0;
			double secondClmOSAmnt = 0.0;
			double disbAmnt = 0.0;
			String tcClaimFlag = "";
			String wcClaimFlag = "";

			String acountRestrurd = "";
			double npaPrincipalOutstand = 0.0;
			double npaInterestOutstand = 0.0;
			String youWantClaimForThisCgpan = "";

			SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
			// Retrieving the values from the resultset
			while (rs.next()) {
				cgpan = (String) rs.getString(1);
				lastDisbursementDt = (java.util.Date) rs.getDate(2);
				principalRepayAmnt = (double) rs.getDouble(3);
				interestRepayAmnt = (double) rs.getDouble(4);

				npaPrincipalOutstand = (double) rs.getDouble(5);
				npaInterestOutstand = (double) rs.getDouble(6);

				// npaOSAmnt = (double)rs.getDouble(7);
				legalOSAmnt = (double) rs.getDouble(7);
				firstClmOSAmnt = (double) rs.getDouble(8);
				secondClmOSAmnt = (double) rs.getDouble(9);
				youWantClaimForThisCgpan = (String) rs.getString(11);

				acountRestrurd = (String) rs.getString(12);

				// Setting the values in TermLoanCapitalLoanDetail object
				tldetail = new TermLoanCapitalLoanDetail();
				tldetail.setCgpan(cgpan);
				tldetail.setLastDisbursementDate(lastDisbursementDt);
				tldetail.setPrincipalRepayment(principalRepayAmnt);
				tldetail.setInterestAndOtherCharges(interestRepayAmnt);
				// tldetail.setOutstandingAsOnDateOfNPA(npaOSAmnt);
				tldetail.setOutstandingStatedInCivilSuit(legalOSAmnt);
				tldetail.setOutstandingAsOnDateOfLodgement(firstClmOSAmnt);
				tldetail.setOsAsOnDateOfLodgementOfClmForSecInstllmnt(secondClmOSAmnt);

				tldetail.setNpaPrincipalOutstanding(npaPrincipalOutstand);
				tldetail.setNpaIntrestOutstanding(npaInterestOutstand);
				tldetail.setAccountRestructred(acountRestrurd);

				disbAmnt = (double) rs.getDouble(9);
				tldetail.setTotaDisbAmnt(disbAmnt);
				// tcClaimFlag = (String)rs.getString(10);
				tldetail.setTcClaimFlag(youWantClaimForThisCgpan);

				// adding the object into the vector
				termloandetails.addElement(tldetail);
			}
			rs.close();
			rs = null;

			// System.out.println("Control 4");
			// query = null;
			// rs.close();
			// prepStatement.close();

			// Getting the Working Capital Details
			if (bankId.equals("0000")) {
				/*
				 * query = " select cgpan," + " cwd_npa_outstanding_amt," +
				 * " cwd_legal_outstanding_amt," +
				 * " cwd_first_clm_dt_outstand_amt," +
				 * " cwd_second_clm_dt_outstand_amt" +
				 * " from claim_wc_detail_temp@cginter cwd" +
				 * " where LTRIM(RTRIM(UPPER(cwd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " group by cgpan," + " cwd_npa_outstanding_amt," +
				 * " cwd_legal_outstanding_amt," +
				 * " cwd_first_clm_dt_outstand_amt," +
				 * " cwd_second_clm_dt_outstand_amt";
				 */
				query = "select cgpan, "
						+ " decode(nvl(cwd.cwd_npa_outstanding_amt_revise,0),0,cwd_npa_outstanding_amt,cwd.cwd_npa_outstanding_amt_revise), "
						+ " cwd_legal_outstanding_amt, cwd_first_clm_dt_outstand_amt,  "
						+ " cwd_second_clm_dt_outstand_amt  "
						+ " ,cwd_clm_applied_flag "
						+ " from claim_wc_detail_temp cwd "
						+ " where LTRIM(RTRIM(UPPER(cwd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) "
						+ " group by cgpan, cwd_npa_outstanding_amt, cwd.cwd_npa_outstanding_amt_revise,cwd_legal_outstanding_amt, "
						+ " cwd_first_clm_dt_outstand_amt, cwd_second_clm_dt_outstand_amt "
						+ " ,cwd_clm_applied_flag";
				// Executing the query
				// System.out.println("Line number 43709:query:"+query);
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				/*
				 * query = " select cgpan," + " cwd_npa_outstanding_amt," +
				 * " cwd_legal_outstanding_amt," +
				 * " cwd_first_clm_dt_outstand_amt," +
				 * " cwd_second_clm_dt_outstand_amt" +
				 * " from claim_wc_detail_temp cwd" +
				 * " where LTRIM(RTRIM(UPPER(cwd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
				 * + " group by cgpan," + " cwd_npa_outstanding_amt," +
				 * " cwd_legal_outstanding_amt," +
				 * " cwd_first_clm_dt_outstand_amt," +
				 * " cwd_second_clm_dt_outstand_amt";
				 */
				query = "select cgpan, "
						+ " decode(nvl(cwd.cwd_npa_outstanding_amt_revise,0),0,cwd_npa_outstanding_amt,cwd.cwd_npa_outstanding_amt_revise), "
						+ " cwd_legal_outstanding_amt, cwd_first_clm_dt_outstand_amt,  "
						+ " cwd_second_clm_dt_outstand_amt  "
						+ " ,cwd_clm_applied_flag "
						+ " from claim_wc_detail_temp cwd "
						+ " where LTRIM(RTRIM(UPPER(cwd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) "
						+ " group by cgpan, cwd_npa_outstanding_amt, cwd.cwd_npa_outstanding_amt_revise,cwd_legal_outstanding_amt, "
						+ " cwd_first_clm_dt_outstand_amt, cwd_second_clm_dt_outstand_amt "
						+ " ,cwd_clm_applied_flag";
				// Executing the query
				// System.out.println("Line number 43728:query:"+query);
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();

			// Retrieving the values from the resultset
			ArrayList workingCapitalDtls = new ArrayList();
			Vector workingCapitalDtlsVector = new Vector();
			WorkingCapitalDetail wcdetail = null;
			while (rs.next()) {
				cgpan = (String) rs.getString(1);
				npaOSAmnt = (double) rs.getDouble(2);
				legalOSAmnt = (double) rs.getDouble(3);
				firstClmOSAmnt = (double) rs.getDouble(4);
				secondClmOSAmnt = (double) rs.getDouble(5);

				// Setting the values in WorkingCapitalDetail object
				wcdetail = new WorkingCapitalDetail();
				wcdetail.setCgpan(cgpan);
				wcdetail.setOutstandingAsOnDateOfNPA(npaOSAmnt);
				wcdetail.setOutstandingStatedInCivilSuit(legalOSAmnt);
				wcdetail.setOutstandingAsOnDateOfLodgement(firstClmOSAmnt);
				wcdetail.setOsAsOnDateOfLodgementOfClmForSecInstllmnt(secondClmOSAmnt);

				wcClaimFlag = (String) rs.getString(6);
				wcdetail.setWcClaimFlag(wcClaimFlag);

				// Adding the WorkingCapitalDetail object in the ArrayList
				workingCapitalDtls.add(wcdetail);
				workingCapitalDtlsVector.add(wcdetail);

			}
			rs.close();
			rs = null;

			// System.out.println("Control 5");
			// query = null;
			// rs = null;
			// prepStatement = null;
			if (bankId.equals("0000")) {
				query = "select csd_id,"
						+ " csd_particulars_flag,"
						+ " csd_guarantor_networth,"
						+ " csd_worth_reduction_reason,"
						+ " csd_amt_thro_per_guar"
						+ " from claim_security_detail_temp csd "
						+ " where LTRIM(RTRIM(UPPER(csd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by csd_id," + " csd_particulars_flag,"
						+ " csd_guarantor_networth,"
						+ " csd_worth_reduction_reason,"
						+ " csd_amt_thro_per_guar";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select csd_id,"
						+ " csd_particulars_flag,"
						+ " csd_guarantor_networth,"
						+ " csd_worth_reduction_reason,"
						+ " csd_amt_thro_per_guar"
						+ " from claim_security_detail_temp csd "
						+ " where LTRIM(RTRIM(UPPER(csd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by csd_id," + " csd_particulars_flag,"
						+ " csd_guarantor_networth,"
						+ " csd_worth_reduction_reason,"
						+ " csd_amt_thro_per_guar";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			rs = (ResultSet) prepStatement.executeQuery();

			// retrieving the values from resultset
			String securityid = null;
			String particularsFlag = null;
			String reasonforreduction = null;
			double guarantorNetWorth = 0.0;
			double amntthruperguarantee = 0.0;
			HashMap temp = new HashMap();
			DtlsAsOnDateOfSanction dtlsAsOnSanction = new DtlsAsOnDateOfSanction();
			DtlsAsOnDateOfNPA dtlsAsOnNPA = new DtlsAsOnDateOfNPA();
			DtlsAsOnLogdementOfClaim dtslAsOnLodgement = new DtlsAsOnLogdementOfClaim();
			DtlsAsOnLogdementOfSecondClaim dtslAsOnSecClmLodgement = new DtlsAsOnLogdementOfSecondClaim();
			while (rs.next()) {
				securityid = (String) rs.getString(1);
				particularsFlag = (String) rs.getString(2);
				guarantorNetWorth = (double) rs.getDouble(3);
				reasonforreduction = (String) rs.getString(4);
				amntthruperguarantee = (double) rs.getDouble(5);

				if (particularsFlag
						.equals(ClaimConstants.CLM_SAPGD_AS_ON_SANCTION_CODE)) {
					dtlsAsOnSanction.setNetworthOfGuarantors(guarantorNetWorth);
					dtlsAsOnSanction.setReasonsForReduction(reasonforreduction);
					temp.put(ClaimConstants.CLM_SAPGD_AS_ON_SANCTION_CODE,
							securityid);
				} else if (particularsFlag
						.equals(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE)) {
					dtlsAsOnNPA.setNetworthOfGuarantors(guarantorNetWorth);
					dtlsAsOnNPA.setReasonsForReduction(reasonforreduction);
					temp.put(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE,
							securityid);
				} else if (particularsFlag
						.equals(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM)) {
					dtslAsOnLodgement
							.setNetworthOfGuarantors(guarantorNetWorth);
					dtslAsOnLodgement
							.setReasonsForReduction(reasonforreduction);
					temp.put(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM,
							securityid);
				} else if (particularsFlag
						.equals(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_SEC_CLM)) {
					dtslAsOnSecClmLodgement
							.setNetworthOfGuarantors(guarantorNetWorth);
					// dtslAsOnSecClmLodgement.setReasonsForReduction(reasonforreduction);
					dtslAsOnSecClmLodgement
							.setAmtRealisedPersonalGuarantee(amntthruperguarantee);
					temp.put(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM,
							securityid);
				}
			}
			rs.close();
			rs = null;

			// System.out.println("Control 6");
			// query = null;
			// rs = null;
			// prepStatement = null;

			// Retrieving the Security Particulars
			for (int i = 0; i < temp.size(); i++) {
				String particular = null;
				double value = 0.0;

				if (temp.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_SANCTION_CODE)) {
					securityid = (String) temp
							.get(ClaimConstants.CLM_SAPGD_AS_ON_SANCTION_CODE);
					// System.out.println("As on Date of Sanction of Credit-Security Id:"+securityid);
					if (bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					if (!bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}

					// Executing the Query
					prepStatement = conn.prepareStatement(query);
					prepStatement.setString(1, securityid);
					rs = (ResultSet) prepStatement.executeQuery();

					// Retrieving the values from the resultset
					while (rs.next()) {
						particular = (String) rs.getString(1);
						value = (double) rs.getDouble(2);
						if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_LAND)) {
							dtlsAsOnSanction.setValueOfLand(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_BLDG)) {
							dtlsAsOnSanction.setValueOfBuilding(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_MC)) {
							dtlsAsOnSanction.setValueOfMachine(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHER_FIXED_MOV_ASSETS)) {
							dtlsAsOnSanction
									.setValueOfOtherFixedMovableAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_CUR_ASSETS)) {
							dtlsAsOnSanction.setValueOfCurrentAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHERS)) {
							dtlsAsOnSanction.setValueOfOthers(value);
						}
					}
					rs.close();
					rs = null;

					// query = null;
					// rs = null;
					// prepStatement = null;
				}
				// commented by sukumar@path on 28-Jan-2010
				// else
				// if(temp.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE))
				if (temp.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE)) {
					securityid = (String) temp
							.get(ClaimConstants.CLM_SAPGD_AS_ON_NPA_CODE);
					// System.out.println("As on Date of NPA-Security Id:"+securityid);
					if (bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					if (!bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					// Executing the Query
					prepStatement = conn.prepareStatement(query);
					prepStatement.setString(1, securityid);
					rs = (ResultSet) prepStatement.executeQuery();

					// Retrieving the values from the resultset
					while (rs.next()) {
						particular = (String) rs.getString(1);
						value = (double) rs.getDouble(2);
						if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_LAND)) {
							dtlsAsOnNPA.setValueOfLand(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_BLDG)) {
							dtlsAsOnNPA.setValueOfBuilding(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_MC)) {
							dtlsAsOnNPA.setValueOfMachine(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHER_FIXED_MOV_ASSETS)) {
							dtlsAsOnNPA
									.setValueOfOtherFixedMovableAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_CUR_ASSETS)) {
							dtlsAsOnNPA.setValueOfCurrentAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHERS)) {
							dtlsAsOnNPA.setValueOfOthers(value);
						}
					}
					rs.close();
					rs = null;

					// query = null;
					// rs = null;
					// prepStatement = null;
				}
				// commented by sukumar@path on 28-Jan-2010
				// else
				// if(temp.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM))
				if (temp.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM)) {
					securityid = (String) temp
							.get(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_CLM);
					// System.out.println("As on Date of Preferrment of Claim-Security Id:"+securityid);
					if (bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					if (!bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					// Executing the Query
					prepStatement = conn.prepareStatement(query);
					prepStatement.setString(1, securityid);
					rs = (ResultSet) prepStatement.executeQuery();
					// System.out.println("Control 6");
					// Retrieving the values from the resultset
					while (rs.next()) {
						particular = (String) rs.getString(1);
						value = (double) rs.getDouble(2);
						if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_LAND)) {
							dtslAsOnLodgement.setValueOfLand(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_BLDG)) {
							dtslAsOnLodgement.setValueOfBuilding(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_MC)) {
							dtslAsOnLodgement.setValueOfMachine(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHER_FIXED_MOV_ASSETS)) {
							dtslAsOnLodgement
									.setValueOfOtherFixedMovableAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_CUR_ASSETS)) {
							dtslAsOnLodgement.setValueOfCurrentAssets(value);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHERS)) {
							dtslAsOnLodgement.setValueOfOthers(value);
						}
					}
					rs.close();
					rs = null;

					// query = null;
					// rs = null;
					// prepStatement = null;
				} else if (temp
						.containsKey(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_SEC_CLM)) {
					securityid = (String) temp
							.get(ClaimConstants.CLM_SAPGD_AS_ON_LODGE_OF_SEC_CLM);
					if (bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}
					if (!bankId.equals("0000")) {
						query = "select csp_particular,"
								+ " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction"
								+ " from claim_security_particular_temp csp "
								+ " where LTRIM(RTRIM(UPPER(csp.csd_id))) = LTRIM(RTRIM(UPPER(?)))"
								+ " group by csp_particular," + " csp_value, "
								+ " csp_amt_thro_security,"
								+ " csp_reason_for_reduction";
					}

					// Executing the Query
					prepStatement = conn.prepareStatement(query);
					prepStatement.setString(1, securityid);
					rs = (ResultSet) prepStatement.executeQuery();
					double amntthrudisposalofsecurity = 0.0;
					String specificRsnForReduction = null;

					// Retrieving the values from the resultset
					while (rs.next()) {
						particular = (String) rs.getString(1);
						value = (double) rs.getDouble(2);
						amntthrudisposalofsecurity = (double) rs.getDouble(3);
						specificRsnForReduction = (String) rs.getString(4);
						if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_LAND)) {
							dtslAsOnSecClmLodgement.setValueOfLand(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedLand(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionLand(specificRsnForReduction);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_BLDG)) {
							dtslAsOnSecClmLodgement.setValueOfBuilding(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedBuilding(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionBuilding(specificRsnForReduction);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_MC)) {
							dtslAsOnSecClmLodgement.setValueOfMachine(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedMachine(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionMachine(specificRsnForReduction);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHER_FIXED_MOV_ASSETS)) {
							dtslAsOnSecClmLodgement
									.setValueOfOtherFixedMovableAssets(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedFixed(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionFixed(specificRsnForReduction);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_CUR_ASSETS)) {
							dtslAsOnSecClmLodgement
									.setValueOfCurrentAssets(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedCurrent(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionCurrent(specificRsnForReduction);
						} else if (particular
								.equals(ClaimConstants.CLM_SAPGD_PARTICULAR_OTHERS)) {
							dtslAsOnSecClmLodgement.setValueOfOthers(value);
							dtslAsOnSecClmLodgement
									.setAmtRealisedOthers(amntthrudisposalofsecurity);
							dtslAsOnSecClmLodgement
									.setReasonsForReductionOthers(specificRsnForReduction);
						}
					}
					rs.close();
					rs = null;
					// query = null;
					// rs = null;
					// prepStatement = null;
				}
			}

			SecurityAndPersonalGuaranteeDtls sapgdtls = new SecurityAndPersonalGuaranteeDtls();
			sapgdtls.setDetailsAsOnDateOfSanction(dtlsAsOnSanction);
			sapgdtls.setDetailsAsOnDateOfNPA(dtlsAsOnNPA);
			sapgdtls.setDetailsAsOnDateOfLodgementOfClaim(dtslAsOnLodgement);
			sapgdtls.setDetailsAsOnDateOfLodgementOfSecondClaim(dtslAsOnSecClmLodgement);

			// Retrieving the Recovery Details
			Vector recoveryDtls = new Vector();
			if (bankId.equals("0000")) {
				/*
				 * query = " select crd.cgpan," + " rmm.rmd_description," +
				 * " crd.crd_tc_principal_amt," + " crd.crd_tc_interest_amt," +
				 * " crd.crd_wc_amt," + " crd_wc_other_amt" +
				 * " from claim_recovery_detail_temp@cginter crd," +
				 * " recovery_mode_master rmm " +
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) "
				 * + " and crd.rmd_id = rmm.rmd_id" + " group by crd.cgpan," +
				 * " rmm.rmd_description," + " crd.crd_tc_principal_amt," +
				 * " crd.crd_tc_interest_amt," + " crd.crd_wc_amt," +
				 * " crd_wc_other_amt";
				 */

				/*
				 * query = " select cgp,descr, "+
				 * " decode(nvl(ntcp,0),0,sum(tcp),sum(ntcp)),  "+
				 * " decode(nvl(ntcp,0),0,sum(tci),0),  "+
				 * " decode(nvl(nwcp,0),0,sum(wcp),sum(nwcp)),  "+
				 * " decode(nvl(nwcp,0),0,sum(wci),0)  "+ " from (  "+
				 * "  select crd.cgpan cgp,rmm.rmd_description descr,crd.crd_tc_principal_amt tcp,  "
				 * +
				 * " crd.crd_tc_interest_amt tci,crd.crd_wc_amt wcp,crd_wc_other_amt wci,0 ntcp,0 nwcp  "
				 * + " from claim_recovery_detail_temp@cginter crd,  "+
				 * " recovery_mode_master rmm   "+
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
				 * + " and crd.rmd_id = rmm.rmd_id  "+
				 * " group by crd.cgpan,rmm.rmd_description,crd.crd_tc_principal_amt,crd.crd_tc_interest_amt,   "
				 * + " crd.crd_wc_amt,crd_wc_other_amt  "+ " union all  "+
				 * " select cgpan,null descr,0 tcp,0 tci,0 wcp,0 wci,ctd_npa_recovered_revise ntcp,0 nwcp  "
				 * + " from claim_tc_detail_temp@CGINTER crd  "+
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
				 * + " union all  "+
				 * " select cgpan,null descr,0 tcp,0 tci,0 wcp,0 wci,0 ntcp,cwd_npa_recovered_revise nwcp  "
				 * + " from claim_wc_detail_temp@CGINTER crd  "+
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
				 * + " )  "+ " group by cgp,descr,ntcp,nwcp ";
				 */
				/*
				 * " UNION ALL "+
				 * " SELECT crd.cgpan, rmd_description descr, 0 tcp, 0 tci, "+
				 * " 0 wcp, 0 wci, ctd_npa_recovered_revise ntcp, "+ " 0 nwcp "+
				 * " FROM claim_tc_detail_temp ctd, "+
				 * " claim_recovery_detail_temp crd, "+
				 * " recovery_mode_master rmm "+
				 * " WHERE LTRIM (RTRIM (UPPER (crd.clm_ref_no))) = "+
				 * " LTRIM (RTRIM (UPPER (?))) "+ " AND crd.cgpan = ctd.cgpan "+
				 * " AND crd.rmd_id = rmm.rmd_id "+ " UNION ALL "+
				 * " SELECT crd.cgpan, rmd_description descr, 0 tcp, 0 tci, "+
				 * " 0 wcp, 0 wci, 0 ntcp, "+ " cwd_npa_recovered_revise nwcp "+
				 * " FROM claim_wc_detail_temp cwd, "+
				 * " claim_recovery_detail_temp crd, "+
				 * " recovery_mode_master rmm "+
				 * " WHERE LTRIM (RTRIM (UPPER (crd.clm_ref_no))) = "+
				 * " LTRIM (RTRIM (UPPER (?))) "+ " AND crd.cgpan = cwd.cgpan "+
				 * " AND crd.rmd_id = rmm.rmd_id "+
				 */
				query = " SELECT   cgp, descr, SUM (tcp), SUM (tci), SUM (wcp), SUM (wci) "
						+ " FROM (SELECT  distinct  cgp, descr, "
						+ " DECODE (NVL (ntcp, 0), 0, SUM (tcp), SUM (ntcp)) tcp, "
						+ " DECODE (NVL (ntcp, 0), 0, SUM (tci), 0) tci, "
						+ " DECODE (NVL (nwcp, 0), 0, SUM (wcp), SUM (nwcp)) wcp, "
						+ " DECODE (NVL (nwcp, 0), 0, SUM (wci), 0) wci "
						+ " FROM (SELECT   crd.cgpan cgp, rmm.rmd_description descr, "
						+ " crd.crd_tc_principal_amt tcp, "
						+ " crd.crd_tc_interest_amt tci, crd.crd_wc_amt wcp, "
						+ " crd_wc_other_amt wci, 0 ntcp, 0 nwcp "
						+ " FROM claim_recovery_detail_temp crd, "
						+ " recovery_mode_master rmm "
						+ " WHERE LTRIM (RTRIM (UPPER (crd.clm_ref_no))) = "
						+ " LTRIM (RTRIM (UPPER (?))) "
						+ " AND crd.rmd_id = rmm.rmd_id "
						+ " GROUP BY crd.cgpan, "
						+ " rmm.rmd_description, "
						+ " crd.crd_tc_principal_amt, "
						+ " crd.crd_tc_interest_amt, "
						+ " crd.crd_wc_amt, "
						+ " crd_wc_other_amt "
						+ " ) GROUP BY cgp, descr, ntcp, nwcp) "
						+ " GROUP BY cgp, descr ";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,claimRefNumber);
				// prepStatement.setString(3,claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				/*
				 * query = " select crd.cgpan," + " rmm.rmd_description," +
				 * " crd.crd_tc_principal_amt," + " crd.crd_tc_interest_amt," +
				 * " crd.crd_wc_amt," + " crd_wc_other_amt" +
				 * " from claim_detail_temp c," +
				 * " claim_recovery_detail_temp crd," +
				 * " recovery_mode_master rmm " +
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) "
				 * + " and crd.rmd_id = rmm.rmd_id" + " group by crd.cgpan," +
				 * " rmm.rmd_description," + " crd.crd_tc_principal_amt," +
				 * " crd.crd_tc_interest_amt," + " crd.crd_wc_amt," +
				 * " crd_wc_other_amt";
				 */

				/*
				 * query = " select cgp,descr, "+
				 * " decode(nvl(ntcp,0),0,sum(tcp),sum(ntcp)),  "+
				 * " decode(nvl(ntcp,0),0,sum(tci),0),  "+
				 * " decode(nvl(nwcp,0),0,sum(wcp),sum(nwcp)),  "+
				 * " decode(nvl(nwcp,0),0,sum(wci),0)  "+ " from (  "+
				 * "  select crd.cgpan cgp,rmm.rmd_description descr,crd.crd_tc_principal_amt tcp,  "
				 * +
				 * " crd.crd_tc_interest_amt tci,crd.crd_wc_amt wcp,crd_wc_other_amt wci,0 ntcp,0 nwcp  "
				 * + " from claim_recovery_detail_temp@cginter crd,  "+
				 * " recovery_mode_master rmm   "+
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
				 * + " and crd.rmd_id = rmm.rmd_id  "+
				 * " group by crd.cgpan,rmm.rmd_description,crd.crd_tc_principal_amt,crd.crd_tc_interest_amt,   "
				 * + " crd.crd_wc_amt,crd_wc_other_amt  "+ " union all  "+
				 * " select cgpan,null descr,0 tcp,0 tci,0 wcp,0 wci,ctd_npa_recovered_revise ntcp,0 nwcp  "
				 * + " from claim_tc_detail_temp@CGINTER crd  "+
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
				 * + " union all  "+
				 * " select cgpan,null descr,0 tcp,0 tci,0 wcp,0 wci,0 ntcp,cwd_npa_recovered_revise nwcp  "
				 * + " from claim_wc_detail_temp@CGINTER crd  "+
				 * " where LTRIM(RTRIM(UPPER(crd.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))   "
				 * + " )  "+ " group by cgp,descr,ntcp,nwcp ";
				 */
				/*
				 * " UNION ALL "+
				 * " SELECT crd.cgpan, rmd_description descr, 0 tcp, 0 tci, "+
				 * " 0 wcp, 0 wci, ctd_npa_recovered_revise ntcp, "+ " 0 nwcp "+
				 * " FROM claim_tc_detail_temp ctd, "+
				 * " claim_recovery_detail_temp crd, "+
				 * " recovery_mode_master rmm "+
				 * " WHERE LTRIM (RTRIM (UPPER (crd.clm_ref_no))) = "+
				 * " LTRIM (RTRIM (UPPER (?))) "+ " AND crd.cgpan = ctd.cgpan "+
				 * " AND crd.rmd_id = rmm.rmd_id "+ " UNION ALL "+
				 * " SELECT crd.cgpan, rmd_description descr, 0 tcp, 0 tci, "+
				 * " 0 wcp, 0 wci, 0 ntcp, "+ " cwd_npa_recovered_revise nwcp "+
				 * " FROM claim_wc_detail_temp cwd, "+
				 * " claim_recovery_detail_temp crd, "+
				 * " recovery_mode_master rmm "+
				 * " WHERE LTRIM (RTRIM (UPPER (crd.clm_ref_no))) = "+
				 * " LTRIM (RTRIM (UPPER (?))) "+ " AND crd.cgpan = cwd.cgpan "+
				 * " AND crd.rmd_id = rmm.rmd_id "+
				 */
				query = " SELECT   cgp, descr, SUM (tcp), SUM (tci), SUM (wcp), SUM (wci) "
						+ " FROM (SELECT  distinct cgp, descr, "
						+ " DECODE (NVL (ntcp, 0), 0, SUM (tcp), SUM (ntcp)) tcp, "
						+ " DECODE (NVL (ntcp, 0), 0, SUM (tci), 0) tci, "
						+ " DECODE (NVL (nwcp, 0), 0, SUM (wcp), SUM (nwcp)) wcp, "
						+ " DECODE (NVL (nwcp, 0), 0, SUM (wci), 0) wci "
						+ " FROM (SELECT   crd.cgpan cgp, rmm.rmd_description descr, "
						+ " crd.crd_tc_principal_amt tcp, "
						+ " crd.crd_tc_interest_amt tci, crd.crd_wc_amt wcp, "
						+ " crd_wc_other_amt wci, 0 ntcp, 0 nwcp "
						+ " FROM claim_recovery_detail_temp crd, "
						+ " recovery_mode_master rmm "
						+ " WHERE LTRIM (RTRIM (UPPER (crd.clm_ref_no))) = "
						+ " LTRIM (RTRIM (UPPER (?))) "
						+ " AND crd.rmd_id = rmm.rmd_id "
						+ " GROUP BY crd.cgpan, "
						+ " rmm.rmd_description, "
						+ " crd.crd_tc_principal_amt, "
						+ " crd.crd_tc_interest_amt, "
						+ " crd.crd_wc_amt, "
						+ " crd_wc_other_amt "
						+ " ) GROUP BY cgp, descr, ntcp, nwcp) "
						+ " GROUP BY cgp, descr ";
				// Executing the query

				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,claimRefNumber);
				// prepStatement.setString(3,claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}
			// System.out.println("Query:"+query);
			rs = (ResultSet) prepStatement.executeQuery();

			String modeOfRecovery = null;
			double tcPrincipal = 0.0;
			double tcInterestAndOtherCharges = 0.0;
			double wcAmount = 0.0;
			double wcOtherCharges = 0.0;
			RecoveryDetails recDtl = null;

			// Getting the values from the ResultSet
			while (rs.next()) {
				cgpan = (String) rs.getString(1);
				modeOfRecovery = (String) rs.getString(2);
				tcPrincipal = (double) rs.getDouble(3);
				tcInterestAndOtherCharges = (double) rs.getDouble(4);
				wcAmount = (double) rs.getDouble(5);
				wcOtherCharges = (double) rs.getDouble(6);

				// Setting the values in the RecoveryDetails object
				recDtl = new RecoveryDetails();
				recDtl.setCgpan(cgpan);
				recDtl.setModeOfRecovery(modeOfRecovery);
				recDtl.setTcPrincipal(tcPrincipal);
				recDtl.setTcInterestAndOtherCharges(tcInterestAndOtherCharges);
				recDtl.setWcAmount(wcAmount);
				recDtl.setWcOtherCharges(wcOtherCharges);

				// Adding the Recovery Details object to the vector
				recoveryDtls.addElement(recDtl);
			}
			rs.close();
			rs = null;

			// query = null;
			// rs = null;
			// prepStatement = null;

			// Getting Claim Summary Details
			if (bankId.equals("0000")) {
				query = "select caa.cgpan,"
						+ " caa.caa_applied_amount,decode(app_reapprove_amount,null,app_approved_amount,app_reapprove_amount) "
						+ " from claim_application_amount_temp caa,application_detail a"
						+ " where LTRIM(RTRIM(UPPER(caa.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) and a.cgpan=caa.cgpan "
						+ " group by caa.cgpan,"
						+ " caa.caa_applied_amount,decode(app_reapprove_amount,null,app_approved_amount,app_reapprove_amount) ";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select caa.cgpan,"
						+ " caa.caa_applied_amount,decode(app_reapprove_amount,null,app_approved_amount,app_reapprove_amount) "
						+ " from claim_detail_temp c,"
						+ " claim_application_amount_temp caa,application_detail a"
						+ " where LTRIM(RTRIM(UPPER(caa.clm_ref_no))) = LTRIM(RTRIM(UPPER(?))) and a.cgpan=caa.cgpan"
						+ " group by caa.cgpan,"
						+ " caa.caa_applied_amount,decode(app_reapprove_amount,null,app_approved_amount,app_reapprove_amount) ";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}

			// Executing the Query
			ArrayList clmSummaryDtls = new ArrayList();
			rs = (ResultSet) prepStatement.executeQuery();

			// Getting the values from the ResultSet
			double clmAppliedAmount = 0.0;
			double approvedAmount = 0.0;
			// ClaimSummaryDtls clmSummaryDtl = null;
			// System.out.println("size:"+clmSummaryDtls.size());
			while (rs.next()) {
				cgpan = (String) rs.getString(1);
				clmAppliedAmount = (double) rs.getDouble(2);
				approvedAmount = (double) rs.getDouble(3);
				ClaimSummaryDtls clmSummaryDtl = new ClaimSummaryDtls();
				clmSummaryDtl.setCgpan(cgpan);
				clmSummaryDtl.setAmount(clmAppliedAmount);
				clmSummaryDtl.setLimitCoveredUnderCGFSI(String
						.valueOf(approvedAmount));
				// Adding the clmSummaryDtl object in the ArrayList
				clmSummaryDtls.add(clmSummaryDtl);
			}
			rs.close();
			rs = null;

			// query = null;
			// rs = null;
			// prepStatement = null;

			// Retrieving the remaining information
			if (bankId.equals("0000")) {
				query = "select clm_participating_bank_name,"
						+ " clm_recall_notice_dt,"
						+ " clm_filing_dt,"
						+ " clm_wc_release_dt,"
						+ " clm_official_name,"
						+ " clm_official_designation,"
						+ " clm_mli_name,"
						+ " clm_place,"
						+ " clm_date,CLM_SUBSIDY_CREDIT_DT,CLM_SUBSIDY_AMT,CLM_IS_MICRO_FLAG "
						+ " ,clm_dealing_officer,clm_is_wilful_defaulter_flag,clm_is_fraud_flag,clm_is_ext_int_enq_concluded "
						+ " ,clm_is_staff_involved_flag,clm_reason_for_recall_bef_npa,clm_reason_for_suit_bef_npa,clm_dt_of_poss_sarfaesi,clm_incl_unappr_recpts "
						+ " ,clm_conf_corr_value,clm_subsidy_involved,clm_subsidy_after_npa,clm_subsidy_adjusted,clm_mli_comm_fin_pos "
						+ " ,clm_fin_ass_min_def,clm_mli_prop_oth_proj,clm_det_oth_fac_to_borr,clm_watch_list,clm_mli_remarks,clm_return_remarks "
						+ " from claim_detail_temp c "
						+ " where LTRIM(RTRIM(UPPER(c.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by clm_participating_bank_name,"
						+ " clm_recall_notice_dt,"
						+ " clm_filing_dt,"
						+ " clm_wc_release_dt,"
						+ " clm_official_name,"
						+ " clm_official_designation,"
						+ " clm_mli_name,"
						+ " clm_place,"
						+ " clm_date,CLM_SUBSIDY_CREDIT_DT,CLM_SUBSIDY_AMT,CLM_IS_MICRO_FLAG "
						+ " ,clm_dealing_officer,clm_is_wilful_defaulter_flag,clm_is_fraud_flag,clm_is_ext_int_enq_concluded "
						+ " ,clm_is_staff_involved_flag,clm_reason_for_recall_bef_npa,clm_reason_for_suit_bef_npa,clm_dt_of_poss_sarfaesi,clm_incl_unappr_recpts "
						+ " ,clm_conf_corr_value,clm_subsidy_involved,clm_subsidy_after_npa,clm_subsidy_adjusted,clm_mli_comm_fin_pos "
						+ " ,clm_fin_ass_min_def,clm_mli_prop_oth_proj,clm_det_oth_fac_to_borr,clm_watch_list,clm_mli_remarks,clm_return_remarks ";
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
			}
			if (!bankId.equals("0000")) {
				query = "select clm_participating_bank_name,"
						+ " clm_recall_notice_dt,"
						+ " clm_filing_dt,"
						+ " clm_wc_release_dt,"
						+ " clm_official_name,"
						+ " clm_official_designation,"
						+ " clm_mli_name,"
						+ " clm_place,"
						+ " clm_date,CLM_SUBSIDY_CREDIT_DT,CLM_SUBSIDY_AMT,CLM_IS_MICRO_FLAG "
						+ " ,clm_dealing_officer,clm_is_wilful_defaulter_flag,clm_is_fraud_flag,clm_is_ext_int_enq_concluded "
						+ " ,clm_is_staff_involved_flag,clm_reason_for_recall_bef_npa,clm_reason_for_suit_bef_npa,clm_dt_of_poss_sarfaesi,clm_incl_unappr_recpts "
						+ " ,clm_conf_corr_value,clm_subsidy_involved,clm_subsidy_after_npa,clm_subsidy_adjusted,clm_mli_comm_fin_pos "
						+ " ,clm_fin_ass_min_def,clm_mli_prop_oth_proj,clm_det_oth_fac_to_borr,clm_watch_list,clm_mli_remarks,clm_return_remarks "
						+ " from claim_detail_temp c "
						+ " where LTRIM(RTRIM(UPPER(c.clm_ref_no))) = LTRIM(RTRIM(UPPER(?)))"
						+ " group by clm_participating_bank_name,"
						+ " clm_recall_notice_dt,"
						+ " clm_filing_dt,"
						+ " clm_wc_release_dt,"
						+ " clm_official_name,"
						+ " clm_official_designation,"
						+ " clm_mli_name,"
						+ " clm_place,"
						+ " clm_date,CLM_SUBSIDY_CREDIT_DT,CLM_SUBSIDY_AMT,CLM_IS_MICRO_FLAG "
						+ " ,clm_dealing_officer,clm_is_wilful_defaulter_flag,clm_is_fraud_flag,clm_is_ext_int_enq_concluded "
						+ " ,clm_is_staff_involved_flag,clm_reason_for_recall_bef_npa,clm_reason_for_suit_bef_npa,clm_dt_of_poss_sarfaesi,clm_incl_unappr_recpts "
						+ " ,clm_conf_corr_value,clm_subsidy_involved,clm_subsidy_after_npa,clm_subsidy_adjusted,clm_mli_comm_fin_pos "
						+ " ,clm_fin_ass_min_def,clm_mli_prop_oth_proj,clm_det_oth_fac_to_borr,clm_watch_list,clm_mli_remarks,clm_return_remarks ";
				// System.out.println("Query:"+query);
				prepStatement = conn.prepareStatement(query);
				prepStatement.setString(1, claimRefNumber);
				// System.out.println("Query was executed in line number 44372");
				// prepStatement.setString(2,bankId);
				// prepStatement.setString(3,zoneId);
				// prepStatement.setString(4,branchId);
			}

			// Executing.query
			rs = (ResultSet) prepStatement.executeQuery();

			// Retrieving the values
			String participatingBank = null;
			java.util.Date recallNoticeDt = null;
			java.util.Date wcReleaseDt = null;
			String officialName = null;
			String officialDesignation = null;
			String mliName = null;
			String place = null;
			java.util.Date claimSubmittedDate = null;
			java.util.Date subsidyDt = null;
			double subsidyAmt = 0.0;
			String microFlag = null;

			String dealingOfficer = null;
			String wilfulDefaulter = null;
			String isFraudFlag = null;
			String isEnqConcFlag = null;
			String isStaffInvolved = null;
			String reasonForRecall = null;
			String reasonForSuitFiling = null;
			Date assetPossesionDt = null;
			String unApprRecptsFlag = null;
			String confRecFlag = null;
			String subsidyFlag = null;
			String subsidyRcvdFlag = null;
			String subsidyAdjustedFlag = null;
			String mliComment = null;
			String finAsst = null;
			String creditSupportFlag = null;
			String otherFacility = null;
			String watchListFlag = null;
			String mliRemarks = null;
			String returnRemarks = null;
			java.util.Date claimcheckerDate = null;
	        java.util.Date claimlastupdatedDate = null;
			
			while (rs.next()) {
				participatingBank = (String) rs.getString(1);
				recallNoticeDt = (java.util.Date) rs.getDate(2);
				wcReleaseDt = (java.util.Date) rs.getDate(4);
				officialName = (String) rs.getString(5);
				officialDesignation = (String) rs.getString(6);
				mliName = (String) rs.getString(7);
				place = (String) rs.getString(8);
				claimSubmittedDate = (java.util.Date) rs.getDate(9);
				subsidyDt = (java.util.Date) rs.getDate(10);
				subsidyAmt = (double) rs.getDouble(11);
				microFlag = (String) rs.getString(12);

				dealingOfficer = (String) rs.getString(13);
				wilfulDefaulter = (String) rs.getString(14);
				isFraudFlag = (String) rs.getString(15);
				isEnqConcFlag = (String) rs.getString(16);
				isStaffInvolved = (String) rs.getString(17);
				reasonForRecall = (String) rs.getString(18);
				reasonForSuitFiling = (String) rs.getString(19);
				assetPossesionDt = (java.util.Date) rs.getDate(20);
				unApprRecptsFlag = (String) rs.getString(21);
				confRecFlag = (String) rs.getString(22);
				subsidyFlag = (String) rs.getString(23);
				subsidyRcvdFlag = (String) rs.getString(24);
				subsidyAdjustedFlag = (String) rs.getString(25);
				mliComment = (String) rs.getString(26);

				finAsst = (String) rs.getString(27);
				creditSupportFlag = (String) rs.getString(28);
				otherFacility = (String) rs.getString(29);
				watchListFlag = (String) rs.getString(30);
				mliRemarks = (String) rs.getString(31);
				returnRemarks = (String) rs.getString(32);
			}
			rs.close();
			rs = null;

			// query = null;
			// rs = null;
			// prepStatement = null;

			claimapplication.setMemberDetails(memberdetails);
			claimapplication.setBorrowerDetails(borrowerdetails);
			claimapplication
					.setDateOnWhichAccountClassifiedNPA(npaclassifieddt);

			// claimapplication.setDateOfIssueOfRecallNoticeStr();

			claimapplication.setDateOfReportingNpaToCgtsi(cgtsireportingdt);
			claimapplication.setReasonsForAccountTurningNPA(reasonfornpa);
			if (wilfulDefaulter != null || wilfulDefaulter != "") {
				claimapplication
						.setWhetherBorrowerIsWilfulDefaulter(wilfulDefaulter);
			} else {
				claimapplication
						.setWhetherBorrowerIsWilfulDefaulter(whetherBidIsWillfulDefaulter);
			}
			legalproceedingdetail
					.setDateOfConclusionOfRecoveryProceedings(recConclusionDt);
			claimapplication.setLegalProceedingsDetails(legalproceedingdetail);
			claimapplication
					.setWhetherAccntWrittenOffFromBooksOfMLI(whetherNPAWrittenOff);
			claimapplication.setDtOnWhichAccntWrittenOff(npaWrittenOffDt);
			claimapplication.setTermCapitalDtls(termloandetails);
			claimapplication.setWorkingCapitalDtls(workingCapitalDtls);
			claimapplication.setSecurityAndPersonalGuaranteeDtls(sapgdtls);
			claimapplication.setRecoveryDetails(recoveryDtls);
			claimapplication.setClaimSummaryDtls(clmSummaryDtls);
			claimapplication.setParticipatingBank(participatingBank);
			claimapplication.setDateOfIssueOfRecallNotice(recallNoticeDt);
			claimapplication.setDateOfReleaseOfWC(wcReleaseDt);
			claimapplication.setNameOfOfficial(officialName);
			claimapplication.setDesignationOfOfficial(officialDesignation);
			claimapplication.setPlace(place);
			claimapplication.setClaimSubmittedDate(claimSubmittedDate);
			claimapplication.setSubsidyDate(subsidyDt);
			claimapplication.setSubsidyAmt(subsidyAmt);
			claimapplication.setMicroCategory(microFlag);

			claimapplication.setDealingOfficerName(dealingOfficer);
			claimapplication.setFraudFlag(isFraudFlag);
			claimapplication.setEnquiryFlag(isEnqConcFlag);
			claimapplication.setMliInvolvementFlag(isStaffInvolved);
			claimapplication.setReasonForRecall(reasonForRecall);
			claimapplication.setReasonForFilingSuit(reasonForSuitFiling);
			claimapplication.setAssetPossessionDt(assetPossesionDt);
			claimapplication.setInclusionOfReceipt(unApprRecptsFlag);
			claimapplication.setConfirmRecoveryFlag(confRecFlag);
			claimapplication.setSubsidyFlag(subsidyFlag);
			claimapplication.setIsSubsidyRcvdAfterNpa(subsidyRcvdFlag);
			claimapplication.setIsSubsidyAdjustedOnDues(subsidyAdjustedFlag);
			claimapplication.setMliCommentOnFinPosition(mliComment);
			claimapplication.setDetailsOfFinAssistance(finAsst);
			claimapplication.setCreditSupport(creditSupportFlag);
			claimapplication.setBankFacilityDetail(otherFacility);
			claimapplication.setPlaceUnderWatchList(watchListFlag);
			claimapplication.setRemarksOnNpa(mliRemarks);
			claimapplication.setReturnRemarks(returnRemarks);
			claimapplication
					.setWorkingCapitalDtlsVector(workingCapitalDtlsVector);
			
			
			
			String query1="select GREATEST(trunc(CLM_CREATED_MODIFIED_DT), nvl(CLM_DATE,'01-jan-2000'), CLM_DATE,CLM_DECL_RECVD_DT,nvl(CLM_CHECKER_DONE_DT,'01-jan-2000')) dt from claim_detail_temp where clm_ref_no=? ";
			System.out.println("query1==="+query1);
			prepStatement = conn.prepareStatement(query1);
			prepStatement.setString(1, claimRefNumber);
			rs = (ResultSet)prepStatement.executeQuery();
			while (rs.next()) {
				 claimlastupdatedDate = (java.util.Date)rs.getDate(1);
				System.out.println("claimlastupdatedDate=="+claimlastupdatedDate);
			}

			claimapplication.setClaimUpdationDate(claimlastupdatedDate);

			String query2="select CLM_CHECKER_DONE_DT from claim_detail_temp where  clm_ref_no =? ";
			System.out.println("query2==="+query2);
			prepStatement = conn.prepareStatement(query2);
			prepStatement.setString(1, claimRefNumber);
			rs = (ResultSet)prepStatement.executeQuery();
			while (rs.next()) {
				claimcheckerDate = (java.util.Date)rs.getDate(1);
				System.out.println("claimcheckerDate=="+claimcheckerDate);
			}

			claimapplication.setClaimCheckerDate(claimcheckerDate);
			

			prepStatement.close();
			prepStatement = null;
			// claimapplication.setDateOfConclusionOfRecoveryProceedings(recConclusionDt);
			String tcRemarks = "";
			if (flag.equals("TC")) {
				CallableStatement stmt = conn
						.prepareCall("{? = call funcgetquerylist(?,?,?)}");
				stmt.registerOutParameter(1, Types.INTEGER);
				stmt.setString(2, claimRefNumber);
				stmt.registerOutParameter(3, Constants.CURSOR);
				stmt.registerOutParameter(4, Types.VARCHAR);
				stmt.execute();
				int status = stmt.getInt(1);
				String error = stmt.getString(4);
				if (status == Constants.FUNCTION_FAILURE) {
					stmt.close();
					throw new DatabaseException(error);
				}
				rs = (ResultSet) stmt.getObject(3);
				while (rs.next()) {
					tcRemarks = tcRemarks + rs.getString(1) + "#";
				}
				claimapplication.setReturnRemarks(tcRemarks);
				rs.close();
				rs = null;
				stmt.close();
				stmt = null;
			}
		} catch (Exception sqlexception) {
			sqlexception.printStackTrace();
			throw new DatabaseException(sqlexception.getMessage());
		} finally {
			DBConnection.freeConnection(conn);
		}
		// return reportDao.displayClmRefNumberDtl(claimRefNumber);
		return claimapplication;
	}

	public ArrayList getClaimFiles(String claimReferenceNumber,
			HttpServletRequest request) {
		/* get fields from claim_files_new_temp */
		/* get fields from claim_tc_files_temp and claim_wc_files_temp */

		ArrayList files = new ArrayList();

		/* run a loop to set files */
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			String clmsql = " SELECT NPAREPORT_NAME,NPAREPORT_FILE,DILIGENCEREPORT_NAME,DILIGENCEREPORT_FILE, "
					+ " DILIGENCEREPORT_NAME1,DILIGENCEREPORT_FILE1,DILIGENCEREPORT_NAME2,DILIGENCEREPORT_FILE2, "
					+ " POSTINSPECTIONREPORT_NAME,POSTINSPECTIONREPORT_FILE,POSTINSPECTIONREPORT_NAME1, "
					+ " POSTINSPECTIONREPORT_FILE1,POSTINSPECTIONREPORT_NAME2,POSTINSPECTIONREPORT_FILE2, "
					+ " POSTNPAREPORT_NAME,POSTNPAREPORT_FILE,POSTNPAREPORT_NAME1,POSTNPAREPORT_FILE1, "
					+ " POSTNPAREPORT_NAME2,POSTNPAREPORT_FILE2,INSURANCE_FLAG,INSURANCE_REASON, "
					+ " SUITFILE_NAME,SUITFILE_FILE,FINALVERDICTFILE_NAME,FINALVERDICTFILE_FILE, "
					+ " IDPROOFFILE_NAME,IDPROOFFILE_FILE,IDPROOFFILE_NAME1,IDPROOFFILE_FILE1, "
					+ " IDPROOFFILE_NAME2,IDPROOFFILE_FILE2,OTHERFILE_NAME,OTHERFILE_FILE,OTHERFILE_NAME1, "
					+ " OTHERFILE_FILE1,OTHERFILE_NAME2,OTHERFILE_FILE2,STAFFREPORT_NAME,STAFFREPORT_FILE, "
					+ " BANKRATE_TYPE,SECURITYREMARKS,RECOVERYEFFORTSTAKEN,RATING,BRANCHADDRESS,INVESTMENTGRADE, "
					+ " PLR,RATE,INTERNAL_RATING_FILE_NAME,INTERNAL_RATING_FILE "
					+ " FROM CLAIM_FILES_NEW_TEMP WHERE CLM_REF_NO=?";

			if (rs.next()) {
				String fileName = (String) rs.getString(1);
				Blob blob = (Blob) rs.getBlob(2);
				String filePath = getFilePath(blob, fileName, request);

			}

			String clmtcsql = " SELECT CGPAN,STATEMENT_NAME,STATEMENT_FILE,STATEMENT_NAME1,STATEMENT_FILE1,STATEMENT_NAME2,STATEMENT_FILE2, "
					+ " ISSAMEAPPRFILE,APPRAISALREPORT_NAME,APPRAISALREPORT_FILE,APPRAISALREPORT_NAME1,APPRAISALREPORT_FILE1, "
					+ " APPRAISALREPORT_NAME2,APPRAISALREPORT_FILE2,ISSAMESANCFILE,SANCTIONLETTER_NAME,SANCTIONLETTER_FILE, "
					+ " SANCTIONLETTER_NAME1,SANCTIONLETTER_FILE1,SANCTIONLETTER_NAME2,SANCTIONLETTER_FILE2,ISSAMECOMPFILE, "
					+ " COMPLIANCEREPORT_NAME,COMPLIANCEREPORT_FILE,COMPLIANCEREPORT_NAME1,COMPLIANCEREPORT_FILE1, "
					+ " COMPLIANCEREPORT_NAME2,COMPLIANCEREPORT_FILE2,ISSAMEPREINSPECFILE,PREINSPECTIONREPORT_NAME, "
					+ " PREINSPECTIONREPORT_FILE,PREINSPECTIONREPORT_NAME1,PREINSPECTIONREPORT_FILE1,PREINSPECTIONREPORT_NAME2, "
					+ " PREINSPECTIONREPORT_FILE2,ISSAMEINSURANCEFILE,INSURANCECOPY_NAME,INSURANCECOPY_FILE,INSURANCECOPY_NAME1, "
					+ " INSURANCECOPY_FILE1,INSURANCECOPY_NAME2,INSURANCECOPY_FILE2,PRINCIPALREPAYBEFORENPA_AMT, "
					+ " INTERESTREPAYBEFORENPA_AMT,PRINCIPALRECOAFTERNPA_AMT,INTERESTRECOAFTERNPA_AMT,INTERESTRATE "
					+ " FROM CLAIM_TC_FILES_NEW_TEMP WHERE CLM_REF_NO=?";

			String clmwcsql = " SELECT CGPAN,STATEMENT_NAME,STATEMENT_FILE,STATEMENT_NAME1,STATEMENT_FILE1,STATEMENT_NAME2,STATEMENT_FILE2, "
					+ " ISSAMEAPPRFILE,APPRAISALREPORT_NAME,APPRAISALREPORT_FILE,APPRAISALREPORT_NAME1,APPRAISALREPORT_FILE1, "
					+ " APPRAISALREPORT_NAME2,APPRAISALREPORT_FILE2,ISSAMESANCFILE,SANCTIONLETTER_NAME,SANCTIONLETTER_FILE, "
					+ " SANCTIONLETTER_NAME1,SANCTIONLETTER_FILE1,SANCTIONLETTER_NAME2,SANCTIONLETTER_FILE2,ISSAMECOMPFILE, "
					+ " COMPLIANCEREPORT_NAME,COMPLIANCEREPORT_FILE,COMPLIANCEREPORT_NAME1,COMPLIANCEREPORT_FILE1, "
					+ " COMPLIANCEREPORT_NAME2,COMPLIANCEREPORT_FILE2,ISSAMEPREINSPECFILE,PREINSPECTIONREPORT_NAME, "
					+ " PREINSPECTIONREPORT_FILE,PREINSPECTIONREPORT_NAME1,PREINSPECTIONREPORT_FILE1,PREINSPECTIONREPORT_NAME2, "
					+ " PREINSPECTIONREPORT_FILE2,ISSAMEINSURANCEFILE,INSURANCECOPY_NAME,INSURANCECOPY_FILE,INSURANCECOPY_NAME1, "
					+ " INSURANCECOPY_FILE1,INSURANCECOPY_NAME2,INSURANCECOPY_FILE2, "
					+ " PRINCIPALRECOAFTERNPA_AMT,INTERESTRECOAFTERNPA_AMT,INTERESTRATE "
					+ " FROM CLAIM_WC_FILES_NEW_TEMP WHERE CLM_REF_NO=?";

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return null;
	}

	public String getFilePath(Blob blob, String fileName,
			HttpServletRequest request) {
		Map attachments = new HashMap();
		byte[] bytesArray = null;
		String formattedToOSPath = null;
		try {

			BufferedInputStream inputStream = null;
			if (blob != null) {
				inputStream = new BufferedInputStream(blob.getBinaryStream());

				// gets the bytes array from the input stream
				bytesArray = readBytes(inputStream);
			}

			// If any file is attached, Add it to the Map
			if (bytesArray != null && bytesArray.length != 0) {
				UploadFileProperties uploadFile = new UploadFileProperties();
				uploadFile.setFileSize(bytesArray);
				uploadFile.setFileName(fileName);
				attachments.put("recallNotice", uploadFile);
			}
			if (inputStream != null) {
				inputStream.close();
			}

			bytesArray = null;
			blob = null;

			formattedToOSPath = request.getContextPath() + File.separator
					+ Constants.FILE_DOWNLOAD_DIRECTORY + File.separator
					+ fileName;

			String realPath = request.getSession(false).getServletContext()
					.getRealPath("");

			String contextPath = PropertyLoader.changeToOSpath(realPath);

			String filePath = contextPath + File.separator
					+ Constants.FILE_DOWNLOAD_DIRECTORY + File.separator
					+ fileName;

			FileOutputStream fileOutputStream = new FileOutputStream(filePath);

			fileOutputStream.write(bytesArray);
			fileOutputStream.flush();
			fileOutputStream.close();

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

		}
		 catch(IOException e)
	        {
	            e.printStackTrace();
	        }catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return formattedToOSPath;
	}

	public ArrayList getSearchHistory(String itpan) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getSearchHistory", "Entered");

		PreparedStatement pStmt = null;
		ArrayList aList = new ArrayList();
		ResultSet rs = null;
		Connection connection = DBConnection.getConnection();
		try {

			// String query =
			// "SELECT  m.MEM_BANK_NAME as memBankName,s.SSI_UNIT_NAME,a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID  as mliId,a.cgpan, NVL (a.APP_REAPPROVE_AMOUNT, a.APP_APPROVED_AMOUNT) guramt, a.app_status,nvl( nvl(( select to_char(NPA_EFFECTIVE_DT,'dd-mon-yyyy')  from npa_detail_temp t where t.bid =s.bid  )  , ( select to_char(tt.NPA_EFFECTIVE_DT ) from npa_detail tt where tt.bid =s.bid  )), 'Standard') as npa_date FROM ssi_detail s,PROMOTER_DETAIL p,application_detail a,member_info m WHERE a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER AND s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER AND a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID = m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID AND (s.SSI_CONSTITUTION) = 'proprietary' AND s.SSI_IT_PAN = '"+itpan+"' OR p.PMR_CHIEF_IT_PAN = '"+itpan+"' and (s.SSI_CONSTITUTION <>'proprietary' and  s.SSI_IT_PAN = '"+itpan+"')";

			String query = " SELECT m.MEM_BANK_NAME AS memBankName,"
					+ " s.SSI_UNIT_NAME,"
					+ " s.SSI_CONSTITUTION,"
					+ " a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID AS mliId,"
					+ " a.cgpan,"
					+ " NVL (a.APP_REAPPROVE_AMOUNT, a.APP_APPROVED_AMOUNT) guramt,"
					+ " a.app_status,"
					+ " NVL (NVL ( (SELECT TO_CHAR (NPA_EFFECTIVE_DT, 'dd-mon-yyyy')"
					+ " FROM npa_detail_temp t"
					+ " WHERE t.bid = s.bid),"
					+ " (SELECT TO_CHAR (tt.NPA_EFFECTIVE_DT)"
					+ " FROM npa_detail tt"
					+ " WHERE tt.bid = s.bid)),"
					+ " 'Standard')"
					+ " AS npa_date"
					+ " FROM ssi_detail s,"
					+ " PROMOTER_DETAIL p,"
					+ " application_detail a,"
					+ " member_info m"
					+ " WHERE        a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER"
					+ " AND s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER"
					+ " AND a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID ="
					+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID"
					+ " AND A.APP_STATUS NOT IN ('RE')"
					+ " AND s.SSI_IT_PAN = '" + itpan + "'"
					+ " OR     (    p.PMR_CHIEF_IT_PAN = '" + itpan + "'"
					+ " AND a.SSI_REFERENCE_NUMBER = s.SSI_REFERENCE_NUMBER"
					+ " AND s.SSI_REFERENCE_NUMBER = p.SSI_REFERENCE_NUMBER"
					+ " AND a.MEM_BNK_ID || a.MEM_ZNE_ID || a.MEM_BRN_ID ="
					+ " m.MEM_BNK_ID || m.MEM_ZNE_ID || m.MEM_BRN_ID"
					+ " AND A.APP_STATUS NOT IN ('RE'))";

			pStmt = connection.prepareStatement(query);
			// System.out.println("Query:"+query);
			// pStmt.setString(1, itpan);
			// System.out.println("ITPAN:"+itpan);
			rs = pStmt.executeQuery(query);
			// System.out.println("Query:"+query);
			while (rs.next()) {

				Application appReport = new Application();
				appReport.setMemBankName(rs.getString(1));
				appReport.setSsiUnitName(rs.getString(2));
				appReport.setSsiConstitution(rs.getString(3));
				appReport.setMliId(rs.getString(4));
				appReport.setCgpan(rs.getString(5));
				appReport.setGurAmt(rs.getString(6));
				appReport.setAppStatus(rs.getString(7));
				appReport.setNpaDate(rs.getString(8));
				aList.add(appReport);
			}
			// System.out.println("search");
			rs.close();
			pStmt.close();
			connection.close();

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "getSearchHistory", "Exited");
		return aList;
	}

	public ArrayList NPAPercentReportDetails(java.sql.Date startDate,
			java.sql.Date endDate) throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "npaPercentReportInput", "Entered");

		PreparedStatement pstmt = null;
		ArrayList npaPercentList = new ArrayList();
		ResultSet danRaisedResult;
		// System.out.println("Calling connection object:");
		Connection connection = DBConnection.getConnection();
		// System.out.println("startDate:"+startDate+" endDate:"+endDate);

		if (startDate != null) {
			try {

				String query = " SELECT bnk,SUM (nos) GuarNos,TO_CHAR (SUM (amt), '99999999999999.99') GuarAmt,"
						+ " SUM (npanos) NPAMO,"
						+ " DECODE (TO_CHAR (SUM (npaamt), '9999999999.99'),.00, 0,"
						+ " TO_CHAR (SUM (npaamt), '9999999999.99')) NPAAmt,"
						+ " DECODE (TO_CHAR (SUM (npanos) / SUM (nos) * 100, '9999999999.99'),.00, 0,"
						+ " TO_CHAR (SUM (npanos) / SUM (nos) * 100, '9999999999.99'))npaprcnt,"
						+ " DECODE (TO_CHAR (SUM (npaamt) / SUM (amt) * 100, '9999999999.99'),.00, 0,"
						+ " TO_CHAR (SUM (npaamt) / SUM (amt) * 100, '9999999999.99'))prcntamt "
						+ " FROM (  SELECT mem_bank_name bnk,COUNT (cgpan) nos,SUM ( "
						+ " DECODE (NVL (app_reapprove_amount, 0),0, app_approved_amount,app_reapprove_amount))/ 100000 amt,0 npanos,0 npaamt "
						+ " FROM application_detail a, ssi_detail s, member_info m "
						+ " WHERE  a.ssi_reference_number = s.ssi_reference_number "
						+ " AND a.mem_bnk_id || a.mem_zne_id || a.mem_brn_id = m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id "
						+ " AND TRUNC (APP_GUAR_START_DATE_TIME) BETWEEN ? AND ? "
						+ " AND app_status NOT IN ('RE')"
						+ " GROUP BY mem_bank_name UNION ALL "
						+ " SELECT mem_bank_name bnk,0 nos,0 amt,COUNT (cgpan) npanos, "
						+ " SUM (DECODE (NVL (app_reapprove_amount, 0),0, app_approved_amount,app_reapprove_amount))/ 100000 npaamt"
						+ " FROM application_detail a, ssi_detail s, member_info m "
						+ " WHERE  a.ssi_reference_number = s.ssi_reference_number "
						+ " AND a.mem_bnk_id || a.mem_zne_id || a.mem_brn_id = m.mem_bnk_id || m.mem_zne_id || m.mem_brn_id "
						+ " AND TRUNC (APP_GUAR_START_DATE_TIME) BETWEEN ? AND ? "
						+ " AND app_status NOT IN ('RE')"
						+ "  AND bid IN (SELECT bid FROM npa_detail_Temp "
						+ "  UNION ALL "
						+ "  SELECT bid FROM npa_detail)"
						+ " GROUP BY mem_bank_name, a.mem_bnk_id) "
						+ " GROUP BY bnk HAVING (SUM (npaamt) / SUM (amt) * 100) > 10 ORDER BY 1";

				// System.out.println("Query printed:"+query);
				pstmt = connection.prepareStatement(query);

				// str1=connection.createStatement();
				pstmt.setDate(1, startDate);
				pstmt.setDate(2, endDate);
				pstmt.setDate(3, startDate);
				pstmt.setDate(4, endDate);
				// System.out.println("111111....");
				danRaisedResult = pstmt.executeQuery();
				// System.out.println("22222222......");
				// System.out.println("Value"+danRaisedResult.getString(1));
				// GeneralReport generalReport = new GeneralReport();

				GeneralReport generalReport = new GeneralReport();
				while (danRaisedResult.next()) {

					// System.out.println("General report called:...");
					generalReport.setBankName(danRaisedResult.getString(1));
					generalReport.setGuarNo(danRaisedResult.getInt(2));
					generalReport.setGuarAmt(danRaisedResult.getDouble(3));
					generalReport.setNpaNo(danRaisedResult.getInt(4));
					generalReport.setNpaAmt(danRaisedResult.getDouble(5));
					generalReport.setNpaPercent(danRaisedResult.getDouble(6));
					generalReport.setPercentAmt(danRaisedResult.getDouble(7));

					npaPercentList.add(generalReport);
					// System.out.println("Arraylist added values....");
				}

				danRaisedResult.close();
				danRaisedResult = null;
				pstmt.close();
				pstmt = null;

			} catch (Exception ex) {
				Log.logException(ex);
				throw new DatabaseException(ex.getMessage());
			} finally {
				DBConnection.freeConnection(connection);
			}
		}

		Log.log(Log.INFO, "ReportDAO", "npaPercentReportInput", "Exited");

		return npaPercentList;
	}

	public ArrayList getCgpanReductionHistoryReportDetails(String cgpan)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getCgpanReductionHistoryReportDetails",
				"Entered");

		PreparedStatement pStmt = null;
		PreparedStatement pStmt1 = null;
		ArrayList aList = new ArrayList();
		ResultSet rsSet = null;
		ResultSet res1 = null;
		ResultSet res2 = null;
		ResultSet res3 = null;
		ResultSet res4 = null;

		int cnt = 0;
		Date Rdate;
		Date Edate;

		Connection connection = DBConnection.getConnection();
		try {

			// String
			// Qry="select trunc(CHECKER_RED_DT) from REDUCTION_WORKING_STAGING WHERE CGPAN='"+cgpan+"' and MAKER_CHEKER_FLAG ='CA' ";
			// pStmt = connection.prepareStatement(Qry);
			// res1= rsSet = pStmt.executeQuery(Qry);
			// if(res1!=null){
			// while(res1.next())
			// {
			// Rdate=res1.getDate(1);
			//
			//
			// String
			// Qry1="SELECT trunc(w.WCE_ENHANCEMENT_DT) FROM WORKING_CAPITAL_ENHANCEMENT w,application_detail a WHERE w.app_ref_no = a.app_ref_no"
			// + " AND a.cgpan = '"+cgpan+"'";
			// pStmt = connection.prepareStatement(Qry1);
			// res2=pStmt.executeQuery(Qry1);
			// if(res2!=null){
			// while(res2.next())
			// {
			// Edate=res2.getDate(1);
			//
			// if(Rdate.before(Edate))
			// {
			// //DATE ReductionDate=TO_DATE("'"+Rdate+"'","'YYYY-MM-DD'");
			// DateTimeFormatter formatter = ((Object)
			// DateTimeFormat).forPattern( "YYYY-MM-DD" );
			// DATE ReductionDate=formatter.
			// SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			// java.util.Date d;
			//
			// dateFormat.applyPattern("yyyy-MM-dd");
			// String ReductionDate = dateFormat.format(Rdate);
			// String
			// Qry3="select * from REDUCTION_WORKING_STAGING where  MAKER_CHEKER_FLAG ='CA' and cgpan ='"+cgpan+"' and trunc(CHECKER_RED_DT)=TO_DATE('"+ReductionDate+"','YYYY-MM-DD')";
			// ApplicationReport appReport = new ApplicationReport();
			String new_fb_amt = "", new_nfb_amt = "", appramt = "";
			String Qry3 = "SELECT "
					+ " WCP_FB_LIMIT_SANCTIONED as s_amt,"
					+ " OLD_WCP_FB_LIMIT_SANCTIONED as old_amt,"
					+ " WCP_NFB_LIMIT_SANCTIONED as new_amt,"
					+ " OLD_WCP_NFB_LIMIT_SANCTIONED as old_lmt,"
					+ " OLD_GURENTEE_FEE as old_fee,"
					+ " MAKER_REMARKS as m_rmk,"
					+ " CHECKER_RED_DT as chk_dt,'Reduction' as  Data_Type"
					+ " FROM REDUCTION_WORKING_STAGING"
					+ " WHERE MAKER_CHEKER_FLAG = 'CA' AND cgpan = '"
					+ cgpan
					+ "' "
					+ " UNION ALL"
					+ " SELECT w.WCE_FB_ENHANCED_AMOUNT as s_amt,"
					+ " 0 as old_amt,"
					+ " w.WCE_NFB_ENHANCED_AMOUNT as new_amt,"
					+ " 0 as old_lmt,"
					+ " 0 as old_fee,"
					+ " '' as m_rmk,"
					+ " w.WCE_ENHANCEMENT_DT chk_dt,'Enhancement' as Data_type"
					+ " FROM WORKING_CAPITAL_ENHANCEMENT w, application_detail a"
					+ " WHERE w.app_ref_no = a.app_ref_no AND a.cgpan = '"
					+ cgpan + "' order by chk_dt asc";
			// String
			// Qry3="select * from REDUCTION_WORKING_STAGING where  MAKER_CHEKER_FLAG ='CA' and cgpan ='"+cgpan+"' order by 0 asc";
			pStmt1 = connection.prepareStatement(Qry3);
			res3 = pStmt1.executeQuery(Qry3);
			while (res3.next()) {

				if (res3.isFirst()) {
					ApplicationReport appReport = new ApplicationReport();

					int guramt = res3.getInt("s_amt") + res3.getInt("new_amt");

					appReport.setREDUCTION_FB_SANCTIONED_AMOUNT(res3
							.getString("s_amt"));
					appReport.setTypeStatus(res3.getString("Data_Type"));
					String type = appReport.getTypeStatus();
					appReport.setGurAmt(String.valueOf(guramt));
					appReport.setREDUCTION_NFB_SANCTIONED_AMOUNT(res3
							.getString("new_amt"));
					if (type.equals("Reduction")) {
						appReport.setOLD_FB_SANCTIONED_AMOUNT(res3
								.getString("old_amt"));
						appReport.setOLD_NFB_SANCTIONED_AMOUNT(res3
								.getString("old_lmt"));
					} else {
						appReport.setOLD_FB_SANCTIONED_AMOUNT("");
						appReport.setOLD_NFB_SANCTIONED_AMOUNT("");
					}
					appReport.setREDUCTION_DATE(res3.getString("chk_dt"));
					appReport.setRemarks(res3.getString("m_rmk"));
					int fb_amt = res3.getInt("s_amt");
					int nfb_amt = res3.getInt("new_amt");
					if (type.equals("Reduction")) {
						appReport.setAppApprovedAmount(res3
								.getString("old_fee"));
					} else {
						int appamt = fb_amt + nfb_amt;
						appReport.setAppApprovedAmount(String.valueOf(appamt));
						appramt = appReport.getAppApprovedAmount();
					}
					// appReport.setAppApprovedAmount(res3.getString("old_fee"));
					new_fb_amt = appReport.getREDUCTION_FB_SANCTIONED_AMOUNT();
					new_nfb_amt = appReport
							.getREDUCTION_NFB_SANCTIONED_AMOUNT();
					aList.add(appReport);
				} else {
					ApplicationReport appReport = new ApplicationReport();

					int guramt = res3.getInt("s_amt") + res3.getInt("new_amt");

					appReport.setREDUCTION_FB_SANCTIONED_AMOUNT(res3
							.getString("s_amt"));

					appReport.setTypeStatus(res3.getString("Data_Type"));
					String type = appReport.getTypeStatus();
					appReport.setGurAmt(String.valueOf(guramt));
					appReport.setREDUCTION_NFB_SANCTIONED_AMOUNT(res3
							.getString("new_amt"));
					if (type.equals("Reduction")) {
						appReport.setOLD_FB_SANCTIONED_AMOUNT(res3
								.getString("old_amt"));
						appReport.setOLD_NFB_SANCTIONED_AMOUNT(res3
								.getString("old_lmt"));
					} else {
						appReport.setOLD_FB_SANCTIONED_AMOUNT(new_fb_amt);
						appReport.setOLD_NFB_SANCTIONED_AMOUNT(new_nfb_amt);
					}
					new_fb_amt = appReport.getREDUCTION_FB_SANCTIONED_AMOUNT();
					new_nfb_amt = appReport
							.getREDUCTION_NFB_SANCTIONED_AMOUNT();
					appReport.setREDUCTION_DATE(res3.getString("chk_dt"));
					appReport.setRemarks(res3.getString("m_rmk"));
					int fb_amt = res3.getInt("s_amt");
					int nfb_amt = res3.getInt("new_amt");

					if (type.equals("Reduction")) {

						appReport.setAppApprovedAmount(res3
								.getString("old_fee"));
					} else {
						int appamt = fb_amt + nfb_amt;
						appReport.setAppApprovedAmount(String.valueOf(appamt));
					}

					aList.add(appReport);

				}
				//
			}
			// String
			// Qry4="SELECT w.WCE_FB_ENHANCED_AMOUNT,w.WCE_NFB_ENHANCED_AMOUNT,w.WCE_ENHANCEMENT_DT FROM WORKING_CAPITAL_ENHANCEMENT w,application_detail a WHERE w.app_ref_no = a.app_ref_no"
			// +
			// " AND a.cgpan = '"+cgpan+"' order by w.WCE_ENHANCEMENT_DT desc";
			// pStmt = connection.prepareStatement(Qry4);
			// res4=pStmt.executeQuery(Qry4);
			// while(res4.next()){
			// ApplicationReport appReport = new ApplicationReport();
			//
			// int guramt=res4.getInt(1) + res4.getInt(2);
			//
			// appReport.setREDUCTION_FB_SANCTIONED_AMOUNT(res4.getString(1));
			// appReport.setTypeStatus("Enhancement");
			// appReport.setGurAmt(String.valueOf(guramt));
			// appReport.setREDUCTION_NFB_SANCTIONED_AMOUNT(res4.getString(2));
			// //
			// appReport.setOLD_FB_SANCTIONED_AMOUNT(res3.getString("WCP_FB_LIMIT_SANCTIONED"));
			// //
			// appReport.setOLD_NFB_SANCTIONED_AMOUNT(res3.getString("WCP_NFB_LIMIT_SANCTIONED"));
			// appReport.setREDUCTION_DATE(res4.getString(3));
			// // appReport.setRemarks(res3.getString("MAKER_REMARKS"));
			// appReport.setAppApprovedAmount(res4.getString(1));
			// aList.add(appReport);
			//
			// }

			// }
			// else{

			// }
			//
			//
			//
			// }
			// }
			// }
			// }

			// String
			// query1="SELECT WCP_FB_LIMIT_SANCTIONED,WCP_NFB_LIMIT_SANCTIONED,OLD_WCP_FB_LIMIT_SANCTIONED,OLD_WCP_NFB_LIMIT_SANCTIONED, trunc(MAKER_RED_DT),MAKER_REMARKS FROM REDUCTION_WORKING_STAGING WHERE MAKER_CHEKER_FLAG='CA' and CGPAN='"+cgpan+"' ";
			// String
			// query1="select * from REDUCTION_WORKING_STAGING where  MAKER_CHEKER_FLAG ='CA'"
			// +"and cgpan ='"+cgpan+"'"
			// +"and CHECKER_RED_DT in ( select min(CHECKER_RED_DT) from REDUCTION_WORKING_STAGING where MAKER_CHEKER_FLAG ='CA'"
			// +"and cgpan ='"+cgpan+"')";
			//
			// System.out.println("query5"+query1);
			// pStmt = connection.prepareStatement(query1);
			// // pStmt.setString(1, cgpan);
			// rsSet = pStmt.executeQuery(query1);
			//
			// // ApplicationReport appReport1 = new ApplicationReport();
			// while(rsSet.next() )
			// {
			//
			// ApplicationReport appReport = new ApplicationReport();
			//
			// appReport.setREDUCTION_FB_SANCTIONED_AMOUNT(rsSet.getString(1));
			// appReport.setREDUCTION_FB_SANCTIONED_AMOUNT(rsSet.getString(1));
			// appReport.setREDUCTION_NFB_SANCTIONED_AMOUNT(rsSet.getString(2));
			// appReport.setOLD_FB_SANCTIONED_AMOUNT(rsSet.getString(3));
			// appReport.setOLD_NFB_SANCTIONED_AMOUNT(rsSet.getString(4));
			// appReport.setREDUCTION_DATE(rsSet.getString(5));
			// appReport.setRemarks(rsSet.getString(5));
			// // appReport.setAppApprovedAmount
			// aList.add(appReport);

			// }

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "getCgpanReductionHistoryReportDetails",
				"Exited");
		return aList;
	}

	public ApplicationReport getReductionReportForCgpan(String newCgpan)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getReductionReportForCgpan", "Entered");
		ApplicationReport appReport = null;
		ResultSet applicationResult;
		PreparedStatement applicationStmt = null;
		Connection connection = DBConnection.getConnection();

		try {
			String ssirefno = "";
			String Qry = "SELECT MEM_BNK_ID || MEM_ZNE_ID || MEM_BRN_ID ,APP_APPROVED_AMOUNT,CGPAN,APP_STATUS,SSI_REFERENCE_NUMBER FROM APPLICATION_DETAIL WHERE CGPAN='"
					+ newCgpan + "'";
			applicationStmt = connection.prepareStatement(Qry);
			ResultSet Res = applicationStmt.executeQuery(Qry);
			appReport = new ApplicationReport();
			while (Res.next()) {
				// appReport = new ApplicationReport();
				appReport.setMemberId(Res.getString(1));
				appReport.setAppApprovedAmount(Res.getString(2));
				appReport.setCgpan(Res.getString(3));
				appReport.setStatus(Res.getString(4));
				ssirefno = Res.getString(5);

				String Qry1 = "SELECT SSI_UNIT_NAME FROM SSI_DETAIL WHERE SSI_REFERENCE_NUMBER='"
						+ ssirefno + "'";
				applicationStmt = connection.prepareStatement(Qry1);
				ResultSet Res1 = applicationStmt.executeQuery(Qry1);

				while (Res1.next())
					appReport.setUnitName(Res1.getString(1));
			}

			applicationStmt.close();
			Res.close();
		} catch (SQLException exception) {
			Log.logException(exception);

			throw new DatabaseException(exception.getMessage());

		} finally {
			DBConnection.freeConnection(connection);
		}

		Log.log(Log.INFO, "ReportDAO", "getReductionReportForCgpan", "Exited");
		return appReport;

	}

	public ArrayList getCgpanEnhanceHistoryReportDetails(String newCgpan)
			throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "getCgpanEnhanceHistoryReportDetails",
				"Entered");

		PreparedStatement pStmt = null;
		PreparedStatement pStmt1 = null;
		ArrayList aList = new ArrayList();
		ResultSet rsSet = null;
		ResultSet res = null;
		String apprefno = "";
		int cnt = 0;
		Connection connection = DBConnection.getConnection();
		try {

			String query = "select * from WORKING_CAPITAL_DETAIL where CGPAN ='"
					+ newCgpan + "'";
			System.out.println("query5" + query);
			pStmt1 = connection.prepareStatement(query);
			// pStmt.setString(1, cgpan);
			res = pStmt1.executeQuery(query);

			while (res.next()) {
				apprefno = res.getString("APP_REF_NO");
			}

			String query1 = "select WCE_FB_ENHANCED_AMOUNT,WCE_NFB_ENHANCED_AMOUNT,trunc(WCE_ENHANCEMENT_DT) from WORKING_CAPITAL_ENHANCEMENT where APP_REF_NO ='"
					+ apprefno + "' order by WCE_ENHANCEMENT_DT desc";
			System.out.println("query5" + query1);
			pStmt = connection.prepareStatement(query1);
			// pStmt.setString(1, cgpan);
			rsSet = pStmt.executeQuery(query1);

			// ApplicationReport appReport1 = new ApplicationReport();
			while (rsSet.next()) {

				ApplicationReport appReport = new ApplicationReport();

				appReport.setENHANCE_FB_SANCTIONED_AMOUNT(rsSet.getString(1));
				appReport.setENHANCE_NFB_SANCTIONED_AMOUNT(rsSet.getString(2));
				appReport.setENHANCE_DATE(rsSet.getString(3));
				// appReport.setAppApprovedAmount
				aList.add(appReport);

			}
			rsSet.close();
			pStmt.close();

		} catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "getCgpanReductionHistoryReportDetails",
				"Exited");
		return aList;
	}
  // dkr recovery apr 2020
	public ArrayList recoveryAppListMliWise() throws DatabaseException {
    //System.out.println("rep1");
    Log.log(Log.INFO, "ReportDAO", "AppListMliWise", "Entered");
    ArrayList mliArray = new ArrayList();
    Connection connection = DBConnection.getConnection();
    GeneralReport mliList = null;
    String status = "A";

    try {
        //System.out.println("rep2");
        CallableStatement pendingApps = 
            connection.prepareCall("{?=call funcGetAllRecoveryCount(?,?)}");
        pendingApps.registerOutParameter(1, Types.INTEGER);
        pendingApps.registerOutParameter(2, Constants.CURSOR);
        pendingApps.registerOutParameter(3, Types.VARCHAR);
        pendingApps.execute();
        int functionReturnValues = pendingApps.getInt(1);
        if (functionReturnValues == Constants.FUNCTION_FAILURE) {
            //System.out.println("rep3");
            String error = pendingApps.getString(3);
            pendingApps.close();
            pendingApps = null;
            connection.rollback();
            throw new DatabaseException(error);
        } else {
            //System.out.println("rep4");
            ResultSet pendingAppsResults = 
                (ResultSet)pendingApps.getObject(2);
            while (pendingAppsResults.next()) {
                mliList = new GeneralReport();
                mliList.setType(pendingAppsResults.getString(1));
               // System.out.println("Bank Name>>>>>>>>>>>>>>>>>>>>>:" +  pendingAppsResults.getString(1) + " count:" +  pendingAppsResults.getString(2)+" recovery AMt:" +pendingAppsResults.getDouble(3));
                mliList.setProposals(pendingAppsResults.getInt(2));
               // System.out.println("pendingAppsResults "+pendingAppsResults.getString(2));
                mliList.setTotalAmount(pendingAppsResults.getDouble(3));              
                
                mliArray.add(mliList);
            }
            pendingAppsResults.close();
            pendingAppsResults = null;
        }
    }
    // System.out.println(mliArray.size());
    catch (Exception exception) {
        Log.logException(exception);
        throw new DatabaseException(exception.getMessage());
    } finally {
        DBConnection.freeConnection(connection);
    }
    Log.log(Log.INFO, "ReportDAO", "AppListMliWise", "Exited");
    //System.out.println(mliArray.size());
    return mliArray;
}
//DKR Recovery Report NDKR
	
	/*public ArrayList claimRecoveryReport(java.util.Date startDate,
			java.util.Date endDate,String mliId,String indMliId,String bankIdType) throws DatabaseException {
			
			PreparedStatement recoveryDisbStmt = null;
			ResultSet recoveryDisbResult=null;	
			RecoveryReport recvDisReport;
			String queryd ="";
			int rowCount=0;
			String bank_id ="";
			ArrayList claimRecoveryArray = new ArrayList();	
			Connection connection = null;
			if(connection==null){
				 connection = DBConnection.getConnection();
			}
				try {
					//Query Modified by Parmanand on 02092020
					if(( endDate.toString().length()>0) && (startDate.toString().length()>0)  && mliId.length()==2){
						recoveryDisbResult=null; recoveryDisbStmt = null;
						///System.out.println("When both date are not empty=="+ mliId.length());
		 				queryd  = "SELECT P.PAY_ID,(A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) AS MEMID,M.MEM_ZONE_NAME AS ZONE_NAME,S.SSI_UNIT_NAME,A.CGPAN,A.APP_APPROVED_AMOUNT AS GURENT_AMT,(NVL ( (SELECT MAX (CW.CWD_WC_FIRST_INST_PAY_AMT) FROM claim_wc_detail CW " +
		            			    " WHERE A.cgpan = CW.CGPAN),(SELECT MAX (CT.CTD_TC_FIRST_INST_PAY_AMT) FROM claim_tc_detail CT WHERE A.cgpan = CT.CGPAN))) AS FST_INST_AMT, R.RECV_RECEIVED_MLI_DATE, R.PENAL_BNK_INTEREST_RATE, R.TOTAL_PAYMENY_AMT, " +
		            				   "  RM.RMD_DESCRIPTION AS RECOVERY_TYPE,o.VIRTUAL_ACCOUNT_NO AS VIRTUAL_ACCOUNT_NO,P.PAY_INSTRUMENT_DT AS DD_DATE, M.MEM_BANK_NAME FROM RECOVRY_AFTER_BEFORE_FST_CLAIM R, SSI_DETAIL S, MEMBER_INFO M, application_DETAIL A, payment_detail P, " +
		            				    " online_payment_detail@REPUSER o, RECOVERY_MODE_MASTER RM WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND (A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) = (M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID) AND " +
		            				    "  A.CGPAN = R.CGPAN AND R.TYPE_OF_RECOVERY = RM.RMD_ID AND R.TOTAL_PAYMENY_AMT !=0 AND R.PAY_ID = P.PAY_ID AND  TRUNC (R.RECOVERY_CREATED_DATE)  BETWEEN ? AND ?  and r.pay_id = o.pay_id and PAYMENT_STATUS='R' AND DAN_TYPE='RV'";
		            				"  A.CGPAN = R.CGPAN AND R.TYPE_OF_RECOVERY = RM.RMD_ID AND R.TOTAL_PAYMENY_AMT !=0 AND R.PAY_ID = P.PAY_ID AND ((A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) = ? OR TRUNC (R.RECOVERY_CREATED_DATE)  BETWEEN ? AND ? ) and r.pay_id = o.pay_id and PAYMENT_STATUS='I' AND DAN_TYPE='RV'";
						queryd  = "SELECT P.PAY_ID,(A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) AS MEMID,M.MEM_ZONE_NAME AS ZONE_NAME,S.SSI_UNIT_NAME,A.CGPAN,A.APP_APPROVED_AMOUNT AS GURENT_AMT,(NVL ( (SELECT MAX (CW.CWD_WC_FIRST_INST_PAY_AMT) FROM claim_wc_detail CW " +
		        			    " WHERE A.cgpan = CW.CGPAN),(SELECT MAX (CT.CTD_TC_FIRST_INST_PAY_AMT) FROM claim_tc_detail CT WHERE A.cgpan = CT.CGPAN))) AS FST_INST_AMT, R.RECV_RECEIVED_MLI_DATE, R.PENAL_BNK_INTEREST_RATE, ROUND(R.TOTAL_PAYMENY_AMT)as TOTAL_PAYMENY_AMT , " +
		        				   "  RM.RMD_DESCRIPTION AS RECOVERY_TYPE,o.VIRTUAL_ACCOUNT_NO AS VIRTUAL_ACCOUNT_NO,P.PAY_INSTRUMENT_DT AS DD_DATE, M.MEM_BANK_NAME FROM RECOVRY_AFTER_BEFORE_FST_CLAIM R, SSI_DETAIL S, MEMBER_INFO M, application_DETAIL A, payment_detail P, " +
		        				    " online_payment_detail@REPUSER o, RECOVERY_MODE_MASTER RM WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND (A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) = (M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID) AND " +
		        				    "  A.CGPAN = R.CGPAN AND R.TYPE_OF_RECOVERY = RM.RMD_ID AND R.TOTAL_PAYMENY_AMT !=0 AND R.PAY_ID = P.PAY_ID AND  TRUNC (O.PAYMENT_DATE)  BETWEEN ? AND ?  and r.pay_id = o.pay_id and PAYMENT_STATUS='R' AND DAN_TYPE='RV'";
		      
		            	recoveryDisbStmt = connection.prepareStatement(queryd);			       
				        recoveryDisbStmt.setDate(1,new java.sql.Date(startDate.getTime()));
						recoveryDisbStmt.setDate(2,new java.sql.Date(endDate.getTime()));
						recoveryDisbResult = recoveryDisbStmt.executeQuery();	
						System.out.println("------------------queryd----------------------------------1----------"+queryd);
						
					}else if(!indMliId.equals("00000") && bankIdType.equals("BANK_ID_TYPE")){
						//System.out.println("When Pass indMliId=="+indMliId);
						//System.out.println("When Pass bankIdTypey=="+bankIdType);
						recoveryDisbResult=null; recoveryDisbStmt = null;
						 queryd = "SELECT P.PAY_ID,(A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) AS MEMID,M.MEM_ZONE_NAME AS ZONE_NAME,S.SSI_UNIT_NAME,A.CGPAN,A.APP_APPROVED_AMOUNT AS GURENT_AMT,(NVL ( (SELECT MAX (CW.CWD_WC_FIRST_INST_PAY_AMT) FROM claim_wc_detail CW " +
							    " WHERE A.cgpan = CW.CGPAN),(SELECT MAX (CT.CTD_TC_FIRST_INST_PAY_AMT) FROM claim_tc_detail CT WHERE A.cgpan = CT.CGPAN))) AS FST_INST_AMT, R.RECV_RECEIVED_MLI_DATE, R.PENAL_BNK_INTEREST_RATE, ROUND(R.TOTAL_PAYMENY_AMT) as TOTAL_PAYMENY_AMT, " +
								   "  RM.RMD_DESCRIPTION AS RECOVERY_TYPE,o.VIRTUAL_ACCOUNT_NO AS VIRTUAL_ACCOUNT_NO,P.PAY_INSTRUMENT_DT AS DD_DATE, M.MEM_BANK_NAME FROM RECOVRY_AFTER_BEFORE_FST_CLAIM R, SSI_DETAIL S, MEMBER_INFO M, application_DETAIL A, payment_detail P, " +
								    " online_payment_detail@REPUSER o, RECOVERY_MODE_MASTER RM WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND (A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) = (M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID) AND " +
								    "  A.CGPAN = R.CGPAN AND R.TYPE_OF_RECOVERY = RM.RMD_ID AND R.TOTAL_PAYMENY_AMT !=0 AND R.PAY_ID = P.PAY_ID AND A.MEM_BNK_ID || A.MEM_ZNE_ID ||A.MEM_BRN_ID = ?  and r.pay_id = o.pay_id and PAYMENT_STATUS='R' AND DAN_TYPE='RV'";
								"  A.CGPAN = R.CGPAN AND R.TYPE_OF_RECOVERY = RM.RMD_ID AND R.TOTAL_PAYMENY_AMT !=0 AND R.PAY_ID = P.PAY_ID AND ((A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) = ? OR TRUNC (R.RECOVERY_CREATED_DATE)  BETWEEN ? AND ? ) and r.pay_id = o.pay_id and PAYMENT_STATUS='I' AND DAN_TYPE='RV'";
						    recoveryDisbStmt = connection.prepareStatement(queryd);
					        recoveryDisbStmt.setString(1, indMliId.trim());
					        recoveryDisbResult = recoveryDisbStmt.executeQuery();	
					        System.out.println(indMliId+"-----indMliId-------------queryd-----------BANK_ID_TYPE------------------2--------"+queryd);
					        
					}else if(!mliId.equals("00000") && bankIdType.equals("BANK_NAME_TYPE")){
						//System.out.println("When Pass mliId=="+mliId);
						//System.out.println("When Pass Bank name only=="+bankIdType);
						String mem_bnk_id=mliId.substring(0,4);
						recoveryDisbResult=null; recoveryDisbStmt = null;
						 queryd = "SELECT P.PAY_ID,(A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) AS MEMID,M.MEM_ZONE_NAME AS ZONE_NAME,S.SSI_UNIT_NAME,A.CGPAN,A.APP_APPROVED_AMOUNT AS GURENT_AMT,(NVL ( (SELECT MAX (CW.CWD_WC_FIRST_INST_PAY_AMT) FROM claim_wc_detail CW " +
							    " WHERE A.cgpan = CW.CGPAN),(SELECT MAX (CT.CTD_TC_FIRST_INST_PAY_AMT) FROM claim_tc_detail CT WHERE A.cgpan = CT.CGPAN))) AS FST_INST_AMT, R.RECV_RECEIVED_MLI_DATE, R.PENAL_BNK_INTEREST_RATE, ROUND(R.TOTAL_PAYMENY_AMT) as TOTAL_PAYMENY_AMT , " +
								   "  RM.RMD_DESCRIPTION AS RECOVERY_TYPE,o.VIRTUAL_ACCOUNT_NO AS VIRTUAL_ACCOUNT_NO,P.PAY_INSTRUMENT_DT AS DD_DATE, M.MEM_BANK_NAME FROM RECOVRY_AFTER_BEFORE_FST_CLAIM R, SSI_DETAIL S, MEMBER_INFO M, application_DETAIL A, payment_detail P, " +
								    " online_payment_detail@REPUSER o, RECOVERY_MODE_MASTER RM WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND (A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) = (M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID) AND " +
								    "  A.CGPAN = R.CGPAN AND R.TYPE_OF_RECOVERY = RM.RMD_ID AND R.TOTAL_PAYMENY_AMT !=0 AND R.PAY_ID = P.PAY_ID AND A.MEM_BNK_ID = ?  and r.pay_id = o.pay_id and PAYMENT_STATUS='R' AND DAN_TYPE='RV'";
								"  A.CGPAN = R.CGPAN AND R.TYPE_OF_RECOVERY = RM.RMD_ID AND R.TOTAL_PAYMENY_AMT !=0 AND R.PAY_ID = P.PAY_ID AND ((A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) = ? OR TRUNC (R.RECOVERY_CREATED_DATE)  BETWEEN ? AND ? ) and r.pay_id = o.pay_id and PAYMENT_STATUS='I' AND DAN_TYPE='RV'";
								recoveryDisbStmt = connection.prepareStatement(queryd);
					        recoveryDisbStmt.setString(1, mem_bnk_id.trim());
					        recoveryDisbResult = recoveryDisbStmt.executeQuery();	
					        System.out.println(mliId+"--------mliId---------queryd------BANK_NAME_TYPE-------------------------3----------"+queryd);
					}
					  rowCount = recoveryDisbResult.getFetchSize();
					  System.out.println("Total Record....."+rowCount);
					 while(recoveryDisbResult.next()) {
							recvDisReport = new RecoveryReport();
							recvDisReport.setPaymentId(recoveryDisbResult.getString("PAY_ID"));
							recvDisReport.setMliId(recoveryDisbResult.getString("MEMID"));
							recvDisReport.setZoneName(recoveryDisbResult.getString("ZONE_NAME"));
							recvDisReport.setUnitName(recoveryDisbResult.getString("SSI_UNIT_NAME"));
							recvDisReport.setCgpanNumber(recoveryDisbResult.getString("CGPAN"));
							recvDisReport.setGuaranteedAmt(recoveryDisbResult.getDouble("GURENT_AMT"));
							recvDisReport.setFirstInstalAmt(recoveryDisbResult.getDouble("FST_INST_AMT"));
							recvDisReport.setDateRecovRecvMli((java.util.Date)recoveryDisbResult.getDate("RECV_RECEIVED_MLI_DATE"));
							recvDisReport.setPenalIntrestLiv(recoveryDisbResult.getDouble("PENAL_BNK_INTEREST_RATE"));
							recvDisReport.setRecoRecvAmt(recoveryDisbResult.getDouble("TOTAL_PAYMENY_AMT"));
							recvDisReport.setRecoveryType(recoveryDisbResult.getString("RECOVERY_TYPE"));
							recvDisReport.setDdUtrNo(recoveryDisbResult.getString("VIRTUAL_ACCOUNT_NO"));
							recvDisReport.setDdDate((java.util.Date)recoveryDisbResult.getDate("DD_DATE"));
							recvDisReport.setBankName(recoveryDisbResult.getString("MEM_BANK_NAME"));
							claimRecoveryArray.add(recvDisReport);	              					
						}else{
							throw new NoDataException("Invalid input. <br/>Data are not available.");
				    	}
						recoveryDisbResult.close();
						recoveryDisbResult = null;
						recoveryDisbStmt.close();
						recoveryDisbStmt = null;

					} catch (Exception exception) {
						//exception.printStackTrace();
						throw new DatabaseException("Invalid input!.. <br/>Data are not available");
					} finally {
						DBConnection.freeConnection(connection);
					}	
			
		   Log.log(Log.INFO, "ReportDAO", "RecoveryReport", "Exited");
		   return claimRecoveryArray;
		 }*/
	
	//DKR Recovery Report DKR 
	public ArrayList claimRecoveryReport(java.util.Date startDate,
		java.util.Date endDate,String mliId,String indMliId,String bankIdType) throws DatabaseException {
		
		PreparedStatement recoveryDisbStmt = null;
		ResultSet recoveryDisbResult=null;	
		RecoveryReport recvDisReport;
		String queryd ="";
		int rowCount=0;
		String bank_id ="";
		ArrayList claimRecoveryArray = new ArrayList();	
		Connection connection = null;
		if(connection==null){
			 connection = DBConnection.getConnection();
		}
			try {
				//Query Modified by Parmanand on 02092020
				if(( endDate.toString().length()>0) && (startDate.toString().length()>0)  && mliId.length()==2){
					recoveryDisbResult=null; recoveryDisbStmt = null;
					///System.out.println("When both date are not empty=="+ mliId.length());
	 				/*queryd  = "SELECT P.PAY_ID,(A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) AS MEMID,M.MEM_ZONE_NAME AS ZONE_NAME,S.SSI_UNIT_NAME,A.CGPAN,A.APP_APPROVED_AMOUNT AS GURENT_AMT,(NVL ( (SELECT MAX (CW.CWD_WC_FIRST_INST_PAY_AMT) FROM claim_wc_detail CW " +
	            			    " WHERE A.cgpan = CW.CGPAN),(SELECT MAX (CT.CTD_TC_FIRST_INST_PAY_AMT) FROM claim_tc_detail CT WHERE A.cgpan = CT.CGPAN))) AS FST_INST_AMT, R.RECV_RECEIVED_MLI_DATE, R.PENAL_BNK_INTEREST_RATE, R.TOTAL_PAYMENY_AMT, " +
	            				   "  RM.RMD_DESCRIPTION AS RECOVERY_TYPE,o.VIRTUAL_ACCOUNT_NO AS VIRTUAL_ACCOUNT_NO,P.PAY_INSTRUMENT_DT AS DD_DATE, M.MEM_BANK_NAME FROM RECOVRY_AFTER_BEFORE_FST_CLAIM R, SSI_DETAIL S, MEMBER_INFO M, application_DETAIL A, payment_detail P, " +
	            				    " online_payment_detail@REPUSER o, RECOVERY_MODE_MASTER RM WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND (A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) = (M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID) AND " +
	            				    "  A.CGPAN = R.CGPAN AND R.TYPE_OF_RECOVERY = RM.RMD_ID AND R.TOTAL_PAYMENY_AMT !=0 AND R.PAY_ID = P.PAY_ID AND  TRUNC (R.RECOVERY_CREATED_DATE)  BETWEEN ? AND ?  and r.pay_id = o.pay_id and PAYMENT_STATUS='R' AND DAN_TYPE='RV'";*/
	            				/*"  A.CGPAN = R.CGPAN AND R.TYPE_OF_RECOVERY = RM.RMD_ID AND R.TOTAL_PAYMENY_AMT !=0 AND R.PAY_ID = P.PAY_ID AND ((A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) = ? OR TRUNC (R.RECOVERY_CREATED_DATE)  BETWEEN ? AND ? ) and r.pay_id = o.pay_id and PAYMENT_STATUS='I' AND DAN_TYPE='RV'";*/
				
					/*queryd  = "SELECT P.PAY_ID,(A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) AS MEMID,M.MEM_ZONE_NAME AS ZONE_NAME,S.SSI_UNIT_NAME,A.CGPAN,A.APP_APPROVED_AMOUNT AS GURENT_AMT,(NVL ( (SELECT MAX (CW.CWD_WC_FIRST_INST_PAY_AMT) FROM claim_wc_detail CW " +
	        			    " WHERE A.cgpan = CW.CGPAN),(SELECT MAX (CT.CTD_TC_FIRST_INST_PAY_AMT) FROM claim_tc_detail CT WHERE A.cgpan = CT.CGPAN))) AS FST_INST_AMT, R.RECV_RECEIVED_MLI_DATE, R.PENAL_BNK_INTEREST_RATE, ROUND(R.TOTAL_PAYMENY_AMT) AS TOTAL_PAYMENY_AMT, " +
	        				   "  RM.RMD_DESCRIPTION AS RECOVERY_TYPE,o.VIRTUAL_ACCOUNT_NO AS VIRTUAL_ACCOUNT_NO,P.PAY_INSTRUMENT_DT AS DD_DATE, M.MEM_BANK_NAME FROM RECOVRY_AFTER_BEFORE_FST_CLAIM R, SSI_DETAIL S, MEMBER_INFO M, application_DETAIL A, payment_detail P, " +
	        				    " online_payment_detail@REPUSER o, RECOVERY_MODE_MASTER RM WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND (A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) = (M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID) AND " +
	        				    "  A.CGPAN = R.CGPAN AND R.TYPE_OF_RECOVERY = RM.RMD_ID AND R.TOTAL_PAYMENY_AMT !=0 AND R.PAY_ID = P.PAY_ID AND  TRUNC (O.PAYMENT_DATE)  BETWEEN ? AND ?  and r.pay_id = o.pay_id and PAYMENT_STATUS='R' AND DAN_TYPE='RV'";
	              */
					/*queryd  = "SELECT P.PAY_ID,(A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) AS MEMID,M.MEM_ZONE_NAME AS ZONE_NAME,S.SSI_UNIT_NAME,A.CGPAN,A.APP_APPROVED_AMOUNT AS GURENT_AMT,(NVL ( (SELECT MAX (CW.CWD_WC_FIRST_INST_PAY_AMT) FROM claim_wc_detail CW " +
	        			    " WHERE A.cgpan = CW.CGPAN),(SELECT MAX (CT.CTD_TC_FIRST_INST_PAY_AMT) FROM claim_tc_detail CT WHERE A.cgpan = CT.CGPAN))) AS FST_INST_AMT, R.RECV_RECEIVED_MLI_DATE, R.PENAL_BNK_INTEREST_RATE, TRUNC(r.TOTAL_PAYMENY_AMT, 00) AS TOTAL_PAYMENY_AMT, " +
	        				   "  RM.RMD_DESCRIPTION AS RECOVERY_TYPE,o.VIRTUAL_ACCOUNT_NO AS VIRTUAL_ACCOUNT_NO,P.PAY_INSTRUMENT_DT AS DD_DATE, M.MEM_BANK_NAME FROM RECOVRY_AFTER_BEFORE_FST_CLAIM R, SSI_DETAIL S, MEMBER_INFO M, application_DETAIL A, payment_detail P, " +
	        				    " online_payment_detail@REPUSER o, RECOVERY_MODE_MASTER RM WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND (A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) = (M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID) AND " +
	        				    "  A.CGPAN = R.CGPAN AND R.TYPE_OF_RECOVERY = RM.RMD_ID AND R.TOTAL_PAYMENY_AMT !=0 AND R.PAY_ID = P.PAY_ID AND  TRUNC (O.PAYMENT_DATE)  BETWEEN ? AND ?  and r.pay_id = o.pay_id and PAYMENT_STATUS='R' AND DAN_TYPE='RV'"*/;
	        				     
	        					queryd  = "SELECT P.PAY_ID,(A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) AS MEMID,M.MEM_ZONE_NAME AS ZONE_NAME,S.SSI_UNIT_NAME,A.CGPAN,A.APP_APPROVED_AMOUNT AS GURENT_AMT,(NVL ( (SELECT MAX (CW.CWD_WC_FIRST_INST_PAY_AMT) FROM claim_wc_detail CW " +
		        			    " WHERE A.cgpan = CW.CGPAN),(SELECT MAX (CT.CTD_TC_FIRST_INST_PAY_AMT) FROM claim_tc_detail CT WHERE A.cgpan = CT.CGPAN))) AS FST_INST_AMT, R.RECV_RECEIVED_MLI_DATE, R.PENAL_BNK_INTEREST_RATE, TRUNC(r.TOTAL_PAYMENY_AMT, 00) AS TOTAL_PAYMENY_AMT, " +
		        				   "  RM.RMD_DESCRIPTION AS RECOVERY_TYPE,o.VIRTUAL_ACCOUNT_NO AS VIRTUAL_ACCOUNT_NO,O.PAYMENT_CREDITED_DATE AS DD_DATE, M.MEM_BANK_NAME FROM RECOVRY_AFTER_BEFORE_FST_CLAIM R, SSI_DETAIL S, MEMBER_INFO M, application_DETAIL A, payment_detail P, " +
		        				    " online_payment_detail@REPUSER o, RECOVERY_MODE_MASTER RM WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND (A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) = (M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID) AND " +
		        				    "  A.CGPAN = R.CGPAN AND R.TYPE_OF_RECOVERY = RM.RMD_ID AND R.TOTAL_PAYMENY_AMT !=0 AND R.PAY_ID = P.PAY_ID AND  TRUNC (O.PAYMENT_CREDITED_DATE)  BETWEEN ? AND ?  and r.pay_id = o.pay_id and PAYMENT_STATUS='R' AND DAN_TYPE='RV'";
	      
	            	recoveryDisbStmt = connection.prepareStatement(queryd);			       
			        recoveryDisbStmt.setDate(1,new java.sql.Date(startDate.getTime()));
					recoveryDisbStmt.setDate(2,new java.sql.Date(endDate.getTime()));
					recoveryDisbResult = recoveryDisbStmt.executeQuery();	
					System.out.println("------------------queryd----------------------------------1----------"+queryd);
					
				}else if(!indMliId.equals("00000") && bankIdType.equals("BANK_ID_TYPE")){
					//System.out.println("When Pass indMliId=="+indMliId);
					//System.out.println("When Pass bankIdTypey=="+bankIdType);
					recoveryDisbResult=null; recoveryDisbStmt = null;
					 queryd = "SELECT P.PAY_ID,(A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) AS MEMID,M.MEM_ZONE_NAME AS ZONE_NAME,S.SSI_UNIT_NAME,A.CGPAN,A.APP_APPROVED_AMOUNT AS GURENT_AMT,(NVL ( (SELECT MAX (CW.CWD_WC_FIRST_INST_PAY_AMT) FROM claim_wc_detail CW " +
						    " WHERE A.cgpan = CW.CGPAN),(SELECT MAX (CT.CTD_TC_FIRST_INST_PAY_AMT) FROM claim_tc_detail CT WHERE A.cgpan = CT.CGPAN))) AS FST_INST_AMT, R.RECV_RECEIVED_MLI_DATE, R.PENAL_BNK_INTEREST_RATE, TRUNC(r.TOTAL_PAYMENY_AMT, 00) AS TOTAL_PAYMENY_AMT, " +
							   "  RM.RMD_DESCRIPTION AS RECOVERY_TYPE,o.VIRTUAL_ACCOUNT_NO AS VIRTUAL_ACCOUNT_NO,P.PAY_INSTRUMENT_DT AS DD_DATE, M.MEM_BANK_NAME FROM RECOVRY_AFTER_BEFORE_FST_CLAIM R, SSI_DETAIL S, MEMBER_INFO M, application_DETAIL A, payment_detail P, " +
							    " online_payment_detail@REPUSER o, RECOVERY_MODE_MASTER RM WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND (A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) = (M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID) AND " +
							    "  A.CGPAN = R.CGPAN AND R.TYPE_OF_RECOVERY = RM.RMD_ID AND R.TOTAL_PAYMENY_AMT !=0 AND R.PAY_ID = P.PAY_ID AND A.MEM_BNK_ID || A.MEM_ZNE_ID ||A.MEM_BRN_ID = ?  and r.pay_id = o.pay_id and PAYMENT_STATUS='R' AND DAN_TYPE='RV'";
							/*"  A.CGPAN = R.CGPAN AND R.TYPE_OF_RECOVERY = RM.RMD_ID AND R.TOTAL_PAYMENY_AMT !=0 AND R.PAY_ID = P.PAY_ID AND ((A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) = ? OR TRUNC (R.RECOVERY_CREATED_DATE)  BETWEEN ? AND ? ) and r.pay_id = o.pay_id and PAYMENT_STATUS='I' AND DAN_TYPE='RV'";*/
					    recoveryDisbStmt = connection.prepareStatement(queryd);
				        recoveryDisbStmt.setString(1, indMliId.trim());
				        recoveryDisbResult = recoveryDisbStmt.executeQuery();	
				        System.out.println(indMliId+"-----indMliId-------------queryd-----------BANK_ID_TYPE------------------2--------"+queryd);
				        
				}else if(!mliId.equals("00000") && bankIdType.equals("BANK_NAME_TYPE")){
					//System.out.println("When Pass mliId=="+mliId);
					//System.out.println("When Pass Bank name only=="+bankIdType);
					String mem_bnk_id=mliId.substring(0,4);
					recoveryDisbResult=null; recoveryDisbStmt = null;
					 queryd = "SELECT P.PAY_ID,(A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) AS MEMID,M.MEM_ZONE_NAME AS ZONE_NAME,S.SSI_UNIT_NAME,A.CGPAN,A.APP_APPROVED_AMOUNT AS GURENT_AMT,(NVL ( (SELECT MAX (CW.CWD_WC_FIRST_INST_PAY_AMT) FROM claim_wc_detail CW " +
						    " WHERE A.cgpan = CW.CGPAN),(SELECT MAX (CT.CTD_TC_FIRST_INST_PAY_AMT) FROM claim_tc_detail CT WHERE A.cgpan = CT.CGPAN))) AS FST_INST_AMT, R.RECV_RECEIVED_MLI_DATE, R.PENAL_BNK_INTEREST_RATE, TRUNC(r.TOTAL_PAYMENY_AMT, 00) AS TOTAL_PAYMENY_AMT, " +
							   "  RM.RMD_DESCRIPTION AS RECOVERY_TYPE,o.VIRTUAL_ACCOUNT_NO AS VIRTUAL_ACCOUNT_NO,P.PAY_INSTRUMENT_DT AS DD_DATE, M.MEM_BANK_NAME FROM RECOVRY_AFTER_BEFORE_FST_CLAIM R, SSI_DETAIL S, MEMBER_INFO M, application_DETAIL A, payment_detail P, " +
							    " online_payment_detail@REPUSER o, RECOVERY_MODE_MASTER RM WHERE A.SSI_REFERENCE_NUMBER = S.SSI_REFERENCE_NUMBER AND (A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) = (M.MEM_BNK_ID || M.MEM_ZNE_ID || M.MEM_BRN_ID) AND " +
							    "  A.CGPAN = R.CGPAN AND R.TYPE_OF_RECOVERY = RM.RMD_ID AND R.TOTAL_PAYMENY_AMT !=0 AND R.PAY_ID = P.PAY_ID AND A.MEM_BNK_ID = ?  and r.pay_id = o.pay_id and PAYMENT_STATUS='R' AND DAN_TYPE='RV'";
							/*"  A.CGPAN = R.CGPAN AND R.TYPE_OF_RECOVERY = RM.RMD_ID AND R.TOTAL_PAYMENY_AMT !=0 AND R.PAY_ID = P.PAY_ID AND ((A.MEM_BNK_ID || A.MEM_ZNE_ID || A.MEM_BRN_ID) = ? OR TRUNC (R.RECOVERY_CREATED_DATE)  BETWEEN ? AND ? ) and r.pay_id = o.pay_id and PAYMENT_STATUS='I' AND DAN_TYPE='RV'";*/
							recoveryDisbStmt = connection.prepareStatement(queryd);
				        recoveryDisbStmt.setString(1, mem_bnk_id.trim());
				        recoveryDisbResult = recoveryDisbStmt.executeQuery();	
				        System.out.println(mliId+"--------mliId---------queryd------BANK_NAME_TYPE-------------------------3----------"+queryd);
				}
				  rowCount = recoveryDisbResult.getFetchSize();
				  System.out.println("Total Record....."+rowCount);
				 while(recoveryDisbResult.next()) {
						recvDisReport = new RecoveryReport();
						recvDisReport.setPaymentId(recoveryDisbResult.getString("PAY_ID"));
						recvDisReport.setMliId(recoveryDisbResult.getString("MEMID"));
						recvDisReport.setZoneName(recoveryDisbResult.getString("ZONE_NAME"));
						recvDisReport.setUnitName(recoveryDisbResult.getString("SSI_UNIT_NAME"));
						recvDisReport.setCgpanNumber(recoveryDisbResult.getString("CGPAN"));
						recvDisReport.setGuaranteedAmt(recoveryDisbResult.getDouble("GURENT_AMT"));
						recvDisReport.setFirstInstalAmt(recoveryDisbResult.getDouble("FST_INST_AMT"));
						recvDisReport.setDateRecovRecvMli((java.util.Date)recoveryDisbResult.getDate("RECV_RECEIVED_MLI_DATE"));
						recvDisReport.setPenalIntrestLiv(recoveryDisbResult.getDouble("PENAL_BNK_INTEREST_RATE"));
						recvDisReport.setRecoRecvAmt(recoveryDisbResult.getDouble("TOTAL_PAYMENY_AMT"));
						recvDisReport.setRecoveryType(recoveryDisbResult.getString("RECOVERY_TYPE"));
						recvDisReport.setDdUtrNo(recoveryDisbResult.getString("VIRTUAL_ACCOUNT_NO"));
						recvDisReport.setDdDate((java.util.Date)recoveryDisbResult.getDate("DD_DATE"));
						recvDisReport.setBankName(recoveryDisbResult.getString("MEM_BANK_NAME"));
						claimRecoveryArray.add(recvDisReport);	              					
					}/*else{
						throw new NoDataException("Invalid input. <br/>Data are not available.");
			    	}*/
					recoveryDisbResult.close();
					recoveryDisbResult = null;
					recoveryDisbStmt.close();
					recoveryDisbStmt = null;

				} catch (Exception exception) {
					//exception.printStackTrace();
					throw new DatabaseException("Invalid input!.. <br/>Data are not available");
				} finally {
					DBConnection.freeConnection(connection);
				}	
		
	   Log.log(Log.INFO, "ReportDAO", "RecoveryReport", "Exited");
	   return claimRecoveryArray;
	 }


	public ArrayList WcAppListMliWise() throws DatabaseException {
		Log.log(Log.INFO, "ReportDAO", "WcAppListMliWise", "Entered");
		ArrayList mliArray = new ArrayList();
		Connection connection = DBConnection.getConnection();
		GeneralReport mliList = null;
		String status = "A";

		try {
			CallableStatement pendingApps = connection.prepareCall("{?=call WCRENEWAPPROVAL.funcGetAllMliDetCount(?,?)}");
			pendingApps.registerOutParameter(1, Types.INTEGER);
			pendingApps.registerOutParameter(2, Constants.CURSOR);
			pendingApps.registerOutParameter(3, Types.VARCHAR);
			pendingApps.execute();
			int functionReturnValues = pendingApps.getInt(1);
			if (functionReturnValues == Constants.FUNCTION_FAILURE) {
				String error = pendingApps.getString(3);
				pendingApps.close();
				pendingApps = null;
				connection.rollback();
				throw new DatabaseException(error);
			} else {
				ResultSet pendingAppsResults = (ResultSet) pendingApps.getObject(2);
				while (pendingAppsResults.next()) {
					mliList = new GeneralReport();
					mliList.setType(pendingAppsResults.getString(1));
					mliList.setProposals(pendingAppsResults.getInt(2));
					mliArray.add(mliList);
				}
				pendingAppsResults.close();
				pendingAppsResults = null;
			}
		}
		catch (Exception exception) {
			Log.logException(exception);
			throw new DatabaseException(exception.getMessage());
		} finally {
			DBConnection.freeConnection(connection);
		}
		Log.log(Log.INFO, "ReportDAO", "WcAppListMliWise", "Exited");
		return mliArray;
	}
	
	public Vector getWcApprovalDetails(String loggedUsr, String bankName)throws DatabaseException {
	Log.log(Log.INFO, "ReportAction", "getWcApprovalDetails()", "Entered!");
	Vector claimDetails = new Vector();
	CallableStatement callableStmt = null;
	Connection conn = null;
	ResultSet resultset = null;
	RenewalOfWorkingCapitalAfterTenYearsActionForm claimdetail = null;
	String flag = ClaimConstants.FIRST_INSTALLMENT;
	String cgclan = null;
	String bid = null;
	String memberId = null;
	String claimRefNumber = null;
	String cgPan = "";
	String unitName = "";
	String unitPan = "";
	String zoneName = "";
	String bankname = "";
	String guranteeStartDate = "";
	String guranteeExpiryDate = "";
	String existing = "";
	String nonFundBasedExisting = "";
	String proposed = "";
	String nonFundBasedProposed = "";
	String lodgeDate = "";
	String appStatus = "";
	String appType = "";
	
	int status = -1;
	String errorCode = null;
	System.out.println("<<loggedUsr>"+loggedUsr);
	System.out.println("<<bankName>"+bankName);
double asfRefundableForTC = 0.0;
double asfRefundableForWC = 0.0;
String refundFlag = "N";



try {
	conn = DBConnection.getConnection();
	callableStmt = conn.prepareCall("{? = call WCRENEWAPPROVAL.funcGetPendingWcAppForApproval(?,?,?,?,?)}");
	//callableStmt = conn.prepareCall("{? = call WCRENEWAPPROVAL.funcGetPendingWcAppForApproval(?)}");
	
	callableStmt.registerOutParameter(1, Types.INTEGER);
	callableStmt.setString(2, loggedUsr);
	callableStmt.setString(3, bankName);
	callableStmt.registerOutParameter(4, Constants.CURSOR);
	callableStmt.registerOutParameter(5, java.sql.Types.INTEGER);
	callableStmt.registerOutParameter(6, java.sql.Types.VARCHAR);
	callableStmt.executeUpdate();
	status = callableStmt.getInt(5);
	errorCode = callableStmt.getString(6);
	System.out.println("status>"+status+"<errorCode>"+errorCode);
	if (status == Constants.FUNCTION_FAILURE) {Log.log(Log.ERROR, "ReportAction", "getWcApprovalDetails()",
			"WC returns a 1 in retrieving WC renewal Results.Error code is :"+ errorCode);
		callableStmt.close();
		throw new DatabaseException(errorCode);
	} else if (status == Constants.FUNCTION_SUCCESS) {
		// extracting the resultset from the callable statement
		resultset = (ResultSet) callableStmt.getObject(4);

		while (resultset.next()) {
			// Extracting the values from the resultset
			memberId = resultset.getString(1);
			// System.out.println("Member Id:"+memberId);
			claimRefNumber = resultset.getString(2);
			// System.out.println("claimRefNumber:"+claimRefNumber);
			cgPan = resultset.getString(3);
			unitName = resultset.getString(4);
			unitPan = resultset.getString(5);
			bankname = resultset.getString(6);
			zoneName = resultset.getString(7);
			guranteeStartDate = resultset.getString(8);
			guranteeExpiryDate = resultset.getString(9);
			existing = resultset.getString(10);
			nonFundBasedExisting = resultset.getString(11);
			proposed = resultset.getString(12);
			nonFundBasedProposed = resultset.getString(13);
			lodgeDate = resultset.getString(14);
			appStatus = resultset.getString(15);
			appType = resultset.getString(16);
			
				claimdetail = new RenewalOfWorkingCapitalAfterTenYearsActionForm();
				claimdetail.setMemberId(memberId);
				claimdetail.setAppReferNo(claimRefNumber);
				claimdetail.setCgpan(cgPan);
				claimdetail.setUnitName(unitName);
				claimdetail.setUnitPAN(unitPan);
				claimdetail.setBankname(bankname);
				claimdetail.setZonename(zoneName);
				claimdetail.setGuranteeStartDate(guranteeStartDate);
				claimdetail.setGuranteeExpiryDate(guranteeExpiryDate);
				claimdetail.setExisting(existing);
				claimdetail.setNonfundbasedexisting(nonFundBasedExisting);
				claimdetail.setProposed(proposed);
				claimdetail.setNonfundbasedproposed(nonFundBasedProposed);
				claimdetail.setLodgedate(lodgeDate);
				claimdetail.setAppstatus(appStatus);
				claimdetail.setApptype(appType);
				
			if (claimdetail != null) {
				// adding the claimdetail object to the vector
				claimDetails.addElement(claimdetail);
			}
		}
		resultset.close();
		resultset = null;
	}
	// closing the callable statement
	callableStmt.close();
	callableStmt = null;
} catch (SQLException sqlexception) {
	sqlexception.printStackTrace();
	Log.log(Log.ERROR, "ReportAction", "getWcApprovalDetails()",
			"Error retrieving Details for Renewal WC from the database");
	throw new DatabaseException(sqlexception.getMessage());
} finally {
	DBConnection.freeConnection(conn);
}
	Log.log(Log.INFO, "ReportAction", "getWcApprovalDetails()", "Exited!");
	return claimDetails;
}
		 
}

